5x5 intersecting lines, with diagonals in each 3x3 quadrant. One player plays with two tigers, which begin on the central spot. The other player plays as 24 goats. The goats play first, and may place a piece on any empty spot. The tigers move to an empty spot any distance along the lines on the board, or may hop over an adjacent goat to capture it, provided there is an empty spot immediately on the other side of the goat. Once all of the goats are placed, they may move along the lines to an empty adjacent spot. If the tigers cannot move, the goats win. The tigers win by capturing all the goats.
(game "Main Tapak Empat" (players 2) (equipment {(board (rectangle 5 5 Alternating) Vertex) (piece "Goat" P1 (move Step (to (is Empty (to ))))) (piece "Tiger" P2 (or (move Hop (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to )))) (move Step (to (is Empty (to )))))) (hand P1)}) (rules (start {(place Stack "Tiger2" (centrePoint )) (place Stack "Goat1" (handSite P1) 24)}) {(phase "Placement" P1 (play (move (from (handSite P1)) (to (sites Empty)))) (nextPhase (all Sites (sites Hand P1) (= 0 (count Cell (site )))))) (phase "Movement" (play (forEach Piece)))} (end {(if (no Moves P2) (result P1 Win)) (if (no Pieces P1) (result P2 Win))})))

Players take turns moving their pieces. Black starts. Players may: Move one or two empty spaces in any direction, or hop over one ring marker in any direction into an empty space. multiple jumps. White may capture an opponent's piece by moving onto its space from an adjacent one. Both the white and black pieces are removed from play. After moving or capturing, the moving player places a hole-in-the-ice ring marker on the moving tokens starting space and any empty space passed over. The goal for the white player is to capture both black tokens. The goal for the black player is to isolate at least one of their pieces so that it cannot be captured. If both players cannot play, black wins.
(game "Go with the Floe" (players 2) (equipment {(board (keep (square 8) (poly {{-3.0 4.0} {4.0 -3.0} {11.0 4.0} {4.0 11.0}}))) (piece "Seal" P1 N (or (move Slide (between (max 2) (id "Disc0"))) (move Hop (between (= (what (between )) (id "Disc0" Neutral))) (to (is Empty (to ))) (then (add (piece "Disc0") (to (last From))))))) (piece "Bear" P2 (or {(move Slide (between (max 2) (id "Disc0"))) (move Hop (between (= (what (between )) (id "Disc0" Neutral))) (to (is Empty (to ))) (then (add (piece "Disc0") (to (last From))))) (move Step (to (= (what (to )) (id "Seal1" P1)) (apply (remove (to )))) (then (and (remove (last To)) (add (piece "Disc0") (to (last From))))))})) (piece "Disc" Neutral)}) (rules (start {(place "Bear2" {"G2" "G7"}) (place "Seal1" {"B2" "B7"})}) (play (forEach Piece)) (end {(if (= (count Sites (sites Occupied All)) 0) (result P2 Win)) (if (and (no Moves P1) (not (can Move (forEach Piece "Bear" (step (to (= (what (to )) (id "Seal1" P1)))))))) (result P1 Win)) (if (all Passed) (result P1 Win))})))

7x7 board, with an X in each corner space, the middle space along each side, and the central space. Black plays with thirteen pieces, white plays with ten. Black places the first piece on the central square, then players alternate turns placing a piece on their own half of the board. When all of the pieces are placed, players alternate turns moving pieces one space orthogonally. A piece is captured when it is surrounded on two opposite sides by opponent's pieces, or if it is in the corner and there are two opponent's pieces blocking it from moving. Capturing cannot happen in the placement phase. Black wins if it can block white from being able to move. White wins if it is impossible for black to block them.
(game "Gala (Buginese)" (players 2) (equipment {(board (square 7)) (piece "Marker" Each (move Step Orthogonal (to (is Empty (to ))) (then (and (custodial (from (last To)) Orthogonal (between (max 1) (is Enemy (who (between ))) (apply (remove (between )))) (to (is Friend (who (to ))))) (surround (from (last To)) Orthogonal (between (and (is Enemy (who (between ))) (is In (between ) (sites Corners))) (apply (remove (between )))) (to (is Friend (who (to ))))))))) (hand Each) (regions "HalfBoard" P1 (expand (sites Bottom) 3)) (regions "HalfBoard" P2 (expand (sites Top) 3))}) (rules (start {(place "Marker1" (handSite P1) 13) (place "Marker2" (handSite P2) 10)}) {(phase "CentrePlacing" P1 (play (move (from (handSite P1)) (to (centrePoint )))) (nextPhase "Placement")) (phase "Placement" P2 (play (if (not (all Sites (sites Hand Mover) (= 0 (count Cell (site ))))) (move (from (handSite Mover)) (to (intersection (sites Empty) (sites Mover)))) (move Pass))) (nextPhase (and (all Sites (sites Hand P1) (= 0 (count Cell (site )))) (all Sites (sites Hand P2) (= 0 (count Cell (site ))))) "Movement")) (phase "Movement" (play (forEach Piece)) (end {(if (no Moves P2) (result P1 Win)) (if (< (count Pieces P1) 2) (result P2 Win))}))}))

Board with 5x5 lines, diagonals drawn in the four quadrants of the board, and a triangle at the top, connecting the apex with the three central points at the top edge, and a line perpendicularly bisecting the height of the triangle. One player plays as the general, placed in the central position. The other player plays with sixteen pieces, arranged on the perimeter points of the square. Pieces move one spot along the lines on the board. The general may capture pieces when it moves into a space that is surrounded on two opposite sides, along the lines on the board, thus capturing the pieces on either side of it. Conversely, the general can be captured by surrounding it on two opposite sides with pieces. Only the general may enter the triangle. The goal of the general is to capture all of the opponent's pieces, the goal of the person playing with sixteen pieces is to capture the general. If the general becomes trapped in the triangle, the opponent wins.
(game "Shi Liu Kan Tsiang Kun" (players 2) (equipment {(board (merge (scale 2.0 (square 5 Alternating)) (shift 2.0 8.0 (rotate 180.0 (wedge 3)))) Vertex) (piece "General" P1 (move Step (to (is Empty (to ))) (then (intervene (from (last To)) (to (is Enemy (who (to ))) (apply (remove (to )))))))) (piece "Marker" P2 (move Step (to (and (not (is In (to ) (expand (sites Top)))) (is Empty (to )))) (then (custodial (from (last To)) (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Friend (who (to ))))))))}) (rules (start {(place "General1" (ahead (centrePoint ) S)) (place "Marker2" (difference (sites Outer) (expand (sites Top))))}) (play (forEach Piece)) (end {(if (no Pieces P2) (result P1 Win)) (if (no Pieces P1) (result P2 Win)) (if (and {(is In (where "General" P1) (expand (sites Top))) (>= (count Pieces P2) 2) (= (who (coord "D5")) P2)}) (result P2 Win))})))

To be reconstructed. Rules as inferred by Murray 1951. One player is the bean, and the other player plays with twelve corn kernels. The corn kernels move along the lines. The goal is to corner the bean so that it cannot move. The bean may hop over the corn kernels to capture them or move to an adjacent empty point along the lines. The bean wins by reducing the opponent to nine corn kernels.
(game "Pon Chochotl" (players 2) (equipment {(board (rectangle 5 5 Alternating) Vertex) (piece "Corn" P1 (move Step (to (is Empty (to ))))) (piece "Bean" P2 (or (move Hop (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to )))) (if (is Prev Mover) (move Pass) (move Step (to (is Empty (to )))))))}) (rules (start {(place "Corn1" (union {(expand (sites Bottom)) (sites {"A3" "E3"})})) (place "Bean2" (centrePoint ))}) (play (forEach Piece)) (end {(if (no Moves Next) (result Next Loss)) (if (<= (count Pieces P1) 9) (result P1 Loss))})))

One player is the rabbit, and the other player plays with twelve other pieces. They may also play with either ten or eleven pieces instead of twelve. The pieces move along the lines. The goal is to corner the rabbit so that it cannot move. The rabbit may hop over the other pieces to capture them. The rabbit wins by reducing the opponent to nine pieces.
(game "Cercar La Liebre" (players 2) (equipment {(board (rectangle 5 5 Alternating) Vertex) (piece "Counter" P1 (move Step (to (is Empty (to ))))) (piece "Hare" P2 (or (move Hop (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to )))) (if (is Prev Mover) (move Pass) (move Step (to (is Empty (to )))))))}) (rules (start {(place "Counter1" (union {(expand (sites Bottom)) (sites {"A3" "E3"})})) (place "Hare2" (centrePoint ))}) (play (forEach Piece)) (end {(if (no Moves Next) (result Next Loss)) (if (<= (count Pieces P1) 9) (result P1 Loss))})))

3x5 intersecting lines, with diagonals in the four quadrants created. On either short end, an arc connects the two corner points, and the center line is extended to the arc. One player plays as four hounds, which begin on the four points to the left side of the board. The other player plays as one hare, which begins on the point where the center line and the second line cross. Players alternate turns moving a piece to an empty adjacent spot along the lines. The hounds may only move forward. The hounds win when they block the hare from being able to move.
(game "Hund efter Hare (Thy)" (players 2) (equipment {(board (remove (add (merge {(rectangle 3 5) (shift 1.0 0.0 (scale 0.5 (rectangle 5 1))) (shift 3.0 0.0 (scale 0.5 (rectangle 5 1))) (shift -1.0 1.0 (rectangle 1 7))}) {{0 15} {15 7} {7 18} {18 14} {17 4} {7 17} {7 16} {16 10} {19 10} {0 19} {20 14} {20 4} {12 16} {16 5} {5 15} {15 2} {2 17} {17 9} {9 18} {18 12}}) {{11 6} {6 1} {13 8} {8 3}}) Vertex) (piece "Hare" P1 (move Step (to (is Empty (to ))))) (piece "Dog" P2 E (move Step Forwards (to (is Empty (to )))))}) (rules (start {(place "Hare1" "C3") (place "Dog2" (sites {"B3" "B1" "A3" "B5"}))}) (play (forEach Piece)) (end {(if (no Moves P1) (result P2 Win))})))

A square, with lines bisecting the sides drawn to the center. A circle is drawn around the central point. arcs are drawn inside the square around the midpoints of the sides and the corners. Diagonals are drawn from the corner arcs to the central circle. One player plays as the hare, one player plays as the hunter and two hounds. The hare begins on the central spot, and the hunter and hounds are placed on three of the points on the central circle. Pieces move to an empty adjacent spot along the lines of the board. The hare moves first. When the hunter and hounds prevent the hare from being able to move, the game ends and the players switch roles.
(game "To Kinegi tou Lagou" (players 2) (equipment {(board (add (remove (remove (merge {(concentric {1 8}) (shift 0.0 -5.0 (concentric {1 4})) (shift 0.0 5.0 (concentric {1 4})) (shift -5.0 0.0 (concentric {1 4})) (shift 5.0 0.0 (concentric {1 4})) (shift 5.0 5.0 (concentric {1 8})) (shift 5.0 -5.0 (concentric {1 8})) (shift -5.0 -5.0 (concentric {1 8})) (shift -5.0 5.0 (concentric {1 8}))}) {20 18 27 11 48 49 50 51 52 41 42 43 44 45 34 35 36 37 30 59 58 57 64 63}) {{0 1} {0 7} {0 5} {0 3} {33 35} {30 29} {27 25} {39 37}}) {{15 8} {22 6} {4 12} {19 2} {18 36} {38 20} {40 14} {16 26} {28 24} {23 32} {31 11} {10 34} {5 30} {3 35} {39 1} {27 7}}) Vertex) (piece "Human" Each (move Step (to (is Empty (to ))))) (piece "Dog" Each (move Step (to (is Empty (to ))))) (piece "Hare" Each (move Step (to (is Empty (to ))))) (hand Each 2)}) (rules (start {(place "Hare2" (centrePoint )) (place "Human1" (handSite P1)) (place "Dog1" (handSite P1 1) 2)}) {(phase "PlacementP1" (play (move (from (sites Hand P1) (is Occupied (from ))) (to (sites {1 2 3 4 5 6 7 8}) (is Empty (to ))) (then (if (not (all Sites (sites Hand P1) (= 0 (count Cell (site ))))) (moveAgain ))))) (nextPhase (all Sites (sites Hand P1) (= 0 (count Cell (site )))) "HuntingP2")) (phase "HuntingP2" (play (forEach Piece (then (if (not (can Move (step (from (where "Hare" P2)) (to (is Empty (to )))))) (and {(addScore P2 (- (count Moves) 3)) (remove (sites Occupied All "Board")) (add (piece "Hare1") (to (sites Centre))) (add (piece "Human2") (to (handSite P2))) (add (piece "Dog2") (to (handSite P2 1)) 2)}))))) (nextPhase (= 1 (count Sites (sites Occupied All "Board"))) "PlacementP2")) (phase "PlacementP2" (play (move (from (sites Hand P2) (is Occupied (from ))) (to (intersection (sites Empty) (sites {1 2 3 4 5 6 7 8})) (is Empty (to ))) (then (if (not (all Sites (sites Hand P2) (= 0 (count Cell (site ))))) (moveAgain ))))) (nextPhase (all Sites (sites Hand P2) (= 0 (count Cell (site )))) "HuntingP1")) (phase "HuntingP1" (play (forEach Piece (then (if (not (can Move (step (from (where "Hare" P1)) (to (is Empty (to )))))) (addScore P1 (- (count Moves) (+ (score P2) 6))))))) (end (if (!= 0 (score P1)) (byScore ))))}))

An isosceles triangle, with a line intersecting the two equal sides, another line drawn from the apex to the midpoint of this line. A line extending below the base, and another line perpendicular to this one. One player plays as the tiger, and another player as three goats. The tiger begins at the apex of the triangle, the goats on the three points on the bottom line (the two ends and the place where it intersects with the other line. Players alternate turns moving a piece to an empty adjacent spot. The tiger may capture a goat by hopping over it to an empty adjacent spot along the lines of the board. The tiger wins by capturing all of the goats; the goats win by blocking the tiger from being able to move.
(game "Bam Blang Beh Khla" (players 2) (equipment {(board (add (remove (merge {(shift 0.4 -1.0 (scale 0.6 (rectangle 1 3))) (shift 0.2 0.0 (scale 0.8 2.0 (wedge 2))) (shift 0.0 -0.5 (scale 1.0 2.5 (wedge 2)))}) {{3 8} {3 7} {3 9}}) {{6 9} {4 7} {1 8}}) Vertex) (piece "Tiger" P1 (or (move Hop (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to )))) (move Step (to (is Empty (to )))))) (piece "Goat" P2 (move Step (to (is Empty (to )))))}) (rules (start {(place "Tiger1" (sites Top)) (place "Goat2" (sites Bottom))}) (play (forEach Piece)) (end {(if (no Moves P1) (result P2 Win)) (if (no Pieces P2) (result P1 Win))})))

One player has a single piece, the other has twelve, playing as jackrabbits. The player playing as the jackrabbits attempts to move all of their pieces to the opposite side of the board until they form the same configuration as the starting position on the opposite side. Pieces move orthogonally to accomplish this. The opponent's goal is to capture one of the jackrabbits by hopping over it.
(game "Ko-app-paw-na" (players 2) (equipment {(board (square 5) Vertex) (piece "Rabbit" P1 (move Step (to (is Empty (to ))))) (piece "Counter" P2 (or (move Hop (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to )))) (move Step (to (is Empty (to )))))) (regions P1 (union (expand (sites Top)) (sites {"A3" "E3"})))}) (rules (start {(place "Rabbit1" (union (expand (sites Bottom)) (sites {"A3" "E3"}))) (place "Counter2" (centrePoint ))}) (play (forEach Piece)) (end {(if (= (sites P1) (sites Occupied P1)) (result P1 Win)) (if (= (count Pieces P1) 11) (result P2 Win))})))

Two arcs which meet, in the shape of a horn, curving to the left. Nine points along the left side, and eight along the right, with one at the apex. Zig-zag lines connect points  on either side of the board, connecting the first on the left to the first on the right, the first on the right to the second on the left, the second on the left to the second on the right, and so on. One player plays as the cow and the calf (black). The cow begins on the first point on the left, the calf on the second point on the right. The other player plays as two children (white), which begin on the second point on the left and the first point on the right. Players alternate turns moving a piece to an empty adjacent spot along the lines on the board. The cow never moves from its position. The calf plays first. The calf wins when it reaches the cow; the children win when they force the calf onto the apex of the board (the pasture).
(game "Uxrijn Ever" (players 2) (equipment {(board (graph {{0.0 0.0} {5.0 0.0} {0.17 1.0} {4.65 1.0} {0.3 2.0} {4.3 2.0} {0.38 3.0} {3.9 3.0} {0.25 4.0} {3.5 4.0} {-0.13 5.0} {2.97 5.0} {-0.75 6.0} {2.2 6.0} {-1.47 7.0} {0.95 7.0} {-2.22 8.0} {-3.0 9.0}} {{0 1} {0 2} {2 4} {4 6} {6 8} {8 10} {10 12} {12 14} {14 16} {16 17} {1 3} {3 5} {5 7} {7 9} {9 11} {11 13} {13 15} {1 2} {2 3} {3 4} {4 5} {5 6} {6 7} {7 8} {8 9} {9 10} {10 11} {11 12} {12 13} {13 14} {14 15} {15 16} {15 17}}) Vertex) (piece "Cow" P1) (piece "Calf" P1 (move Step (to (or (= (what (to )) (id "Cow" P1)) (is Empty (to ))) (apply (remove (to )))))) (piece "Human" P2 (move Step (to (is Empty (to )))))}) (rules (start {(place "Cow1" 0) (place "Calf1" 3) (place "Human2" (sites {1 2}))}) (play (forEach Piece)) (end {(if (is In (where "Calf" P1) (sites Top)) (result P2 Win)) (if (= 1 (count Sites (sites Occupied P1))) (result P1 Win))})))

5x5 intersecting lines, with the diagonals of every 2x2 square formed. On one side, a diamond intersects with the central point of that side, with diagonals drawn in the diamond. One player plays as the monk, placed at the intersection of the diamond and the main board. The other player plays as fifteen water pieces, placed on each point along the perimeter of the main board. Players take turns moving their pieces to one adjacent point following the lines on the board. The monk may capture two water pieces by moving to an empty space between two water pieces. The goal of the water pieces is to trap the monk on the far point of the diamond. The monk wins by capturing all of the water.
(game "Shui Yen Ho-Shang" (players 2) (equipment {(board (merge (rotate 45.0 (shift 1.5 4.2 (square 2 Solid))) (square 5 Alternating)) Vertex) (piece "Marker" P1 (move Step (to (is Empty (to ))))) (piece "Marker" P2 (move Step (to (is Empty (to ))) (then (intervene (from (last To)) (to (is Enemy (who (to ))) (apply (remove (to ))))))))}) (rules (start {(place "Marker2" "C5") (place "Marker1" (difference (sites Outer) (sites {"B6" "C7" "D6"})))}) (play (forEach Piece)) (end {(if (no Pieces P1) (result P2 Win)) (if (and (no Moves P2) (is In (where "Marker" P2) (sites {"C7"}))) (result P1 Win))})))

28 squares arranged in a cross-shaped board. Diagonals are drawn in each 2x2 square. Pieces are played on the lines of the board. One player plays as a single fox, placed on the center of the third line from the top of one arm of the cross. The other player plays as eighteen geese, placed on the points on the opposite arm of the cross and the first horizontal line of the horizontal arms of the cross. Players alternate turns moving a piece to an empty adjacent spot along the lines of the board. The geese may not move backward. The fox may capture a goose by hopping over it to an empty spot immediately on the opposite side of the goose along the lines of the board. The geese win by blocking the fox from being able to move. The fox wins by capturing all the geese.
        
(game "Gasetavl (Gedved)" (players 2) (equipment {(board (merge (shift 0.0 (/ (- 9.0 3.0) 2.0) (rectangle 3 9 Alternating)) (shift (/ (- 9.0 3.0) 2.0) 0.0 (rectangle 9 3 Alternating))) Vertex) (piece "Fox" P1 (or (move Hop (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to )))) (move Step (to (is Empty (to )))))) (piece "Geese" P2 N (move Step (directions {Rightward Forwards Leftward}) (to (is Empty (to )))))}) (rules (start {(place "Fox1" "E7") (place "Geese2" (sites {"D1" "E1" "F1" "D2" "E2" "F2" "D3" "E3" "F3" "A4" "B4" "C4" "D4" "E4" "F4" "G4" "H4" "I4"}))}) (play (forEach Piece)) (end {(if (no Moves P1) (result P2 Win)) (if (no Pieces P2) (result P1 Win))})))

Cross-shaped board made of five squares. The four squares of the arms have diagonals and lines connecting the midpoints of opposite sides. The central square has diagonals and a line connecting the central point with the midpoint of the lower side. One player plays with nineteen pieces, which begin on the uppermost nineteen points. The other player plays with two pieces, which begin on the central space and the one immediately below it. The player with two pieces goes first. Pieces move along the lines of the board to an empty adjacent spot. The player with two pieces may capture an adjacent opponent's piece by hopping over it to an empty spot immediately on the opposite side of it. The player with two pieces wins by capturing all of the opponent's pieces; the player with nineteen pieces wins by blocking the opponent from being able to move.
(game "Nuktagaq" (players 2) (equipment {(board (remove (merge (shift 0.0 (/ (- 7.0 3.0) 2.0) (rectangle 3 7 Alternating)) (shift (/ (- 7.0 3.0) 2.0) 0.0 (rectangle 7 3 Alternating))) {{17 10} {9 10} {10 11}}) Vertex) (hand P1) (piece "Marker" P1 (or (move Hop (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to )))) (move Step (to (is Empty (to )))))) (piece "Marker" P2 (move Step (to (is Empty (to )))))}) (rules (start {(place "Marker2" (difference (expand (sites Top) 4) (union (sites Row 2) (sites Centre)))) (place "Marker1" (sites Direction (sites Centre) S true 1))}) (play (forEach Piece)) (end {(if (no Moves Next) (result Next Loss)) (if (no Pieces P2) (result P2 Win))})))

8x8 checkered board. One player plays as four sheep (white pieces), which begin on the four dark squares on one side of the board. The other player plays as one wolf (black piece), which can be placed on any dark space on the board. Players alternate turns moving a piece to an empty adjacent dark square on the board. The sheep move forward only but the wolf may also move backward. The goal of the sheep is to block the wolf from being able to move, the goal of the wolf is to move beyond the line of sheep.
(game "Wolf und Schaaf" (players 2) (equipment {(board (square 8)) (piece "Sheep" P2 N (move Step (directions {FR FL}) (to (is Empty (to ))))) (piece "Wolf" P1 (move Step Diagonal (to (is Empty (to ))))) (hand P1)}) (rules (start {(place "Wolf1" (handSite P1)) (place "Sheep2" {"A1" "C1" "E1" "G1"})}) {(phase "Placement" P1 (play (move (from (handSite P1)) (to (intersection (sites Phase 0) (sites Empty))))) (nextPhase "Movement")) (phase "Movement" (play (forEach Piece)))} (end {(if (and (no Moves P1) (is Mover P1)) (result P2 Win)) (if (= 0 (count Sites (forEach (sites Occupied P2) (<= (row (site )) (row (where "Wolf" P1)))))) (result P1 Win))})))

5x5 intersecting lines, with diagonals drawn in the four quadrants of the board. Two triangles, their apices intersecting the main board at opposite midpoints. The bast of the triangle is bisected by a line drawn from the apex, and this line is bisected and intersects with the other two sides of the triangle. one player plays as two tigers, which start on the central point. The other player has 23 sheep, eight of which start on the board, on the points immediately adjacent to the tigers. Pieces move one space along the lines to an empty adjacent spot. The tigers may capture an unbroken line of sheep in one direction, provided there is an unoccupied space at the opposite end of the line. The player with the sheep replaces any captured sheep from those remaining in their hand. The tigers win when they capture all of the sheep; the sheep win when they block the tigers from being able to move.
(game "Merimueng-rimueng" (players 2) (equipment {(board (merge {(square 5 Alternating) (shift 0.0 4.0 (rotate 180.0 (wedge 3))) (shift 0.0 -2.0 (wedge 3))}) Vertex) (hand P2) (piece "Tiger" P1 (or {(move Step (to (is Empty (to )))) (move Hop (between (range 1 9) (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to ))))})) (piece "Sheep" P2 (move Step (to (is Empty (to )))))}) (rules (start {(place "Sheep2" (difference (expand (sites Centre)) (centrePoint ))) (place Stack "Sheep2" (handSite P2) 15) (place Stack "Tiger1" (sites Centre) {2})}) {(phase "Movement" (play (forEach Piece true)) (end {(if (no Moves P1) (result P2 Win)) (if (no Pieces P2) (result P1 Win))}) (nextPhase (and (not (all Sites (sites Hand P2) (= 0 (count Cell (site ))))) (< (count Sites (sites Occupied P2 "Board")) 8)) "Placement")) (phase "Placement" (play (move (from (handSite Mover)) (to (sites Empty)) (then (moveAgain )))) (nextPhase (or (all Sites (sites Hand P2) (= 0 (count Cell (site )))) (= (count Sites (sites Occupied P2 "Board")) 8)) "Movement"))}))

Played on cross-shaped board, made of five squares, each divided into four squares and with the diagonals of the larger squares drawn. One player plays with thirteen pieces situated on every point of one arm of the cross and along the line immediately perpendicular to that arm. The other plays as the Punipeki, which is placed on any empty spot on the first turn. Pieces move along the lines to an adjacent empty spot. The Punipeki may jump over an adjacent piece to capture it. The Punipeki wins if it can capture all the opponent's pieces, the other player wins by blocking the Punipeki from moving.
(game "Manu" (players 2) (equipment {(board (merge (shift 0.0 (/ (- 7.0 3.0) 2.0) (rectangle 3 7 Alternating)) (shift (/ (- 7.0 3.0) 2.0) 0.0 (rectangle 7 3 Alternating))) Vertex) (hand P1) (piece "Stick" P1 (or (move Hop (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to )))) (move Step (to (is Empty (to )))))) (piece "Marker" P2 (move Step (to (is Empty (to )))))}) (rules (start {(place "Marker2" (union (expand (sites Bottom)) (sites Row 2))) (place "Stick1" (handSite P1))}) {(phase "Placement" P1 (play (move (from (handSite P1)) (to (sites Empty)))) (nextPhase (all Sites (sites Hand P1) (= 0 (count Cell (site )))) "Movement")) (phase "Movement" (play (forEach Piece)))} (end {(if (no Moves Next) (result Next Loss)) (if (no Pieces P2) (result P2 Win))})))

Rectangular board, with 32 points along each long side. Lines connect the points opposite each other, as well as a diagonal line connecting each point on the left to the next highest point on the right (e.g., the first left point with the second right point, the second left point with the third right point, an so on). One player plays as the calf, which begins in the bottom right corner. The second player plays as two children, which begin in the bottom left corner and the second point on the right. Players alternate turns moving one of their pieces to an empty adjacent spot on the board along the lines. The children move first, and cannot move backward during the game. The calf can move in any direction. The children win by forcing the calf to move to the top left corner of the board, the calf wins by returning to its starting point after first having left it.
(game "Neg Tugal Tuux" (players 2) (equipment {(board (add (scale 15.0 1.0 (rectangle 32 2)) {{0 3} {2 5} {4 7} {6 9} {8 11} {10 13} {12 15} {14 17} {16 19} {18 21} {20 23} {22 25} {24 27} {26 29} {28 31} {30 33} {32 35} {34 37} {36 39} {38 41} {40 43} {42 45} {44 47} {46 49} {48 51} {50 53} {52 55} {54 57} {56 59} {58 61} {60 63}}) Vertex) (piece "Cow" P2 (move Step (to (is Empty (to ))))) (piece "Human" P1 (move Step (to (and (is Empty (to )) (>= 1 (- (from ) (to )))))))}) (rules (start {(place "Cow2" 1) (place "Human1" (sites {0 3}))}) (play (forEach Piece)) (end {(if (and (is Mover P2) (= 1 (where "Cow2" P2))) (result P2 Win)) (if (= 62 (where "Cow2" P2)) (result P1 Win))})))

Four pieces are the sheep; they are placed on the dark squares along one side of the board. one piece is the wolf; it is placed on any dark square on the side opposite the sheep. The goal of the wolf is to reach one of the sheep's original spaces, the sheep's goal is to block the wolf from doing so. Sheep move diagonally forward one square, the wolf moves diagonally forward or backward one square.
(game "Wolf and Sheep" (players 2) (equipment {(board (square 8)) (piece "Sheep" P1 N (move Step (directions {FR FL}) (to (is Empty (to ))))) (piece "Wolf" P2 (move Step Diagonal (to (is Empty (to )))))}) (rules (start {(place "Wolf2" {"D8"}) (place "Sheep1" {"A1" "C1" "E1" "G1"})}) (play (forEach Piece)) (end {(if (and (no Moves P2) (is Mover P2)) (result P1 Win)) (if (is In (where "Wolf" P2) (sites Bottom)) (result P2 Win))})))

12x12 checkered board. One player plays with six \"cattle\" or \"dogs,\" the other plays as the \"leopard.\" The cattle start on the white spaces along one side of the board, the leopard may be placed on any white square. Cattle move one space forward diagonally. The leopard may move one or two spaces diagonally in any one direction. If the leopard moves past the line of cattle, the leopard wins. If the cattle block the leopard from being able to move, the cattle win.
(game "Koti Keliya" (players 2) (equipment {(board (square 12)) (piece "Leopard" P1 (move Slide Diagonal (between (max 2)))) (piece "Cow" P2 N (move Step (directions {FR FL}) (to (is Empty (to )))))}) (rules (start {(place "Cow2" (difference (sites Bottom) (sites Phase 0)))}) {(phase "Placement" (play (move Add (to (intersection (sites Phase 1) (sites Empty))))) (nextPhase (not (no Pieces P1)) "Movement")) (phase "Movement" (play (forEach Piece)))} (end {(if (and (no Moves P1) (is Mover P1)) (result P2 Win)) (if (= 0 (count Sites (forEach (sites Occupied P2) (< (row (site )) (row (where "Leopard" P1)))))) (result P1 Win))})))

Two concentric circles, with four radii from the outer circle to in the center, dividing the circles into four equal parts. There are four arcs, each of which bisects a radius between where each radius intersects the circumference of each circle, the arc also intersecting with the outer circle's circumference. One player plays as a bear, which begins on the central point, the other as three hunters, which begin on any three points on the inner circle. The bear plays first. Players alternate turns moving a piece to an empty adjacent spot along the lines. When the bear is unable to move, the game ends and the players play again, switching sides. The player who lasts longest while playing as the bear wins.
(game "Gioco dell'Orso" (players 2) (equipment {(board (add (concentric {1 4 12}) {{6 8} {9 11} {12 14} {5 15}}) Vertex) (piece "Human" Each (move Step (to (is Empty (to ))))) (piece "Bear" Each (move Step (to (is Empty (to ))))) (hand Each)}) (rules (start {(place "Human1" (handSite P1) 3) (place "Bear2" (sites Centre))}) {(phase "PlacementP1" (play (move (from (handSite P1)) (to (intersection (sites Empty) (sites {1 2 3 4}))) (then (if (not (all Sites (sites Hand P1) (= 0 (count Cell (site ))))) (moveAgain ))))) (nextPhase (all Sites (sites Hand P1) (= 0 (count Cell (site )))) "HuntingP2")) (phase "HuntingP2" (play (forEach Piece (then (if (not (can Move (move Step (from (where "Bear" P2)) (to (is Empty (to )))))) (and {(addScore P2 (- (count Moves) 3)) (remove (sites Occupied All "Board")) (add (piece "Bear1") (to (sites Centre))) (add (piece "Human2") (to (handSite P2)) 3)}))))) (nextPhase (= 1 (count Sites (sites Occupied All "Board"))) "PlacementP2")) (phase "PlacementP2" (play (move (from (handSite P2)) (to (intersection (sites Empty) (sites {1 2 3 4}))) (then (if (not (all Sites (sites Hand P2) (= 0 (count Cell (site ))))) (moveAgain ))))) (nextPhase (all Sites (sites Hand P2) (= 0 (count Cell (site )))) "HuntingP1")) (phase "HuntingP1" (play (forEach Piece (then (if (not (can Move (move Step (from (where "Bear" P1)) (to (is Empty (to )))))) (addScore P1 (- (count Moves) (+ (score P2) 6))))))) (end (if (!= 0 (score P1)) (byScore ))))}))

5x5 intersecting lines, with diagonals in each quadrant. Two triangles, the apexes of which intersect with the square at the midpoint of opposite sides. One line bisecting the base of the triangle, and another bisecting this line. One player plays as the tiger, which is placed on the apex of either triangle. The other player plays as 24  people, nine of which begin on the nine central points of the board. To begin, the person playing as the tiger removes three of the people from their starting position and places them on any points on the board. The person playing as the people then places one of the remaining people on an empty spot on the board. The tiger then moves to an empty adjacent spot along the lines of the board. Play continues like this until all of the people are placed, at which point the people move to an adjacent empty spot on the board as well. On its turn, the tiger may hop over a line of people to an empty spot on the other side of the line, following the lines of the board and only if the number of people in the line is odd. The tiger wins if it captures all the people; the people win when they block the tiger from being able to move.
(game "Rimau-Rimau (One Tiger)" (players 2) (equipment {(board (merge {(square 5 Alternating) (shift 0.0 4.0 (rotate 180.0 (wedge 3))) (shift 0.0 -2.0 (wedge 3))}) Vertex) (hand Each) (piece "Tiger" P1 (or {(move Step (to (is Empty (to )))) (move Hop (between (range 1 9) (is Enemy (who (between ))) (apply (remove (between )))) (to (and (is Empty (to )) (is Even (count Steps (from ) (to ))))))})) (piece "human" P2 (move Step (to (is Empty (to )))))}) (rules (start {(place "human2" (expand (sites Centre))) (place "human2" (handSite P2) 15) (place "Tiger1" (handSite P1))}) {(phase "PlacementTiger" P1 (play (move (from (handSite P1)) (to (sites {"C3" "C7"})) (then (moveAgain )))) (nextPhase Mover "MoveHuman")) (phase "MoveHuman" P1 (play (move (from (intersection (expand (sites Centre)) (sites Occupied Next))) (to (difference (sites Empty) (expand (sites Centre)))) (then (if (< 6 (count Sites (intersection (expand (sites Centre)) (sites Occupied Next)))) (moveAgain ))))) (nextPhase Mover (= 6 (count Sites (intersection (expand (sites Centre)) (sites Occupied Next)))) "Movement")) (phase "PlacementHuman" P2 (play (move (from (handSite Mover)) (to (sites Empty)))) (nextPhase (all Sites (sites Hand P2) (= 0 (count Cell (site )))) "Movement")) (phase "Movement" (play (forEach Piece)) (end {(if (no Moves P1) (result P2 Win)) (if (no Pieces P2) (result P1 Win))}))}))

A square, with diagonals and lines connecting the midpoints. Two triangles on opposite sides of the triangle. One player plays as three galgos, which are placed on the three points of one of the triangles. The other player plays as one hare, which begins on the point between two of the galgos. The hare may move in any direction along the lines on the board, but must move to the central point of the board on its first move. The galgos may move forward orthogonally or diagonally; they may never move horizontally and may only move backwards if the galgo which starts on the apex of the triangle has moved and the piece to move backwards has not yet moved. If the galgos block the hare from being able to move, they win, if the hare moves past the galgos it wins.
(game "La Liebre Perseguida" (players 2) (equipment {(board (rotate 90.0 (merge {(rectangle 3 3 Alternating) (shift 1.5 0.5 (rotate -90.0 (wedge 2))) (shift -1.5 0.5 (rotate 90.0 (wedge 2)))})) Vertex) (piece "Hare" P1 (move Step Orthogonal (to (is Empty (to ))))) (piece "Rabbit" P2 N (or (if (= (state (from )) 1) (move Step Backwards (to (and (is In (to ) (sites Bottom)) (is Empty (to )))) (then (if (= (state (last To)) 1) (set State (last To) 0))))) (move Step Forwards (to (is Empty (to ))) (then (if (= (state (last To)) 1) (set State (last To) 0)))))) (regions "Home" P2 (sites {"B1" "C2" "A2"})) (regions "Home" P1 (sites {"B2"}))}) (rules (start {(place "Hare1" (sites P1)) (place "Rabbit2" (sites P2) 1)}) (play (forEach Piece)) (end {(if (no Moves P1) (result P2 Win)) (if (is In (where "Hare" P1) (sites P2)) (result P1 Win))})))

5x5 intersecting lines with diagonals in each quadrant. A triangle, the apex intersecting with the apex of one of the sides. A line is drawn from the apex to the midpoint of the base of the triangle. A line bisects this line, connecting the midpoints of the sides of the triangle,  One player plays as one jaguar, which begins on the center of the base of the large triangle's base. The other player plays as fifteen dogs, which begin on the points of the three ranks of the bottom half of the square portion of the board. The jaguar moves first. Pieces move to an empty adjacent space along the lines of the board. The jaguar may hop over an adjacent dog to an empty space immediately on the opposite side of it, capturing the dog. Dogs cannot capture. The dogs win by blocking the jaguar so it cannot move; the jaguar wins when only six dogs remain. 
(game "Yaguarete Kora" (players 2) (equipment {(board (rotate 180.0 (merge (shift 0.0 2.0 (square 5 Alternating)) (wedge 3))) Vertex) (piece "Jaguar" P1 (or (move Step (to (is Empty (to )))) (move Hop (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to )))))) (piece "Dog" P2 (move Step (to (is Empty (to )))))}) (rules (start {(place "Jaguar1" "C6") (place "Dog2" (expand (sites Bottom) 2))}) (play (forEach Piece)) (end {(if (no Moves P1) (result P1 Loss)) (if (<= (count Pieces P2) 6) (result P1 Win))})))

One player plays with one piece \"presumably the coyote,\" the other with the other twelve pieces, placed on intersections of the lines. Pieces move to an adjacent intersection connected to the present position by a line. The \"coyote\" may take the opponent's pieces by hopping over them. Multiple captures are allowed if possible, Captures are obligatory. The goal of the coyote is to capture all of the opponent's pieces; the other player's goal is to block the coyote so it cannot move.
(game "Coyote" (players 2) (equipment {(board (rectangle 5 5 Radiating) Vertex) (piece "Sheep" P1 (move Step (to (is Empty (to ))))) (piece "Coyote" P2 (or (move Hop (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to )))) (if (is Prev Mover) (move Pass) (move Step (to (is Empty (to )))))))}) (rules (start {(place "Sheep1" (union (expand (sites Bottom)) (sites {"A3" "E3"}))) (place "Coyote2" (centrePoint ))}) (play (forEach Piece)) (end {(if (no Moves Next) (result Next Loss)) (if (<= (count Pieces P1) 9) (result P1 Loss))})))

5x5 intersecting lines, with diagonals drawn in the quadrants. One player plays as one dog,  which is a large stone, and the other as twelve goats, which are smaller stones. The goats begin on the two rows closest to the player to which they belong, and on the right hand spots in the central row. The dog begins in the central space. 
            
            The dog moves first. The dog may move in any direction along the lines of the board. It may capture a goat by hopping over it to an empty adjacent spot on the opposite side of the goat, according to the lines of the board. Multiple captures are allowed. The goats move one space forward orthogonally or diagonally, or sideways, along the lines of the board. 
            
            When all of the goats are unable to move forward anymore and all are are in spaces being equivalent to the starting position on the opposite side of the board, they may then commence moving in the opposite direction toward their original starting position, but not backwards with respect to this direction. 
            
        The dog wins by capturing all the goats; the goats win by blocking the dog from being able to move.
(game "El Perro" (players 2) (equipment {(board (rectangle 5 5 Alternating) Vertex) (piece "Goat" P2 (move Step (if (= (value Player Mover) 1) (directions {S SE SW E W}) (directions {N NE NW E W})) (to (is Empty (to ))))) (piece "Dog" P1 (or (move Hop (from (from )) Adjacent (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to ))) (then (if (can Move (move Hop (from (last To)) (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to ))))) (moveAgain )))) (move Step (to (is Empty (to ))))))}) (rules (start {(place "Goat2" (union (intersection (union (sites Left) (sites Right)) (sites Row 2)) (expand (sites Bottom)))) (place "Dog1" (sites Centre))}) (play (if (is Prev Mover) (or (move Hop (from (last To)) Adjacent (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to ))) (then (if (can Move (move Hop (from (last To)) (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to ))))) (moveAgain )))) (move Pass)) (forEach Piece) (then (if (not (can Move (forEach Piece (move Step (if (= (value Player P2) 1) (directions {S SE SW}) (directions {N NE NW})) (to (is Empty (to )))) P2))) (set Value P2 (if (= (value Player P2) 1) 0 1)))))) (end {(if (no Moves P1) (result P2 Win)) (if (no Pieces P2) (result P1 Win))})))

ta
    
    (info
        {
        (description "Komikan is a game played in South America, particularly well-known in Chile. It is first mentioned in a text by J. I. Molina in 1787, describing it as a game of Chess. Subsequent authors have doubted the identification of this game as Chess, and have largely agreed that it is indeed a hunt game popular among the Araucanians from the nineteenth century, also known as \"Leoncito.\" It is a hunt game, played on an Alquerque-type board with a triangular appendage. It may be derived from the game Komina (also Taptana) known from Inka times.
(game "Komikan" (players 2) (equipment {(board (merge (scale 2.0 (square 5 Alternating)) (graph {{4.0 8.0} {3.0 9.0} {4.0 9.0} {5.0 9.0} {2.0 10.0} {3.0 10.0} {4.0 10.0} {5.0 10.0} {6.0 10.0} {1.0 11.0} {3.0 11.0} {4.0 11.0} {5.0 11.0} {7.0 11.0}} {{0 1} {0 2} {0 3} {1 4} {1 5} {1 2} {2 6} {2 3} {3 7} {3 8} {4 9} {4 5} {5 10} {5 6} {6 11} {6 7} {7 12} {7 8} {8 13} {9 10} {10 11} {11 12} {12 13}})) Vertex) (piece "MountainLion" P1 (if (is Prev Mover) (or (move Pass) (move Hop (from (last To)) (between (and (not (is In (between ) (sites ToClear))) (is Enemy (who (between )))) (apply (remove (between )))) (to (is Empty (to ))) (then (if (can Move (hop (from (last To)) (between (and (not (is In (between ) (sites ToClear))) (is Enemy (who (between ))))) (to (is Empty (to ))))) (moveAgain ))))) (or (move Hop (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to ))) (then (if (can Move (hop (from (last To)) (between (and (not (is In (between ) (sites ToClear))) (is Enemy (who (between ))))) (to (is Empty (to ))))) (moveAgain )))) (move Step (to (is Empty (to ))))))) (piece "Dog" P2 N (move Step Forwards (to (is Empty (to )))))}) (rules (start {(place "Dog2" (union (expand (sites Bottom)) (sites {"A3" "I3"}))) (place "MountainLion1" (coord "E7"))}) (play (forEach Piece)) (end {(if (no Pieces P2) (result P1 Win)) (if (no Moves P1) (result P2 Win)) (if (no Moves P2) (result Mover Draw))})))

Square board, divided into eight equal triangles, and a circle around the square, touching it at the corners, One player plays as the hare, the other player as three hounds. Players take turns placing one of their pieces on the board. When a player has placed all their pieces, they move to an adjacent empty spot. When the hounds block the hare from being able to move, the hounds win. 
(game "Hyvn aetter Hare" (players 2) (equipment {(board (splitCrossings (merge (shift 0.5 0.5 (scale 0.707 (concentric {1 8}))) (square 2))) Vertex) (piece "Hare" P1 (move Step (to (is Empty (to ))))) (piece "Dog" P2 (move Step (to (is Empty (to ))))) (hand Each)}) (rules (start {(place "Hare1" (handSite P1) 1) (place "Dog2" (handSite P2) 3)}) {(phase "Placement" (play (if (not (all Sites (sites Hand Mover) (= 0 (count Cell (site ))))) (move (from (handSite Mover)) (to (sites Empty))))) (nextPhase (all Sites (sites Hand P2) (= 0 (count Cell (site )))) "Movement")) (phase "Movement" (play (forEach Piece)) (end (if (no Moves Next) (result Next Loss))))}))

Five squares which are each divided with lines connecting the midpoints of their sides and diagonals. The five squares are arranged in a cross-shaped board. One player plays as two foxes the other as twenty hens. The hens begin on the twenty spaces on one half of the board, the foxes on the bottom two corners of the square on the opposite arm of the cross. The foxes may move in any direction, and hop over a hen to an empty space immediately adjacent on the opposite side of the hen along the lines of the board to capture. The hens may not move backward. The foxes win by capturing all the hens, the hens win by occupying all of the spaces in the square of the arm of the cross opposite from where they began.
(game "El Zorro" (players {(player N) (player S)}) (equipment {(board (merge (shift 0.0 (/ (- 7.0 3.0) 2.0) (rectangle 3 7 Alternating)) (shift (/ (- 7.0 3.0) 2.0) 0.0 (rectangle 7 3 Alternating))) Vertex) (piece "Fox" P1 (or (move Hop (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to )))) (move Step (to (is Empty (to )))))) (piece "Hen" P2 (move Step (directions {Rightward Leftward Forwards}) (to (is Empty (to )))))}) (rules (start {(place "Hen2" (union (sites Top) (expand (sites Row 4)))) (place "Fox1" (intersection (union (sites Column 4) (sites Column 2)) (sites Bottom)))}) (play (forEach Piece)) (end {(if (all Sites (expand (sites Bottom) 2) (= (who (site )) P2)) (result P2 Win)) (if (no Pieces P2) (result P1 Win))})))

The game is played on a triangle board divided in half on its height and then in thirds with lines crossing the height perpendicularly. One player plays as the tiger, and the other plays as seven leopards. The tiger plays their piece on a point where lines intersect first, and then on subsequent turns the leopards are placed one-by-one. Moves occur along the lines to an adjacent intersection. The tiger captures may capture a leopard by hopping over it. The tiger's goal is to capture four of the leopards; the leopards' goal is to block the tiger so it cannot move.
(game "Hat Diviyan Keliya" (players 2) (equipment {(board (scale 1.0 2.0 (wedge 4)) Vertex) (hand Each) (piece "Tiger" P1 (or (move Hop (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to )))) (move Step (to (is Empty (to )))))) (piece "Leopard" P2 (move Step (to (is Empty (to )))))}) (rules (start {(place "Tiger1" (handSite P1) 1) (place "Leopard2" (handSite P2) 7)}) {(phase "Placement" (play (move (from (handSite Mover)) (to (sites Empty)))) (nextPhase Mover (all Sites (sites Hand Mover) (= 0 (count Cell (site )))) "Movement")) (phase "Movement" (play (forEach Piece)) (end {(if (no Moves Next) (result Next Loss)) (if (<= (count Pieces P2) 3) (result P2 Loss))}))}))

The board has no extension and joined diagonals. Haretavl rules.
(game "Ludus Coriovalli" (players 2) (equipment {(board (add (merge {(scale 2.0 1.0 (rectangle 1 3)) (rectangle 2 1) (shift 4.0 0.0 (rectangle 2 1)) (shift 4.0 1.5 (rectangle 2 1)) (shift 0.0 1.5 (rectangle 2 1)) (scale 2.0 1.0 (shift 0.0 2.5 (rectangle 1 3)))}) {{3 7} {5 4} {9 1} {3 1} {1 4} {5 9} {9 7}}) Vertex) (hand Each) (piece "Dog" P1 (move Step (to (is Empty (to ))))) (piece "Hare" P2 (move Step (to (is Empty (to )))))}) (rules (start {(place "Dog1" (handSite P1) 3) (place "Hare2" (handSite P2))}) {(phase "Placement" (play (move (from (handSite Mover)) (to (sites Empty)))) (nextPhase Mover (all Sites (sites Hand Mover) (= 0 (count Cell (site )))) "Movement")) (phase "Movement" (play (forEach Piece)))} (end {(if (no Moves P2) (result P1 Win)) (if (or (>= (count Moves) (- (value MoveLimit) 10)) (>= (count Turns) (- (value TurnLimit) 5))) (result P2 Win))})))

5x5 lines, intersecting to form a square. Diagonals are drawn in the four quadrants of the board. One triangle, its apex intersecting the main board at the midpoint of one side. The base of the triangle is bisected by a line drawn from the apex, and this line is bisected and intersects with the other two sides of the triangle. One player plays as the tiger, placed on the central point of the triangle, and the other plays as twelve goats, which begin on the first two rows of points opposite the triangle and on the outer two points in the third row. The tiger moves first. Pieces move to an empty adjacent spot along the lines on the board. The tiger alone may capture a goat by hopping over it to an empty spot immediately opposite a goat. The tiger wins by capturing all the goats; the goats win by blocking the tiger from being able to move.
(game "Orissa Tiger Game (One Tiger)" (players 2) (equipment {(board (rotate 180.0 (merge (shift 0.0 2.0 (square 5 Alternating)) (wedge 3))) Vertex) (piece "Tiger" P1 (or (move Step (to (is Empty (to )))) (move Hop (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to )))))) (piece "Goat" P2 (move Step (to (is Empty (to )))))}) (rules (start {(place "Tiger1" (sites {"C6"})) (place "Goat2" (union (expand (sites Bottom)) (sites {"A3" "E3"})))}) (play (forEach Piece)) (end {(if (no Moves P1) (result P2 Win)) (if (no Pieces P2) (result P1 Win))})))

Played on a five-pointed star shaped board. One player plays with one piece, the \"tiger,\" and the other plays with seven pieces, the \"kaooas.\" The player with the kaooas attempt to checkmate the tiger by moving to one of the points where the lines of the board intersect. The tiger captures kaooas by hopping over them. The tiger wins by capturing all the kaooas.
(game "Kaooa" (players 2) (equipment {(board (splitCrossings (regular Star 5)) Vertex) (hand Each) (piece "Marker" P1 (or (move Hop (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to ))) (then (if (can Move (hop (from (last To)) (between (and (not (is In (between ) (sites ToClear))) (is Enemy (who (between ))))) (to (is Empty (to ))))) (moveAgain )))) (move Step (to (is Empty (to )))))) (piece "Marker" P2 (move Step (to (is Empty (to )))))}) (rules (start {(place "Marker1" (handSite P1) 1) (place "Marker2" (handSite P2) 7)}) {(phase "Placement" (play (move (from (handSite Mover)) (to (sites Empty)))) (nextPhase Mover (all Sites (sites Hand Mover) (= 0 (count Cell (site )))) "Movement")) (phase "Movement" (play (forEach Piece)) (end (if (no Moves Next) (result Next Loss))))}))

A triangle, with a line drawn from the apex to the base, and two lines drawn through the height connecting the opposite two sides. One player plays as one tiger, the other as five lambs. The tiger begins on the apex of the triangle. The tiger moves to an empty adjacent spot along the lines of the board. The player who plays as the lambs plays first, placing a lamb on an empty spot on the board, and then the tiger player moves. When all of the lambs are placed, the lambs move in the same manner as the tiger. The tiger may capture a lamb by hopping over it to an empty space on the opposite adjacent side of the lamb along the lines on the board. The lambs win when they block the tiger from being able to move, the tiger wins by capturing enough lambs so that it cannot be blocked.
(game "Huli-Mane Ata" (players 2) (equipment {(board (scale 1.0 2.0 (wedge 4 3)) Vertex) (hand P1) (piece "Lamb" P1 (move Step (to (is Empty (to ))))) (piece "Tiger" P2 (or (move Step (to (is Empty (to )))) (move Hop (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to ))))))}) (rules (start {(place "Lamb1" (handSite P1) 5) (place "Tiger2" (sites Top))}) {(phase "Opening" P1 (play (move (from (handSite Mover)) (to (sites Empty)))) (nextPhase Mover (all Sites (sites Hand Mover) (= 0 (count Cell (site )))) "Movement")) (phase "Movement" (play (forEach Piece)))} (end {(if (no Moves P2) (result P1 Win)) (if (< (count Pieces P1) 4) (result P2 Win))})))

5x5 intersecting lines, with diagonals in each quadrant. Two triangles, the apexes of which intersect with the square at the midpoint of opposite sides. One line bisecting two sides of the triangle. One player plays as twenty people, stacked five each in the four points where the diagonals cross in each quadrant. The other player plays as two tigers, which are placed on the midpoints of the sides without triangles. Players alternate turns moving one piece to an adjacent spot along the lines of the board. The tiger may hop over one of the people to an empty point on the opposite side immediately adjacent to it along the lines of the board. When the tiger hops over one of the stacks, it captures only one of the people. The tigers win by capturing all the people, the people win by blocking the tigers from being able to move.
(game "Mao Naga Tiger Game" (players 2) (equipment {(board (merge {(square 5 Alternating) (shift 0.0 4.0 (rotate 180.0 (wedge 3))) (shift 0.0 -2.0 (wedge 3))}) Vertex) (piece "Human" P1 (move Step (to (is Empty (to ))))) (piece "Tiger" P2 (or (move Step (to (is Empty (to )))) (move Hop (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to ))))))}) (rules (start {(place Stack "Human1" (sites {"B4" "B6" "D4" "D6"}) 5) (place "Tiger2" (sites {"A5" "E5"}))}) (play (forEach Piece true)) (end {(if (no Moves P2) (result P1 Win)) (if (no Pieces P1) (result P2 Win))})))

Cross-shaped board, made of four 3x3 intersecting lines with diagonals. One player plays as the fox, which begins on the central space of the board. The other player plays as the lambs, who start in the spaces of one arm of the cross and the line of seven spots in front of that arm. Players alternate turns moving their pieces along the lines. The fox may capture one lamb by hopping over it in a straight line to an empty space on the opposite side of it. The fox wins by capturing seven lambs, the lambs win by blocking the fox so it cannot move.
(game "Refskak" (players 2) (equipment {(board (merge (shift 0.0 (/ (- 7.0 3.0) 2.0) (rectangle 3 7 Alternating)) (shift (/ (- 7.0 3.0) 2.0) 0.0 (rectangle 7 3 Alternating))) Vertex) (piece "Lamb" P1 (move Step (to (is Empty (to ))))) (piece "Fox" P2 (or (move Hop (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to )))) (move Step (to (is Empty (to ))))))}) (rules (start {(place "Fox2" (centrePoint )) (place "Lamb1" (union (expand (sites Bottom) 2) (sites {"A3" "B3" "F3" "G3"})))}) (play (forEach Piece)) (end {(if (no Moves Next) (result Next Loss)) (if (<= (count Pieces P1) 6) (result P1 Loss))})))

5x5 board, played on intersections, with lines forming a diamond shape connecting the midpoints of the edges of the board. One player plays with two tiger pieces, placed on the midpoints of two opposite sides. The other player plays with twenty goats, divided into four stacks of five, placed on the next adjacent spot to the tigers on the diamond. The goats move first. Goats may move one at a time to any adjacent vacant spot. The tiger may move in the same manner, but also may capture a piece by hopping over it. Multiple captures can be made on the same turn with subsequent hops, but only the top goat in a stack is captured when a tiger leaps over it. The goal of the goats is to surround the tigers so they cannot move; the goal of the tigers is to capture all the goats.
(game "Bagh Guti" (players 2) (equipment {(board (makeFaces (remove (square 5 Alternating) {{{0.0 0.0} {1.0 1.0}} {{1.0 1.0} {2.0 2.0}} {{2.0 2.0} {3.0 3.0}} {{3.0 3.0} {4.0 4.0}} {{4.0 0.0} {3.0 1.0}} {{3.0 1.0} {2.0 2.0}} {{2.0 2.0} {1.0 3.0}} {{1.0 3.0} {0.0 4.0}}})) Vertex) (piece "Goat" P1 (move Step (to (is Empty (to ))))) (piece "Tiger" P2 (or (move Step (to (is Empty (to )))) (move Hop (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to ))) (then (if (can Move (hop (from (last To)) (between (and (not (is In (between ) (sites ToClear))) (is Enemy (who (between ))))) (to (is Empty (to ))))) (moveAgain ))))))}) (rules (start {(place Stack "Goat1" (sites {"B2" "D2" "B4" "D4"}) {5 5 5 5}) (place "Tiger2" (sites {"C1" "C5"}))}) (play (if (is Prev Mover) (or (move Pass) (move Hop (from (last To)) (between (and (not (is In (between ) (sites ToClear))) (is Enemy (who (between )))) (apply (remove (between )))) (to (is Empty (to ))) (then (if (can Move (hop (from (last To)) (between (and (not (is In (between ) (sites ToClear))) (is Enemy (who (between ))))) (to (is Empty (to ))))) (moveAgain ))))) (forEach Piece true))) (end {(if (no Moves P2) (result P1 Win)) (if (no Pieces P1) (result P2 Win))})))

Played on cross-shaped board, made of five squares, each divided into four squares and with the diagonals of the larger squares drawn. One player plays with one larger piece, the Oke-mow, placed on the central point, and the other player with thirteen pieces situated on every point of one arm of the cross and along the line immediately perpendicular to that arm. Pieces move along the lines to an adjacent empty spot. The Oke-mow may jump over an adjacent piece to capture it. Multiple captures are allowed. The Oke-mow wins if it can capture all the opponent's pieces, the other player wins by blocking the Oke-mow from moving.
        
(game "Musinaykahwhanmetowaywin" (players 2) (equipment {(board (merge (shift 0.0 (/ (- 7.0 3.0) 2.0) (rectangle 3 7 Alternating)) (shift (/ (- 7.0 3.0) 2.0) 0.0 (rectangle 7 3 Alternating))) Vertex) (piece "Marker" P1 (or (move Hop (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to ))) (then (if (can Move (hop (from (last To)) (between (and (not (is In (between ) (sites ToClear))) (is Enemy (who (between ))))) (to (is Empty (to ))))) (moveAgain )))) (move Step (to (is Empty (to )))))) (piece "Disc" P2 (move Step (to (is Empty (to )))))}) (rules (start {(place "Disc2" (union (expand (sites Bottom)) (sites Row 2))) (place "Marker1" (centrePoint ))}) (play (if (is Prev Mover) (or (move Hop (from (last To)) (between (and (not (is In (between ) (sites ToClear))) (is Enemy (who (between )))) (apply (remove (between )))) (to (is Empty (to ))) (then (if (can Move (hop (from (last To)) (between (and (not (is In (between ) (sites ToClear))) (is Enemy (who (between ))))) (to (is Empty (to ))))) (moveAgain )))) (move Pass)) (forEach Piece))) (end {(if (no Moves P1) (result P2 Win)) (if (no Pieces P2) (result P1 Win))})))

The board consists of three instersecting lines, with diagonals drawn in the square formed. On opposite ends of the square, the central line is extended beyond the square and lines drawn from the adjacent corners to the end of this line, forming two triangles at opposite ends. One player takes the part of three white towers, the other the part of a single black army piece. First the army moves their piece, then the towers move one of their pieces, play alternating thereafter until the game is ended. A tower piece may move one step along a marked line in any forward or sideways direction. Tower pieces cannot move backwards, diagonally or otherwise, towards the end of the board from which they started. The army may move one step in any direction along a marked line. The army wins by passing the towers and reaching the end of the board from which they started. The towers win by trapping the army so that it cannot move in its turn.
(game "Jeu Militaire" (players 2) (equipment {(board (rotate 90.0 (merge {(rectangle 3 3 Alternating) (shift 1.5 0.5 (rotate -90.0 (wedge 2))) (shift -1.5 0.5 (rotate 90.0 (wedge 2)))})) Vertex) (piece "Pawn" P1 (move Step (to (is Empty (to ))))) (piece "Pawn" P2 N (move Step (directions {Forwards Rightward Leftward}) (to (is Empty (to ))))) (regions "Home" P2 (sites {"B1" "C2" "A2"})) (regions "Home" P1 (sites {"B2"}))}) (rules (start {(place "Pawn1" (sites P1)) (place "Pawn2" (sites P2))}) (play (forEach Piece)) (end {(if (no Moves P1) (result P2 Win)) (if (is In (where "Pawn" P1) (sites P2)) (result P1 Win))})))

8x8 Draughts board. One player plays with a single fox, the other with twelve hens, played on the white squares. The hens begin on the first three rows; the fox may begin on whatever spot the player chooses. Hens move one space forward diagonally, the fox moves one space diagonally forward or backward. The fox may capture a hen by hopping over it to an empty space diagonally on the other side of it. The hens win by blocking the fox from being able to move; the fox wins by capturing all the hens.
(game "Jeu de Renard" (players 2) (equipment {(board (square 8)) (piece "Fox" P1 (or (move Step Diagonal (to (is Empty (to )))) (move Hop Diagonal (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to )))))) (piece "Hen" P2 N (move Step (directions {FR FL}) (to (is Empty (to ))))) (hand P1)}) (rules (start {(place "Fox1" (handSite P1)) (place "Hen2" (difference (expand (sites Bottom) 2) (sites Phase 0)))}) {(phase "Placement" P1 (play (move (from (handSite Mover)) (to (difference (sites Empty) (sites Phase 0))))) (nextPhase "Movement")) (phase "Movement" (play (forEach Piece)))} (end {(if (no Moves P1) (result P2 Win)) (if (no Pieces P2) (result P1 Win))})))

One player has two leopards, the other has 24 cows. Play begins by each player taking turns to place their pieces, and then can move to one adjacent intersection. Leopards capture cows by hopping over them. Leopards win by capturing all the cows, cows win by blocking the leopards from moving.
(game "Diviyan Keliya" (players 2) (equipment {(board (merge {(shift 2.0 2.0 (square 5 Alternating)) (shift 2.0 0.0 (wedge 3)) (shift 5.0 3.0 (rotate 90.0 (wedge 3))) (shift 2.0 6.0 (rotate 180.0 (wedge 3))) (shift -1.0 3.0 (rotate 270.0 (wedge 3)))}) Vertex) (hand Each) (piece "Leopard" P1) (piece "Cow" P2 (move Step (to (is Empty (to )))))}) (rules (start {(place "Leopard1" "Hand1" 2) (place "Cow2" "Hand2" 24)}) {(phase "Placement" (play (move (from (handSite Mover)) (to (sites Empty)))) {(nextPhase P1 (all Sites (sites Hand P1) (= 0 (count Cell (site )))) "MovementP1") (nextPhase P2 (all Sites (sites Hand P2) (= 0 (count Cell (site )))) "MovementP2")}) (phase "MovementP1" P1 (play (forEach Piece "Leopard" (or (move Hop (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to )))) (move Step (to (is Empty (to )))))))) (phase "MovementP2" P2 (play (forEach Piece)))} (end (if (no Moves Next) (result Next Loss)))))

5x5 board, played on intersections, with diagonals for each quadrant of the board. One player plays with two tiger pieces, placed on the midpoints of two opposite sides. The other player plays with twenty goats, divided into four stacks of five, placed in the center of each quadrant. The goats move first. Goats may move one at a time to any adjacent vacant spot. More than one goat can be placed on the goats' starting spots, but not elsewhere. The tiger moves in the same manner, but also may capture a piece by hopping over it. Multiple captures can be made on the same turn with subsequent hops, but only the top goat in a stack is captured when a tiger leaps over it. The goal of the goats is to surround the tigers so they cannot move; when one tiger is blocked the other must be blocked on the next turn. The goal of the tigers is to capture all the goats.
        
(game "Bagh Batti" (players 2) (equipment {(board (rectangle 5 5 Alternating) Vertex) (piece "Goat" P1 (move Step (to (is Empty (to ))))) (piece "Tiger" P2 (or (move Step (to (is Empty (to )))) (move Hop (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to ))) (then (if (can Move (hop (from (last To)) (between (and (not (is In (between ) (sites ToClear))) (is Enemy (who (between ))))) (to (is Empty (to ))))) (moveAgain ))))))}) (rules (start {(place Stack "Goat1" (sites {"B2" "D2" "B4" "D4"}) {5 5 5 5}) (place "Tiger2" (sites {"C1" "C5"}))}) (play (if (is Prev Mover) (or (move Pass) (move Hop (from (last To)) (between (and (not (is In (between ) (sites ToClear))) (is Enemy (who (between )))) (apply (remove (between )))) (to (is Empty (to ))) (then (if (can Move (hop (from (last To)) (between (and (not (is In (between ) (sites ToClear))) (is Enemy (who (between ))))) (to (is Empty (to ))))) (moveAgain ))))) (forEach Piece true))) (end {(if (no Moves P2) (result P1 Win)) (if (no Pieces P1) (result P2 Win))})))

Played on the Fox and Geese board, but the top arm of the cross is surrounded by a double line, indicating it is a fortress, in which one player puts two officers. The opponent has 24 pieces, which occupy the points outside the fortress. Officers may capture one of the opponent's pieces by hopping over it to an empty space immediately on the opposite side of the opponent's piece. If the officer does not capture when it is possible, it is huffed. The soldiers win by occupying all of the points in the fortress or by blocking the officers from being able to move; the officers win by capturing enough soldiers to prevent this.
(game "Asalto" (players 2) (equipment {(board (merge (shift 0.0 (/ (- 7.0 3.0) 2.0) (rectangle 3 7 Alternating)) (shift (/ (- 7.0 3.0) 2.0) 0.0 (rectangle 7 3 Alternating))) Vertex) (piece "Marker" P1 (or (move Hop (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to )))) (move Step (to (is Empty (to )))))) (piece "Marker" P2 (move Step (to (is Empty (to )))))}) (rules (start {(place "Marker1" (sites {"C6" "E6"})) (place "Marker2" (union (expand (union (sites Right) (sites Left))) (expand (sites Bottom) 3)))}) (play (if (is Mover P1) (do (forEach Site (sites From (forEach Piece "Marker" (move Hop (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to )))))) (remember Value "From" (site ))) (forEach Piece) (then (and (if (!= 0 (count Sites (sites (values Remembered "From")))) (if (= 1 (count Steps (last From) (last To))) (and (forEach Site (sites (values Remembered "From")) (remove (site ))) (if (is In (last From) (sites (values Remembered "From"))) (remove (last To)))))) (forget Value All)))) (forEach Piece))) (end {(if (no Pieces P2) (result P1 Win)) (if (or (or (no Pieces P1) (no Moves P1)) (all Sites (expand (sites Top) 2) (= (who (site )) P2))) (result P2 Win))})))

5x5 intersecting lines, with diagonals in each 3x3 quadrant of the board. On one end, a square with diagonals, with one corner as the midpoint of one of the sides of the main board. On the opposite side, a triangle, with a line bisecting the base and another bisecting this line and intersecting with the other two sides of the triangle. The triangle's apex is the midpoint of the opposite side as the square. One player plays with two larger pieces, the Bulls, which start at the points where the triangle and square intersect with the main board. The other player plays with 24 smaller pieces. Eight of these begin on the points surrounding the central point of the board, the rest are in the hand. Players alternate turns. The Bulls move to an empty adjacent spot, the other player places one of the pieces from their hand onto the board. When all of these pieces are on the board, the player may move one of the pieces to an empty adjacent spot. The Bull may captured one of the smaller pieces my hopping over it onto an empty space. The goal of the Bulls is to capture all of the smaller pieces. The goal of the player with the smaller pieces is to corner the bulls so they cannot move. Doing so in the triangle and the square is a better win than cornering the Bulls on the main board.
(game "Bouge Shodra" (players 2) (equipment {(board (merge (merge (shift 0.0 2.0 (square 5 Alternating)) (wedge 3)) (rotate 45.0 (shift 1.5 6.2 (square 2 Solid)))) Vertex) (hand P1) (piece "Marker" P1 (move Step (to (is Empty (to ))))) (piece "Bull" P2 (or (move Step (to (is Empty (to )))) (move Hop (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to ))))))}) (rules (start {(place "Bull2" (sites {"C3" "C7"})) (place "Marker1" (difference (expand (sites Centre)) (centrePoint ))) (place "Marker1" (handSite P1) 16)}) {(phase "Placement" P1 (play (move (from (handSite P1)) (to (sites Empty)))) (nextPhase Mover (all Sites (sites Hand P1) (= 0 (count Cell (site )))) "Movement")) (phase "Movement" (play (forEach Piece)))} (end {(if (no Moves P2) (result P1 Win)) (if (no Pieces P1) (result P2 Win))})))

5x5 intersecting lines, with diagonals drawn in the four quadrants of the board. Two triangles, their apices intersecting the main board at opposite midpoints. The bast of the triangle is bisected by a line drawn from the apex, and this line is bisected and intersects with the other two sides of the triangle. One player plays as two tigers, which can be placed anywhere on the board, and the other player plays as 32 goats, which begin on the four central points of the quadrants of the square board, eight per stack. Players alternate turns moving a piece to an empty adjacent spot along the lines. The goats move one at a time from their stacks, and cannot be restacked once they have been moved. The tiger may capture a goat by hopping over it to an empty spot immediately on the opposite side of an adjacent goat. Multiple captures in one turn are allowed, but a tiger cannot hop over a stack of goats and hop over it again in the opposite direction. When tigers hop over a stack of goats, only one goat is captured. The goats win by blocking the tigers from being able to move; the tigers win by capturing all the goats.
(game "Bagh Bandi" (players 2) (equipment {(board (merge {(square 5 Alternating) (shift 0.0 4.0 (rotate 180.0 (wedge 3))) (shift 0.0 -2.0 (wedge 3))}) Vertex) (piece "Goat" P2 (move Step (to (is Empty (to ))))) (piece "Tiger" P1 (or (move Step (to (is Empty (to )))) (move Hop (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to ))) (then (if (can Move (move Hop (from (last To)) (difference Orthogonal OppositeDirection) (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to ))))) (moveAgain )))))) (regions "CentralSites" (sites {6 8 16 18})) (hand P1)}) (rules (start {(place Stack "Tiger1" (handSite P1) 2) (place Stack "Goat2" 6 8) (place Stack "Goat2" 8 8) (place Stack "Goat2" 16 8) (place Stack "Goat2" 18 8)}) {(phase "Placement" P1 (play (move (from (handSite P1)) (to (sites Empty)) (then (if (not (all Sites (sites Hand Mover) (= 0 (count Cell (site ))))) (moveAgain ))))) (nextPhase Mover (all Sites (sites Hand Mover) (= 0 (count Cell (site )))) "Movement")) (phase "Movement" (play (if (is Prev Mover) (or (move Hop (from (last To)) (difference Orthogonal OppositeDirection) (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to ))) (then (if (can Move (move Hop (from (last To)) (difference Orthogonal OppositeDirection) (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to ))))) (moveAgain )))) (move Pass)) (forEach Piece true))))} (end {(if (no Moves P1) (result P2 Win)) (if (no Pieces P2) (result P1 Win))})))

An isosceles triangle, with the height of the triangle and two lines, which bisect the sides of the triangle, but intersect the height at the same point, roughly central, such that they are at an angle but do not bisect it. One player plays as the tiger, which begins at the apex of the triangle, the other as four goats, which begin on the central point. The goats play first, removing one of the pieces from the stack to an adjacent empty spot. The tiger moves along the lines to an empty adjacent spot. The goats also move in this way. Goats may only be stacked on the central point. The tiger may capture a goat by jumping over it, and a jump from one side of the triangle to the opposite side, over the central point, is allowed. The goats win by blocking the tiger from being able to move, the tiger wins by capturing one goat.
(game "Sher Bakr" (players 2) (equipment {(board (rotate 180.0 (add (remove (scale 1.0 2.0 (wedge 3)) {2}) {{2.0 1.333}} {{4 6} {6 0} {1 6} {6 2}})) Vertex) (hand Each) (piece "Goat" P1 (move Step (to (or (is Empty (to )) (and (= (to ) (centrePoint )) (is Friend (who (to )))))))) (piece "Tiger" P2 (or {(move Step (to (is Empty (to )))) (move Hop (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to )))) (if (and {(= (from ) 2) (is Enemy (who (centrePoint ))) (is Empty 1)}) (move (from 2) (to 1) (then (remove (centrePoint ))))) (if (and {(= (from ) 1) (is Enemy (who (centrePoint ))) (is Empty 2)}) (move (from 1) (to 2) (then (remove (centrePoint )))))}))}) (rules (start {(place Stack "Goat1" (centrePoint ) 4) (place Stack "Tiger2" 0)}) (play (forEach Piece true)) (end {(if (no Moves P2) (result P1 Win)) (if (= 3 (count Pieces P1)) (result P2 Win))})))

Square board, divided into eight equal triangles, with the central horizonal line extended past the square on either side and lines connecting the end point to the two nearby cornes of the square One player plays as the hare, the other player as three hounds. Players take turns placing one of their pieces on the board. When a player has placed all their pieces, they move to an adjacent empty spot. When the hounds block the hare from being able to move, the hounds win.
        
(game "Haretavl" (players 2) (equipment {(board (merge {(rectangle 3 3 Alternating) (shift 1.5 0.5 (rotate -90.0 (wedge 2))) (shift -1.5 0.5 (rotate 90.0 (wedge 2)))}) Vertex) (hand Each) (piece "Dog" P1 (move Step (to (is Empty (to ))))) (piece "Hare" P2 (move Step (to (is Empty (to )))))}) (rules (start {(place "Dog1" (handSite P1) 3) (place "Hare2" (handSite P2))}) {(phase "Placement" (play (move (from (handSite Mover)) (to (sites Empty)))) (nextPhase Mover (all Sites (sites Hand Mover) (= 0 (count Cell (site )))) "Movement")) (phase "Movement" (play (forEach Piece)))} (end {(if (no Moves P2) (result P1 Win))})))

5x5 board, played on intersections of the lines, with diagonals for each quadrant of the board. One player plays as four tigers, the other as twenty goats. The tigers begin, two on the top two corners of the board, and two in the centers of the two bottom quadrants. Four of the goats are placed on any available points. The tigers move first, to an empty adjacent spot along the lines on the board. The player playing as the goats places one of the remaining goats on any available point. The goats cannot move until all of the goats are placed. Once they are all placed, the goats move as the tigers do. The tigers alone may capture a goat by hopping over it to an empty spot immediately opposite a goat. The tigers win by capturing all the goats; the goats win by blocking the tigers from being able to move.
(game "Orissa Tiger Game (Four Tigers)" (players 2) (equipment {(board (rectangle 5 5 Alternating) Vertex) (piece "Goat" P1 (move Step (to (is Empty (to ))))) (piece "Tiger" P2 (or (move Step (to (is Empty (to )))) (move Hop (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to )))))) (hand P1)}) (rules (start {(place "Goat1" (handSite P1) 20) (place "Tiger2" (sites {"A5" "E5" "B2" "D2"}))}) {(phase "Placement" P1 (play (move (from (handSite P1)) (to (sites Empty)) (then (if (< 16 (count Cell (handSite P1))) (moveAgain ))))) (nextPhase Mover (all Sites (sites Hand Mover) (= 0 (count Cell (site )))) "Movement")) (phase "Movement" (play (forEach Piece)))} (end {(if (no Moves P2) (result P1 Win)) (if (no Pieces P1) (result P2 Win))})))

A triangle, with a point in the center and lines connecting it to the apex and the midpoints of the two sides which meet at the apex. One person plays as the tiger, which begins on the apex. The other person plays as three people. Players alternate turns, with the person playing as the people first placing a person on the board, and then the tiger moving to an empty adjacent spot along the lines of the board. When all of the people have been placed, the people move on the board in the same fashion. The tiger may capture one of the people by jumping over it to an empty adjacent spot immediately on the opposite side of one of the people along the lines of the board. The tiger wins when it captures one person, the people win when they can block the tiger from being able to move.
(game "Mysore Tiger Game" (players 2) (equipment {(board (add (remove (scale 1.0 2.0 (wedge 3)) {5}) {{4 5}}) Vertex) (hand P1) (piece "Human" P1 (move Step (to (is Empty (to ))))) (piece "Tiger" P2 (or (move Step (to (is Empty (to )))) (move Hop (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to ))))))}) (rules (start {(place "Human1" (handSite P1) 3) (place "Tiger2" (sites Top))}) {(phase "Opening" P1 (play (move (from (handSite Mover)) (to (sites Empty)))) (nextPhase Mover (all Sites (sites Hand Mover) (= 0 (count Cell (site )))) "Movement")) (phase "Movement" (play (forEach Piece)))} (end {(if (no Moves P2) (result P1 Win)) (if (< (count Pieces P1) 3) (result P2 Win))})))

One player plays as the tigers (five in number), the other as the sheep (fifteen in number). They take turns placing the pieces on the intersections of the lines. When all of the player's pieces are on the board, the piece may move to any adjacent intersection along the connecting lines. The tiger hops over a sheep to capture it. The goal of the tiger is to capture all of the sheep; the sheep try to prevent all of the tigers from moving.
(game "Merimueng-rimueng-do" (players 2) (equipment {(board (scale 1.4 1.0 (remove (scale 1.0 2.0 (wedge 5 6)) {{0 1} {0 6}} {24 19})) Vertex) (hand Each) (piece "Tiger" P1 (or {(move Hop (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to )))) (move Step (to (is Empty (to )))) (move Hop (between (exact 3) (and (!= (row (between )) (row (from ))) (is Enemy (who (between )))) (apply (remove (between )))) (to (is Empty (to )))) (move Hop (between (exact 4) (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to ))))})) (piece "Sheep" P2 (move Step (to (is Empty (to )))))}) (rules (start {(place "Tiger1" (handSite P1) 5) (place "Sheep2" (handSite P2) 15)}) {(phase "Placement" (play (move (from (handSite Mover)) (to (sites Empty)))) (nextPhase Mover (all Sites (sites Hand Mover) (= 0 (count Cell (site )))) "Movement")) (phase "Movement" (play (forEach Piece)) (end {(if (no Moves Next) (result Next Loss)) (if (no Pieces P2) (result P2 Win))}))}))

5x5 intersecting lines, with diagonals in each quadrant. Two triangles, the apexes of which intersect with the square at the midpoint of opposite sides. One line bisecting the base of the triangle, and another bisecting this line. One player plays as two tigers, the other as 23 people. One of the tigers begins on any spot on the board. Eight of the people begin on the spots surrounding the central point of the board. The tiger player, on their first turn, removes one of the people and then places the second tiger anywhere on the board. The people then play, placing one of the remaining people on an empty spot on the board. On the tiger's turn, the player may move one of the tigers to an empty adjacent spot along the lines of the board. The tiger may also capture a person by hopping over it to an empty adjacent spot immediately on the opposite side of it along the lines of the board. When all of the people are placed, they move to an empty adjacent spot along the lines of the board on their turn. The tigers win by capturing all the people; the people win by blocking both tigers from being able to move.
(game "Rimau-Rimau (Two Tigers)" (players 2) (equipment {(board (merge {(square 5 Alternating) (shift 0.0 4.0 (rotate 180.0 (wedge 3))) (shift 0.0 -2.0 (wedge 3))}) Vertex) (hand Each) (piece "Tiger" P1 (or {(move Step (to (is Empty (to )))) (move Hop (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to ))))})) (piece "human" P2 (move Step (to (is Empty (to )))))}) (rules (start {(place "human2" (difference (expand (sites Centre)) (centrePoint ))) (place "human2" (handSite P2) 16) (place "Tiger1" (handSite P1) 2)}) {(phase "PlacementFirstTiger" P1 (play (move (from (handSite P1)) (to (sites Empty)) (then (moveAgain )))) (nextPhase Mover "RemoveHuman")) (phase "RemoveHuman" P1 (play (move Remove (intersection (sites Board) (sites Occupied Next)) (then (moveAgain )))) (nextPhase Mover "PlacementSecondTiger")) (phase "PlacementSecondTiger" P1 (play (move (from (handSite P1)) (to (sites Empty)))) (nextPhase Mover "Movement")) (phase "PlacementHuman" P2 (play (move (from (handSite Mover)) (to (sites Empty)))) (nextPhase (all Sites (sites Hand P2) (= 0 (count Cell (site )))) "Movement")) (phase "Movement" (play (forEach Piece)) (end {(if (no Moves P1) (result P2 Win)) (if (no Pieces P2) (result P1 Win))}))}))

Played with three \"leopards\" and fifteen \"dogs.\" The pieces are placed on the intersections of the lines, and move along the lines to the next intersection. The game starts with the leopards on the board, but in the beginning the player controlling the dogs places one dog on an intersection until they are all on the board. After this, the dogs move in the same manner as the leopards. The leopard can hop over a dog as in draughts, capturing it. The leopard wins the game if it captures more than half of the dogs, the dogs win if they block the leopard from being able to move.
(game "Demala Diviyan Keliya" (players 2) (equipment {(board (add (remove (merge (shift 0.0 2.0 (scale 8.0 2.0 (rectangle 3 2))) (scale 1.0 2.0 (wedge 5 4))) {{0 1} {2 3} {4 5}}) {{0 15} {18 1} {2 11} {14 3} {4 7} {10 5}}) Vertex) (hand P2) (piece "Tiger" P1 (or (move Hop (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to )))) (move Step (to (is Empty (to )))))) (piece "Dog" P2 (move Step (to (is Empty (to )))))}) (rules (start {(place "Tiger1" {"H5" "G4" "I4"}) (place "Dog2" (handSite P2) 15)}) {(phase "Placement" P2 (play (move (from (handSite P2)) (to (sites Empty)))) (nextPhase (all Sites (sites Hand P2) (= 0 (count Cell (site )))) "Movement")) (phase "Movement" (play (forEach Piece)) (end {(if (no Moves Next) (result Next Loss)) (if (<= (count Pieces P2) 7) (result P2 Loss))}))}))

Played on a 5x5 board. There are 3 'Musketeer' pieces and 22 'Enemy' pieces. Musketeers can only move by capturing enemies on any adjacent space. Enemies can only move to empty adjacent spaces. Enemies win if all three musketeers are ever on the same line or column. Musketeers win as soon as they run out of legal moves.
(game "Three Musketeers" (players 2) (equipment {(board (square 5)) (piece "Musketeer" P1 (move Step Orthogonal (to (is Enemy (who (to ))) (apply (remove (to )))))) (piece "Enemy" P2 (move Step Orthogonal (to (is Empty (to )))))}) (rules (start {(place "Musketeer1" {"A1" "C3" "E5"}) (place "Enemy2" (difference (sites Board) (sites {"A1" "C3" "E5"})))}) (play (forEach Piece)) (end {(if (no Moves P1) (result P1 Win)) (if (and (is Mover P1) (is Line 3 Orthogonal false)) (result P2 Win))})))

5x5 intersecting lines, with diagonals drawn in each quadrant. One player plays as four tigers, places on the four corners of the board. The other player plays as twenty goats, which are placed on the remaining points, leaving the central point open. Players alternate turns moving a piece to an empty adjacent point along the lines. The tigers may capture a goat by hopping over it to an empty adjacent spot immediately on the opposite side of the goat along the lines. The tigers win when they capture all of the goats; the goats win by blocking the tigers from being able to move. 
(game "Kulaochal" (players 2) (equipment {(board (rectangle 5 5 Alternating) Vertex) (piece "Tiger" P1 (or (move Step (to (is Empty (to )))) (move Hop (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to )))))) (piece "Goat" P2 (move Step (to (is Empty (to )))))}) (rules (start {(place "Tiger1" (sites Corners)) (place "Goat2" (difference (sites Board) (union (sites Corners) (sites Centre))))}) (play (forEach Piece)) (end {(if (no Moves P1) (result P2 Win)) (if (no Pieces P2) (result P1 Win))})))

5x5 board. Markings in the central square, each corner square, and the central square of each side. Black plays with thirteen pieces, white plays with ten. Black places the first piece on the central square, then players alternate turns placing a piece on their own half of the board. When all of the pieces are placed, players alternate turns moving pieces on space orthogonally. A piece is captured when it is surrounded on two opposite sides by opponent's pieces. Black wins if it can block white from being able to move. White wins if it is impossible for black to block them.
(game "Gala" (players 2) (equipment {(board (square 5)) (hand Each) (regions P1 (expand (sites Bottom) 2)) (regions P2 (expand (sites Top) 2)) (regions "MarkedCells" (union {(sites Centre) (sites Corners) (intersection (sites Outer) (sites Row (row (centrePoint )))) (intersection (sites Outer) (sites Column (column (centrePoint ))))})) (piece "Marker" Each (move Step Orthogonal (to (is Empty (to )))))}) (rules (start {(place "Marker1" (handSite P1) 10) (place "Marker2" (handSite P2) 12) (place "Marker2" (centrePoint ))}) {(phase "Placement" (play (move (from (handSite Mover)) (to (intersection (sites Empty) (sites Mover))))) (nextPhase (and (all Sites (sites Hand P1) (= 0 (count Cell (site )))) (all Sites (sites Hand P2) (= 0 (count Cell (site ))))) "Movement")) (phase "Movement" (play (forEach Piece (then (custodial (from (last To)) (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Friend (who (to )))))))) (end {(if (no Moves P1) (result P2 Win)) (if (< (count Pieces P2) 2) (result P1 Win))}))}))

Three diamonds in a row, the central one connecting to the others one opposite corners. A horizontal line connects the top corners of the diamonds, another horizontal line connects the bottom corners of the diamonds, and a longer horizontal line connects all the middle corners. The outer two diamonds have vertical lines connecting their top and bottom corners. One player plays as three hounds, which begin on the outer corner and top and bottom corner of one of the end diamonds. The other player plays as one hare, which begins on the central point of the same diamond. Players alternate turns moving a piece to an empty adjacent spot along the lines of the board. The Hare moves first. The hounds win by blocking the hare from being able to move.
(game "Hund efter Hare (Vendsyssel)" (players 2) (equipment {(board (add (merge {(add (remove (rectangle 1 7) {3}) {{2 3}}) (scale 2.0 (shift 0.5 -0.5 (rectangle 1 3))) (scale 2.0 (shift 0.5 0.5 (rectangle 1 3)))}) {{0 9} {0 6} {11 5} {5 8} {1 6} {1 9} {4 11} {4 8} {9 2} {2 7} {6 2} {2 10} {10 3} {3 8} {7 3} {3 11}}) Vertex) (piece "Hare" P1 (move Step (to (is Empty (to ))))) (piece "Dog" P2 (move Step (to (is Empty (to )))))}) (rules (start {(place "Hare1" "B2") (place "Dog2" (sites {"A2" "B1" "B3"}))}) (play (forEach Piece)) (end {(if (no Moves P1) (result P2 Win))})))

5x5 grid, with diagonals in each quadrant. A triangle, with the apex connecting to the midpoint of one side of the grid. A line is drawn connecting the apex of the triangle to the midpoint of its base, and another triangle is drawn within the triangle connecting the midpoints of the larger triangle. One player plays as twelve dogs, arranged on the lower two rows of points and the two outer points on the central line; the other plays as one jaguar, placed on the apex of the smaller triangle. The jaguar moves first. Pieces move to an empty adjacent space along the lines of the board. The jaguar may hop over an adjacent dog to an empty space immediately on the opposite side of it, capturing the dog. Dogs cannot capture. The dogs win by blocking the jaguar so it cannot move; the jaguar wins when only six dogs remain.
        
(game "La Yagua" (players 2) (equipment {(board (add (rotate 180.0 (merge (shift 0.0 2.0 (square 5 Alternating)) (wedge 3))) {{27 29} {29 25}}) Vertex) (piece "Jaguar" P1 (or (move Hop (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to )))) (move Step (to (is Empty (to )))))) (piece "Dog" P2 (move Step (to (is Empty (to )))))}) (rules (start {(place "Dog2" (union (expand (sites Bottom) 1) (sites {"A3" "E3"}))) (place "Jaguar1" "C7")}) (play (forEach Piece)) (end {(if (no Moves Next) (result Next Loss)) (if (<= (count Pieces P2) 6) (result P2 Loss))})))

Twenty squares arranged in a cross shape, with diagonals in each square. The pieces are played on the intersections of the lines. Two foxes are placed on the outer corners of one of the arms of the cross, and twenty geese are placed on the points in the opposite arm, as well as the first two long lines in the perpendicular arms. Players alternate turns moving a piece to an empty spot along the lines on the board. The geese cannot move backward. The foxes may hop over a goose to an empty adjacent spot immediately on the opposite side of it along the lines on the board. The geese win by blocking the foxes from being able to move. The foxes win by capturing all the geese.
(game "Gasetavl" (players 2) (equipment {(board (merge (shift 0.0 (/ (- 7.0 3.0) 2.0) (rectangle 3 7 Solid)) (shift (/ (- 7.0 3.0) 2.0) 0.0 (rectangle 7 3 Solid))) Vertex) (piece "Fox" P1 (or (move Hop (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to )))) (move Step (to (is Empty (to )))))) (piece "Geese" P2 N (move Step (directions {Rightward Forwards Leftward}) (to (is Empty (to )))))}) (rules (start {(place "Fox1" (sites {"G9" "I7"})) (place "Geese2" (sites {"A3" "B2" "C1" "B4" "C3" "D2" "A7" "B6" "C5" "D4" "E3" "F2" "G1" "B8" "C7" "D6" "E5" "F4" "G3" "H2"}))}) (play (forEach Piece)) (end {(if (no Moves P1) (result P2 Win)) (if (no Pieces P2) (result P1 Win))})))

A triangle, with a line drawn from the apex to the base. A rectangle intersects with the triangle, and has a line connecting the midpoints of the short sides. One player plays as the tiger(s), one to four in number. The other player plays as five to 23 goats (or dogs, or lambs). The tiger begins on the apex of the triangle, and any other tigers on the spots adjacent to the apex. The tiger player moves by moving a piece to an empty adjacent spot along the lines of the board. The goat player begins the game by placing a goat on an empty point on the board, and then the tiger player moves. When all of the goats are placed, they move like the tiger. The tiger may capture a goat by hopping over it to an empty spot on the opposite adjacent side of the goat along the lines of the board. The goats win by blocking the tiger(s) from being able to move; the tiger(s) win by capturing enough goats to prevent them from blocking it/them.
(game "Pulijudamu" (players 2) (equipment {(board (add (remove (merge (scale 1.0 2.0 (wedge 5 3)) (shift 0.0 2.0 (scale 8.0 2.0 (rectangle 3 2)))) {{17 18} {15 16} {13 14}}) {{13 7} {15 4} {17 1} {3 18} {6 16} {9 14}}) Vertex) (hand Each) (piece "Goat" P2 (move Step (to (is Empty (to ))))) (piece "Tiger" P1 (or (move Step (to (is Empty (to )))) (move Hop (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to ))))))}) (rules (start {(place "Goat2" (handSite P2) 5) (place "Tiger1" (handSite P1) 1)}) {(phase "Opening" P1 (play (move (from (handSite Mover)) (to (if (= 0 (count Sites (intersection (sites Top) (sites Occupied Mover)))) (sites Top) (intersection (sites Empty) (sites {1 2 3})))) (then (if (not (all Sites (sites Hand Mover) (= 0 (count Cell (site ))))) (moveAgain ))))) (nextPhase Mover (all Sites (sites Hand Mover) (= 0 (count Cell (site )))) "Movement")) (phase "Opening" P2 (play (move (from (handSite Mover)) (to (sites Empty)))) (nextPhase Mover (all Sites (sites Hand Mover) (= 0 (count Cell (site )))) "Movement")) (phase "Movement" (play (forEach Piece)))} (end {(if (no Moves P1) (result P2 Win)) (if (no Pieces P2) (result P1 Win))})))

5x5 board, played on intersections of the lines, with diagonals for each quadrant of the board. One player plays with a tiger piece, placed anywhere on the board. The other player plays with 21 goats, placed on the central point of the board. The goats move first. Goats may move one at a time to any adjacent vacant spot along the lines of the board. The tiger moves in the same manner, but also may capture a piece by hopping over it to an empty space immediate on the opposite side of a goat. The tiger may hop the stack of goats, but may only capture one. The goal of the goats is to surround the tiger so it cannot move. The goal of the tiger is to capture all the goats.
        
(game "Bagha Guti" (players 2) (equipment {(board (rectangle 5 5 Alternating) Vertex) (piece "Goat" P2 (move Step (to (is Empty (to ))))) (piece "Tiger" P1 (or (move Step (to (is Empty (to )))) (move Hop (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to )))))) (hand P1)}) (rules (start {(place Stack "Goat2" 12 21) (place "Tiger1" (handSite P1))}) {(phase "Opening" P1 (play (move (from (handSite Mover)) (to (sites Empty)))) (nextPhase "Movement")) (phase "Movement" (play (forEach Piece true)))} (end {(if (no Moves P1) (result P2 Win)) (if (no Pieces P2) (result P1 Win))})))

The game is played on a cruciform board adapted from an Alquerque board. One player plays as the fox, the other as the geese. The geese begin in a set starting position; the person playing as the fox may choose any available spot to place the fox as their first move. Players move as in Alquerque, but only the fox can hop to capture. The goal of the geese is to block the fox from being able to move; the fox's goal is to capture all of the geese.
(game "Fox and Geese" (players 2) (equipment {(board (merge (shift 0.0 (/ (- 7.0 3.0) 2.0) (rectangle 3 7 Alternating)) (shift (/ (- 7.0 3.0) 2.0) 0.0 (rectangle 7 3 Alternating))) Vertex) (hand P1) (piece "Fox" P1 (or (move Hop (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to )))) (move Step (to (is Empty (to )))))) (piece "Goose" P2 (move Step (to (is Empty (to )))))}) (rules (start {(place "Goose2" (union (expand (sites Bottom)) (sites Row 2))) (place "Fox1" (handSite P1))}) {(phase "Placement" P1 (play (move (from (handSite P1)) (to (sites Empty)))) (nextPhase (all Sites (sites Hand P1) (= 0 (count Cell (site )))) "Movement")) (phase "Movement" (play (forEach Piece)))} (end {(if (no Moves Next) (result Next Loss)) (if (no Pieces P2) (result P2 Win))})))

5x5 intersecting lines, with the diagonals of every 2x2 square formed. On one side, a triangle, with the apex intesecting with the midpoint of that side. There is a line from the apex to the midpoint of the triangle's base, and another interior triangle, connecting the base of the larger triangle with the midpoints of the sides of the larger triangle. One player plays as the Taisho (\"general\
(game "Juroku Musashi" (players 2) (equipment {(board (add (merge (scale 2.0 (square 5 Alternating)) (shift 2.0 -2.0 (wedge 3))) {{3.0 -2.0} {5.0 -2.0}} {{25 31} {25 29} {27 29} {27 32}}) Vertex) (piece "Marker" P1 (move Step (to (is Empty (to ))))) (piece "Marker" P2 (or (move Hop (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to )))) (move Step (to (is Empty (to ))))))}) (rules (start {(place "Marker1" (difference (sites Outer) (expand (sites Bottom)))) (place "Marker2" (ahead (centrePoint ) N))}) (play (forEach Piece)) (end {(if (no Moves P2) (result P1 Win)) (if (no Pieces P1) (result P2 Win))})))

3x3 intersecting lines, with triangles extending on opposite ends of the large square and the central line extending to the apices. One player plays as the notched stick, called the hare, and the other as three sharp sticks, known as the hounds. Players alternate turns placing a piece on the board. When a player has placed all of their pieces on the board, they move one of their pieces to an empty adjacent spot along the lines. When the hounds block the hare from being able to move, the hounds win.
(game "Janes Soppi" (players 2) (equipment {(board (merge {(rectangle 3 3) (shift 1.5 0.5 (rotate -90.0 (wedge 2))) (shift -1.5 0.5 (rotate 90.0 (wedge 2)))}) Vertex) (hand Each) (piece "Hound" P1 (move Step (to (is Empty (to ))))) (piece "Hare" P2 (move Step (to (is Empty (to )))))}) (rules (start {(place "Hound1" (handSite P1) 3) (place "Hare2" (handSite P2))}) {(phase "Placement" (play (move (from (handSite Mover)) (to (sites Empty)))) (nextPhase Mover (all Sites (sites Hand Mover) (= 0 (count Cell (site )))) "Movement")) (phase "Movement" (play (forEach Piece)))} (end {(if (no Moves P2) (result P1 Win))})))

5x5 intersecting lines, forming a grid Diagonals in each quadrant. A triangular appendage, the apex being the midpoint of one of the sides of the grid. A line from the apex to the midpoint of the base, and a line bisecting this line and intersecting with the midpoints of the two sides of the triangle. There are fourteen \"dog\" pieces and one \"jaguar\" piece. The jaguar attempts to capture all of the dogs by hopping over them. The dogs attempt to surround the jaguar and block it from moving. Pieces move from the points where lines intersect to adjacent points along the lines on the board.
(game "Adugo" (players 2) (equipment {(board (merge (shift 0.0 2.0 (square 5 Alternating)) (wedge 3)) Vertex) (piece "Jaguar" P1 (or (move Hop (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to )))) (move Step (to (is Empty (to )))))) (piece "Dog" P2 (move Step (to (is Empty (to )))))}) (rules (start {(place "Dog2" (difference (expand (sites Top) 2) (sites {"C5"}))) (place "Jaguar1" "C5")}) (play (forEach Piece)) (end {(if (no Moves Next) (result Next Loss)) (if (<= (count Pieces P2) 0) (result P2 Loss))})))

5x5 intersecting lines, with diagonals in each quadrant. At the midpoint of each side, the apex of a triangle. A line is drawn from the apex to the base of each triangle, and another line bisecting this one and the two opposite sides of the triangle. One player plays as two tigers, the other as 25 people. One tiger begins on the central point, and the other may be placed anywhere on the board. Players alternate turns, with the person playing as the people first placing a person on the board, and then one of the tigers moving to an empty adjacent spot along the lines of the board. When all of the people have been placed, the people move on the board in the same fashion. The tigers may capture one of the people by jumping over it to an empty adjacent spot immediately on the opposite side of one of the people along the lines of the board. The tigers win when they capture enough people so that the people cannot block the tiger, the people win when they can block the tiger from being able to move.
        
(game "Mysore Tiger Game (Two Tigers)" (players 2) (equipment {(board (merge {(shift 2.0 2.0 (square 5 Alternating)) (shift 2.0 0.0 (wedge 3)) (shift 5.0 3.0 (rotate 90.0 (wedge 3))) (shift 2.0 6.0 (rotate 180.0 (wedge 3))) (shift -1.0 3.0 (rotate 270.0 (wedge 3)))}) Vertex) (hand Each) (piece "Human" P2 (move Step (to (is Empty (to ))))) (piece "Tiger" P1 (or (move Step (to (is Empty (to )))) (move Hop (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to ))))))}) (rules (start {(place "Human2" (handSite P2) 25) (place "Tiger1" (sites Centre)) (place "Tiger1" (handSite P1))}) {(phase "Opening" (play (move (from (handSite Mover)) (to (sites Empty)))) (nextPhase Mover (all Sites (sites Hand Mover) (= 0 (count Cell (site )))) "Movement")) (phase "Movement" (play (forEach Piece)))} (end {(if (no Moves P1) (result P2 Win)) (if (no Pieces P2) (result P1 Win))})))

5x5 board, played on intersections, with diagonals for each quadrant of the board. One player plays with two tiger pieces, placed on the midpoints of two opposite sides. The other player plays with nineteen goats, divided into three stacks of five and one stack of four, placed in the center of each quadrant. The goats move first. Goats may move one at a time to any adjacent vacant spot. More than one goat can be placed on the goats' starting spots, but not elsewhere. The tiger moves in the same manner, but also may capture a piece by hopping over it. Multiple captures can be made on the same turn with subsequent hops, but only the top goat in a stack is captured when a tiger leaps over it. The goal of the goats is to surround the tigers so they cannot move. The goal of the tigers is to capture all the goats.
        
(game "Sher Bakar" (players 2) (equipment {(board (rectangle 5 5 Alternating) Vertex) (piece "Goat" P1 (move Step (to (or (and (is In (to ) (sites "StartingSitesGoats")) (is Friend (who (to )))) (is Empty (to )))))) (piece "Tiger" P2 (or (move Step (to (is Empty (to )))) (move Hop (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to ))) (then (if (can Move (hop (from (last To)) (between (and (not (is In (between ) (sites ToClear))) (is Enemy (who (between ))))) (to (is Empty (to ))))) (moveAgain )))))) (regions "StartingSitesGoats" (sites {"B2" "D2" "D4" "B4"}))}) (rules (start {(place "Tiger2" (sites {"C1" "C5"})) (place Stack "Goat1" (sites {"B2" "D2" "D4"}) 5) (place Stack "Goat1" (sites {"B4"}) 4)}) (play (if (is Prev Mover) (or (move Pass) (move Hop (from (last To)) (between (and (not (is In (between ) (sites ToClear))) (is Enemy (who (between )))) (apply (remove (between )))) (to (is Empty (to ))) (then (if (can Move (hop (from (last To)) (between (and (not (is In (between ) (sites ToClear))) (is Enemy (who (between ))))) (to (is Empty (to ))))) (moveAgain ))))) (forEach Piece true))) (end {(if (no Moves P2) (result P1 Win)) (if (no Pieces P1) (result P2 Win))})))

Played on cross-shaped board, made of five squares, each divided into four squares and with the diagonals of the larger squares drawn. One player plays as thirteen hens, which begin on the points on one of the arms of the cross and along the line immediately perpendicular to that arm. The other player plays as one fox, which can be placed on any empty point of the board. Players alternate turns moving to an empty adjacent spot  along the lines of the board. The hens, however, can only move in a forward direction. The fox may hop over an adjacent hen to an empty spot immediately on the opposite side of the hen along the lines of the board. The fox wins by capturing all the hens, the hens win by blocking the fox from being able to move.
(game "Jeu du Renard et de la Poule" (players 2) (equipment {(board (merge (shift 0.0 (/ (- 7.0 3.0) 2.0) (rectangle 3 7 Alternating)) (shift (/ (- 7.0 3.0) 2.0) 0.0 (rectangle 7 3 Alternating))) Vertex) (hand P1) (piece "Fox" P1 (or (move Hop (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to ))) (then (if (can Move (hop (from (last To)) (between (and (not (is In (between ) (sites ToClear))) (is Enemy (who (between ))))) (to (is Empty (to ))))) (moveAgain )))) (move Step (to (is Empty (to )))))) (piece "Hen" P2 N (move Step Forwards (to (is Empty (to )))))}) (rules (start {(place "Fox1" (handSite P1)) (place "Hen2" (union (expand (sites Bottom)) (sites Row 2)))}) {(phase "Placement" P1 (play (move (from (handSite P1)) (to (sites Empty)))) (nextPhase (all Sites (sites Hand P1) (= 0 (count Cell (site )))) "Movement")) (phase "Movement" (play (forEach Piece)))} (end {(if (no Moves Next) (result Next Loss)) (if (no Pieces P2) (result P2 Win))})))

4x4 board. One player plays as four tigers, which begin the board placed in the four corner spaces. The other player plays as twelve oxen. The first move is made by placing one of the oxen on an empty space, followed by a move by the tiger closest to the ox. Players continue alternating moves, the oxen player placing an ox and the tiger player moving a tiger. When moving, pieces move to an empty adjacent spot orthogonally. Once all of the oxen are placed, the players alternate turns moving their pieces on the board. Pieces may capture another piece by hopping over an adjacent opponent's piece to an empty space immediately on the opposite side of it. Tigers capture orthogonally, oxen capture diagonally. Oxen may also capture a tiger by blocking it from being able to move. The oxen win by reducing the tigers to two.
(game "Len Cua Kin Ngoa" (players 2) (equipment {(board (square 4)) (hand P1) (piece "Ox" P1 (or (move Hop Diagonal (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to )))) (move Step Orthogonal (to (is Empty (to )))))) (piece "Tiger" P2 (or (move Hop Orthogonal (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to )))) (move Step Orthogonal (to (is Empty (to ))))))}) (rules (start {(place "Ox1" (handSite P1) 12) (place "Tiger2" (sites Corners))}) {(phase "Placement" P1 (play (move (from (handSite P1)) (to (sites Empty)) (then (forEach Site (sites Occupied Next) (if (not (can Move (or (step (from (site )) Orthogonal (to (is Empty (to )))) (hop (from (site )) Orthogonal (between (= (who (between )) P1) (apply (remove (between )))) (to (is Empty (to ))))))) (remove (site ))))))) (nextPhase (all Sites (sites Hand P1) (= 0 (count Cell (site )))) "MovementP1")) (phase "MovementP1" P1 (play (forEach Piece (then (forEach Site (sites Occupied Next) (if (not (can Move (or (step (from (site )) Orthogonal (to (is Empty (to )))) (hop (from (site )) Orthogonal (between (= (who (between )) P1) (apply (remove (between )))) (to (is Empty (to ))))))) (remove (site )))))))) (phase "FirstTigerMovement" P2 (play (forEach Piece (if (= (count Steps (from ) (last To)) (min (results (last To) (sites Corners) (count Steps (from ) (to ))))) (or (move Hop Orthogonal (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to )))) (move Step (to (is Empty (to )))))))) (nextPhase Mover "MovementP2")) (phase "MovementP2" P2 (play (forEach Piece)))} (end {(if (no Pieces P1) (result P2 Win)) (if (>= 2 (count Pieces P2)) (result P1 Win))})))

5x5 intersecting lines with diagonals drawn in the quadrants. One player plays as one hunter, placed in the central spot. The other player plays as twelve birds, which are placed in the two rows closest to the player and the two spots on the right hand side in the central row. The hunter may move in any direction along the lines of the board. The hunter may capture birds by hopping over them to an empty spot on the opposite side along the lines of the  board. The birds may move forward orthogonally or diagonally. The birds win by blocking the hunter from being able to move; the hunter wins by capturing all of the birds or when it is no longer possible for the birds to capture the hunter.
(game "El Cazador" (players {(player S) (player N)}) (equipment {(board (rectangle 5 5 Alternating) Vertex) (piece "Human" P1 (or (move Hop (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to )))) (move Step (to (is Empty (to )))))) (piece "Hen" P2 (move Step (directions {Rightward Leftward Forwards}) (to (is Empty (to )))))}) (rules (start {(place "Human1" (centrePoint )) (place "Hen2" (union {(expand (sites Bottom)) (sites {"D3" "E3"})}))}) (play (forEach Piece)) (end {(if (no Moves P1) (result P2 Win)) (if (no Pieces P2) (result P1 Win))})))

5x5 intersecting lines, with diagonals drawn in each quadrant. One player plays as four tigers, which begin on the four corners of the board. The other player plays as twenty goats, which begin off the board. Play begins by placing one of the goats on an empty spot. The other player then moves the tiger to an empty adjacent spot along the lines on the board. The tiger may hop over an adjacent goat, to an empty space on the opposite adjacent side of the goat along the lines. Play continues like this until all of the goats are placed, after which the goats also move to one adjacent spot along the lines. The tigers win by capturing all of the goats; the goats win by blocking the tigers from being able to move.
(game "Sumi Naga Game (Hunt)" (players 2) (equipment {(board (rectangle 5 5 Alternating) Vertex) (piece "Goat" P1 (move Step (to (is Empty (to ))))) (piece "Tiger" P2 (or (move Step (to (is Empty (to )))) (move Hop (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to ))) (then (if (can Move (hop (from (last To)) (between (and (not (is In (between ) (sites ToClear))) (is Enemy (who (between ))))) (to (is Empty (to ))))) (moveAgain )))))) (hand P1)}) (rules (start {(place "Goat1" (handSite P1) 20) (place "Tiger2" (sites Corners))}) {(phase "Placement" P1 (play (move (from (handSite P1)) (to (sites Empty)))) (nextPhase Mover (all Sites (sites Hand Mover) (= 0 (count Cell (site )))) "Moving")) (phase "Moving" (play (forEach Piece)))} (end {(if (no Moves P2) (result P1 Win)) (if (no Pieces P1) (result P2 Win))})))

5x9 intersecting lines; with a triangle formed by lines drawn from the second and fourth line of one of the short sides of the rectangle, with the base and a line bisecting the base of the triangle. One player plays as the General, placed on the central space of the rectangle, and the other player plays as 26 Rebels, places on the intersections of the second, third, and fourth of the long lines. Pieces move one space orthogonally. The General may capture one of the Rebels by hopping over it to an empty space. The General wins by capturing all the Rebels. The Rebels win by blocking the General from moving.
(game "Yeung Luk Sz' Kon Tseung Kwan" (players 2) (equipment {(board (merge (rectangle 9 5) (shift 1.0 8.0 (scale 0.5 (wedge 3)))) Vertex) (piece "Marker" P1 (move Step (to (is Empty (to ))))) (piece "Marker" P2 (or (move Hop (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to )))) (move Step (to (is Empty (to ))))))}) (rules (start {(place "Marker1" (union {(sites Column 1) (difference (sites Column 3) (union (sites Centre) (expand (sites Top)))) (sites Column 5)})) (place "Marker2" (centrePoint ))}) (play (forEach Piece)) (end {(if (no Pieces P1) (result P2 Win)) (if (no Moves P2) (result P1 Win))})))

8x8 Draughts board. One player plays with two foxes, the other with twelve or more hens, played on the white squares. The hens begin on the rows closest to the player; the foxes begin, one each on the left and right end of the row farthest from the hens. Hens move one space forward diagonally, the foxes move one space diagonally forward or backward. Foxes must alternate turns, i.e., when one fox moves, the other fox must move on the next turn. The foxes may capture a hen by hopping over it to an empty space diagonally on the other side of it. The hens win by blocking the foxes from being able to move; the foxes win by capturing all the hens.
        
(game "Jeu de Renard (Two Foxes)" (players 2) (equipment {(board (square 8)) (piece "Fox" P1 (if (= (state (from )) 1) (or (move Step Diagonal (to (is Empty (to )))) (move Hop Diagonal (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to ))))) (then (and (forEach Site (sites Occupied Mover) (if (= (state (site )) 0) (set State (site ) 1))) (set State (last To) 0))))) (piece "Hen" P2 N (move Step (directions {FR FL}) (to (is Empty (to )))))}) (rules (start {(place "Fox1" (intersection (sites Top) (union (sites Left) (difference (expand (sites Right)) (sites Right)))) 1) (place "Hen2" (difference (expand (sites Bottom) 2) (sites Phase 0)))}) {(phase "Opening" P1 (play (forEach Piece (or (move Step Diagonal (to (is Empty (to )))) (move Hop Diagonal (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to )))) (then (set State (last To) 0))))) (nextPhase "Movement")) (phase "Movement" (play (forEach Piece)))} (end {(if (no Moves P1) (result P2 Win)) (if (no Pieces P2) (result P1 Win))})))

5x5 intersecting lines, with diagonals drawn in the four quadrants of the board. Two triangles, their apices intersecting the main board at opposite midpoints. The base of the triangle is bisected by a line drawn from the apex, and this line is bisected and intersects with the other two sides of the triangle. One player plays as the Rimoe (king), which starts on the central point. The other player has 24 pieces, eight of which start on the board, on the points immediately adjacent to the Rimoe. The Rimoe plays first, and takes one of the opponent's pieces by hopping over it to an empty spot immediately behind it in a straight line. The Rimoe captures in this way any uninterrupted line of pieces with an odd number. The Rimoe cannot capture a line of pieces with an even number. When the Rimoe cannot capture, it moves one to an empty adjacent space along the lines of the board. The other player places on of their remaining pieces on the board on their turn. When there are no more pieces left to place, the player moves one of the pieces to an empty adjacent spot along the lines. The Rimoe wins by capturing all of the opponent's pieces; the opponent wins by blocking the Rimoe from being able to move.
(game "Rimoe" (players 2) (equipment {(board (merge {(square 5 Alternating) (shift 0.0 4.0 (rotate 180.0 (wedge 3))) (shift 0.0 -2.0 (wedge 3))}) Vertex) (piece "King" P1 (priority {(move Hop (between (range 1 9) (is Enemy (who (between ))) (apply (remove (between )))) (to (and (is Empty (to )) (is Even (count Steps (from ) (to )))))) (move Step (to (is Empty (to ))))})) (piece "Marker" P2 (move Step (to (is Empty (to ))))) (hand Each)}) (rules (start {(place "King1" (centrePoint ) 1) (place "Marker2" (handSite P2) 16) (place "Marker2" (difference (expand (sites Centre)) (centrePoint )))}) {(phase "Placement" P2 (play (move (from (handSite Mover)) (to (sites Empty)))) (nextPhase Mover (all Sites (sites Hand Mover) (= 0 (count Cell (site )))) "Movement")) (phase "Movement" (play (forEach Piece)))} (end {(if (no Moves P1) (result P2 Win)) (if (no Pieces P2) (result P1 Win))})))

Played on 5x5 grid including diagonals and pieces are played on the intersections of the lines. One player has four tigers, placed on the corners, and the other has up to 20 goats, placed on the board on a free space. Tigers and goats can move to an adjacent intersection along the lines on the board. Tigers may capture goats by hopping over them. The game ends when tigers have captured all of the goats or the goats block the tigers from being able to move.
(game "Baghchal" (players 2) (equipment {(board (rectangle 5 5 Alternating) Vertex) (hand P1) (piece "Goat" P1 (move Step (to (is Empty (to ))))) (piece "Tiger" P2 (or (move Hop (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to )))) (move Step (to (is Empty (to ))))))}) (rules (start {(place "Tiger2" (sites Corners)) (place "Goat1" (handSite P1) 20)}) {(phase "Placement" P1 (play (move (from (handSite P1)) (to (sites Empty)))) (nextPhase (all Sites (sites Hand P1) (= 0 (count Cell (site )))))) (phase "Movement" (play (forEach Piece)))} (end {(if (no Moves Next) (result Next Loss)) (if (<= (count Pieces P1) 0) (result P1 Loss))})))

Played on cross-shaped board, made of five squares, each divided into four squares and with the diagonals of the larger squares drawn. One player plays as seventeen hens, which begin on the points on one of the arms of the cross and along the line immediately perpendicular to that arm, and on the two outermost points on the left and right arms. The other player plays as one fox, which starts on the central point of the board. Players alternate turns moving to an empty adjacent spot along the lines of the board. The hens, however, can only move in a forward or horizontal direction. The fox hops over an adjacent hen to an empty spot immediately on the opposite side of the hen along the lines of the board. At the beginning of the game, the players choose whether to allow the fox the ability to make multiple captures in one turn. If the fox is able to capture but does not, the opponent adds another hen on an empty point in the bottom row. If there is no empty spot on the bottom row, the player waits until there is one to place the new hen. The fox wins by capturing all of the hens or by moving to the furthest line on the hens' side of the board. The hens win by blocking the fox from being able to move.
        
(game "Renard et les Poules" (players 2) (equipment {(board (merge (shift 0.0 (/ (- 7.0 3.0) 2.0) (rectangle 3 7 Alternating)) (shift (/ (- 7.0 3.0) 2.0) 0.0 (rectangle 7 3 Alternating))) Vertex) (hand P1) (piece "Fox" P1 S (or (move Hop (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to )))) (move Step (to (is Empty (to )))))) (piece "Hen" P2 N (move Step (directions {Forwards Rightward Leftward}) (to (is Empty (to )))))}) (rules (start {(place "Fox1" (centrePoint )) (place "Hen2" (union {(expand (sites Bottom)) (sites Row 2) (sites {"A4" "G4" "A5" "G5"})}))}) {(phase "FoxPhase" P1 (play (do (set Pending (sites To (forEach Piece "Fox" (move Hop (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to ))))))) (forEach Piece (then (if (and (is Pending) (not (is In (last To) (sites Pending)))) (if (< (value Player Mover) 0) (set Value Mover 1) (set Value Mover (+ 1 (value Player Mover)))))))))) (phase "HenPhase" P2 (play (if (and (> (value Player Prev) 0) (!= 0 (count Sites (intersection (sites Empty) (sites Bottom))))) (move Add (to (intersection (sites Empty) (sites Bottom))) (then (and (set Value Prev (- (value Player Prev) 1)) (moveAgain )))) (forEach Piece))))} (end {(if (no Moves P1) (result P1 Loss)) (if (or (is In (where "Fox" P1) (sites Bottom)) (no Pieces P2)) (result P1 Win))})))

A triangle, with two lines drawn from the apex to the base. A rectangle is drawn across the triangle, and another line connecting the midpoints of the short sides of the rectangle. One player plays as three tigers, the other as seventeen people. One tiger begins on the apex of the triangle and the other two may be placed anywhere. Players alternate turns, with the person playing as the people first placing a person on the board, and then one of the tigers moving to an empty adjacent spot along the lines of the board. When all of the people have been placed, the people move on the board in the same fashion. The tigers may capture one of the people by jumping over it to an empty adjacent spot immediately on the opposite side of one of the people along the lines of the board. The tigers win when they capture enough people so that the people cannot block the tiger, the people win when they can block the tiger from being able to move.
(game "Mysore Tiger Game (Three Tigers)" (players 2) (equipment {(board (add (remove (merge (shift 0.0 2.0 (scale 8.0 2.0 (rectangle 3 2))) (scale 1.0 2.0 (wedge 5 4))) {{0 1} {2 3} {4 5}}) {{0 15} {18 1} {2 11} {14 3} {4 7} {10 5}}) Vertex) (hand Each) (piece "Human" P2 (move Step (to (is Empty (to ))))) (piece "Tiger" P1 (or (move Step (to (is Empty (to )))) (move Hop (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to ))))))}) (rules (start {(place "Human2" (handSite P2) 17) (place "Tiger1" (sites Top)) (place "Tiger1" (handSite P1) 2)}) {(phase "Opening" P1 (play (move (from (handSite Mover)) (to (sites Empty)) (then (if (not (all Sites (sites Hand Mover) (= 0 (count Cell (site ))))) (moveAgain ))))) (nextPhase Mover (all Sites (sites Hand Mover) (= 0 (count Cell (site )))) "Movement")) (phase "Opening" P2 (play (move (from (handSite Mover)) (to (sites Empty)))) (nextPhase Mover (all Sites (sites Hand Mover) (= 0 (count Cell (site )))) "Movement")) (phase "Movement" (play (forEach Piece)))} (end {(if (no Moves P1) (result P2 Win)) (if (no Pieces P2) (result P1 Win))})))

3x6 board, three counters per hole. Each player owns the row of holes closest to them, as well as the right half of the central row, with respect to their perspective. Sowing occurs from left to right in the player's complete row, right to left in the player's half of the central row, then continuing from right to left in the opponent's outer row, left to right in the opponent's holes in the central row, and then continuing as before into the player's outer row. Players sow from any of their holes, and when the final counter lands in an occupied hole, they pick up the contents and continue sowing. When the final counter falls into an empty hole, the turn ends. After the first turn, players may capture a hole when the final counter of a sowing falls into a hole containing three counters, increasing it to four. The counters in a captured hole cannot be sown. When a player drops their final counter into an occupied captured hole, two counters are captured from it. If the player captured counters from one of the holes that they had created, they begin sowing again from another of their holes, but if the capture was from a hole captured by the opponent, the turn ends. The leftmost holes in each player's row are special: a player may under no circumstance capture counters from this hole in their row, but may do so from the opponent's, gaining another turn when they do so. Play continues until all of the counters are captured or all of the counters are accumulated in captured holes. A new round begins. Players then collect the counters in their captured holes. They count their takings by filling their holes with three counters each as in the beginning, and the player would own every hole they could fill with three counters. If the player has two counters remaining, they also gain another hole and the opponent surrenders their extra counter. Play continues until one player cannot fill any holes.
(game "Selus (Massawa)" (players 2) (equipment {(mancalaBoard 3 6 None (track "Track" "0,E,N1,W2,17,W,S1,E2" true)) (piece "Seed" Shared) (hand Each) (regions P1 (union (sites Bottom) (difference (expand (sites Right) 2) (sites Top)))) (regions P2 (union (sites Top) (difference (expand (sites Left) 2) (sites Bottom)))) (map "LeftMostHole" {(pair P1 0) (pair P2 17)})}) (rules (start {(set RememberValue "OwnedP1" (sites P1)) (set RememberValue "OwnedP2" (sites P2)) (set Count 3 (sites Track))}) {(phase "Sowing" (play (or {(move Select (from (if (and (not (is Pending)) (is Prev Mover)) (sites {(last To true)}) (if (is Mover P1) (sites (values Remembered "OwnedP1")) (sites (values Remembered "OwnedP2")))) (and (< 0 (count (from ))) (= 0 (state (from ))))) (then (sow (if (< 1 (count (to ))) (if (and (!= (mapEntry "LeftMostHole" Mover) (to )) (!= 0 (state (to )))) (and {(if (or (= (mover ) (state (to ))) (= (mapEntry "LeftMostHole" Next) (to ))) (and (moveAgain ) (set Pending))) (fromTo (from (to )) (to (handSite Mover)) 2) (set State (to ) (state (to )))}) (if (and {(< 2 (count Turns)) (= 0 (state (to ))) (= 4 (count (to )))}) (set State (to ) (mover )) (moveAgain )))))))} (then (if (all Sites (forEach (sites Board) (= 0 (state (site )))) (= 0 (count (site )))) (and {(forEach Site (forEach (sites Board) (= 1 (state (site )))) (fromTo (from (site )) (to (handSite P1)) (count (site )))) (forEach Site (forEach (sites Board) (= 2 (state (site )))) (fromTo (from (site )) (to (handSite P2)) (count (site )))) (forget Value "OwnedP1" All) (forget Value "OwnedP2" All)}))))) (end (if (all Sites (sites Board) (= 0 (count (site )))) {(if (> 3 (count Cell (handSite P1))) (result P2 Win)) (if (> 3 (count Cell (handSite P2))) (result P1 Win))})) (nextPhase (all Sites (sites Board) (= 0 (count (site )))) "BetweenRounds")) (phase "BetweenRounds" (play (if (<= 3 (count Cell (handSite Mover))) (move (from (handSite Mover)) (to (if (all Sites (sites Mover) (is Occupied (site ))) (sites Board) (sites Mover)) (is Empty (to ))) 3 (then (if (is Mover P1) (remember Value "OwnedP1" (last To)) (remember Value "OwnedP2" (last To))))) (if (= 2 (count Cell (handSite Mover))) (move (from (handSite Mover)) (to (if (all Sites (sites Mover) (is Occupied (site ))) (sites Board) (sites Mover)) (is Empty (to ))) 2 (then (and (fromTo (from (handSite Next)) (to (last To)) 1) (if (is Mover P1) (remember Value "OwnedP1" (last To)) (remember Value "OwnedP2" (last To))))))))) (nextPhase (and (is Empty (handSite P1)) (is Empty (handSite P2))) "Sowing"))}))

Three rows of four holes; the central two holes in the middle row are stores. Each player owns the hole in the central row to their left. Ten counters in each hole. Players sow from one of their holes, sowing first into the hole from which the counters were lifted, in an anti-clockwise direction. When the final counter lands in a hole containing two counters, these counters are captured. The player captures like this seven times. The eighth captures happens when the final counter falls into a hole containing one counter; the next capture from a hole containing three; the next from a hole containing five; then repeating the pattern of one, three, five for the rest of the game. The player who captures the most counters wins.
(game "The Concentration Game" (players 2) (equipment {(mancalaBoard 3 4 None (track "Track" "0,E,N,W,S2" true)) (piece "Seed" Shared) (regions P1 (union (sites {4}) (sites Bottom))) (regions P2 (union (sites {7}) (sites Top))) (map {(pair P1 5) (pair P2 6)})}) (rules (start {(set Count 10 (sites Outer)) (set RememberValue "NumToCaptureP1" 2) (set RememberValue "NumToCaptureP2" 2) (set RememberValue "NumCaptureTwoP1" 0) (set RememberValue "NumCaptureTwoP2" 0)}) (play (move Select (from (sites Mover) (< 1 (count (from )))) (then (sow (= (count (to )) (if (is In 2 (if (is Mover P1) (sites (values Remembered "NumToCaptureP1")) (sites (values Remembered "NumToCaptureP2")))) (+ 1 2) (if (is In 1 (if (is Mover P1) (sites (values Remembered "NumToCaptureP1")) (sites (values Remembered "NumToCaptureP2")))) 2 (if (is In 3 (if (is Mover P1) (sites (values Remembered "NumToCaptureP1")) (sites (values Remembered "NumToCaptureP2")))) 4 6)))) (and (fromTo (from (to )) (to (mapEntry (mover ))) (count (to ))) (if (< (value Player Mover) 5) (set Value Mover (+ 1 (value Player Mover))) (if (is Mover P1) (and (forget Value "NumToCaptureP1" All) (if (is In 2 (if (is Mover P1) (sites (values Remembered "NumToCaptureP1")) (sites (values Remembered "NumToCaptureP2")))) (remember Value "NumToCaptureP1" 1) (if (is In 1 (if (is Mover P1) (sites (values Remembered "NumToCaptureP1")) (sites (values Remembered "NumToCaptureP2")))) (remember Value "NumToCaptureP1" 3) (if (is In 5 (if (is Mover P1) (sites (values Remembered "NumToCaptureP1")) (sites (values Remembered "NumToCaptureP2")))) (remember Value "NumToCaptureP1" 1) (remember Value "NumToCaptureP1" 5))))) (and (forget Value "NumToCaptureP2" All) (if (is In 2 (if (is Mover P1) (sites (values Remembered "NumToCaptureP1")) (sites (values Remembered "NumToCaptureP2")))) (remember Value "NumToCaptureP2" 1) (if (is In 1 (if (is Mover P1) (sites (values Remembered "NumToCaptureP1")) (sites (values Remembered "NumToCaptureP2")))) (remember Value "NumToCaptureP2" 3) (if (is In 5 (if (is Mover P1) (sites (values Remembered "NumToCaptureP1")) (sites (values Remembered "NumToCaptureP2")))) (remember Value "NumToCaptureP2" 1) (remember Value "NumToCaptureP2" 5)))))))) true)))) (end (if (no Moves Next) (byScore {(score P1 (count (mapEntry P1))) (score P2 (count (mapEntry P2)))})))))

3x6 board. Four counters per hole. Each player controls one row of holes and the half of the central row to their right. Sowing occurs from left ro right in the player's full row, right to left in their holes in the central row, then right to left in the opponent's full row, then left to right in the opponent's holes in the central row, at that point continuing into the player's full row again. When the final counter is sown into an occupied hole, the counters are picked up and sowing continues. When the final counter falls into an empty hole, the turn ends. At any point while the player sows, if a hole is made to contain four counters, these are captured, regardless of who the hole belongs to. When the final counter causes a capture, the turn ends. Play continues until a player has no counters in their holes. The opponent then captures the remaining counters. Players then redistribute their counters, four in each hole, starting from the leftmost hole in their row in the direction of play. The player with fewer counters distributes all of their counters on the board, even if they cannot place four in the final hole of the counting. The player with more counters then places four counters in the same number of holes as the other player, taking any remaining as their winnings. Play continues in this fashion until one player captures all of the counters.
(game "Rab'e" (players 2) (equipment {(mancalaBoard 3 6 None (track "Track" "0,E,N1,W2,17,W,S1,E2" true)) (piece "Seed" Shared) (regions P1 (union (sites Bottom) (difference (expand (sites Right) 2) (sites Top)))) (regions P2 (union (sites Top) (difference (expand (sites Left) 2) (sites Bottom)))) (hand Each) (map "LeftMost" {(pair P1 0) (pair P2 17)}) (map "CorrespondingHoles" {(pair 0 17) (pair 1 16) (pair 2 15) (pair 3 14) (pair 4 13) (pair 5 12) (pair 11 6) (pair 10 7) (pair 9 8) (pair 8 9) (pair 7 10) (pair 6 11) (pair 12 5) (pair 13 4) (pair 14 3) (pair 15 2) (pair 16 1) (pair 17 0)})}) (rules (start (set Count 4 (sites Track))) {(phase "Sowing" (play (or {(move Select (from (if (is Prev Mover) (sites {(last To true)}) (sites Mover)) (< 0 (count (from )))) (then (do (set Var "NumSowed" (count (last To))) (sow (if (and (!= 4 (count (to ))) (< 1 (count (to )))) (moveAgain ))) (then (and (forEach Site (sites Track (last From) (trackSite Move (last From) "Track" (var "NumSowed"))) (if (= 4 (count (site ))) (fromTo (from (site )) (to (handSite Mover)) 4))) (set Var "NumSowed" 0))))))} (then (if (or (all Sites (sites P1) (is Empty (site ))) (all Sites (sites P2) (is Empty (site )))) (and {(forEach Site (sites P1) (fromTo (from (site )) (to (handSite P1)) (count (site )))) (forEach Site (sites P2) (fromTo (from (site )) (to (handSite P2)) (count (site )))) (if (<= (+ (count Cell (handSite P1)) (count (sites P1))) (+ (count Cell (handSite P2)) (count (sites P2)))) (set NextPlayer (player 1)) (set NextPlayer (player 2)))}))))) (end (if (all Sites (sites Board) (= 0 (count (site )))) {(if (= 0 (count Cell (handSite P1))) (result P2 Win)) (if (= 0 (count Cell (handSite P2))) (result P1 Win))})) (nextPhase (all Sites (sites Board) (= 0 (count (site )))) "BetweenRounds")) (phase "BetweenRounds" (play (if (<= 4 (count Cell (handSite Mover))) (move (from (handSite Mover)) (to (trackSite FirstSite (mapEntry "LeftMost" Mover) (is Empty (to )))) 4 (then (if (<= 4 (count Cell (handSite Mover))) (moveAgain ) (and (if (!= 0 (count Cell (handSite Mover))) (and (fromTo (from (handSite Mover)) (to (trackSite FirstSite (mapEntry "LeftMost" Mover) (is Empty (to )))) (count Cell (handSite Mover))) (fromTo (from (handSite Next)) (to (mapEntry "CorrespondingHoles" (trackSite FirstSite (mapEntry "LeftMost" Mover) (is Empty (to ))))) (count Cell (handSite Next))))) (forEach Site (sites Mover) (if (is Occupied (site )) (fromTo (from (handSite Next)) (to (mapEntry "CorrespondingHoles" (site ))) (count (site ))))))))))) (nextPhase (= 0 (count Cell (handSite Mover))) "Sowing"))}))

3x6 board. Three counters per hole. Each player owns the row closest to them and the right half of the central row. Sowing occurs in the following direction: from left to right in the player's full row, right to left in the player's half of the central row, proceeding to the opponent's full row and sowing right to left, then left to right in the opponent's part of the central row, then proceeding back to the player's full row and proceeding as before. Sowing always begins from a player's own holes. When the last counter falls into an empty hole, the turn ends. If the last counter falls into an occupied hole, the contents of that hole are picked up and sowing continues. A hole is captured by dropping the last counter of a sowing into an opponent's hole which contains three counters, making it have four counters, and becomes a wegue. Captures cannot be made until after the original three counters placed in the holes at the beginning of the game have been moved. Once a wegue is created, the player cannot sow from it. When the final counter of a sowing lands in a wegue owned by the opponent, the player captures two counters from it. Play continues until all of the counters are captured or all of the counters are accumulated in wegue. A new round begins. Players then collect the counters in their captured holes. They count their takings by filling their holes with three counters each as in the beginning, and the player would own every hole they could fill with three counters. If the player has two counters remaining, they also gain another hole and the opponent surrenders their extra counter. At the end of play, if a player captures the opponent's single remaining hole as a wegue, the player captured three counters from it, leaving one for the opponent to continue to play. Play continues until one player cannot fill any holes.
(game "Gabata (Adowa)" (players 2) (equipment {(mancalaBoard 3 6 None (track "Track" "0,E,N1,W2,17,W,S1,E2" true)) (piece "Seed" Shared) (hand Each) (regions P1 (union (sites Bottom) (intersection (sites Row 1) (expand (sites Right) 2)))) (regions P2 (union (sites Top) (intersection (sites Row 1) (expand (sites Left) 2)))) (map "LeftMost" {(pair P1 0) (pair P2 17)})}) (rules (start {(set Count 3 (sites Track)) (set RememberValue "OwnedP1" (union (sites Bottom) (intersection (sites Row 1) (expand (sites Right) 2)))) (set RememberValue "OwnedP2" (union (sites Top) (intersection (sites Row 1) (expand (sites Left) 2))))}) {(phase "Sowing" (play (or {(move Select (from (if (is Prev Mover) (sites {(var "Replay")}) (if (is Mover P1) (sites (values Remembered "OwnedP1")) (sites (values Remembered "OwnedP2")))) (and (< 0 (count (from ))) (= 0 (state (from ))))) (then (sow (if (and {(= 0 (state (to ))) (= 4 (count (to ))) (is In (to ) (if (is Mover P1) (sites (values Remembered "OwnedP2")) (sites (values Remembered "OwnedP1"))))}) (set State (to ) (mover )) (if (< 1 (count (to ))) (if (= 0 (state (to ))) (and {(moveAgain ) (set Var "Replay" (to ))}) (if (!= (mover ) (state (to ))) (and {(fromTo (from (to )) (to (handSite Mover)) (min 2 (count (to )))) (set State (to ) (state (to )))}))))))))} (then (if (all Sites (forEach (sites Board) (= 0 (state (site )))) (= 0 (count (site )))) (and {(forEach Site (forEach (sites Board) (= 1 (state (site )))) (fromTo (from (site )) (to (handSite P1)) (count (site )))) (forEach Site (forEach (sites Board) (= 2 (state (site )))) (fromTo (from (site )) (to (handSite P2)) (count (site )))) (forget Value "OwnedP1" All) (forget Value "OwnedP2" All)}))))) (end (if (all Sites (sites Board) (= 0 (count (site )))) {(if (>= 1 (count Cell (handSite P1))) (result P2 Win)) (if (>= 1 (count Cell (handSite P2))) (result P1 Win))})) (nextPhase (all Sites (sites Board) (= 0 (count (site )))) "BetweenRounds")) (phase "BetweenRounds" (play (if (<= 3 (count Cell (handSite Mover))) (move (from (handSite Mover)) (to (trackSite FirstSite (mapEntry "LeftMost" Mover) (is Empty (to )))) 3 (then (and {(if (is Mover P1) (remember Value "OwnedP1" (last To)) (remember Value "OwnedP2" (last To))) (if (<= 3 (count Cell (handSite Mover))) (moveAgain ) (if (= 2 (count Cell (handSite Mover))) (and {(fromTo (from (handSite Mover)) (to (trackSite FirstSite (mapEntry "LeftMost" Mover) (is Empty (to )))) 2) (fromTo (from (handSite Next)) (to (trackSite FirstSite (mapEntry "LeftMost" Mover) (is Empty (to )))) 1) (if (is Mover P1) (remember Value "OwnedP1" (trackSite FirstSite (mapEntry "LeftMost" Mover) (is Empty (to )))) (remember Value "OwnedP2" (trackSite FirstSite (mapEntry "LeftMost" Mover) (is Empty (to )))))})))}))))) (nextPhase (and (is Empty (handSite P1)) (is Empty (handSite P2))) "Sowing"))}))

3x6 board. Each player owns the row closest to them and the half of the central row to their right. Play begins with three counters in each hole. During the first phase of the game, the players race each other (i.e., do not take turns) to be the first person to drop the last counter into an empty hole. Play moves from left to right in the row closest to the player, right to left in the central row, and left to right in the furthest row. Upon reaching the final hole in the opponent's row, play continues with the first hole in the player's own row. In the first phase, Players take counters from the leftmost hole in their row and sow them in the appropriate direction. When the final counter lands in a hole with counters, they are picked up and sowing continues until the last counter is dropped into an empty hole. Play continues in phase two in the same manner as before, but the players take turns and the player who \"won\" the first phase plays first. Players capture counters when placing the last counter of a sowing into one of their own holes which is empty. If the hole is on the left half of the board, any counters in the two holes of the opponent facing it are captured. If the last hole is on the right half of the board, any counters in the opponent's one hole facing it are captured. The player then continues to move using the last counter placed which effected the capture, and placing it in the next hole. This move can result in further captures (if the hole is empty), continuation of sowing (if there are counters in it), or the end of the turn (if hole is empty and there are no opponent's counters to be captured). Play continues until a player has no counters in their holes. The opponent then captures the remaining counters. Players then redistribute their counters, three in each hole, starting from the leftmost hole in their row in the direction of play. The player with fewer counters distributes all of their counters on the board, even if they cannot place three in the final hole of the counting. The player with more counters then places three counters in the same number of holes as the other player, taking any remaining as their winnings. Play continues in this fashion until one player captures all of the counters.
        
(game "Abalala'e" (players 2) (equipment {(mancalaBoard 3 6 None {(track "Track" "0,E,N1,W5,N1,E" true P1) (track "Track" "17,W,S1,E5,S1,W" true P2)}) (regions "Home" P1 (union (sites Bottom) (sites {"D2" "E2" "F2"}))) (regions "Home" P2 (union (sites Top) (sites {"A2" "B2" "C2"}))) (regions "LeftPart" P1 (sites {"A1" "B1" "C1"})) (regions "LeftPart" P2 (sites {"D3" "E3" "F3"})) (regions "MiddleRow" (sites {"A2" "B2" "C2" "D2" "E2" "F2"})) (map "LeftHole" {(pair P1 0) (pair P2 17)}) (piece "Seed" Shared) (hand Each)}) (rules (start (set Count 3 (union (sites P1 "Home") (sites P2 "Home")))) (play (move Select (from (if (is Prev Mover) (if (is Pending) (sites Pending) (sites {(last To true)})) (sites Mover "Home")) (> (count (from )) 0)) (then (sow (if (is Pending) 1 (count (last To))) "Track" (mover ) (if (> (count (to )) 1) (moveAgain ) (if (is In (to ) (sites Mover "Home")) (if (is In (to ) (sites "MiddleRow")) (if (> (count (if (is Mover P1) (+ (to ) 6) (- (to ) 6))) 0) (and {(fromTo (from (if (is Mover P1) (+ (to ) 6) (- (to ) 6))) (to (handSite Mover)) (count (if (is Mover P1) (+ (to ) 6) (- (to ) 6)))) (moveAgain ) (set Pending (to ))})) (if (is In (to ) (sites Mover "LeftPart")) (and {(if (> (count (if (is Mover P1) (+ (to ) 6) (- (to ) 6))) 0) (and {(fromTo (from (if (is Mover P1) (+ (to ) 6) (- (to ) 6))) (to (handSite Mover)) (count (if (is Mover P1) (+ (to ) 6) (- (to ) 6)))) (moveAgain ) (set Pending (to ))})) (if (> (count (if (is Mover P1) (+ (to ) (* 6 2)) (- (to ) (* 6 2)))) 0) (and {(fromTo (from (if (is Mover P1) (+ (to ) (* 6 2)) (- (to ) (* 6 2)))) (to (handSite Mover)) (count (if (is Mover P1) (+ (to ) (* 6 2)) (- (to ) (* 6 2))))) (moveAgain ) (set Pending (to ))}))}) (if (> (count (if (is Mover P1) (+ (to ) (* 6 2)) (- (to ) (* 6 2)))) 0) (and {(fromTo (from (if (is Mover P1) (+ (to ) (* 6 2)) (- (to ) (* 6 2)))) (to (handSite Mover)) (count (if (is Mover P1) (+ (to ) (* 6 2)) (- (to ) (* 6 2))))) (moveAgain ) (set Pending (to ))})))))))))) (end (if (or {(all Sites (sites P1 "Home") (= 0 (count (site )))) (all Sites (sites P2 "Home") (= 0 (count (site ))))}) (byScore {(score P1 (+ (count Cell (handSite P1)) (count (sites P1)))) (score P2 (+ (count Cell (handSite P2)) (count (sites P2))))})))))

Played by two to five players. Each player has three heaps of counters, with twelve counters per heap. Sowing occurs in an anti-clockwise direction. When a player creates a heap containing three counters in an opponent's heap, a circle is drawn around the heap and the player captures the counters in it and every counter sown into it for the rest of the game. When there are no heaps left, the player with the most counters wins.
(game "Pic" (players 5) (equipment {(board (concentric {(* 3 5)}) (track "Track" {0 1 3 5 7 9 11 13 14 12 10 8 6 4 2} true) Vertex) (piece "Seed" Shared) (hand Each) (regions P1 (sites {0 1 3})) (regions P2 (sites {5 7 9})) (regions P3 (sites {11 13 14})) (regions P4 (sites {12 10 8})) (regions P5 (sites {6 4 2}))}) (rules (start (set Count 12 (sites Track))) (play (or {(move Select (from (sites Mover) (is Occupied (from ))) (then (sow (if (and (not (is In (to ) (sites Mover))) (= 3 (count (to )))) (and (fromTo (from (to )) (to (handSite Mover)) 3) (set State (to ) (mover )))))))} (then (forEach Site (sites Board) (if (and (is Occupied (site )) (!= 0 (state (site )))) (and (fromTo (from (site )) (to (handSite (state (site )))) (count (site ))) (set State (site ) (state (site ))))))))) (end (if (all Sites (sites Board) (= 0 (count (site )))) (byScore {(score P1 (count Cell (handSite P1))) (score P2 (count Cell (handSite P2))) (score P3 (count Cell (handSite P3))) (score P4 (count Cell (handSite P4))) (score P5 (count Cell (handSite P5)))})))))

Two rows of five holes arranged in a circle around four stores in the center. Each player has five holes on one half of the circle. Ten counters in each hole. Players sow from their holes, and can choose to sow any number of counters, but must leave at least one in the starting hole. Sowing occurs in an anti-clockwise direction. If sowing ends in a hole making its contents an odd number of counters, they are captured, but not more than nine. If the sowing ends and the last counter makes the contents of a hole an even number and the next hole has an odd number of counters, the contents of the odd hole are taken, but not more than nine. In both situations, if there is an unbroken sequence of holes with an odd number of counters, these are all taken, but not more than nine from each.
(game "Okwe (Achalla)" (players 2) (equipment {(board (add (concentric {10}) {{0.45 0.45} {-0.45 -0.45} {0.45 -0.45} {-0.45 0.45}}) (track "Track" {0 2 4 6 8 9 7 5 3 1} true) Vertex) (regions P1 (sites {0 1 2 3 4})) (regions P2 (sites {5 6 7 8 9})) (map {(pair P1 11) (pair P2 10)}) (piece "Seed" Shared)}) (rules (start (set Count 10 (sites Track))) (play (forEach Site (forEach (sites Mover) (< 1 (count (site )))) (forEach Value 2 (count (site )) (do (set Var (value )) (move Select (from (site )) (then (sow (var ) true (if (and (<= (count (to )) 9) (is Odd (count (to )))) (fromTo (from (to )) (to (mapEntry (mover ))) (count (to ))) (if (and (<= (count (trackSite Move (to ) 1)) 9) (is Odd (count (trackSite Move (to ) 1)))) (fromTo (from (trackSite Move (to ) 1)) (to (mapEntry (mover ))) (count (trackSite Move (to ) 1))))) true (and (<= (count (to )) 9) (is Odd (count (to ))))))))))) (end (if (and (no Moves P1) (no Moves P2)) (byScore {(score P1 (count (mapEntry P1))) (score P2 (count (mapEntry P2)))})))))

Seven holes, arranged in a circle. Four counters in each hole. Sowing occurs in an anti-clockwise direction. When the final counter lands in a hole, the contents of the next hole are picked up and sowing continues with those counters. When the hole from which this new sowing would occur is empty, the counters in the next hole are captured and the turn ends. The next player begins to sow from the next available hole with counters after the last one played by the opponent. Play continues until no further captures can be made, and the player with the most counters wins.
(game "Sat Gol" (players 2) (equipment {(board (concentric {7}) (track "Track" {0 1 3 5 6 4 2} true) Vertex) (piece "Seed" Shared) (hand Each)}) (rules (start (set Count 4 (sites Board))) (play (move Select (from (if (is Prev Mover) (sites {(trackSite Move (last To true) 1)}) (if (= 0 (count Moves)) (sites Board) (sites {(var )}))) (> (count (from )) 0)) (then (sow (if (!= 0 (count (trackSite Move (to ) 1))) (moveAgain ) (and (if (!= 0 (count (trackSite Move (to ) 2))) (fromTo (from (trackSite Move (to ) 2)) (to (handSite Mover)) (count (trackSite Move (to ) 2)))) (if (!= 0 (count (trackSite Move (to ) 3))) (set Var (trackSite Move (to ) 3)) (if (!= 0 (count (trackSite Move (to ) 4))) (set Var (trackSite Move (to ) 4)) (if (!= 0 (count (trackSite Move (to ) 5))) (set Var (trackSite Move (to ) 5)) (if (!= 0 (count (trackSite Move (to ) 6))) (set Var (trackSite Move (to ) 6)) (set Pending))))))))))) (end (if (is Pending) (byScore {(score P1 (count Cell (handSite P1))) (score P2 (count Cell (handSite P2)))})))))

4x6-21 board; 8 is most common, 12, 15, and 18 are also popular. Two counters in each hole in the players' outer rows. Two holes in each player's outer row are selected as misoro. Typically, the left two holes are chosen. At the beginning of the game, players choose whether to capture from one, two, or three extra holes. Sowing occurs in an anti-clockwise direction, only in the two rows belonging to the player. When the final counter lands in an occupied hole, these are picked up and sowing continues. If this final hole is one of the misoro, the player may choose to end their turn instead of continuing to sow. When the final counter lands in an empty hole in the inner row, any counters in the opposite hole in the opponent's inner row are captured. If there also are counters in the opposite hole in the opponent's outer row, these are also captured, but only if there was first a capture from the inner row hole. The player also captures the counters from the agreed-upon number of holes on the opponent's side of the board. Counters in misoro cannot be captured with one of these additional captures. Players cannot sow from a hole with a single counter unless there are no holes with multiple counters. Single counters can only be sown into an empty hole. Play continues until one player has captured all of the opponent's counters, thus winning the game.
(game "Misoro Tsoro (Additional Capture)" (players 2) (equipment {(mancalaBoard 4 8 None {(track "Track1" "0,E,N1,W" true P1) (track "Track2" "16,E,N1,W" true P2)}) (regions "Home" P1 (sites Track "Track1")) (regions "Home" P2 (sites Track "Track2")) (regions "Inner" P1 (difference (sites Track "Track1") (sites Bottom))) (regions "Inner" P2 (difference (sites Track "Track2") (sites Top))) (regions "Outer" P1 (sites Bottom)) (regions "Outer" P2 (sites Top)) (piece "Seed" Shared)}) (rules (start (set Count 2 (union (sites Top) (sites Bottom)))) {(phase "Misoro" (play (move Select (from (forEach (sites Mover "Outer") (= 0 (state (site ))))) (then (set State (last To) (mover ))))) (nextPhase (= 4 (count Turns)) "Playing")) (phase "Playing" (play (if (< 0 (var "ExtraCapture")) (move Select (from (forEach (sites Next) (and (= 0 (state (site ))) (< 0 (count (site )))))) (then (and {(if (< 1 (var "ExtraCapture")) (moveAgain )) (set Var "ExtraCapture" (- (var "ExtraCapture") 1)) (remove (last To)) (forEach Site (sites Board) (if (!= 0 (state (site ))) (set State (site ) (state (site )))))}))) (or (if (and (!= 0 (state (var ))) (is Prev Mover)) (move Pass)) (move Select (from (if (is Prev Mover) (sites {(var )}) (sites Mover "Home")) (if (not (all Sites (forEach (sites Mover) (< 1 (count (site )))) (= 0 (count (site ))))) (> (count (from )) 1) (and (= (count (from )) 1) (= 0 (count (trackSite Move (from ) Mover 1)))))) (then (and (sow "Track" (mover ) (if (= (count (to )) 1) (if (is In (to ) (sites Mover "Inner")) (if (> (count (if (is Mover P1) (+ (to ) 8) (- (to ) 8))) 0) (and {(remove (if (is Mover P1) (+ (to ) 8) (- (to ) 8))) (if (> (count (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2)))) 0) (remove (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2))))) (moveAgain ) (set Var "ExtraCapture" 3)}))) (and (moveAgain ) (set Var (to ))))) (forEach Site (sites Board) (if (!= 0 (state (site ))) (set State (site ) (state (site ))))))))))))} (end (forEach NonMover (all Sites (sites Player "Home") (= 0 (count (site )))) (result Player Loss)))))

4x6-28 board; 16-20 is most common, only even numbers of holes. Two counters in each hole except the leftmost on the inner row, which is left empty, and the one to its right which contains one counter. Players sow by picking up the counters in any of their holes and sowing them in an anti-clockwise direction. Sowing continues when the last counter falls into an occupied hole by picking up the counters in that hole and continuing in the same direction. When the final counter lands in an empty hole in the inner row, the counters in the opponent's hole opposite in the inner row are captured; if there are also counters in the opponent's outer row opposite, these are also captured. The player is also entitled to capture counters in any other hole on the opponent's side. The turn ends with a capture and the opponent's turn begins. Play always begins with a stylized move, where the counters are taken from the third hole from the left in the inner row, sowing and making captures as described above. Players may not sow single counters unless there are no holes on their side containing multiple counters. Play ends when one player has captured all of their opponent's counters.
(game "Mefuvha" (players 2) (equipment {(mancalaBoard 4 16 None {(track "Track1" "0,E,N1,W" true P1) (track "Track2" "32,E,N1,W" true P2)}) (regions "Home" P1 (sites Track "Track1")) (regions "Home" P2 (sites Track "Track2")) (regions "Inner" P1 (difference (sites Track "Track1") (sites Bottom))) (regions "Inner" P2 (difference (sites Track "Track2") (sites Top))) (piece "Seed" Shared) (hand Each)}) (rules (start {(set Count 2 (difference (union (sites P1 "Home") (sites P2 "Home")) (union (expand (intersection (sites Row 1) (sites Left)) 1 E) (expand (intersection (sites Row 2) (sites Right)) 1 W)))) (set Count 1 (union (difference (expand (intersection (sites Row 1) (sites Left)) 1 E) (sites Left)) (difference (expand (intersection (sites Row 2) (sites Right)) 1 W) (sites Right))))}) (play (if (and (is Pending) (is Prev Mover)) (move Select (from (sites Next "Home") (> (count (from )) 0)) (then (fromTo (from (last From)) (to (handSite Mover)) (count (last From))))) (priority (move Select (from (if (is Prev Mover) (sites {(last To true)}) (if (< (count Turns) 3) (if (is Mover P1) (difference (expand (intersection (sites Row 1) (sites Left)) 2 E) (expand (intersection (sites Row 1) (sites Left)) 1 E)) (difference (expand (intersection (sites Row 2) (sites Right)) 2 W) (expand (intersection (sites Row 2) (sites Right)) 1 W))) (sites Mover "Home"))) (> (count (from )) 1)) (then (sow "Track" (mover ) (if (> (count (to )) 1) (moveAgain ) (if (is In (to ) (sites Mover "Inner")) (and {(fromTo (from (to )) (to (handSite Mover)) (count (to ))) (if (> (count (if (is Mover P1) (+ (to ) 16) (- (to ) 16))) 0) (fromTo (from (if (is Mover P1) (+ (to ) 16) (- (to ) 16))) (to (handSite Mover)) (count (if (is Mover P1) (+ (to ) 16) (- (to ) 16))))) (if (> (count (if (is Mover P1) (+ (to ) (* 16 2)) (- (to ) (* 16 2)))) 0) (fromTo (from (if (is Mover P1) (+ (to ) (* 16 2)) (- (to ) (* 16 2)))) (to (handSite Mover)) (count (if (is Mover P1) (+ (to ) (* 16 2)) (- (to ) (* 16 2)))))) (set Pending) (moveAgain )})))))) (move Select (from (if (is Prev Mover) (sites {(last To true)}) (sites Mover "Home")) (= (count (from )) 1)) (then (sow "Track" (mover ) (if (> (count (to )) 1) (moveAgain ) (if (is In (to ) (sites Mover "Inner")) (and {(fromTo (from (to )) (to (handSite Mover)) (count (to ))) (if (> (count (if (is Mover P1) (+ (to ) 16) (- (to ) 16))) 0) (fromTo (from (if (is Mover P1) (+ (to ) 16) (- (to ) 16))) (to (handSite Mover)) (count (if (is Mover P1) (+ (to ) 16) (- (to ) 16))))) (if (> (count (if (is Mover P1) (+ (to ) (* 16 2)) (- (to ) (* 16 2)))) 0) (fromTo (from (if (is Mover P1) (+ (to ) (* 16 2)) (- (to ) (* 16 2)))) (to (handSite Mover)) (count (if (is Mover P1) (+ (to ) (* 16 2)) (- (to ) (* 16 2)))))) (set Pending) (moveAgain )}))))))))) (end (if (no Moves Mover) (byScore {(score P1 (+ (count Cell (handSite P1)) (count (sites P1 "Home")))) (score P2 (+ (count Cell (handSite P2)) (count (sites P2 "Home"))))})))))

4x8=20 holes, with an even number per row. One counter in each hole, except the right-hand end row of the inner row. Sowing occurs in an anti-clockwise direction, only into an empty hole. When a counter lands in a hole in the inner row and the opponent's opposite inner row hole is empty, the contents of the opponent's opposite outer row hole are captured. The player who captures all of the opponent's pieces wins.
(game "Sute" (players 2) (equipment {(mancalaBoard 4 8 None {(track "Track1" "0,E,N1,W" true P1) (track "Track2" "16,E,N1,W" true P2)}) (regions "Home" P1 (sites Track "Track1")) (regions "Home" P2 (sites Track "Track2")) (regions "Inner" P1 (difference (sites Track "Track1") (sites Bottom))) (regions "Inner" P2 (difference (sites Track "Track2") (sites Top))) (piece "Seed" Shared)}) (rules (start (set Count 1 (difference (union (sites P1 "Home") (sites P2 "Home")) (union (intersection (sites Right) (sites Row 1)) (intersection (sites Left) (sites Row 2)))))) (play (move Select (from (sites Mover "Home") (and (> (count (from )) 0) (= 0 (count (trackSite Move (from ) 1))))) (then (sow "Track" (mover ) (if (and (= (count (if (is Mover P1) (+ (to ) 8) (- (to ) 8))) 0) (is In (to ) (sites Mover "Inner"))) (remove (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2))))))))) (end (forEach NonMover (all Sites (sites Player "Home") (= 0 (count (site )))) (result Player Loss)))))

4x8 board. Play begins with two counters in each hole. Sowing occurs in an anti-clockwise direction. When the last counter falls into an occupied hole, the counters in it are picked up and sowing continues. Sowing ends when the last counter falls into an empty hole. When this hole is in the inner row, the counters in the opponent's inner row opposite it are captured; if there are also counters in the opponent's outer row opposite, these are also captured, but not if the inner row is empty. Play continues until one player has lost all of their counters.
(game "Bao Ki Arabu (Zanzibar 2)" (players 2) (equipment {(mancalaBoard 4 8 None {(track "Track1" "0,E,N1,W" true P1) (track "Track2" "16,E,N1,W" true P2)}) (regions "Home" P1 (sites Track "Track1")) (regions "Home" P2 (sites Track "Track2")) (regions "Inner" P1 (difference (sites Track "Track1") (sites Bottom))) (regions "Inner" P2 (difference (sites Track "Track2") (sites Top))) (piece "Seed" Shared) (hand Each)}) (rules (start (set Count 2 (sites Board))) (play (move Select (from (if (is Prev Mover) (sites {(last To true)}) (sites Mover "Home")) (> (count (from )) 0)) (then (sow "Track" (mover ) (if (= (count (to )) 1) (if (is In (to ) (sites Mover "Inner")) (if (> (count (if (is Mover P1) (+ (to ) 8) (- (to ) 8))) 0) (and (fromTo (from (if (is Mover P1) (+ (to ) 8) (- (to ) 8))) (to (handSite Mover)) (count (if (is Mover P1) (+ (to ) 8) (- (to ) 8)))) (if (> (count (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2)))) 0) (fromTo (from (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2)))) (to (handSite Mover)) (count (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2))))))))) (moveAgain )))))) (end (if (no Moves Mover) (byScore {(score P1 (+ (count Cell (handSite P1)) (count (sites P1 "Home")))) (score P2 (+ (count Cell (handSite P2)) (count (sites P2 "Home"))))})))))

4x8 board. Two counters in each hole, the holes in the inner row are then vacated. These counters become the \"store.\" Sowing occurs in an anti-clockwise direction in the player's two rows. When the final counter of a sowing lands in any occupied hole, the contents of the opponent's inner row holes opposite are captured. If there are also counters in the opponent's outer hole opposite, these are also captured, but only if there are counters in the opponent's inner hole. Captured counters are then sown from the hole that the sowing began. If the final counter lands in an occupied hole and capturing cannot happen, these counters are picked up and sowing continues. At any time during the game if a player is running low on counters, they may enter counters from the \"store\" and add one counter to each hole. The player who is unable to move loses.
(game "Mwambulula" (players 2) (equipment {(mancalaBoard 4 8 None {(track "Track1" "0,E,N1,W" true P1) (track "Track2" "16,E,N1,W" true P2)}) (regions "Home" P1 (sites Track "Track1")) (regions "Home" P2 (sites Track "Track2")) (regions "Inner" P1 (difference (sites Track "Track1") (sites Bottom))) (regions "Inner" P2 (difference (sites Track "Track2") (sites Top))) (piece "Seed" Shared) (hand Each)}) (rules (start (set Count 2 (union (sites P1 "Home") (sites P2 "Home")))) {(phase "Opening" (play (move (from (sites Mover "Inner") (is Occupied (from ))) (to Cell (handSite Mover)) 2)) (nextPhase Mover (all Sites (sites Mover "Inner") (= 0 (count (site )))) "Sowing")) (phase "Sowing" (play (or (move Select (from (if (is Prev Mover) (sites {(last To true)}) (sites Mover "Home")) (> (count (from )) 0)) (then (sow "Track" (mover ) (if (< 1 (count (to ))) (if (is In (to ) (sites Mover "Inner")) (if (is Occupied (if (is Mover P1) (+ (to ) 8) (- (to ) 8))) (and {(fromTo (from (if (is Mover P1) (+ (to ) 8) (- (to ) 8))) (to (last From)) (count (if (is Mover P1) (+ (to ) 8) (- (to ) 8)))) (if (is Occupied (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2)))) (fromTo (from (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2)))) (to (last From)) (count (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2)))))) (sow (last From) (+ (count (if (is Mover P1) (+ (to ) 8) (- (to ) 8))) (count (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2))))) "Track" (mover ))}) (moveAgain )) (if (is Occupied (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2)))) (and {(fromTo (from (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2)))) (to (last From)) (count (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2))))) (if (is Occupied (if (is Mover P1) (+ (to ) (* 8 3)) (- (to ) (* 8 3)))) (fromTo (from (if (is Mover P1) (+ (to ) (* 8 3)) (- (to ) (* 8 3)))) (to (last From)) (count (if (is Mover P1) (+ (to ) (* 8 3)) (- (to ) (* 8 3)))))) (sow (last From) (+ (count (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2)))) (count (if (is Mover P1) (+ (to ) (* 8 3)) (- (to ) (* 8 3))))) "Track" (mover ))}) (moveAgain ))))))) (if (and (not (is Prev Mover)) (is Occupied Cell (handSite Mover))) (move Select (from Cell (handSite Mover)) (then (forEach Site (sites Mover "Home") (fromTo (from Cell (handSite Mover)) (to (site ))))))))))} (end (forEach NonMover (no Moves Player) (result Player Loss)))))

4x7 board. Three counters in each hole in the outer row; before beginning each player rearranges these as they wish, with the following rules: The leftmost hole in the outer row must have the most counters; Each hole must have equal to or less than the number of the counters as the hole on its left; there can be a maximum of two holes with one counter in the inner row. Initial phase: Sowing occurs in an anti-clockwise direction, and when a counter lands in an occupied hole the sowing continues. When the final counter lands in an empty hole, the turn ends. If the empty hole is in the player's inner row, counters in the opponent's inner row opposite are captured, and if there are also counters in the opponent's outer row hole opposite, these are also taken. The initial phase ends for a player when they have one counter in each hole. After this, players can only move single counters into empty holes. The player who captures all of the opponent's counters wins.
(game "Quiela" (players 2) (equipment {(mancalaBoard 4 7 None {(track "TrackCCW1" "0,E,N1,W" true P1) (track "TrackCCW2" "14,E,N1,W" true P2)}) (regions "Home" P1 (sites Track "TrackCCW1")) (regions "Home" P2 (sites Track "TrackCCW2")) (regions "Inner" P1 (difference (sites Track "TrackCCW1") (sites Bottom))) (regions "Inner" P2 (difference (sites Track "TrackCCW2") (sites Top))) (regions "Outer" P1 (sites Bottom)) (regions "Outer" P2 (sites Top)) (piece "Seed" Shared) (map "LeftMost" {(pair P1 0) (pair P2 27)}) (hand Each)}) (rules (start (set Count 3 (union (sites P1 "Outer") (sites P2 "Outer")))) {(phase "Rearrangement" (play (or (move (from (sites Mover "Home") (is Occupied (from ))) (to (difference (sites Mover) (from )))) (if (and {(all Sites (difference (sites Mover "Home") (mapEntry "LeftMost" Mover)) (> (count (mapEntry Mover)) (count (site )))) (all Sites (sites Mover "Home") (if (= (site ) (if (is Mover P1) (ahead (site ) W) (ahead (site ) E))) true (<= (count (site )) (count (if (is Mover P1) (ahead (site ) W) (ahead (site ) E)))))) (>= 2 (count Sites (forEach (sites Mover "Inner") (= 1 (count (site ))))))}) (move Pass)))) (nextPhase (all Passed) "InitialPhase")) (phase "InitialPhase" (play (move Select (from (if (is Prev Mover) (sites {(last To true)}) (sites Mover "Home")) (is Occupied (from ))) (then (sow "TrackCCW" (mover ) (if (< 1 (count (to ))) (moveAgain ) (if (is In (to ) (sites Mover "Inner")) (if (is Occupied (if (is Mover P1) (+ (to ) 7) (- (to ) 7))) (and (fromTo (from (if (is Mover P1) (+ (to ) 7) (- (to ) 7))) (to (handSite Mover)) (count (if (is Mover P1) (+ (to ) 7) (- (to ) 7)))) (if (is Occupied (if (is Mover P1) (+ (to ) (* 7 2)) (- (to ) (* 7 2)))) (fromTo (from (if (is Mover P1) (+ (to ) (* 7 2)) (- (to ) (* 7 2)))) (to (handSite Mover)) (count (if (is Mover P1) (+ (to ) (* 7 2)) (- (to ) (* 7 2)))))))))))))) (nextPhase Mover (all Sites (sites Mover "Home") (> 2 (count (site )))) "MainPhase")) (phase "MainPhase" (play (move Select (from (if (is Prev Mover) (sites {(last To true)}) (sites Mover "Home")) (if (< 1 (count (from ))) true (if (= 1 (count (from ))) (is Empty (trackSite Move (from ) "TrackCCW" 1))))) (then (sow "TrackCCW" (mover ) (if (< 1 (count (to ))) (moveAgain ) (if (is In (to ) (sites Mover "Inner")) (if (is Occupied (if (is Mover P1) (+ (to ) 7) (- (to ) 7))) (and (fromTo (from (if (is Mover P1) (+ (to ) 7) (- (to ) 7))) (to (handSite Mover)) (count (if (is Mover P1) (+ (to ) 7) (- (to ) 7)))) (if (is Occupied (if (is Mover P1) (+ (to ) (* 7 2)) (- (to ) (* 7 2)))) (fromTo (from (if (is Mover P1) (+ (to ) (* 7 2)) (- (to ) (* 7 2)))) (to (handSite Mover)) (count (if (is Mover P1) (+ (to ) (* 7 2)) (- (to ) (* 7 2)))))))))))))))} (end (forEach NonMover (all Sites (sites Player "Home") (= 0 (count (site )))) (result Player Loss)))))

4x4-16 board, played only along the perimeter. Three counters per hole. Any number of players. Holes are distributed equally among the players. Sowing occurs in a clockwise direction. Counters are sown one per occupied hole, two per empty hole. Each player owns the holes in which their counters are located at the beginning of their turn, and they must sow from the rightmost hole. If the final counter of a sowing falls into an empty hole, the player sows again from the rightmost hole. Alternatively, a player may place all of the counters from the rightmost counter into the next hole, but this cannot be done after a move. When counters fall into holes belonging to an opponent, these hole and the counters in it are captured by the player, but remain in play. When a player has a single counter and empty holes in from of it, this counter leaps to the next hole occupied by the opponent. The player who captures all of the opponent's holes wins.
(game "Mwendo" (players 4) (equipment {(mancalaBoard 4 10 None (track "Track" "10,N,E,S,W" true)) (piece "Seed" Each) (regions P1 (sites {0 1 2 3 4 5})) (regions P2 (sites {6 7 8 9 19 29})) (regions P3 (sites {39 38 37 36 35 34})) (regions P4 (sites {33 32 31 30 20 10}))}) (rules (start {(place "Seed1" (sites P1) {3}) (place "Seed2" (sites P2) {3}) (place "Seed3" (sites P3) {3}) (place "Seed4" (sites P4) {3})}) (play (if (!= 1 (count Pieces Mover)) (or (move Select (from (trackSite FirstSite (trackSite FirstSite (not (is Mover (who (to ))))) (is Mover (who (to ))))) (then (sow (if (is Empty (to )) 2 1) (if (and (!= (mover ) (what (to ))) (is Occupied (to ))) (and (remove (to ) (count (to ))) (add (piece (id "Seed" Mover)) (to (to )) (count (to ))))) (if (= 2 (count (to ))) (moveAgain ))))) (if (not (is Prev Mover)) (move (from (trackSite FirstSite (trackSite FirstSite (not (is Mover (who (to ))))) (is Mover (who (to ))))) (to (trackSite Move (trackSite FirstSite (trackSite FirstSite (not (is Mover (who (to ))))) (is Mover (who (to )))) 1) (apply (if (and (!= (mover ) (what (to ))) (is Occupied (to ))) (and (remove (to ) (count (to ))) (add (piece (id "Seed" Mover)) (to (to )) (count (to ))))))) (count (trackSite FirstSite (trackSite FirstSite (not (is Mover (who (to ))))) (is Mover (who (to )))))))) (move (from (trackSite FirstSite (trackSite FirstSite (not (is Mover (who (to ))))) (is Mover (who (to ))))) (to (trackSite FirstSite (from ) (is Enemy (who (to )))) (apply (and (remove (to ) (count (to ))) (add (piece (id "Seed" Mover)) (to (to )) (count (to ))))))))) (end (forEach NonMover (no Pieces Player) (result Player Loss)))))

4x6-21 board; 8 is most common, 12, 15, and 18 are also popular. Two counters in each hole in the players' outer rows. Two holes in each player's outer row are selected as misoro. Typically, the left two holes are chosen. Sowing occurs in an anti-clockwise direction, only in the two rows belonging to the player. When the final counter lands in an occupied hole, these are picked up and sowing continues. If this final hole is one of the misoro, the player may choose to end their turn instead of continuing to sow. When the final counter lands in an empty hole in the inner row, any counters in the opposite hole in the opponent's inner row are captured. If there also are counters in the opposite hole in the opponent's outer row, these are also captured, but only if there was first a capture from the inner row hole. Players cannot sow from a hole with a single counter unless there are no holes with multiple counters. Single counters can only be sown into an empty hole. Play continues until one player has captured all of the opponent's counters, thus winning the game.
        
(game "Misoro Tsoro" (players 2) (equipment {(mancalaBoard 4 8 None {(track "Track1" "0,E,N1,W" true P1) (track "Track2" "16,E,N1,W" true P2)}) (regions "Home" P1 (sites Track "Track1")) (regions "Home" P2 (sites Track "Track2")) (regions "Inner" P1 (difference (sites Track "Track1") (sites Bottom))) (regions "Inner" P2 (difference (sites Track "Track2") (sites Top))) (regions "Outer" P1 (sites Bottom)) (regions "Outer" P2 (sites Top)) (piece "Seed" Shared)}) (rules (start (set Count 2 (union (sites Top) (sites Bottom)))) {(phase "Misoro" (play (move Select (from (forEach (sites Mover "Outer") (= 0 (state (site ))))) (then (set State (last To) (mover ))))) (nextPhase (= 4 (count Turns)) "Playing")) (phase "Playing" (play (or (if (and (!= 0 (state (var ))) (is Prev Mover)) (move Pass)) (move Select (from (if (is Prev Mover) (sites {(var )}) (sites Mover "Home")) (if (not (all Sites (forEach (sites Mover) (< 1 (count (site )))) (= 0 (count (site ))))) (> (count (from )) 1) (and (= (count (from )) 1) (= 0 (count (trackSite Move (from ) Mover 1)))))) (then (and (sow "Track" (mover ) (if (= (count (to )) 1) (if (is In (to ) (sites Mover "Inner")) (if (> (count (if (is Mover P1) (+ (to ) 8) (- (to ) 8))) 0) (and (remove (if (is Mover P1) (+ (to ) 8) (- (to ) 8))) (if (> (count (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2)))) 0) (remove (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2)))))))) (and (moveAgain ) (set Var (to ))))) (forEach Site (sites Board) (if (!= 0 (state (site ))) (set State (site ) (state (site )))))))))))} (end (forEach NonMover (all Sites (sites Player "Home") (= 0 (count (site )))) (result Player Loss)))))

4x6-21 board; 8 is most common, 12, 15, and 18 are also popular. Two counters in each hole in the players' outer rows. Sowing occurs in an anti-clockwise direction, only in the two rows belonging to the player. When the final counter lands in an occupied hole, these are picked up and sowing continues. When the final counter lands in an empty hole in the inner row, any counters in the opposite hole in the opponent's inner row are captured. If there also are counters in the opposite hole in the opponent's outer row, these are also captured, but only if there was first a capture from the inner row hole. Players cannot sow from a hole with a single counter unless there are no holes with multiple counters. Single counters can only be sown into an empty hole. Play continues until one player has captured all of the opponent's counters, thus winning the game.
(game "Tsoro" (players 2) (equipment {(mancalaBoard 4 8 None {(track "Track1" "0,E,N1,W" true P1) (track "Track2" "16,E,N1,W" true P2)}) (regions "Home" P1 (sites Track "Track1")) (regions "Home" P2 (sites Track "Track2")) (regions "Inner" P1 (difference (sites Track "Track1") (sites Bottom))) (regions "Inner" P2 (difference (sites Track "Track2") (sites Top))) (piece "Seed" Shared)}) (rules (start (set Count 2 (union (sites Top) (sites Bottom)))) (play (move Select (from (if (is Prev Mover) (sites {(last To true)}) (sites Mover "Home")) (if (not (all Sites (forEach (sites Mover) (< 1 (count (site )))) (= 0 (count (site ))))) (> (count (from )) 1) (and (= (count (from )) 1) (= 0 (count (trackSite Move (from ) Mover 1)))))) (then (sow "Track" (mover ) (if (= (count (to )) 1) (if (is In (to ) (sites Mover "Inner")) (if (> (count (if (is Mover P1) (+ (to ) 8) (- (to ) 8))) 0) (and (remove (if (is Mover P1) (+ (to ) 8) (- (to ) 8))) (if (> (count (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2)))) 0) (remove (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2)))))))) (moveAgain )))))) (end (forEach NonMover (all Sites (sites Player "Home") (= 0 (count (site )))) (result Player Loss)))))

4x6-16 board. Play begins with two counters in each hole. The first move must be from the inner row. Play begins from any of the player's holes, sowing clockwise. When the final counter lands in an occupied hole, these are picked up and sowing continues. Captures are made when the final counter falls into an empty hole in the inner row, and the opponent's hole opposite contains counters. If it is, they are captured, and if the hole in to outer row opposite also contains counters, these are also captured. If the final counter falls into an empty hole and a capture cannot happen, the turn is over. Play ends when one player cannot move.
(game "Muvalavala (Luena)" (players 2) (equipment {(mancalaBoard 4 6 None {(track "Track1" "5,W,N1,E" true P1) (track "Track2" "17,W,N1,E" true P2)}) (regions "Home" P1 (sites Track "Track1")) (regions "Home" P2 (sites Track "Track2")) (regions "Inner" P1 (difference (sites Track "Track1") (sites Bottom))) (regions "Inner" P2 (difference (sites Track "Track2") (sites Top))) (piece "Seed" Shared) (hand Each)}) (rules (start (set Count 2 (union (sites P1 "Home") (sites P2 "Home")))) {(phase "Opening" (play (move Select (from (if (is Prev Mover) (sites {(last To true)}) (sites Mover "Inner")) (> (count (from )) 0)) (then (sow "Track" (mover ) (if (= (count (to )) 1) (if (is In (to ) (sites Mover "Inner")) (if (> (count (if (is Mover P1) (+ (to ) 6) (- (to ) 6))) 0) (and (fromTo (from (if (is Mover P1) (+ (to ) 6) (- (to ) 6))) (to (handSite Mover)) (count (if (is Mover P1) (+ (to ) 6) (- (to ) 6)))) (if (> (count (if (is Mover P1) (+ (to ) (* 6 2)) (- (to ) (* 6 2)))) 0) (fromTo (from (if (is Mover P1) (+ (to ) (* 6 2)) (- (to ) (* 6 2)))) (to (handSite Mover)) (count (if (is Mover P1) (+ (to ) (* 6 2)) (- (to ) (* 6 2))))))))) (moveAgain )))))) (nextPhase (>= (count Turns) 2) "Playing")) (phase "Playing" (play (move Select (from (if (is Prev Mover) (sites {(last To true)}) (sites Mover "Home")) (> (count (from )) 0)) (then (sow "Track" (mover ) (if (= (count (to )) 1) (if (is In (to ) (sites Mover "Inner")) (if (> (count (if (is Mover P1) (+ (to ) 6) (- (to ) 6))) 0) (and (fromTo (from (if (is Mover P1) (+ (to ) 6) (- (to ) 6))) (to (handSite Mover)) (count (if (is Mover P1) (+ (to ) 6) (- (to ) 6)))) (if (> (count (if (is Mover P1) (+ (to ) (* 6 2)) (- (to ) (* 6 2)))) 0) (fromTo (from (if (is Mover P1) (+ (to ) (* 6 2)) (- (to ) (* 6 2)))) (to (handSite Mover)) (count (if (is Mover P1) (+ (to ) (* 6 2)) (- (to ) (* 6 2))))))))) (moveAgain )))))))} (end (if (no Moves Mover) (byScore {(score P1 (+ (count Cell (handSite P1)) (count (sites P1)))) (score P2 (+ (count Cell (handSite P2)) (count (sites P2))))})))))

4x5 or 8 board. One counter in each hole.  Players alternate turns picking up the counters in one of their holes and sowing them in an anti-clockwise direction. When the final counter lands in a hole with counters, these counters are picked up and sowing continues. When the final counter lands in an empty hole in the inner row, any counters in the opponent's opposite inner row hole are captured, and if this capture was possible, any counters in the outer row hole are also captured. The player who captures all of the opponent's counters wins.
(game "Nchayo" (players 2) (equipment {(mancalaBoard 4 5 None {(track "Track1" "0,E,N1,W" true P1) (track "Track2" "10,E,N1,W" true P2)}) (regions "Home" P1 (sites Track "Track1")) (regions "Home" P2 (sites Track "Track2")) (regions "Inner" P1 (difference (sites Track "Track1") (sites Bottom))) (regions "Inner" P2 (difference (sites Track "Track2") (sites Top))) (piece "Seed" Shared) (hand Each)}) (rules (start (set Count 1 (sites Board))) (play (move Select (from (if (is Prev Mover) (sites {(last To true)}) (sites Mover "Home")) (is Occupied (from ))) (then (sow "Track" (mover ) (if (< 1 (count (to ))) (moveAgain ) (if (is In (to ) (sites Mover "Inner")) (if (is Occupied (if (is Mover P1) (+ (to ) 5) (- (to ) 5))) (and (fromTo (from (if (is Mover P1) (+ (to ) 5) (- (to ) 5))) (to (handSite Mover)) (count (if (is Mover P1) (+ (to ) 5) (- (to ) 5)))) (if (is Occupied (if (is Mover P1) (+ (to ) (* 5 2)) (- (to ) (* 5 2)))) (fromTo (from (if (is Mover P1) (+ (to ) (* 5 2)) (- (to ) (* 5 2)))) (to (handSite Mover)) (count (if (is Mover P1) (+ (to ) (* 5 2)) (- (to ) (* 5 2)))))))))))))) (end (if (no Moves Next) (byScore {(score P1 (+ (count Cell (handSite P1)) (count (sites P1 "Home")))) (score P2 (+ (count Cell (handSite P2)) (count (sites P2 "Home"))))})))))

4x8 board. Two counters in each hole. Players sow in an anti-clockwise direction from any of their holes. Singletons may not be sowed. Players capture when the sowing ends in a player's inner row and the opponent's inner and outer row holes opposite contain counters; these are captured and sown in the player's rows starting from the same hole that the previous sowing began. If the final counter lands in an occupied hole but capture is not possible, the counters in this hole are picked up and sowing continues. If the final counter ends in an empty hole, the turn ends. Captures cannot be made on each player's first turn. Play continues until one player has no holes with two or more counters, and the opponent wins.
(game "Nsumbi" (players 2) (equipment {(mancalaBoard 4 8 None {(track "Track1" "0,E,N1,W" true P1) (track "Track2" "16,E,N1,W" true P2)}) (regions "Home" P1 (sites Track "Track1")) (regions "Home" P2 (sites Track "Track2")) (regions "Inner" P1 (difference (sites Track "Track1") (sites Bottom))) (regions "Inner" P2 (difference (sites Track "Track2") (sites Top))) (piece "Seed" Shared)}) (rules (start (set Count 2 (union (sites P1 "Home") (sites P2 "Home")))) {(phase "Opening" (play (move Select (from (sites Mover)) (then (sow "Track" (mover ))))) (nextPhase Mover "Playing")) (phase "Playing" (play (move Select (from (if (is Prev Mover) (sites {(last To true)}) (sites Mover)) (< 1 (count (from )))) (then (sow "Track" (mover ) (if (and {(< 1 (count (to ))) (is In (to ) (sites Mover "Inner")) (> (count (if (is Mover P1) (+ (to ) 8) (- (to ) 8))) 0) (> (count (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2)))) 0)}) (and {(fromTo (from (if (is Mover P1) (+ (to ) 8) (- (to ) 8))) (to (last From)) (count (if (is Mover P1) (+ (to ) 8) (- (to ) 8)))) (fromTo (from (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2)))) (to (last From)) (count (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2))))) (sow (last From) (+ (count (if (is Mover P1) (+ (to ) 8) (- (to ) 8))) (count (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2))))) "Track" (mover ) true)}) (if (< 1 (count (to ))) (moveAgain ))))))))} (end (if (no Moves Next) (result Mover Win)))))

4x7 board, using only the outer two rows. Three counters in each hole. Sowing occurs in an anticlockwise direction. The first player takes the counters out of their leftmost hole and sows them. Instead of each player owning a row of holes, they own the series of holes which currently contain their counters. Players always sow from the rearmost of their holes. When the frontmost two holes of a player's sequence contain one counter each, the player gets another turn. When a player sows into the rear holes of the opponent, the player takes ownership of those holes. When one player is reduced to one counter, they jump to the nearest corner hole in the direction of play, and continue jumping from corner to corner until they capture counters belonging to the opponent, at which point they revert to the normal playing style. The first player to capture all their opponent's pieces wins.
(game "Ngulungu" (players 2) (equipment {(mancalaBoard 4 7 None {(track "Track" "0,E,27,W" true) (track "TrackCorner" "0,6,27,21" true) (track "ReverseTrack" "6,W,21,E" true)}) (piece "Seed" Each)}) (rules (start {(place "Seed1" (sites Bottom) {3}) (place "Seed2" (sites Top) {3})}) (play (if (and (all Sites (sites Occupied Mover) (is In (sites Corners))) (= 1 (count Pieces Mover))) (move (from (trackSite FirstSite (trackSite FirstSite (not (is Mover (who (to ))))) (is Mover (who (to ))))) (to (trackSite FirstSite "TrackCorner" (from ) (is Enemy (who (to )))) (apply (and (remove (to ) (count (to ))) (add (piece (id "Seed" Mover)) (to (to )) (count (to ))))))) (move Select (from (trackSite FirstSite (trackSite FirstSite (not (is Mover (who (to ))))) (is Mover (who (to ))))) (then (sow (if (and (!= (mover ) (what (to ))) (is Occupied (to ))) (and (remove (to ) (count (to ))) (add (piece (id "Seed" Mover)) (to (to )) (count (to ))))) (if (and (= 1 (count (trackSite Move (to ) "ReverseTrack" 1))) (= 1 (count (to )))) (moveAgain ))))))) (end (forEach NonMover (no Pieces Player) (result Player Loss)))))

4x8 board, occasionally 4x9 or 10. Two counters in each hole, except the leftmost hole in the inner row, which has zero, and the hole to its right, which has one. Sowing occurs in an anti-clockwise direction. Players sow from any hole in their two rows. When the final counter lands in an occupied hole, these counters are picked up and sowing continues. When the final counter lands in an empty hole in the inner row, the counters in the opponent's opposite hole in their inner row are captured. If there are also counters in the opponent's opposite hole in the outer row, these are also captured, but only when a capture from the inner row was also made. Players cannot sow single counters, unless there are no holes with multiple counters left, in which case single counters may be sown into an empty hole. Play continues until one player has captured all of the opponent's counters, thus winning the game.
(game "Njombwa (Two Counters)" (players 2) (equipment {(mancalaBoard 4 8 None {(track "Track1" "0,E,N1,W" true P1) (track "Track2" "16,E,N1,W" true P2)}) (regions "Home" P1 (sites Track "Track1")) (regions "Home" P2 (sites Track "Track2")) (regions "Inner" P1 (difference (sites Track "Track1") (sites Bottom))) (regions "Inner" P2 (difference (sites Track "Track2") (sites Top))) (piece "Seed" Shared)}) (rules (start {(set Count 2 (difference (sites Board) (sites {8 (+ 1 8) (- (* 8 3) 1) (- (* 8 3) 2)}))) (set Count 1 (sites {(+ 8 1) (- (* 8 3) 2)}))}) (play (if (all Sites (sites Mover "Home") (>= 1 (count (site )))) (move Select (from (sites Mover "Home") (and (is Occupied (from )) (is Empty (trackSite Move (from ) "Track" 1)))) (then (sow "Track" (mover )))) (move Select (from (if (is Prev Mover) (sites {(last To true)}) (sites Mover "Home")) (> (count (from )) 1)) (then (sow "Track" (mover ) (if (< 1 (count (to ))) (moveAgain ) (if (and (is In (to ) (sites Mover "Inner")) (is Occupied (if (is Mover P1) (+ (to ) 8) (- (to ) 8)))) (and (remove (if (is Mover P1) (+ (to ) 8) (- (to ) 8))) (if (is Occupied (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2)))) (remove (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2))))))))))))) (end (forEach NonMover (all Sites (sites Player) (= 0 (count (site )))) (result Player Loss)))))

4x6-21 board; 8 is most common, 12, 15, and 18 are also popular. Each player's rightmost hole is the musoro. Two counters in each hole in the players' outer rows, except each musoro which has three. Sowing occurs in an anti-clockwise direction. When the final counter lands in an occupied hole, these are picked up and sowing continues. If this final hole is one of the musoro, the player may choose to end their turn instead of continuing to sow. When the final counter lands in an empty hole in the inner row, any counters in the opposite hole in the opponent's inner row are captured. If there also are counters in the opposite hole in the opponent's outer row, these are also captured, but only if there was first a capture from the inner row hole. Players cannot sow from a hole with a single counter unless there are no holes with multiple counters. Single counters can only be sown into an empty hole. Play continues until one player has captured all of the opponent's counters, thus winning the game.
        
(game "Musoro Tsoro" (players 2) (equipment {(mancalaBoard 4 8 None {(track "Track1" "0,E,N1,W" true P1) (track "Track2" "16,E,N1,W" true P2)}) (regions "Home" P1 (sites Track "Track1")) (regions "Home" P2 (sites Track "Track2")) (regions "Inner" P1 (difference (sites Track "Track1") (sites Bottom))) (regions "Inner" P2 (difference (sites Track "Track2") (sites Top))) (regions "Outer" P1 (sites Bottom)) (regions "Outer" P2 (sites Top)) (piece "Seed" Shared)}) (rules (start {(place "Seed" (intersection (sites Top) (sites Left)) {3} 2) (place "Seed" (intersection (sites Bottom) (sites Right)) {3} 1) (set Count 2 (union (difference (sites Top) (sites Left)) (difference (sites Bottom) (sites Right))))}) (play (or (if (and (!= 0 (state (var ))) (is Prev Mover)) (move Pass)) (move Select (from (if (is Prev Mover) (sites {(var )}) (sites Mover "Home")) (if (not (all Sites (forEach (sites Mover) (< 1 (count (site )))) (= 0 (count (site ))))) (> (count (from )) 1) (and (= (count (from )) 1) (= 0 (count (trackSite Move (from ) Mover 1)))))) (then (and (sow "Track" (mover ) (if (= (count (to )) 1) (if (is In (to ) (sites Mover "Inner")) (if (> (count (if (is Mover P1) (+ (to ) 8) (- (to ) 8))) 0) (and (remove (if (is Mover P1) (+ (to ) 8) (- (to ) 8))) (if (> (count (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2)))) 0) (remove (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2)))))))) (and (moveAgain ) (set Var (to ))))) (forEach Site (sites Board) (if (!= 0 (state (site ))) (set State (site ) (state (site )))))))))) (end (forEach NonMover (all Sites (sites Player "Home") (= 0 (count (site )))) (result Player Loss)))))

4 row board, of any number of holes. Four counters in each player's outer row. Sowing occurs from the player's rearmost hole and in an anti-clockwise direction. When the final counter lands in an empty hole in the inner row, any counters in the opposite hole in the opponent's inner row are captured. The player who captures all of the opponent's counters wins.
(game "Chiana wa Bwalo" (players 2) (equipment {(mancalaBoard 4 16 None {(track "Track1" "0,E,N1,W" true P1) (track "Track2" "32,E,N1,W" true P2)}) (regions "Home" P1 (sites Track "Track1")) (regions "Home" P2 (sites Track "Track2")) (regions "Inner" P1 (difference (sites Track "Track1") (sites Bottom))) (regions "Inner" P2 (difference (sites Track "Track2") (sites Top))) (piece "Seed" Shared) (hand Each)}) (rules (start (set Count 4 (union (sites Top) (sites Bottom)))) (play (move Select (from (sites Mover "Home") (> (count (from )) 0)) (then (sow "Track" (mover ) (if (and (= (count (to )) 1) (> (count (if (is Mover P1) (+ (to ) 16) (- (to ) 16))) 0)) (fromTo (from (if (is Mover P1) (+ (to ) 16) (- (to ) 16))) (to (handSite Mover)) (count (if (is Mover P1) (+ (to ) 16) (- (to ) 16))))))))) (end (if (no Moves Next) (byScore {(score P1 (+ (count Cell (handSite P1)) (count (sites P1 "Home")))) (score P2 (+ (count Cell (handSite P2)) (count (sites P2 "Home"))))})))))

4x7-10 board (seven most common). One counter in each hole, with the player's leftmost hole in the outer row empty. On the first turn, sowing occurs in a clockwise direction. On the second turn, the player may sow in either direction, but must continue in the chosen direction for the rest of the game. Captures are made when the final counter of a sowing lands in an empty hole in the inner row. Captures are only made from the opponent's opposite outer row hole, and only when their inner row hole is empty. If the final counter lands in an occupied hole, the player picks up these counters and continues sowing. The player who captures all of the opponent's counters wins.
(game "Namudilakunze" (players 2) (equipment {(mancalaBoard 4 7 None {(track "TrackCCW1" "0,E,N1,W" true P1) (track "TrackCCW2" "14,E,N1,W" true P2) (track "TrackCW1" "6,W,N1,E" true P1) (track "TrackCW2" "20,W,N1,E" true P2)}) (piece "Seed" Shared) (regions "Home" P1 (sites Track "TrackCCW1")) (regions "Home" P2 (sites Track "TrackCCW2")) (regions "Inner" P1 (difference (sites Track "TrackCCW1") (sites Bottom))) (regions "Inner" P2 (difference (sites Track "TrackCCW2") (sites Top))) (hand Each)}) (rules (start (set Count 1 (difference (sites Board) (sites {0 (- (* 7 4) 1)})))) {(phase "FirstTurn" (play (move Select (from (if (is Prev Mover) (sites {(last To true)}) (sites Mover "Home")) (is Occupied (from ))) (then (sow "TrackCW" (mover ) (if (< 1 (count (to ))) (moveAgain ) (if (is In (to ) (sites Mover "Inner")) (if (is Occupied (if (is Mover P1) (+ (to ) 7) (- (to ) 7))) (remove (if (is Mover P1) (+ (to ) 7) (- (to ) 7))) (if (is Occupied (if (is Mover P1) (+ (to ) (* 7 2)) (- (to ) (* 7 2)))) (remove (if (is Mover P1) (+ (to ) (* 7 2)) (- (to ) (* 7 2)))))))))))) (nextPhase Mover (not (is Next Mover)) "Main")) (phase "Main" (play (or (if (or (>= 0 (value Player Mover)) (= (value Player Mover) 1)) (move Select (from (if (is Prev Mover) (sites {(last To true)}) (sites Mover "Home")) (is Occupied (from ))) (then (sow "TrackCCW" (mover ) (and (if (< 1 (count (to ))) (moveAgain ) (if (is In (to ) (sites Mover "Inner")) (if (is Empty (if (is Mover P1) (+ (to ) 7) (- (to ) 7))) (if (is Occupied (if (is Mover P1) (+ (to ) (* 7 2)) (- (to ) (* 7 2)))) (remove (if (is Mover P1) (+ (to ) (* 7 2)) (- (to ) (* 7 2)))))))) (if (!= 1 (value Player Mover)) (set Value Mover 1))))))) (if (or (>= 0 (value Player Mover)) (= (value Player Mover) 2)) (move Select (from (if (is Prev Mover) (sites {(last To true)}) (sites Mover "Home")) (is Occupied (from ))) (then (sow "TrackCW" (mover ) (and (if (< 1 (count (to ))) (moveAgain ) (if (is In (to ) (sites Mover "Inner")) (if (is Empty (if (is Mover P1) (+ (to ) 7) (- (to ) 7))) (if (is Occupied (if (is Mover P1) (+ (to ) (* 7 2)) (- (to ) (* 7 2)))) (remove (if (is Mover P1) (+ (to ) (* 7 2)) (- (to ) (* 7 2)))))))) (if (!= 2 (value Player Mover)) (set Value Mover 2))))))))))} (end (forEach NonMover (all Sites (sites Player "Home") (= 0 (count (site )))) (result Player Loss)))))

4x10 board. Forty counters in total. Play begins with one counter in each hole. One player then rearranges these counters however they like, as long as they remain on their side of the board and they remain on the board. They can arrange it so that they capture counters from the opponent's side according to the capture rules. The other player then does the same. Play begins with a player picking up counters from one of the holes with more than one on their side. Counters are sown in an anti-clockwise direction. When the last counter lands in an occupied hole, these counters are picked up and sowing continues until the last counter falls in an empty hole. When the last counter falls into an empty hole, either the turn ends or the player captures. Captures are only made from the inner row; if the corresponding hole in the opponent's inner row holds counters, these are captured; if there are also counters in the corresponding hole in the opponent's outer row, these are also captured. Play continues until one player has nothing left or one player has only single counters in their holes. If the player has no counters left, they have lost. If only single counters remain in a player's holes, they may now move single counters, but only into empty holes. Captures are made in the same way as before.
(game "Makonn" (players 2) (equipment {(mancalaBoard 4 10 None {(track "Track1" "0,E,N1,W" true P1) (track "Track2" "20,E,N1,W" true P2)}) (regions "Home" P1 (sites Track "Track1")) (regions "Home" P2 (sites Track "Track2")) (regions "Inner" P1 (difference (sites Track "Track1") (sites Bottom))) (regions "Inner" P2 (difference (sites Track "Track2") (sites Top))) (piece "Seed" Shared)}) (rules (start (set Count 1 (union (sites P1 "Home") (sites P2 "Home")))) {(phase "Rearrangement" (play (or (move (from (sites Mover "Home") (is Occupied (from ))) (to (sites Mover "Home") (!= (from ) (to ))) (then (and (if (and {(!= 1 (value Player Mover)) (is In (last To) (sites Mover "Inner")) (= 1 (count (last To)))}) (if (is Occupied (if (is Mover P1) (+ (last To) 10) (- (last To) 10))) (and {(set Value Mover 1) (remove (if (is Mover P1) (+ (last To) 10) (- (last To) 10))) (if (is Occupied (if (is Mover P1) (+ (last To) (* 10 2)) (- (last To) (* 10 2)))) (remove (if (is Mover P1) (+ (last To) (* 10 2)) (- (last To) (* 10 2)))))}))) (moveAgain )))) (move Pass))) (nextPhase Mover (was Pass) "Sowing")) (phase "Sowing" (play (move Select (from (if (is Prev Mover) (sites {(var "Replay")}) (sites Mover "Home")) (if (is Prev Mover) true (if (all Sites (sites Mover "Home") (>= 1 (count (site )))) (is Occupied (from )) (< 1 (count (from )))))) (then (sow "Track" (mover ) (if (< 1 (count (to ))) (and (set Var "Replay" (to )) (moveAgain )) (if (is Occupied (if (is Mover P1) (+ (to ) 10) (- (to ) 10))) (and (remove (if (is Mover P1) (+ (to ) 10) (- (to ) 10))) (if (is Occupied (if (is Mover P1) (+ (to ) (* 10 2)) (- (to ) (* 10 2)))) (remove (if (is Mover P1) (+ (to ) (* 10 2)) (- (to ) (* 10 2)))))))))))))} (end (if (all Sites (sites Next "Home") (= 0 (count (site )))) (result Next Loss)))))

4x12-20 board. Play begins with a number of counters that is three times the number of holes in a row minus two for a game with an even number of holes in a row; three times the number of holes minus one for odd. Counters are distributed beginning in the leftmost hole in the outer row, placing two counters in each hole in an anti-clockwise direction. Play begins from any of the player's holes, sowing anti-clockwise. When the final counter lands in an occupied hole, these are picked up and sowing continues, unless a capture can be made. Captures are made when the final counter falls into an occupied hole in the inner row, and the opponent's hole opposite contains counters. If it is, they are captured, and if the hole in to outer row opposite also contains counters, these are also captured. These are then sown from the hole following the one from which the capture occurred. If the final counter falls into an empty hole, the turn is over. Single counters cannot be sown. Play ends when one player cannot move.
(game "Owela (Benguela)" (players 2) (equipment {(mancalaBoard 4 12 None {(track "Track1" "0,E,N1,W" true P1) (track "Track2" "24,E,N1,W" true P2)}) (regions "Home" P1 (sites Track "Track1")) (regions "Home" P2 (sites Track "Track2")) (regions "Inner" P1 (difference (sites Track "Track1") (sites Bottom))) (regions "Inner" P2 (difference (sites Track "Track2") (sites Top))) (regions "Outer" P1 (sites Bottom)) (regions "Outer" P2 (sites Top)) (regions "InnerInit" P1 (sites {19 20 21 22 23})) (regions "InnerInit" P2 (sites {24 25 26 27 28})) (piece "Seed" Shared) (hand Each)}) (rules (start (set Count 2 (union {(sites P1 "Outer") (sites P1 "InnerInit") (sites P2 "Outer") (sites P2 "InnerInit")}))) (play (move Select (from (if (is Prev Mover) (if (is Pending) (sites {(value Pending)}) (sites {(last To true)})) (sites Mover "Home")) (> (count (from )) 1)) (then (sow "Track" (mover ) (if (> (count (to )) 1) (if (and (is In (to ) (sites Mover "Inner")) (> (count (if (is Mover P1) (+ (to ) 12) (- (to ) 12))) 0)) (and {(fromTo (from (to )) (to (handSite Mover)) (count (to ))) (fromTo (from (if (is Mover P1) (+ (to ) 12) (- (to ) 12))) (to (handSite Mover)) (count (if (is Mover P1) (+ (to ) 12) (- (to ) 12)))) (if (> (count (if (is Mover P1) (+ (to ) (* 12 2)) (- (to ) (* 12 2)))) 0) (fromTo (from (if (is Mover P1) (+ (to ) (* 12 2)) (- (to ) (* 12 2)))) (to (handSite Mover)) (count (if (is Mover P1) (+ (to ) (* 12 2)) (- (to ) (* 12 2)))))) (if (> (count (if (is Mover P1) (trackSite Move (to ) "Track1" 1) (trackSite Move (to ) "Track2" 1))) 1) (and (set Pending (if (is Mover P1) (trackSite Move (to ) "Track1" 1) (trackSite Move (to ) "Track2" 1))) (moveAgain )))}) (moveAgain ))))))) (end (if (no Moves Mover) (byScore {(score P1 (+ (count Cell (handSite P1)) (count (sites P1)))) (score P2 (+ (count Cell (handSite P2)) (count (sites P2))))})))))

4-row board, of any number of holes. Only the outer rows are used. Four counters in each hole in the outer row. Sowing occurs in an anti-clockwise direction. Players do not own rows, instead, over the course of their sowing, their counters are always grouped together, and sowing must occur from the rearmost counter in the player's series. If, after sowing, a player's series has one counter in the foremost hole and two in the next hole behind it, the player sows again from the rearmost hole. If the player overtakes the opponent's series, the player captures any counters in the opponent's series and places all of them in the hole immediately behind the player's series, now becoming the rearmost hole. If the rearmost hole contains a single counter, it is moved into the next hole which then becomes the rearmost hole for the next turn. If a player is reduced to a single counter, it can be moved two holes on the player's turn. The player who successfully captures all of the opponent's counters wins. 
(game "Chiana wa Kunja" (players 2) (equipment {(mancalaBoard 4 16 None (track "Track" "0,E,63,W" true)) (piece "Seed" Each) (hand Shared)}) (rules (start {(place "Seed1" (sites Bottom) {4}) (place "Seed2" (sites Top) {4})}) (play (or (move Select (from (trackSite FirstSite (trackSite FirstSite (not (is Mover (who (to ))))) (is Mover (who (to ))))) (then (do (and (forEach Site (sites Track "Track" (last From) (trackSite Move (last From) (count (last From)))) (if (!= (mover ) (who (site ))) (and (remove (site ) (count (site ))) (add (piece (id "Seed" Mover)) (to Cell (handSite Shared)) (count (site )))))) (set Var "NumSowed" (count (last From)))) (sow ) (then (and {(if (< 1 (var "NumSowed")) (if (and (= 1 (count (trackSite Move (last From) "Track" (var "NumSowed")))) (= 2 (count (trackSite Move (last From) "Track" (- (var "NumSowed") 1))))) (moveAgain ))) (if (!= 0 (what Cell (handSite Shared))) (fromTo (from Cell (handSite Shared)) (to (last From)) (count Cell (handSite Shared)))) (set Var "NumSowed" 0)}))))) (if (and (= 1 (count Pieces Mover)) (is Empty (trackSite Move (from ) "Track" 1))) (move (from (trackSite FirstSite (trackSite FirstSite (not (is Mover (who (to ))))) (is Mover (who (to ))))) (to (trackSite Move (from ) "Track" 2) (apply (and (remove (to ) (count (to ))) (add (piece (id "Seed" Mover)) (to (to )) (count (to )))))))))) (end (if (no Moves Next) (result Mover Win)))))

4x8 board, occasionally 4x9 or 10. One counter in each hole. Sowing occurs in an anti-clockwise direction. The players start by each making a stylised move. Sowing begins from the rightmost hole in the outer row. When the final counter lands in an occupied hole, these counters are picked up and sowing continues. When the sowing reaches the hole immediately before the one from which the sowing began (I.e,, the second-to-right hole in the outer row), these two counters are picked up and both placed in the rightmost hole in the outer row. The player then removes the two counters in the second-to-right hole in the inner row from the board. When both players complete this move, the main phase of the game begins. Players sow from any hole in their two rows. When the final counter lands in an occupied hole, these counters are picked up and sowing continues. When the final counter lands in an empty hole in the inner row, the counters in the opponent's opposite hole in their inner row are captured. If there are also counters in the opponent's opposite hole in the outer row, these are also captured, but only when a capture from the inner row was also made. Players cannot sow single counters, unless there are no holes with multiple counters left, in which case single counters may be sown into an empty hole. Play continues until one player has captured all of the opponent's counters, thus winning the game.
(game "Njombwa (One Counter)" (players 2) (equipment {(mancalaBoard 4 8 None {(track "Track1" "0,E,N1,W" true P1) (track "Track2" "16,E,N1,W" true P2)}) (regions "Home" P1 (sites Track "Track1")) (regions "Home" P2 (sites Track "Track2")) (regions "Inner" P1 (difference (sites Track "Track1") (sites Bottom))) (regions "Inner" P2 (difference (sites Track "Track2") (sites Top))) (regions "Outer" P1 (sites Bottom)) (regions "Outer" P2 (sites Top)) (piece "Seed" Shared)}) (rules (start (set Count 1 (sites Board))) {(phase "Opening1" (play (move Select (from (if (is Prev Mover) (sites {(last To true)}) (if (is Mover P1) (intersection (sites Mover "Outer") (sites Right)) (intersection (sites Mover "Outer") (sites Left)))) (> (count (from )) 0)) (then (sow "Track" (mover ) (if (and (not (is In (trackSite Move (to ) "Track" 1) (if (is Mover P1) (intersection (sites Mover "Outer") (sites Right)) (intersection (sites Mover "Outer") (sites Left))))) (< 1 (count (to )))) (moveAgain )))))) (nextPhase Mover (not (is Next Mover)) "Opening2")) (phase "Opening2" (play (move (from (sites Mover "Home") (is In (trackSite Move (from ) "Track" 1) (if (is Mover P1) (intersection (sites Mover "Outer") (sites Right)) (intersection (sites Mover "Outer") (sites Left))))) (to (if (is Mover P1) (intersection (sites Mover "Outer") (sites Right)) (intersection (sites Mover "Outer") (sites Left)))) 2)) (nextPhase Mover "Opening3")) (phase "Opening3" (play (move Remove (if (is Mover P1) (intersection (sites Mover "Inner") (difference (expand (sites Right)) (sites Right))) (intersection (sites Mover "Inner") (difference (expand (sites Left)) (sites Left)))))) (nextPhase Mover "Sowing")) (phase "Sowing" (play (if (all Sites (sites Mover "Home") (>= 1 (count (site )))) (move Select (from (sites Mover "Home") (and (is Occupied (from )) (is Empty (trackSite Move (from ) "Track" 1)))) (then (sow "Track" (mover )))) (move Select (from (if (is Prev Mover) (sites {(last To true)}) (sites Mover "Home")) (> (count (from )) 1)) (then (sow "Track" (mover ) (if (< 1 (count (to ))) (moveAgain ) (if (and (is In (to ) (sites Mover "Inner")) (is Occupied (if (is Mover P1) (+ (to ) 8) (- (to ) 8)))) (and (remove (if (is Mover P1) (+ (to ) 8) (- (to ) 8))) (if (is Occupied (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2)))) (remove (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2))))))))))))))} (end (forEach NonMover (all Sites (sites Player) (= 0 (count (site )))) (result Player Loss)))))

4x8 board. Two counters in each hole. Before play, players may arrange their counters as they see fit in their holes. Players alternate turns sowing the counters from one of their holes in an anticlockwise direction. When the final counter lands in an empty hole, their turn is over. If the final counter lands in an occupied hole, the contents of the two opposite hole in the opponent's rows are captured. If both do not have counters, then the player picks up the counters from the hole the last counter fell into and continues sowing. The player who captures all of the opponent's counters wins.
(game "Lisolo" (players 2) (equipment {(mancalaBoard 4 8 None {(track "Track1" "0,E,N1,W" true P1) (track "Track2" "16,E,N1,W" true P2)}) (piece "Seed" Shared) (regions "Home" P1 (sites Track "Track1")) (regions "Home" P2 (sites Track "Track2")) (regions "Inner" P1 (difference (sites Track "Track1") (sites Bottom))) (regions "Inner" P2 (difference (sites Track "Track2") (sites Top)))}) (rules (start (set Count 2 (union (sites P1 "Home") (sites P2 "Home")))) {(phase "Opening" (play (or (forEach Site (sites Mover "Home") (if (is Occupied (site )) (move (from (site )) (to (forEach (sites Mover "Home") (!= (to ) (site ))))))) (move Pass))) (nextPhase (all Passed) "Sowing")) (phase "Sowing" (play (move Select (from (if (is Prev Mover) (sites {(last To true)}) (sites Mover)) (> (count (from )) 0)) (then (sow "Track" (mover ) (if (> (count (to )) 1) (if (not (is In (to ) (sites Mover "Inner"))) (moveAgain ) (if (and (= 0 (count (if (is Mover P1) (+ (to ) 8) (- (to ) 8)))) (= 0 (count (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2)))))) (moveAgain ) (and (if (!= 0 (count (if (is Mover P1) (+ (to ) 8) (- (to ) 8)))) (remove (if (is Mover P1) (+ (to ) 8) (- (to ) 8)) (count (if (is Mover P1) (+ (to ) 8) (- (to ) 8))))) (if (!= 0 (count (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2))))) (remove (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2))) (count (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2)))))))))))))))} (end (forEach Player (= 0 (count (sites Player "Home"))) (result Player Loss)))))

Play begins with two seeds in each hole. Each player owns the two rows closest to them. Play proceeds by taking the seeds from one hole and sowing them one by one in consecutive holes in an anti-clockwise direction. If the last seed falls in a hole in the inner row, and the opponent's hole opposite it is not empty, then the opponent's seeds in that hole are captured. Players can only play from holes with single counters when there is no other option, and they may not sow into another hole that already contains a counter. Play continues until one player no longer has any seeds.
(game "Hawalis" (players 2) (equipment {(mancalaBoard 4 7 None {(track "Track1" "0,E,N1,W" true P1) (track "Track2" "14,E,N1,W" true P2)}) (regions "Home" P1 (sites Track "Track1")) (regions "Home" P2 (sites Track "Track2")) (regions "Inner" P1 (difference (sites Track "Track1") (sites Bottom))) (regions "Inner" P2 (difference (sites Track "Track2") (sites Top))) (piece "Seed" Shared) (hand Each)}) (rules (start (set Count 2 (union (sites P1 "Home") (sites P2 "Home")))) (play (priority (move Select (from (sites Mover "Home") (> (count (from )) 1)) (then (sow "Track" (mover ) (and {(= (count (to )) 1) (is In (to ) (sites Mover "Inner")) (> (count (if (is Mover P1) (+ (to ) 7) (- (to ) 7))) 0)}) (fromTo (from (if (is Mover P1) (+ (to ) 7) (- (to ) 7))) (to (handSite Mover)) (count (if (is Mover P1) (+ (to ) 7) (- (to ) 7))))))) (move Select (from (sites Mover "Home") (= (count (from )) 1)) (then (sow "Track" (mover ) (and {(= (count (to )) 1) (is In (to ) (sites Mover "Inner")) (> (count (if (is Mover P1) (+ (to ) 7) (- (to ) 7))) 0)}) (fromTo (from (if (is Mover P1) (+ (to ) 7) (- (to ) 7))) (to (handSite Mover)) (count (if (is Mover P1) (+ (to ) 7) (- (to ) 7))))))))) (end (if (no Moves Mover) (byScore {(score P1 (+ (count Cell (handSite P1)) (count (sites P1 "Home")))) (score P2 (+ (count Cell (handSite P2)) (count (sites P2 "Home"))))})))))

4x6-16 board. Number of counters per player is four times the number of holes in a row minus two. Counters are distributed only in the outer row, with two counters in each hole, except the hole on the far left which contains the rest. The counters are then redistributed so that there is one in every hole, except the one on the extreme left in the inner and outer hole. The one on the left in the inner hole remains empty and the one in the outer row retains the same number initially placed there. Play begins from any of the player's holes, sowing anti-clockwise. When the final counter lands in an occupied hole, these are picked up and sowing continues, unless a capture can be made. Captures are made when the final counter falls into an occupied hole in the inner row, and the opponent's hole opposite contains counters. If it is, they are captured, and if the hole in to outer row opposite also contains counters, these are also captured. These are then sown from the hole following the one from which the capture occurred. If the final counter falls into an empty hole, the turn is over. Single counters cannot be sown. Play ends when one player cannot move.
(game "Muvalavala (Quioco)" (players 2) (equipment {(mancalaBoard 4 6 None {(track "Track1" "0,E,N1,W" true P1) (track "Track2" "12,E,N1,W" true P2)}) (piece "Seed" Shared) (regions "Home" P1 (sites Track "Track1")) (regions "Home" P2 (sites Track "Track2")) (regions "Inner" P1 (difference (sites Track "Track1") (sites Bottom))) (regions "Inner" P2 (difference (sites Track "Track2") (sites Top))) (regions "Outer" P1 (sites Bottom)) (regions "Outer" P2 (sites Top))}) (rules (start {(set Count 1 (union {(difference (sites P1 "Home") (sites Left)) (difference (sites P2 "Home") (sites Right))})) (set Count (- (- (* 4 6) 2) (* 2 (- 6 1))) (union (intersection (sites Left) (sites P1 "Outer")) (intersection (sites Right) (sites P2 "Outer"))))}) (play (move Select (from (if (is Prev Mover) (sites {(last To true)}) (sites Mover "Home")) (> (count (from )) 1)) (then (sow "Track" (mover ) (if (and {(> (count (to )) 1) (is In (to ) (sites Mover "Inner")) (> (count (if (is Mover P1) (+ (to ) 6) (- (to ) 6))) 0)}) (and {(fromTo (from (if (is Mover P1) (+ (to ) 6) (- (to ) 6))) (to (to )) (count (if (is Mover P1) (+ (to ) 6) (- (to ) 6)))) (if (> (count (if (is Mover P1) (+ (to ) (* 6 2)) (- (to ) (* 6 2)))) 0) (fromTo (from (if (is Mover P1) (+ (to ) (* 6 2)) (- (to ) (* 6 2)))) (to (to )) (count (if (is Mover P1) (+ (to ) (* 6 2)) (- (to ) (* 6 2)))))) (sow (to ) (+ (count (if (is Mover P1) (+ (to ) 6) (- (to ) 6))) (count (if (is Mover P1) (+ (to ) (* 6 2)) (- (to ) (* 6 2))))) "Track" (mover ))}) (if (> (count (to )) 1) (moveAgain ))))))) (end (if (no Moves Next) (result Mover Win)))))

4x8 board. Four pieces in each of the holes in the inner two rows. Sowing occurs in an anti-clockwise direction. Single counters cannot be sown. When the final counter of a sowing falls into an occupied hole, these counters are picked up and the sowing continues. If this hole is in the player's inner row, the counters in the opponent's opposite holes in both rows are captured. Both the inner and outer opposite holes must contain counters for a capture to occur. Play continues with the captured counters, and the player sows these beginning with the next hole after the last one on the player's side from which they picked up holes. Captures cannot be made on the first move. Clockwise sowing can begin from the following holes only if it will allow a capture to occur: the rightmost and leftmost holes of the outer row, the second from the right and second from the left holes in the inner row. Direction can be changed in the middle of a turn if the final counter lands in one of these holes and a clockwise move will result in a capture. When no capture is available, the player must resume in an anti-clockwise direction. When the final counter falls into an empty hole, the turn ends. 
(game "Kubuguza" (players 2) (equipment {(mancalaBoard 4 8 None {(track "TrackCCW1" "0,E,N1,W" true P1) (track "TrackCCW2" "16,E,N1,W" true P2) (track "TrackCW1" "7,W,N1,E" true P1) (track "TrackCW2" "23,W,N1,E" true P2)}) (regions "Home" P1 (sites Track "TrackCCW1")) (regions "Home" P2 (sites Track "TrackCCW2")) (regions "Inner" P1 (difference (sites Track "TrackCCW1") (sites Bottom))) (regions "Inner" P2 (difference (sites Track "TrackCCW2") (sites Top))) (regions "HolesCW" P1 (sites {15 8 1 6})) (regions "HolesCW" P2 (sites {16 23 25 30})) (piece "Seed" Shared) (hand Each)}) (rules (start (set Count 3 (union (sites P1 "Inner") (sites P2 "Inner")))) (play (or (move Select (from (if (is Prev Mover) (sites {(var "Replay")}) (sites Mover "Home")) (> (count (from )) 1)) (then (sow "TrackCCW" (mover ) (if (< 1 (count (to ))) (and (if (and {(> (count Turns) 2) (is In (to ) (sites Mover "Inner")) (is Occupied (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2)))) (is Occupied (if (is Mover P1) (+ (to ) 8) (- (to ) 8)))}) (and {(fromTo (from (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2)))) (to (last From)) (count (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2))))) (fromTo (from (if (is Mover P1) (+ (to ) 8) (- (to ) 8))) (to (last From)) (count (if (is Mover P1) (+ (to ) 8) (- (to ) 8)))) (set Var "Replay" (last From))}) (set Var "Replay" (to ))) (moveAgain )))))) (move Select (from (if (is Prev Mover) (sites {(var "Replay")}) (sites Mover "HolesCW")) (and {(> (count (from )) 1) (is In (from ) (sites Mover "HolesCW")) (if (is In (trackSite Move (from ) "TrackCW" (count (from ))) (sites Mover "Inner")) (and (is Occupied (if (is Mover P1) (+ (trackSite Move (from ) "TrackCW" (count (from ))) (* 8 2)) (- (trackSite Move (from ) "TrackCW" (count (from ))) (* 8 2)))) (is Occupied (if (is Mover P1) (+ (trackSite Move (from ) "TrackCW" (count (from ))) 8) (- (trackSite Move (from ) "TrackCW" (count (from ))) 8)))) false)})) (then (sow "TrackCW" (mover ) (if (< 1 (count (to ))) (and (if (and {(> (count Turns) 2) (is In (to ) (sites Mover "Inner")) (is Occupied (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2)))) (is Occupied (if (is Mover P1) (+ (to ) 8) (- (to ) 8)))}) (and {(fromTo (from (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2)))) (to (last From)) (count (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2))))) (fromTo (from (if (is Mover P1) (+ (to ) 8) (- (to ) 8))) (to (last From)) (count (if (is Mover P1) (+ (to ) 8) (- (to ) 8)))) (set Var "Replay" (last From))}) (set Var "Replay" (to ))) (moveAgain )))))))) (end (forEach Player (no Moves Player) (result Player Loss)))))

4x8 board. Two counters in each hole. Sowing proceeds in an anti-clockwise direction. The first move must begin from the second hole from the right in the player's outer row, and proceed as follows, and is played simultaneously by both players: sow the two counters from that first hole, capture the counters in the opponent's two opposite holes and sow them, starting in the rightmost hole in the outer row, capture from the opposite two holes on the opponent's side and sow them again from the same hole. When the final counter falls in an occupied hole, those counters are picked up and sowing continues. The opening move ends when the final counter falls in an empty hole. The main phase then begins. When the final counter falls into an occupied hole in the player's inner row and both of the opposite holes on the opponent's side of the board are occupied, the counters in the opposite holes are captured and sown beginning in the first hole that was sown into to begin the sowing that caused the capture. When the final counter falls into an occupied hole and a capture is not possible, the contents of the hole are picked up and sowing continues. When the final counter lands in an empty hole, the turn ends. Players cannot sow from a hole containing a single counter. The player who captures all of their opponent's counters wins.
        
(game "Otep" (players 2) (equipment {(mancalaBoard 4 8 None {(track "Track1" "0,E,N1,W" true P1) (track "Track2" "16,E,N1,W" true P2)}) (regions "Home" P1 (sites Track "Track1")) (regions "Home" P2 (sites Track "Track2")) (regions "Inner" P1 (difference (sites Track "Track1") (sites Bottom))) (regions "Inner" P2 (difference (sites Track "Track2") (sites Top))) (piece "Seed" Shared) (map "SecondRightOuter" {(pair P1 14) (pair P2 17)}) (map "RightOuter" {(pair P1 15) (pair P2 16)}) (hand Each)}) (rules (start (set Count 2 (sites Board))) {(phase "Opening1" (play (move Select (from (mapEntry "SecondRightOuter" Mover)) (then (sow "Track" (mover ) (and (fromTo (from (if (is Mover P1) (+ (last From) 8) (- (last From) 8))) (to (mapEntry "RightOuter" Mover)) 2) (fromTo (from (if (is Mover P1) (+ (last From) (* 8 2)) (- (last From) (* 8 2)))) (to (mapEntry "RightOuter" Mover)) 2)))))) (nextPhase Mover "Opening2")) (phase "Opening2" (play (move Select (from (mapEntry "RightOuter" Mover)) (then (sow "Track" (mover ) (and (fromTo (from (if (is Mover P1) (+ (last From) 8) (- (last From) 8))) (to (mapEntry "RightOuter" Mover)) 2) (fromTo (from (if (is Mover P1) (+ (last From) (* 8 2)) (- (last From) (* 8 2)))) (to (mapEntry "RightOuter" Mover)) 2)))))) (nextPhase Mover "Opening3")) (phase "Opening3" (play (move Select (from (if (is Prev Mover) (sites {(last To true)}) (sites {(mapEntry "RightOuter" Mover)}))) (then (sow "Track" (mover ) (if (< 1 (count (to ))) (moveAgain )))))) (nextPhase Mover (not (is Next Prev)) "Sowing")) (phase "Sowing" (play (move Select (from (if (is Prev Mover) (sites {(last To true)}) (sites Mover)) (> (count (from )) 1)) (then (sow "Track" (mover ) (if (and {(is In (to ) (sites Mover "Inner")) (< 1 (count (to ))) (is Occupied (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2)))) (is Occupied (if (is Mover P1) (+ (to ) 8) (- (to ) 8)))}) (and {(fromTo (from (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2)))) (to (last From)) (count (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2))))) (fromTo (from (if (is Mover P1) (+ (to ) 8) (- (to ) 8))) (to (last From)) (count (if (is Mover P1) (+ (to ) 8) (- (to ) 8)))) (sow (last From) (+ (count (if (is Mover P1) (+ (to ) 8) (- (to ) 8))) (count (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2))))) "Track" (mover ))}) (if (< 1 (count (to ))) (moveAgain ))))))))} (end (forEach Player (no Moves Player) (result Player Loss)))))

4x4, 8, 10, 16, or 22 board. Two counters in each hole. Sowing occurs in an anti-clockwise direction. When the final counter of a sowing lands in an occupied hole, the contents are picked up and sowing continues. When the final counter lands in an empty hole in the player's inner row, the contents of the opponent's hole in the inner row opposite it are captured, and if there are counters also in the corresponding outer row hole, these are also captured. The player may also capture from another hole from the opponent's side of the board of their choosing. The turn ends. If the final counter lands in an empty hole in the player's outer row, the turn ends. Play continues until one player captures all of the opponent's counters, thus winning.
(game "Tshuba" (players 2) (equipment {(mancalaBoard 4 4 None {(track "Track1" "0,E,N1,W" true P1) (track "Track2" "8,E,N1,W" true P2)}) (regions "Home" P1 (sites Track "Track1")) (regions "Home" P2 (sites Track "Track2")) (regions "Inner" P1 (difference (sites Track "Track1") (sites Bottom))) (regions "Inner" P2 (difference (sites Track "Track2") (sites Top))) (piece "Seed" Shared) (hand Each)}) (rules (start (set Count 2 (union (sites P1 "Home") (sites P2 "Home")))) (play (if (= 1 (var "ExtraCapture")) (move Remove (difference (sites Next "Home") (sites Empty)) (count (to )) (then (set Var "ExtraCapture" 0))) (move Select (from (if (is Prev Mover) (sites {(last To true)}) (sites Mover)) (< 0 (count (from )))) (then (sow "Track" (mover ) (if (< 1 (count (to ))) (moveAgain ) (if (is In (to ) (sites Mover "Inner")) (and {(if (> (count (if (is Mover P1) (+ (to ) 4) (- (to ) 4))) 0) (remove (if (is Mover P1) (+ (to ) 4) (- (to ) 4)) (count (if (is Mover P1) (+ (to ) 4) (- (to ) 4))))) (if (> (count (if (is Mover P1) (+ (to ) (* 4 2)) (- (to ) (* 4 2)))) 0) (remove (if (is Mover P1) (+ (to ) (* 4 2)) (- (to ) (* 4 2))) (count (if (is Mover P1) (+ (to ) (* 4 2)) (- (to ) (* 4 2)))))) (set Var "ExtraCapture" 1) (moveAgain )})))))))) (end (if (all Sites (sites Next "Home") (= 0 (count (site )))) (result Mover Win)))))

4x6-21 board; 8 is most common, 12, 15, and 18 are also popular. Two counters in each hole in the players' outer rows. Before the game starts, players choose to make additional captures from one, two, or three holes. Sowing occurs in an anti-clockwise direction, only in the two rows belonging to the player. When the final counter lands in an occupied hole, these are picked up and sowing continues. When the final counter lands in an empty hole in the inner row, any counters in the opposite hole in the opponent's inner row are captured. If there also are counters in the opposite hole in the opponent's outer row, these are also captured, but only if there was first a capture from the inner row hole. The player then captures again, from the agreed-upon number of extra holes, chosen from any of the opponent's holes. Players cannot sow from a hole with a single counter unless there are no holes with multiple counters. Single counters can only be sown into an empty hole. Play continues until one player has captured all of the opponent's counters, thus winning the game.
(game "Tsoro (Additional Capture)" (players 2) (equipment {(mancalaBoard 4 8 None {(track "Track1" "0,E,N1,W" true P1) (track "Track2" "16,E,N1,W" true P2)}) (regions "Home" P1 (sites Track "Track1")) (regions "Home" P2 (sites Track "Track2")) (regions "Inner" P1 (difference (sites Track "Track1") (sites Bottom))) (regions "Inner" P2 (difference (sites Track "Track2") (sites Top))) (piece "Seed" Shared)}) (rules (start (set Count 2 (union (sites Top) (sites Bottom)))) (play (if (< 0 (var )) (move Remove (forEach (sites Next) (< 0 (count (site )))) (then (and (if (< 1 (var )) (moveAgain )) (set Var (- (var ) 1))))) (move Select (from (if (is Prev Mover) (sites {(last To true)}) (sites Mover "Home")) (if (not (all Sites (forEach (sites Mover) (< 1 (count (site )))) (= 0 (count (site ))))) (> (count (from )) 1) (and (= (count (from )) 1) (= 0 (count (trackSite Move (from ) Mover 1)))))) (then (sow "Track" (mover ) (if (= (count (to )) 1) (if (is In (to ) (sites Mover "Inner")) (if (> (count (if (is Mover P1) (+ (to ) 8) (- (to ) 8))) 0) (and {(remove (if (is Mover P1) (+ (to ) 8) (- (to ) 8))) (if (> (count (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2)))) 0) (remove (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2))))) (moveAgain ) (set Var 3)}))) (moveAgain ))))))) (end (forEach NonMover (all Sites (sites Player "Home") (= 0 (count (site )))) (result Player Loss)))))

4x8 board. Two counters in each hole. Sowing proceeds in an anti-clockwise direction. The first move must begin from the second hole from the right in the player's outer row, and proceed as follows, and is played simultaneously by both players: sow the two counters from that first hole, capture the counters in the opponent's two opposite holes and sow them, starting in the rightmost hole in the outer row, capture from the opposite two holes on the opponent's side and sow them again from the same hole. When the final counter falls in an occupied hole, those counters are picked up and sowing continues. The opening move ends when the final counter falls in an empty hole. The main phase then begins. When the final counter falls into an occupied hole in the player's inner row and both of the opposite holes on the opponent's side of the board are occupied, the counters in the opposite holes are captured and sown beginning in the first hole that was sown into to begin the sowing that caused the capture. When the final counter falls into an occupied hole and a capture is not possible, the contents of the hole are picked up and sowing continues. When the final counter lands in an empty hole, the turn ends. Players cannot sow from a hole containing a single counter. The player who captures all of their opponent's counters wins.
(game "Ryakati" (players 2) (equipment {(mancalaBoard 4 8 None {(track "Track1" "0,E,N1,W" true P1) (track "Track2" "16,E,N1,W" true P2)}) (regions "Home" P1 (sites Track "Track1")) (regions "Home" P2 (sites Track "Track2")) (regions "Inner" P1 (difference (sites Track "Track1") (sites Bottom))) (regions "Inner" P2 (difference (sites Track "Track2") (sites Top))) (map "RightMostOuter" {(pair P1 7) (pair P2 24)}) (map "SecondHoleRightOuter" {(pair P1 6) (pair P2 25)}) (piece "Seed" Shared) (hand Each)}) (rules (start (set Count 2 (sites Board))) {(phase "Opening1" (play (move Select (from (mapEntry "SecondHoleRightOuter" Mover)) (then (sow "Track" (mover ) (and (fromTo (from (if (is Mover P1) (+ (to ) 8) (- (to ) 8))) (to (mapEntry "RightMostOuter" Mover)) 2) (fromTo (from (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2)))) (to (mapEntry "RightMostOuter" Mover)) 2)))))) (nextPhase Mover "Opening2")) (phase "Opening2" (play (move Select (from (mapEntry "RightMostOuter" Mover)) (then (sow 4 "Track" (mover ) (and (fromTo (from (if (is Mover P1) (+ (to ) 8) (- (to ) 8))) (to (mapEntry "RightMostOuter" Mover)) 2) (fromTo (from (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2)))) (to (mapEntry "RightMostOuter" Mover)) 2)) true)))) (nextPhase Mover "Opening3")) (phase "Opening3" (play (move Select (from (if (is Prev Mover) (var "Replay") (mapEntry "RightMostOuter" Mover))) (then (sow (if (is Prev Mover) (count (last To)) 4) "Track" (mover ) (if (< 1 (count (to ))) (and (moveAgain ) (set Var "Replay" (to )))) (not (is Prev Mover)))))) (nextPhase Mover (not (is Next Mover)) "Sowing")) (phase "Sowing" (play (move Select (from (if (is Prev Mover) (sites {(var "Replay")}) (sites Mover "Home")) (> (count (from )) 1)) (then (sow "Track" (mover ) (if (< 1 (count (to ))) (if (and {(is In (to ) (sites Mover "Inner")) (is Occupied (if (is Mover P1) (+ (to ) 8) (- (to ) 8))) (is Occupied (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2))))}) (and {(fromTo (from (if (is Mover P1) (+ (to ) 8) (- (to ) 8))) (to (last From)) (count (if (is Mover P1) (+ (to ) 8) (- (to ) 8)))) (fromTo (from (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2)))) (to (last From)) (count (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2))))) (sow (last From) (+ (count (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2)))) (count (if (is Mover P1) (+ (to ) 8) (- (to ) 8)))) "Track" (mover ))}) (and (moveAgain ) (set Var "Replay" (to ))))))))))} (end (forEach NonMover (all Sites (sites Player "Home") (= 0 (count (site )))) (result Player Loss)))))

4x6, 9, 12, or 15. Two counters in each hole. Players begin by sowing from the rightmost hole in the inner row, placing one counter in each of the first two holes, then picking up the counters from the next hole and continuing to sow until the next hole after the sowing is empty (this should be the hole from which the sowing began). Each player then takes two counters from any of the holes in their inner row and places them in any empty hole in the outer row. The player then captures the counters in the opponent's opposite holes. The player then removes the contents of any one of the opponent's holes. Once both players have done this, the main phase begins. Players move by sowing from any of the holes on their side of the board in an anti-clockwise direction. When the final counter lands in an occupied hole, these are picked up and sowing continues. When they fall into an empty hole, the sowing ends. If this hole is in the inner row, the contents of the opponent's opposite hole in the inner row are also taken. If there are also counters in the opponent's outer row opposite, these are also taken. The player may also capture the contents of any other hole in the inner or outer row. Single counters may be moved. The player who captures all of their opponent's counters wins.
(game "Nchuwa" (players 2) (equipment {(mancalaBoard 4 6 None {(track "TrackCCW1" "0,E,N1,W" true P1) (track "TrackCCW2" "12,E,N1,W" true P2)}) (regions "Home" P1 (sites Track "TrackCCW1")) (regions "Home" P2 (sites Track "TrackCCW2")) (regions "Inner" P1 (sites Row 1)) (regions "Inner" P2 (sites Row 2)) (regions "Outer" P1 (sites Row 0)) (regions "Outer" P2 (sites Row 3)) (piece "Seed" Shared)}) (rules (start (set Count 2 (union (sites P1 "Home") (sites P2 "Home")))) {(phase "Opening1" (play (move Select (from (if (is Mover P1) (intersection (sites Right) (sites Row 1)) (intersection (sites Left) (sites Row 2)))) (then (sow "TrackCCW" (mover ) (set Value Mover (trackSite Move (to ) 1)))))) (nextPhase Mover "Opening2")) (phase "Opening2" (play (move Select (from (value Player Mover)) (then (sow "TrackCCW" (mover ) (if (= (count (trackSite Move (to ) 1)) 0) (set Value Mover -1) (set Value Mover (trackSite Move (to ) 1))))))) (nextPhase Mover (= (value Player Mover) -1) "Opening3")) (phase "Opening3" (play (move (from (forEach (sites Mover "Inner") (!= 0 (count (site ))))) (to (forEach (sites Mover "Outer") (= 0 (count (site ))))) 2)) (nextPhase Mover "Opening4")) (phase "Opening4" (play (move Remove (sites Next "Home"))) (nextPhase Mover "Opening5")) (phase "Opening5" (play (move Remove (sites Next "Home"))) (nextPhase Mover "Playing")) (phase "Playing" (play (move Select (from (if (is Prev Mover) (sites {(last To true)}) (sites Mover "Home")) (> (count (from )) 0)) (then (sow "TrackCCW" (mover ) (if (= (count (to )) 1) (if (is In (to ) (sites Mover "Inner")) (if (> (count (if (is Mover P1) (+ (to ) 6) (- (to ) 6))) 0) (and (remove (if (is Mover P1) (+ (to ) 6) (- (to ) 6))) (if (> (count (if (is Mover P1) (+ (to ) (* 6 2)) (- (to ) (* 6 2)))) 0) (remove (if (is Mover P1) (+ (to ) (* 6 2)) (- (to ) (* 6 2)))))))) (moveAgain )))))))} (end (forEach Player (= 0 (count (sites Player "Home"))) (result Player Loss)))))

4x8 board. The counters begin in the following arrangement, starting from a player's left most hole in the outer row and proceeding anticlockwise: 0,0,1,0,0,1,6,0,8,0,1,0,0,1,6,8. To start, players may not sow into or sow from the leftmost and rightmost holes in both of their rows. When it is no longer possible for the player to make a legal move using only these twelve holes, they may then play using all of the holes. The opponent must continue using only twelve holes until they also cannot make a legal move with them. Sowing proceeds in an anti-clockwise direction. When the final counter falls into an occupied hole in the player's inner row and both of the opposite holes on the opponent's side of the board are occupied, the counters in the opposite holes are captured and sown beginning in the first hole that was sown into to begin the sowing that caused the capture. When the final counter falls into an occupied hole and a capture is not possible, the contents of the hole are picked up and sowing continues. When the final counter lands in an empty hole, the turn ends. Players cannot sow from a hole containing a single counter. The player who captures all of their opponent's counters wins.
        
(game "Lobudok" (players 2) (equipment {(mancalaBoard 4 8 None {(track "Track1" "0,E,N1,W" true P1) (track "Track2" "16,E,N1,W" true P2)}) (regions "Home" P1 (sites Track "Track1")) (regions "Home" P2 (sites Track "Track2")) (regions "Inner" P1 (difference (sites Track "Track1") (sites Bottom))) (regions "Inner" P2 (difference (sites Track "Track2") (sites Top))) (regions "SideHoles" P1 (intersection (sites Track "Track1") (union (sites Left) (sites Right)))) (regions "SideHoles" P2 (intersection (sites Track "Track2") (union (sites Right) (sites Left)))) (piece "Seed" Shared) (hand Each)}) (rules (start {(set Count 1 (sites {2 5 13 10 29 26 18 21})) (set Count 8 (sites {15 16 8 23})) (set Count 6 (sites {6 9 22 25}))}) (play (or (move Select (from (if (is Prev Mover) (sites {(last To true)}) (difference (sites Mover "Home") (sites Mover "SideHoles"))) (> (count (from )) 1)) (then (sow "Track" (mover ) (if (and {(is In (to ) (sites Mover "Inner")) (< 1 (count (to ))) (is Occupied (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2)))) (is Occupied (if (is Mover P1) (+ (to ) 8) (- (to ) 8)))}) (and {(fromTo (from (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2)))) (to (last From)) (count (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2))))) (fromTo (from (if (is Mover P1) (+ (to ) 8) (- (to ) 8))) (to (last From)) (count (if (is Mover P1) (+ (to ) 8) (- (to ) 8)))) (sow (last From) (+ (count (if (is Mover P1) (+ (to ) 8) (- (to ) 8))) (count (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2))))) "Track" (mover ) (and (!= 1 (value Player Mover)) (is In (to ) (sites "SideHoles"))))}) (if (< 1 (count (to ))) (moveAgain ))) (and (!= 1 (value Player Mover)) (is In (to ) (sites "SideHoles")))))) (if (if (= 1 (value Player Mover)) true (all Sites (difference (sites Mover "Home") (sites Mover "SideHoles")) (<= (count (site )) 1))) (move Select (from (if (is Prev Mover) (sites {(last To true)}) (sites Mover "SideHoles")) (> (count (from )) 1)) (then (and (sow "Track" (mover ) (if (and {(is In (to ) (sites Mover "Inner")) (< 1 (count (to ))) (is Occupied (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2)))) (is Occupied (if (is Mover P1) (+ (to ) 8) (- (to ) 8)))}) (and {(fromTo (from (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2)))) (to (last From)) (count (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2))))) (fromTo (from (if (is Mover P1) (+ (to ) 8) (- (to ) 8))) (to (last From)) (count (if (is Mover P1) (+ (to ) 8) (- (to ) 8)))) (sow (last From) (+ (count (if (is Mover P1) (+ (to ) 8) (- (to ) 8))) (count (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2))))) "Track" (mover ))}) (if (< 1 (count (to ))) (moveAgain )))) (if (= 0 (value Player Mover)) (set Value Mover 1)))))))) (end (forEach Player (no Moves Player) (result Player Loss)))))

4x6-21 board; 8 is most common, 12, 15, and 18 are also popular. Two counters in each hole in the players' outer rows. Sowing occurs in an anti-clockwise direction, only in the two rows belonging to the player. When the final counter lands in an occupied hole, these are picked up and sowing continues. When the final counter lands in an empty hole in the inner row, any counters in the opposite hole in the opponent's inner row are captured. If there also are counters in the opposite hole in the opponent's outer row, these are also captured, but only if there was first a capture from the inner row hole. Captured counters are then sown on the player's own side of the board, starting with the hole following the one from which the capture was triggered. Players cannot sow from a hole with a single counter unless there are no holes with multiple counters. Single counters can only be sown into an empty hole. Play continues until one player has captured all of the opponent's counters, thus winning the game.
        
(game "Tsoro (Reentered Captures)" (players 2) (equipment {(mancalaBoard 4 8 None {(track "Track1" "0,E,N1,W" true P1) (track "Track2" "16,E,N1,W" true P2)}) (regions "Home" P1 (sites Track "Track1")) (regions "Home" P2 (sites Track "Track2")) (regions "Inner" P1 (difference (sites Track "Track1") (sites Bottom))) (regions "Inner" P2 (difference (sites Track "Track2") (sites Top))) (piece "Seed" Shared)}) (rules (start (set Count 2 (union (sites Top) (sites Bottom)))) (play (move Select (from (if (is Prev Mover) (sites {(last To true)}) (sites Mover "Home")) (if (not (all Sites (forEach (sites Mover) (< 1 (count (site )))) (= 0 (count (site ))))) (> (count (from )) 1) (and (= (count (from )) 1) (= 0 (count (trackSite Move (from ) Mover 1)))))) (then (sow "Track" (mover ) (if (= (count (to )) 1) (if (is In (to ) (sites Mover "Inner")) (if (> (count (if (is Mover P1) (+ (to ) 8) (- (to ) 8))) 0) (and {(fromTo (from (if (is Mover P1) (+ (to ) 8) (- (to ) 8))) (to (to )) (count (if (is Mover P1) (+ (to ) 8) (- (to ) 8)))) (if (> (count (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2)))) 0) (fromTo (from (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2)))) (to (to )) (count (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2)))))) (sow (to ) (+ (count (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2)))) (count (if (is Mover P1) (+ (to ) 8) (- (to ) 8)))) "Track" (mover ))}))) (moveAgain )))))) (end (forEach NonMover (all Sites (sites Player "Home") (= 0 (count (site )))) (result Player Loss)))))

4x10-12 board (even numbers only). One counter in each hole, except for the third hole from the left of the inner row, which contains two, and the rightmost hole of the inner row, which is empty. Play must begin from the hole containing two counters. Sowing occurs in an anti-clockwise direction. When the final counter lands in an occupied hole. These are picked up and sowing continues. When the final counter falls in an empty hole, the contents of the hole in the opponent's  inner row opposite this hole are captured; if there are also counters in the opponent's outer row, these are also captured, along with the contents of any other two holes on the opponent's side of the board. Single counters can be moved only when there are no holes with multiple counters and they may only be moved to an empty hole. The player who captures all of the opponent's counters wins.
(game "Spreta" (players 2) (equipment {(mancalaBoard 4 10 None {(track "Track1" "0,E,N1,W" true P1) (track "Track2" "20,E,N1,W" true P2)}) (regions "Home" P1 (sites Track "Track1")) (regions "Home" P2 (sites Track "Track2")) (regions "Inner" P1 (difference (sites Track "Track1") (sites Bottom))) (regions "Inner" P2 (difference (sites Track "Track2") (sites Top))) (regions "Outer" P1 (sites Bottom)) (regions "Outer" P2 (sites Top)) (piece "Seed" Shared)}) (rules (start {(set Count 1 (union {(sites P1 "Outer") (sites P2 "Outer") (difference (sites P1 "Inner") (sites {12 19})) (difference (sites P2 "Inner") (sites {27 20}))})) (set Count 2 (sites {12 27}))}) {(phase "Opening" (play (move Select (from (sites Mover) (= 2 (count (from )))) (then (sow "Track" (mover ))))) (nextPhase Mover "Playing")) (phase "Playing" (play (if (or (= 1 (var "ExtraCapture")) (= 2 (var "ExtraCapture"))) (move Remove (difference (sites Next "Home") (sites Empty)) (count (to )) (then (if (= 1 (var "ExtraCapture")) (and (moveAgain ) (set Var "ExtraCapture" 2)) (set Var "ExtraCapture" 0)))) (priority {(move Select (from (if (is Prev Mover) (sites {(last To true)}) (sites Mover)) (< 1 (count (from )))) (then (sow "Track" (mover ) (if (< 1 (count (to ))) (moveAgain ) (if (is In (to ) (sites Mover "Inner")) (and {(if (> (count (if (is Mover P1) (+ (to ) 10) (- (to ) 10))) 0) (remove (if (is Mover P1) (+ (to ) 10) (- (to ) 10)) (count (if (is Mover P1) (+ (to ) 10) (- (to ) 10))))) (if (> (count (if (is Mover P1) (+ (to ) (* 10 2)) (- (to ) (* 10 2)))) 0) (remove (if (is Mover P1) (+ (to ) (* 10 2)) (- (to ) (* 10 2))) (count (if (is Mover P1) (+ (to ) (* 10 2)) (- (to ) (* 10 2)))))) (set Var "ExtraCapture" 1) (moveAgain )})))))) (move Select (from (if (is Prev Mover) (sites {(last To true)}) (sites Mover)) (and (= 1 (count (from ))) (= 0 (count (trackSite Move (from ) 1))))) (then (sow "Track" (mover ) (if (< 1 (count (to ))) (moveAgain ) (if (is In (to ) (sites Mover "Inner")) (and {(if (> (count (if (is Mover P1) (+ (to ) 10) (- (to ) 10))) 0) (remove (if (is Mover P1) (+ (to ) 10) (- (to ) 10)) (count (if (is Mover P1) (+ (to ) 10) (- (to ) 10))))) (if (> (count (if (is Mover P1) (+ (to ) (* 10 2)) (- (to ) (* 10 2)))) 0) (remove (if (is Mover P1) (+ (to ) (* 10 2)) (- (to ) (* 10 2))) (count (if (is Mover P1) (+ (to ) (* 10 2)) (- (to ) (* 10 2)))))) (set Var "ExtraCapture" 1) (moveAgain )}))))))}))))} (end (if (all Sites (sites Next "Home") (= 0 (count (site )))) (result Mover Win)))))

4x10-20 holes, with even numbers. Two counters in each hole, except the rightmost hole in the inner row of each player, which has zero, and the hole to its left, which has one. Sowing occurs in an anti-clockwise direction. When the final counter lands in an occupied hole, these are picked up and sowing continues. When the final counter lands in an empty hole in the inner row, the counters in the opposite hole in the opponent's inner row are captured. If counters are captured from the inner row, and there are also counters in the outer row, the counters in the outer row are also captured. If counters in the inner and outer row are captured, the player may also capture counters from two other holes on the opponent's side of the board. Single counters cannot be sown until there are no holes with multiple counters on the player's side of the board, and then single counters may only be sown into empty holes. Play continues until one player captures all of their opponent's counters, thus winning the game.
(game "Msuwa" (players 2) (equipment {(mancalaBoard 4 10 None {(track "Track1" "0,E,N1,W" true P1) (track "Track2" "20,E,N1,W" true P2)}) (regions "Home" P1 (sites Track "Track1")) (regions "Home" P2 (sites Track "Track2")) (regions "Inner" P1 (difference (sites Track "Track1") (sites Bottom))) (regions "Inner" P2 (difference (sites Track "Track2") (sites Top))) (piece "Seed" Shared)}) (rules (start {(set Count 2 (difference (sites Board) (sites {18 19 20 21}))) (set Count 1 (sites {18 21}))}) (play (if (and (is Prev Mover) (< 0 (var ))) (move Remove (forEach (sites Next "Home") (< 0 (count (site )))) (then (and (if (> (var ) 1) (moveAgain )) (set Var (- (var ) 1))))) (if (not (all Sites (forEach (sites Mover "Home") (< 1 (count (site )))) (= 0 (count (site ))))) (move Select (from (if (is Prev Mover) (sites {(last To true)}) (sites Mover "Home")) (< 1 (count (from )))) (then (sow "Track" (mover ) (if (< 1 (count (to ))) (moveAgain ) (if (is In (to ) (sites Mover "Inner")) (if (< 0 (count (if (is Mover P1) (+ (to ) 10) (- (to ) 10)))) (and (remove (if (is Mover P1) (+ (to ) 10) (- (to ) 10))) (if (< 0 (count (if (is Mover P1) (+ (to ) (* 10 2)) (- (to ) (* 10 2))))) (and {(remove (if (is Mover P1) (+ (to ) (* 10 2)) (- (to ) (* 10 2)))) (set Var 2) (moveAgain )}))))))))) (move Select (from (sites Mover "Home") (and (= 1 (count (from ))) (= 0 (count (trackSite Move (from ) 1))))) (then (sow "Track" (mover ) (if (is In (to ) (sites Mover "Inner")) (if (< 0 (count (if (is Mover P1) (+ (to ) 10) (- (to ) 10)))) (and (remove (if (is Mover P1) (+ (to ) 10) (- (to ) 10))) (if (< 0 (count (if (is Mover P1) (+ (to ) (* 10 2)) (- (to ) (* 10 2))))) (and {(remove (if (is Mover P1) (+ (to ) (* 10 2)) (- (to ) (* 10 2)))) (set Var 2) (moveAgain )}))))))))))) (end (forEach NonMover (all Sites (sites Player "Home") (= 0 (count (site )))) (result Player Loss)))))

4x6, 8, or 10 holes. Eight is most common. Two counters in each hole. Sowing begins from any hole on the player's side, in either direction, but the direction chosen on the first turn must be maintained throughout the game. If the final counter lands in an empty hole, the turn ends. If the final counter lands in the outer row in an occupied hole, these are picked up and sowing continues. If the final counter lands in an occupied hole in the inner row, and the opponent's inner row hole opposite contains more than one counter, these are captured and the sowing continues from the hole from which the capture was made using the captured counters and the final counter from the sowing that caused the capture. If the opponent has no counters in any of their inner row holes, the counters in their outer row holes can be captured, in the same manner.
            
        Evidence Map
(game "Katra" (players 2) (equipment {(mancalaBoard 4 8 None {(track "TrackCCW1" "0,E,N1,W" true P1) (track "TrackCCW2" "16,E,N1,W" true P2) (track "TrackCW1" "7,W,N1,E" true P1) (track "TrackCW2" "24,E,S1,W" true P2)}) (regions "Home" P1 (sites Track "TrackCCW1")) (regions "Home" P2 (sites Track "TrackCCW2")) (regions "Outer" P1 (sites Bottom)) (regions "Outer" P2 (sites Top)) (piece "Seed" Shared) (hand Each)}) (rules (start (set Count 2 (union (sites P1 "Home") (sites P2 "Home")))) (play (or (if (!= (value Player Mover) 2) (move Select (from (if (is Prev Mover) (sites {(var "Replay")}) (sites Mover "Home")) (> (count (from )) 0)) (then (and (sow "TrackCCW" (mover ) (if (< 1 (count (to ))) (if (is In (to ) (sites Mover "Outer")) (and (moveAgain ) (set Var "Replay" (to ))) (if (< 1 (count (if (is Mover P1) (+ (to ) 8) (- (to ) 8)))) (and {(fromTo (from (if (is Mover P1) (+ (to ) 8) (- (to ) 8))) (to (to )) (count (if (is Mover P1) (+ (to ) 8) (- (to ) 8)))) (moveAgain ) (set Var "Replay" (to ))}) (if (< 1 (count (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2))))) (and {(fromTo (from (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2)))) (to (to )) (count (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2))))) (moveAgain ) (set Var "Replay" (to ))})))))) (if (!= (value Player Mover) 1) (set Value Mover 1)))))) (if (!= (value Player Mover) 1) (move Select (from (if (is Prev Mover) (sites {(var "Replay")}) (sites Mover "Home")) (> (count (from )) 0)) (then (and (sow "TrackCW" (mover ) (if (< 1 (count (to ))) (if (is In (to ) (sites Mover "Outer")) (and (moveAgain ) (set Var "Replay" (to ))) (if (< 1 (count (if (is Mover P1) (+ (to ) 8) (- (to ) 8)))) (and {(fromTo (from (if (is Mover P1) (+ (to ) 8) (- (to ) 8))) (to (to )) (count (if (is Mover P1) (+ (to ) 8) (- (to ) 8)))) (moveAgain ) (set Var "Replay" (to ))}) (if (< 1 (count (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2))))) (and {(fromTo (from (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2)))) (to (to )) (count (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2))))) (moveAgain ) (set Var "Replay" (to ))})))))) (if (!= (value Player Mover) 2) (set Value Mover 2)))))))) (end (forEach NonMover (no Moves Player) (result Player Loss)))))

4x8 board. Four counters in each of the holes in each player's inner row. Sowing occurs in an anti-clockwise direction, with the first counter being sown into the hole from which the counters were picked up. When the final counter lands in an empty hole, the player's turn ends. When the final counter lands in an occupied hole in the inner row, the player captures the counters in the opponent's opposite inner row hole, and continues sowing with these counters and the counters in the hole where the final counter was dropped.. When the final counter lands in an occupied hole but a capture is not possible, these counters are picked up and sowing continues. Play continues until one player can no longer play, and the opponent wins.
(game "Kisolo (Lali)" (players 2) (equipment {(mancalaBoard 4 8 None {(track "Track1" "0,E,N1,W" true P1) (track "Track2" "16,E,N1,W" true P2)}) (regions "Home" P1 (sites Track "Track1")) (regions "Home" P2 (sites Track "Track2")) (regions "Inner" P1 (difference (sites Track "Track1") (sites Bottom))) (regions "Inner" P2 (difference (sites Track "Track2") (sites Top))) (piece "Seed" Shared) (hand Each)}) (rules (start (set Count 4 (union (sites P1 "Inner") (sites P2 "Inner")))) (play (move Select (from (if (is Prev Mover) (sites {(last To true)}) (sites Mover "Home")) (< 1 (count (from )))) (then (sow "Track" (mover ) (if (> (count (to )) 1) (and (moveAgain ) (if (and (!= (count (if (is Mover P1) (+ (to ) 8) (- (to ) 8))) 0) (is In (to ) (sites Mover "Inner"))) (fromTo (from (if (is Mover P1) (+ (to ) 8) (- (to ) 8))) (to (to )) (count (if (is Mover P1) (+ (to ) 8) (- (to ) 8))))))) true)))) (end (if (and (!= (next ) (mover )) (no Moves Next)) (result Mover Win)))))

4x12 board. Four counters in each hole. Players alternate turns sowing the counters from one hole in an anti-clockwise direction. When the counters fall into a hole in their inner row, the contents of the opponent's opposite inner row hole are captured, as are any in the opponent's corresponding outer row hole, but only if counters were captured from the inner row hole. The player who captures the most counters wins.
(game "Moruba" (players 2) (equipment {(mancalaBoard 4 12 None {(track "Track1" "0,E,N1,W" true P1) (track "Track2" "24,E,N1,W" true P2)}) (regions "Home" P1 (sites Track "Track1")) (regions "Home" P2 (sites Track "Track2")) (regions "Inner" P1 (difference (sites Track "Track1") (sites Bottom))) (regions "Inner" P2 (difference (sites Track "Track2") (sites Top))) (piece "Seed" Shared) (hand Each)}) (rules (start (set Count 4 (union (sites P1 "Home") (sites P2 "Home")))) (play (move Select (from (sites Mover "Home") (> (count (from )) 0)) (then (sow "Track" (mover ) (and {(is In (to ) (sites Mover "Inner")) (> (count (if (is Mover P1) (+ (to ) 12) (- (to ) 12))) 0)}) (and (fromTo (from (if (is Mover P1) (+ (to ) 12) (- (to ) 12))) (to (handSite Mover)) (count (if (is Mover P1) (+ (to ) 12) (- (to ) 12)))) (if (> (count (if (is Mover P1) (+ (to ) (* 12 2)) (- (to ) (* 12 2)))) 0) (fromTo (from (if (is Mover P1) (+ (to ) (* 12 2)) (- (to ) (* 12 2)))) (to (handSite Mover)) (count (if (is Mover P1) (+ (to ) (* 12 2)) (- (to ) (* 12 2))))))))))) (end (if (no Moves Mover) (byScore {(score P1 (count Cell (handSite P1))) (score P2 (count Cell (handSite P2)))})))))

4x8 board, occasionally 4x9 or 10. 29 counters in each player's leftmost hole in their outer row, two in the hole to the right of it and one in the hole to the right of that one. Sowing occurs in an anti-clockwise direction in the player's two rows. Each player begins with a stylised move, by sowing the contents of the hole with two counters. Players alternate turns sowing only from their hole with two counters. When finally a single counter is sown into an inner-row hole that is opposite a hole with a single counter in the opponent's inner row, this counter is captured. The opponent then sows their two remaining counters, capturing two from the opponent. Then, the players sow from their hole with 29 counters, picking up the contents of a hole when the final counter lands in an occupied hole, ending the turn when the final counter lands in an empty hole. When both players have completed this phase, the main phase of the game begins. Players sow from any hole in their two rows. When the final counter lands in an occupied hole, these counters are picked up and sowing continues. When the final counter lands in an empty hole in the inner row, the counters in the opponent's opposite hole in their inner row are captured. If there are also counters in the opponent's opposite hole in the outer row, these are also captured, but only when a capture from the inner row was also made. Players cannot sow single counters, unless there are no holes with multiple counters left, in which case single counters may be sown into an empty hole. Play continues until one player has captured all of the opponent's counters, thus winning the game.
(game "Njombwa" (players 2) (equipment {(mancalaBoard 4 8 None {(track "Track1" "0,E,N1,W" true P1) (track "Track2" "16,E,N1,W" true P2)}) (regions "Home" P1 (sites Track "Track1")) (regions "Home" P2 (sites Track "Track2")) (regions "Inner" P1 (difference (sites Track "Track1") (sites Bottom))) (regions "Inner" P2 (difference (sites Track "Track2") (sites Top))) (piece "Seed" Shared)}) (rules (start {(set Count 29 (sites {0 (- (* 4 8) 1)})) (set Count 2 (sites {1 (- (* 4 8) 2)})) (set Count 1 (sites {2 (- (* 4 8) 3)}))}) {(phase "Opening1" (play (move Select (from (forEach (sites Mover "Home") (= 2 (count (site ))))) (then (sow "Track" (mover ) (if (and (is In (to ) (sites Mover "Inner")) (is Occupied (if (is Mover P1) (+ (to ) 8) (- (to ) 8)))) (remove (if (is Mover P1) (+ (to ) 8) (- (to ) 8)))))))) (nextPhase (all Sites (sites Mover "Home") (!= 2 (count (site )))) "Opening2")) (phase "Opening2" (play (move Select (from (if (is Prev Mover) (sites {(last To true)}) (forEach (sites Mover "Home") (= 29 (count (site ))))) (> (count (from )) 0)) (then (sow "Track" (mover ) (if (< 1 (count (to ))) (moveAgain )))))) (nextPhase (not (is Next Mover)) "Sowing")) (phase "Sowing" (play (if (all Sites (sites Mover "Home") (>= 1 (count (site )))) (move Select (from (sites Mover "Home") (and (is Occupied (from )) (is Empty (trackSite Move (from ) "Track" 1)))) (then (sow "Track" (mover )))) (move Select (from (if (is Prev Mover) (sites {(last To true)}) (sites Mover "Home")) (> (count (from )) 1)) (then (sow "Track" (mover ) (if (< 1 (count (to ))) (moveAgain ) (if (and (is In (to ) (sites Mover "Inner")) (is Occupied (if (is Mover P1) (+ (to ) 8) (- (to ) 8)))) (and (remove (if (is Mover P1) (+ (to ) 8) (- (to ) 8))) (if (is Occupied (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2)))) (remove (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2))))))))))))))} (end (forEach NonMover (all Sites (sites Player) (= 0 (count (site )))) (result Player Loss)))))

4x9 board. Two counters in each hole. Players alternate turns sowing from one of the holes in their rows in an anti-clockwise direction. When a counter falls into a hole in their inner row, the player captures the counters from both of the opposite holes on the opponent's side of the board; if one of the two opposite holes is empty, no capture is made. Captures counters are sown on the player's side of the board. Play continues until one player captures all of the counters or one player forfeits.
(game "Ngolo" (players 2) (equipment {(mancalaBoard 4 9 None {(track "Track1" "0,E,N1,W" true P1) (track "Track2" "18,E,N1,W" true P2)}) (regions "Home" P1 (sites Track "Track1")) (regions "Home" P2 (sites Track "Track2")) (regions "Inner" P1 (difference (sites Track "Track1") (sites Bottom))) (regions "Inner" P2 (difference (sites Track "Track2") (sites Top))) (piece "Seed" Shared)}) (rules (start (set Count 2 (union (sites P1 "Home") (sites P2 "Home")))) (play (or (move Pass) (move Select (from (sites Mover "Home") (< 0 (count (from )))) (then (sow "Track" (mover ) (if (and {(!= (count (if (is Mover P1) (+ (to ) (* 9 2)) (- (to ) (* 9 2)))) 0) (!= (count (if (is Mover P1) (+ (to ) 9) (- (to ) 9))) 0) (is In (to ) (sites Mover "Inner"))}) (and {(fromTo (from (if (is Mover P1) (+ (to ) (* 9 2)) (- (to ) (* 9 2)))) (to (to )) (count (if (is Mover P1) (+ (to ) (* 9 2)) (- (to ) (* 9 2))))) (fromTo (from (if (is Mover P1) (+ (to ) 9) (- (to ) 9))) (to (to )) (count (if (is Mover P1) (+ (to ) 9) (- (to ) 9)))) (sow (to ) (+ (count (if (is Mover P1) (+ (to ) 9) (- (to ) 9))) (count (if (is Mover P1) (+ (to ) (* 9 2)) (- (to ) (* 9 2))))) "Track" (mover ))}))))))) (end {(if (= (count (sites Next "Home")) 0) (result Mover Win)) (if (was Pass) (result Next Win))})))

4x12-24 (only even numbers allowed) board. Play begins with two counters in the outer row of each players' holes and two counter in each of the four holes on the right hand side of both players' inner row of holes. Player picks up contents of any hole containing two or more counters and sows them anti-clockwise. If the final counter of the sowing falls into an empty hole, the turn is over. If the last counter falls into an occupied hole, sowing continues by picking up the counters in that hole and continuing in the same direction. If the last counter falls into an occupied hole in the player's inner row, and the opponent's two holes opposite it are occupied, these are captured and sowing continues using these counters beginning at the next hole after the one which caused the capture. Play ends when one player cannot move; i.e. when they have only single counters in holes or all their counters have been captured.
(game "Hus (Damara)" (players 2) (equipment {(mancalaBoard 4 12 None {(track "Track1" "0,E,N1,W" true P1) (track "Track2" "24,E,N1,W" true P2)}) (regions "Home" P1 (sites Track "Track1")) (regions "Home" P2 (sites Track "Track2")) (regions "Inner" P1 (difference (sites Track "Track1") (sites Bottom))) (regions "Inner" P2 (difference (sites Track "Track2") (sites Top))) (regions "Outer" P1 (sites Bottom)) (regions "Outer" P2 (sites Top)) (piece "Seed" Shared) (hand Each)}) (rules (start (set Count 2 (union {(expand (intersection (sites Row 1) (sites Right)) 3 W) (expand (intersection (sites Row 2) (sites Left)) 3 E) (sites P1 "Outer") (sites P2 "Outer")}))) (play (move Select (from (if (is Prev Mover) (if (is Pending) (sites {(value Pending)}) (sites {(last To true)})) (sites Mover "Home")) (> (count (from )) 0)) (then (sow "Track" (mover ) (if (> (count (to )) 1) (if (and {(is In (to ) (sites Mover "Inner")) (> (count (if (is Mover P1) (+ (to ) 12) (- (to ) 12))) 0) (> (count (if (is Mover P1) (+ (to ) (* 12 2)) (- (to ) (* 12 2)))) 0)}) (and {(fromTo (from (to )) (to (handSite Mover)) (count (to ))) (fromTo (from (if (is Mover P1) (+ (to ) 12) (- (to ) 12))) (to (handSite Mover)) (count (if (is Mover P1) (+ (to ) 12) (- (to ) 12)))) (fromTo (from (if (is Mover P1) (+ (to ) (* 12 2)) (- (to ) (* 12 2)))) (to (handSite Mover)) (count (if (is Mover P1) (+ (to ) (* 12 2)) (- (to ) (* 12 2))))) (if (> (count (trackSite Move (to ) "Track" 1)) 1) (and (set Pending (trackSite Move (to ) "Track" 1)) (moveAgain )))}) (moveAgain ))))))) (end (if (no Moves Mover) (byScore {(score P1 (+ (count Cell (handSite P1)) (count (sites P1)))) (score P2 (+ (count Cell (handSite P2)) (count (sites P2))))})))))

4x8 board. Two counters in each hole. Each player may sow in either direction on their first move, but must continue in the same direction for the remainder of the game. When the final counter of a sowing lands in an occupied hole, the counters in that hole are picked up and sowing continues. If the final hole of a sowing is in the inner row, regardless of whether it is occupied or empty, the player then captures the counters in both of the opponent's holes opposite it, and continues sowing with these counters as well as the ones in the final hole of sowing. Captures cannot be made when the final hole of a sowing was empty, and the opponent's opposite holes have only a single counter. When the final counter lands in an empty hole, the turn is over. The player who captures all the counters wins.
(game "Katra Boaoaka" (players 2) (equipment {(mancalaBoard 4 8 None {(track "TrackCCW1" "0,E,N1,W" true P1) (track "TrackCCW2" "16,E,N1,W" true P2) (track "TrackCW1" "7,W,N1,E" true P1) (track "TrackCW2" "24,E,S1,W" true P2)}) (regions "Home" P1 (sites Track "TrackCCW1")) (regions "Home" P2 (sites Track "TrackCCW2")) (regions "Inner" P1 (difference (sites Track "TrackCCW1") (sites Bottom))) (regions "Inner" P2 (difference (sites Track "TrackCCW2") (sites Top))) (piece "Seed" Shared) (hand Each)}) (rules (start (set Count 2 (union (sites P1 "Home") (sites P2 "Home")))) (play (or (if (!= (value Player Mover) 2) (move Select (from (if (is Prev Mover) (sites {(var "Replay")}) (sites Mover "Home")) (> (count (from )) 0)) (then (and (sow "TrackCCW" (mover ) (and (if (< 1 (count (to ))) (and (moveAgain ) (set Var "Replay" (to )))) (if (is In (to ) (sites Mover "Inner")) (if (not (and {(= 1 (count (to ))) (= 1 (count (if (is Mover P1) (+ (to ) 8) (- (to ) 8)))) (= 1 (count (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2)))))})) (if (or (is Occupied (if (is Mover P1) (+ (to ) 8) (- (to ) 8))) (is Occupied (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2))))) (and {(fromTo (from (if (is Mover P1) (+ (to ) 8) (- (to ) 8))) (to (to )) (count (if (is Mover P1) (+ (to ) 8) (- (to ) 8)))) (fromTo (from (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2)))) (to (to )) (count (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2))))) (if (= 1 (count (to ))) (and (moveAgain ) (set Var "Replay" (to ))))})))))) (if (!= (value Player Mover) 1) (set Value Mover 1)))))) (if (!= (value Player Mover) 1) (move Select (from (if (is Prev Mover) (sites {(var "Replay")}) (sites Mover "Home")) (> (count (from )) 0)) (then (and (sow "TrackCW" (mover ) (and (if (< 1 (count (to ))) (and (moveAgain ) (set Var "Replay" (to )))) (if (is In (to ) (sites Mover "Inner")) (if (not (and {(= 1 (count (to ))) (= 1 (count (if (is Mover P1) (+ (to ) 8) (- (to ) 8)))) (= 1 (count (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2)))))})) (if (or (is Occupied (if (is Mover P1) (+ (to ) 8) (- (to ) 8))) (is Occupied (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2))))) (and {(fromTo (from (if (is Mover P1) (+ (to ) 8) (- (to ) 8))) (to (to )) (count (if (is Mover P1) (+ (to ) 8) (- (to ) 8)))) (fromTo (from (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2)))) (to (to )) (count (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2))))) (if (= 1 (count (to ))) (and (moveAgain ) (set Var "Replay" (to ))))})))))) (if (!= (value Player Mover) 2) (set Value Mover 2)))))))) (end (forEach NonMover (no Moves Player) (result Player Loss)))))

4x8 board. Three counters in each hole. Players pick up counters from any of their holes and sow them in either direction. If the last counter falls into an occupied hole, they pick the counters in this hole up and continue sowing. Sowing ends when the last counter falls into an empty hole. If the empty hole is in the inner row, the player captures any of the counters in the opponent's two holes opposite it. Play ends when all of one player's seeds have been captured.
(game "Bao Ki Arabu (Zanzibar 1)" (players 2) (equipment {(mancalaBoard 4 8 None {(track "TrackCCW1" "0,E,N1,W" true P1) (track "TrackCCW2" "16,E,N1,W" true P2) (track "TrackCW1" "7,W,N1,E" true P1) (track "TrackCW2" "24,E,S1,W" true P2)}) (regions "Home" P1 (sites Track "TrackCCW1")) (regions "Home" P2 (sites Track "TrackCCW2")) (regions "Inner" P1 (difference (sites Track "TrackCCW1") (sites Bottom))) (regions "Inner" P2 (difference (sites Track "TrackCCW2") (sites Top))) (piece "Seed" Shared) (hand Each)}) (rules (start (set Count 3 (sites Board))) (play (or (move Select (from (if (is Prev Mover) (if (is Pending) (sites {(last To true)})) (sites Mover "Home")) (> (count (from )) 0)) (then (sow "TrackCW" (mover ) (if (= (count (to )) 1) (if (is In (to ) (sites Mover "Inner")) (and (if (> (count (if (is Mover P1) (+ (to ) 8) (- (to ) 8))) 0) (fromTo (from (if (is Mover P1) (+ (to ) 8) (- (to ) 8))) (to (handSite Mover)) (count (if (is Mover P1) (+ (to ) 8) (- (to ) 8))))) (if (> (count (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2)))) 0) (fromTo (from (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2)))) (to (handSite Mover)) (count (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2)))))))) (and (moveAgain ) (set Pending)))))) (move Select (from (if (is Prev Mover) (if (not (is Pending)) (sites {(last To true)})) (sites Mover "Home")) (> (count (from )) 0)) (then (sow "TrackCCW" (mover ) (if (= (count (to )) 1) (if (is In (to ) (sites Mover "Inner")) (and (if (> (count (if (is Mover P1) (+ (to ) 8) (- (to ) 8))) 0) (fromTo (from (if (is Mover P1) (+ (to ) 8) (- (to ) 8))) (to (handSite Mover)) (count (if (is Mover P1) (+ (to ) 8) (- (to ) 8))))) (if (> (count (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2)))) 0) (fromTo (from (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2)))) (to (handSite Mover)) (count (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2)))))))) (moveAgain ))))))) (end (if (no Moves Mover) (byScore {(score P1 (+ (count Cell (handSite P1)) (count (sites P1 "Home")))) (score P2 (+ (count Cell (handSite P2)) (count (sites P2 "Home"))))})))))

4x10-20 board, with even numbers. Two counters in each hole, except the rightmost hole in the inner row of each player, which has zero. Sowing occurs in an anti-clockwise direction. When the final counter lands in an occupied hole, these are picked up and sowing continues. When the final counter lands in an empty hole in the inner row, the counters in the opposite hole in the opponent's inner row are captured. If counters are captured from the inner row, and there are also counters in the outer row, the counters in the outer row are also captured. If counters in the inner and outer row are captured, the player may also capture counters from one other hole on the opponent's side of the board. Single counters cannot be sown until there are no holes with multiple counters on the player's side of the board, and then single counters may only be sown into empty holes. Play continues until one player captures all of their opponent's counters, thus winning the game.
(game "Nsolo" (players 2) (equipment {(mancalaBoard 4 10 None {(track "Track1" "0,E,N1,W" true P1) (track "Track2" "20,E,N1,W" true P2)}) (regions "Home" P1 (sites Track "Track1")) (regions "Home" P2 (sites Track "Track2")) (regions "Inner" P1 (difference (sites Track "Track1") (sites Bottom))) (regions "Inner" P2 (difference (sites Track "Track2") (sites Top))) (piece "Seed" Shared)}) (rules (start (set Count 2 (union {(sites Bottom) (sites Top) (difference (sites P1 "Inner") (sites Right)) (difference (sites P2 "Inner") (sites Left))}))) (play (if (and (is Prev Mover) (= (var "Replay") -1)) (move Remove (sites Next "Home")) (if (all Sites (sites Mover "Home") (>= 1 (count (site )))) (move Select (from (sites Mover "Home") (and (is Occupied (from )) (is Empty (trackSite Move (from ) "Track" 1)))) (then (sow "Track" (mover )))) (move Select (from (if (is Prev Mover) (sites {(var "Replay")}) (sites Mover "Home")) (> (count (from )) 1)) (then (sow "Track" (mover ) (if (< 1 (count (to ))) (if (and (is In (to ) (sites Mover "Inner")) (is Occupied (if (is Mover P1) (+ (to ) 10) (- (to ) 10)))) (and (remove (if (is Mover P1) (+ (to ) 10) (- (to ) 10))) (if (is Occupied (if (is Mover P1) (+ (to ) (* 10 2)) (- (to ) (* 10 2)))) (and {(moveAgain ) (set Var "Replay" -1) (remove (if (is Mover P1) (+ (to ) (* 10 2)) (- (to ) (* 10 2))))}))) (and (moveAgain ) (set Var "Replay" (to ))))))))))) (end (forEach NonMover (all Sites (sites Player "Home") (= 0 (count (site )))) (result Player Loss)))))

4x7 board. Play begins with three counters in each hole of the outer rows. Players pick up all of the counters in one hole and sow them anti-clockwise. Holes with single counters can be chosen for sowing. When the final counter is sown, the counters in the following hole are picked up and sowing continues with those counters. If this hole is empty, play ends. Captures are made from the player's inner row at the beginning of a turn or a subsequent sowing within a turn. Counters are captured when a player's inner row has occupied holes. Counters in the opponent's holes opposite a player's occupied holes are captured: either from both of the opponent's rows or only the inner row if the corresponding hole in the outer row is empty. If the inner row is empty but the outer row is occupied, there is no capture, and when both rows are occupied they both must be captured. Captures are also made on a subsequent sowing within a turn, in the same manner as above but from the hole the next sowing begins, i.e., the one following the hole in which the last seed of the previous sowing is made. Captured counters are placed in the player's outer row opposite the hole from which the capture was made. Game is won when the opponent's outer row is emptied.
(game "Kisolo" (players 2) (equipment {(mancalaBoard 4 7 None {(track "TrackCCW1" "0,E,N1,W" true P1) (track "TrackCCW2" "14,E,N1,W" true P2)}) (regions "Home" P1 (sites Track "TrackCCW1")) (regions "Home" P2 (sites Track "TrackCCW2")) (regions "Inner" P1 (difference (sites Track "TrackCCW1") (sites Bottom))) (regions "Inner" P2 (difference (sites Track "TrackCCW2") (sites Top))) (regions "Outer" P1 (difference (sites Track "TrackCCW1") (sites P1 "Inner"))) (regions "Outer" P2 (difference (sites Track "TrackCCW2") (sites P2 "Inner"))) (piece "Seed" Shared)}) (rules (start {(set Count 3 (union (sites P1 "Outer") (sites P2 "Outer")))}) (play (if (and (or (= 0 (count MovesThisTurn)) (is In 1 (sites Pending))) (!= 0 (count Sites (forEach (difference (sites Mover "Inner") (sites Empty)) (is Occupied (if (is Mover P1) (+ (site ) 7) (- (site ) 7))))))) (move Select (from (forEach (difference (sites Mover "Inner") (sites Empty)) (is Occupied (if (is Mover P1) (+ (site ) 7) (- (site ) 7))))) (then (and {(fromTo (from (if (is Mover P1) (+ (last To) 7) (- (last To) 7))) (to (if (is Mover P1) (- (last To) 7) (+ (last To) 7)))) (if (is Occupied (if (is Mover P1) (+ (last To) (* 7 2)) (- (last To) (* 7 2)))) (fromTo (from (if (is Mover P1) (+ (last To) (* 7 2)) (- (last To) (* 7 2)))) (to (if (is Mover P1) (- (last To) 7) (+ (last To) 7))))) (moveAgain )} (then (if (!= 0 (count Sites (forEach (difference (sites Mover "Inner") (sites Empty)) (is Occupied (if (is Mover P1) (+ (site ) 7) (- (site ) 7)))))) (set Pending 1)))))) (move Select (from (if (and (is In 2 (sites Pending)) (is Prev Mover)) (sites {(trackSite Move (last To true) "TrackCCW" 1)}) (sites Mover "Home")) (> (count (from )) 0)) (then (sow "TrackCCW" (mover ) (if (is Occupied (trackSite Move (to ) "TrackCCW" 1)) (and {(if (and (is In (trackSite Move (to ) "TrackCCW" 1) (sites Mover "Inner")) (is Occupied (if (is Mover P1) (+ (trackSite Move (to ) "TrackCCW" 1) 7) (- (trackSite Move (to ) "TrackCCW" 1) 7)))) (and (fromTo (from (if (is Mover P1) (+ (trackSite Move (to ) "TrackCCW" 1) 7) (- (trackSite Move (to ) "TrackCCW" 1) 7))) (to (if (is Mover P1) (- (trackSite Move (to ) "TrackCCW" 1) 7) (+ (trackSite Move (to ) "TrackCCW" 1) 7)))) (if (is Occupied (if (is Mover P1) (+ (trackSite Move (to ) "TrackCCW" 1) (* 7 2)) (- (trackSite Move (to ) "TrackCCW" 1) (* 7 2)))) (fromTo (from (if (is Mover P1) (+ (trackSite Move (to ) "TrackCCW" 1) (* 7 2)) (- (trackSite Move (to ) "TrackCCW" 1) (* 7 2)))) (to (if (is Mover P1) (- (trackSite Move (to ) "TrackCCW" 1) 7) (+ (trackSite Move (to ) "TrackCCW" 1) 7))))))) (moveAgain ) (set Pending 2)}))))))) (end (forEach Player (all Sites (sites Player "Outer") (= 0 (count (site )))) (result Player Loss)))))

4x8 board, played only along the perimeter. One to four counters per hole. Any number of players, holes are distributed equally among the players. Sowing occurs in an anti-clockwise direction. Each player owns the holes in which their counters are located at the beginning of their turn, and they must sow from the leftmost hole. When a counter falls into a hole containing counters belonging to the opponent, this hole and the counters in it are captured by the player, but remain in place and in play. When a player has a single counter and empty holes in from of it, this counter leaps to the next hole occupied by the opponent. The player who captures all of the opponent's holes wins. 
(game "Quendo" (players 4) (equipment {(mancalaBoard 4 8 None {(track "Track" "0,E,N,W,S2" true)}) (piece "Seed" Each) (hand Each)}) (rules (start {(place "Seed1" (sites {0 1 2 3 4}) {4}) (place "Seed2" (sites {5 6 7 15 23}) {4}) (place "Seed3" (sites {31 30 29 28 27}) {4}) (place "Seed4" (sites {26 25 24 16 8}) {4})}) (play (if (!= 1 (count Pieces Mover)) (move Select (from (trackSite FirstSite (trackSite FirstSite (not (is Mover (who (to ))))) (is Mover (who (to ))))) (then (sow (if (and (!= (mover ) (what (to ))) (is Occupied (to ))) (and (remove (to ) (count (to ))) (add (piece (id "Seed" Mover)) (to (to )) (count (to )))))))) (move (from (trackSite FirstSite (trackSite FirstSite (not (is Mover (who (to ))))) (is Mover (who (to ))))) (to (trackSite FirstSite (from ) (is Enemy (who (to )))) (apply (and (remove (to ) (count (to ))) (add (piece (id "Seed" Mover)) (to (to )) (count (to ))))))))) (end (forEach NonMover (no Pieces Player) (result Player Loss)))))

4x10-20 holes, with even numbers. Two counters in each hole in the outer row. Sowing occurs in an anti-clockwise direction. When the final counter lands in an occupied hole, these are picked up and sowing continues. When the final counter lands in an empty hole in the inner row, the counters in the opposite hole in the opponent's inner row are captured. If counters are captured from the inner row, and there are also counters in the outer row, the counters in the outer row are also captured. If counters in the inner and outer row are captured, the player may also capture counters from two other holes on the opponent's side of the board. Single counters cannot be sown until there are no holes with multiple counters on the player's side of the board, and then single counters may only be sown into empty holes. Play continues until one player captures all of their opponent's counters, thus winning the game.
        
(game "Msuwa wa Kunja" (players 2) (equipment {(mancalaBoard 4 10 None {(track "Track1" "0,E,N1,W" true P1) (track "Track2" "20,E,N1,W" true P2)}) (regions "Home" P1 (sites Track "Track1")) (regions "Home" P2 (sites Track "Track2")) (regions "Inner" P1 (difference (sites Track "Track1") (sites Bottom))) (regions "Inner" P2 (difference (sites Track "Track2") (sites Top))) (piece "Seed" Shared)}) (rules (start (set Count 2 (union (sites Top) (sites Bottom)))) (play (if (and (is Prev Mover) (< 0 (var ))) (move Remove (forEach (sites Next "Home") (< 0 (count (site )))) (then (and (if (> (var ) 1) (moveAgain )) (set Var (- (var ) 1))))) (if (not (all Sites (forEach (sites Mover "Home") (< 1 (count (site )))) (= 0 (count (site ))))) (move Select (from (if (is Prev Mover) (sites {(last To true)}) (sites Mover "Home")) (< 1 (count (from )))) (then (sow "Track" (mover ) (if (< 1 (count (to ))) (moveAgain ) (if (is In (to ) (sites Mover "Inner")) (if (< 0 (count (if (is Mover P1) (+ (to ) 10) (- (to ) 10)))) (and (remove (if (is Mover P1) (+ (to ) 10) (- (to ) 10))) (if (< 0 (count (if (is Mover P1) (+ (to ) (* 10 2)) (- (to ) (* 10 2))))) (and {(remove (if (is Mover P1) (+ (to ) (* 10 2)) (- (to ) (* 10 2)))) (set Var 2) (moveAgain )}))))))))) (move Select (from (sites Mover "Home") (and (= 1 (count (from ))) (= 0 (count (trackSite Move (from ) 1))))) (then (sow "Track" (mover ) (if (is In (to ) (sites Mover "Inner")) (if (< 0 (count (if (is Mover P1) (+ (to ) 10) (- (to ) 10)))) (and (remove (if (is Mover P1) (+ (to ) 10) (- (to ) 10))) (if (< 0 (count (if (is Mover P1) (+ (to ) (* 10 2)) (- (to ) (* 10 2))))) (and {(remove (if (is Mover P1) (+ (to ) (* 10 2)) (- (to ) (* 10 2)))) (set Var 2) (moveAgain )}))))))))))) (end (forEach NonMover (all Sites (sites Player "Home") (= 0 (count (site )))) (result Player Loss)))))

2x8 board, with a store on either end. Each player owns the store to their right. Eight counters in each hole. Players alternate turns sowing in an anti-clockwise direction from one of the holes on their side of the board. Sowing always includes the player's store (but not the opponent's store), and sowing cannot begin from the store. When the final counter lands in an occupied hole, the contents of that hole are picked up and sowing continues. If the last counter lands in the player's store, they may choose any of the holes on their side of the board and continue sowing from it. When the final counter lands in an empty hole, the counters in the opposite hole are captured. Play continues until all of the counters are captured. A new round begins. Players fill the holes on their side of the board with their captured counters. If a player cannot fill a hole with the required number of counters, the hole is closed and is out of play for that round. Play continues as before. Play continues in successive rounds until one player closes all of their opponent's holes and wins. 
(game "Ovalhu" (players 2) (equipment {(mancalaBoard 2 8 {(track "Track1" "1,E,17,16,W" true P1) (track "Track2" "1,E,N,W,0" true P2)}) (piece "Seed" Shared) (map {(pair P1 LastSite) (pair P2 FirstSite)}) (regions P1 (sites Bottom)) (regions P2 (sites Top))}) (rules (start {(set RememberValue "Playable" (union (sites Top) (sites Bottom))) (set Count 8 (union (sites Bottom) (sites Top)))}) {(phase "Sowing" (play (or {(move Select (from (if (and (is Pending) (is Prev Mover)) (sites {(var "Replay")}) (sites Mover)) (and (is Occupied (from )) (is In (from ) (sites (values Remembered "Playable"))))) (then (sow "Track" (mover ) (if (or (is In (to ) (sites {(mapEntry P1) (mapEntry P2)})) (< 1 (count (to )))) (and (moveAgain ) (if (not (is In (to ) (sites {(mapEntry P1) (mapEntry P2)}))) (and (set Pending) (set Var "Replay" (to ))))) (if (is Occupied (if (is In (to ) (sites Bottom)) (+ (to ) 8) (- (to ) 8))) (fromTo (from (if (is In (to ) (sites Bottom)) (+ (to ) 8) (- (to ) 8))) (to (mapEntry Mover)) (count (if (is In (to ) (sites Bottom)) (+ (to ) 8) (- (to ) 8)))))) (and (not (is In (to ) (sites {(mapEntry P1) (mapEntry P2)}))) (not (is In (to ) (sites (values Remembered "Playable"))))))))} (then (if (no Pieces All (union (sites Top) (sites Bottom))) (forget Value "Playable" All))))) (end (if (no Pieces All (union (sites Top) (sites Bottom))) {(if (> 8 (count (mapEntry P1))) (result P2 Win)) (if (> 8 (count (mapEntry P2))) (result P1 Win))})) (nextPhase (no Pieces All (union (sites Top) (sites Bottom))) "BetweenRounds")) (phase "BetweenRounds" (play (if (not (all Sites (sites Mover) (is Occupied (site )))) (if (<= 8 (count (mapEntry Mover))) (move (from (mapEntry Mover)) (to (sites Mover) (is Empty (to ))) 8 (then (remember Value "Playable" (last To))))))) (nextPhase (all Passed) "Sowing"))}))

2x6 board. Four counters in each hole. A player picks up all of the counters in one of the holes in their row and sows them one-by-one in a counterclockwise direction in consecutive holes from the hole the pieces originated. The starting hole is always left empty, even if a player sows in a complete circuit of the board, the original house is skipped and sowing continues in the next hole after it. When the final counter falls into an occupied hole, these are picked up and sowing continues. When the final counter of a sowing lands on in an empty hole in the player's own row, the contents of the hole in the opponent's row opposite it are captured. If the opponent's holes are all empty, the other player must make a move placing counters in the opponent's row. If not possible, the player captures all the counters in their row. The player who has captured the most counters wins. If the game continues in a repeating loop, the players can agree to end the game and capture the counters remaining in their row.
(game "Yovodji" (players 2) (equipment {(mancalaBoard 2 6 None (track "Track" "0,E,N,W" true)) (regions P1 (sites Bottom)) (regions P2 (sites Top)) (piece "Seed" Shared) (hand Each)}) (rules (start (set Count 4 (sites Track))) (play (if (is Proposed "End") (or (move Vote "End") (move Vote "No")) (or (if (is Cycle) (move Propose "End")) (move Select (from (if (is Prev Mover) (sites {(last To true)}) (sites Mover)) (< 0 (count (from )))) (then (sow (if (and (is In (to ) (sites Next)) (or (= (count (to )) 2) (= (count (to )) 3))) (fromTo (from (to )) (to (handSite Mover)) (count (to ))) (if (< 1 (count (to ))) (moveAgain ) (if (and (is In (to ) (sites Mover)) (< 1 (count (if (is Mover P1) (+ (to ) 6) (- (to ) 6))))) (fromTo (from (if (is Mover P1) (+ (to ) 6) (- (to ) 6))) (to (handSite Mover)) (count (if (is Mover P1) (+ (to ) 6) (- (to ) 6))))))) false (and (is In (from ) (sites Next)) (or (= (count (from )) 2) (= (count (from )) 3))))))))) (end (if (or (no Moves Mover) (is Decided "End")) (byScore {(score P1 (+ (count Cell (handSite P1)) (count (sites P1)))) (score P2 (+ (count Cell (handSite P2)) (count (sites P2))))})))))

The board has two rows of six holes with a larger hole on either end. Play begins with four seeds in each hole. Each player controls the row nearest them. Seeds are sown consecutively in a counterclockwise pattern including the player's own larger hole but not the opponent's. If the last seed is placed in an opponent's empty hole, that seed and any opposite are captured and put in the player's larger hole. If the last seed falls in the larger hole, the player gets another turn. When one player has no seeds in any of their holes, the game ends. The other player captures all of the other seeds, and the player with the most captured seeds wins.
(game "Kalah" (players 2) (equipment {(mancalaBoard 2 6 (track "Track" "0,ESE,E,ENE,WNW,N,W" true)) (regions P1 (sites Bottom)) (regions P2 (sites Top)) (map {(pair P1 LastSite) (pair P2 FirstSite)}) (piece "Seed" Shared)}) (rules (start (set Count 4 (union (sites P1) (sites P2)))) (play (move Select (from (sites Mover) (> (count (from )) 0)) (then (sow (if (= (to ) (mapEntry (mover ))) (moveAgain ) (if (and {(is In (to ) (sites Mover)) (= (count (to )) 1) (> (count (if (is Mover P1) (+ (to ) 6) (- (to ) 6))) 0)}) (and (fromTo (from (to )) (to (mapEntry (mover ))) (count (to ))) (fromTo (from (if (is Mover P1) (+ (to ) 6) (- (to ) 6))) (to (mapEntry (mover ))) (count (if (is Mover P1) (+ (to ) 6) (- (to ) 6))))))) (= (to ) (mapEntry (next ))))))) (end (if (no Moves Mover) (byScore {(score P1 (+ (count (mapEntry P1)) (count (sites P1)))) (score P2 (+ (count (mapEntry P2)) (count (sites P2))))})))))

2x6 board. Play begins with four counters in each hole. Moves begin from any hole in the player's row and sowing proceeds in an anti-clockwise direction. If the final counter of a sowing lands in an occupied hole, these counters are lifted and sowing continues. If the final counter lands in an empty hole, any counters in the opposite hole are taken and the turn ends. Play continues until one player cannot move. When this happens, the other player captures the remaining counters and the game ends. The player with the most counters wins.
(game "French Wari" (players 2) (equipment {(mancalaBoard 2 6 None (track "Track" "0,E,N,W" true)) (regions P1 (sites Bottom)) (regions P2 (sites Top)) (piece "Seed" Shared) (hand Each)}) (rules (start (set Count 4 (sites Track))) (play (move Select (from (if (is Prev Mover) (sites {(last To true)}) (sites Mover)) (> (count (from )) 0)) (then (sow (if (> (count (to )) 1) (moveAgain ) (if (> (count (if (is In (to ) (sites Bottom)) (+ (to ) 6) (- (to ) 6))) 0) (fromTo (from (if (is In (to ) (sites Bottom)) (+ (to ) 6) (- (to ) 6))) (to (handSite Mover)) (count (if (is In (to ) (sites Bottom)) (+ (to ) 6) (- (to ) 6)))))))))) (end (if (no Moves Mover) (byScore {(score P1 (+ (count Cell (handSite P1)) (count (sites P1)))) (score P2 (+ (count Cell (handSite P2)) (count (sites P2))))})))))

2x7 board with two stores. Seven counters in each hole. Players move from one of the holes in their row, sowing in a clockwise direction, and including the player's store, which is to the left, but not the opponent's store. If the final counter of a sowing lands in an occupied hole (not a store), sowing continues. If it lands into an empty hole, the turn is over. If the empty hole is in the player's own row, the contents of the hole opposite in the opponent's row are captured and placed in the store. The person who captures the most counters wins.
(game "Chongka'" (players 2) (equipment {(mancalaBoard 2 7 {(track "Track1" "7,W,WNW,ENE,E" true P1) (track "Track2" "7,W,N,E,ESE" true P2)}) (piece "Seed" Shared) (regions P1 (sites Bottom)) (regions P2 (sites Top)) (map {(pair P1 FirstSite) (pair P2 LastSite)})}) (rules (start (set Count 7 (union (sites P1) (sites P2)))) (play (move Select (from (if (is Prev Mover) (sites {(last To true)}) (sites Mover)) (> (count (from )) 0)) (then (sow "Track" (mover ) (if (and {(> (count (to )) 1) (is In (to ) (union (sites P1) (sites P2)))}) (moveAgain ) (if (and (is In (to ) (sites Mover)) (> (count (if (is Mover P1) (+ (to ) 7) (- (to ) 7))) 0)) (fromTo (from (if (is Mover P1) (+ (to ) 7) (- (to ) 7))) (to (mapEntry Mover)) (count (if (is Mover P1) (+ (to ) 7) (- (to ) 7)))))))))) (end (if (and (no Moves Mover) (no Moves Next)) (byScore {(score P1 (count (mapEntry P1))) (score P2 (count (mapEntry P2)))})))))

2x6 board, which two stores. Four counters in each hole. Sowing proceeds in an anti-clockwise direction. When the final counter of a sowing falls in to an occupied hole, these counters are picked up and sowing continues. When the final hole lands in an empty hole, if the hole is in the player's row, the contents of the opponent's opposite hole are captured. If the empty hole is in the opponent's row, the turn ends. A player must play so that the opponent is able to play on their next turn, if possible. The player who captures the most counters wins. 
(game "J'odu" (players 2) (equipment {(mancalaBoard 2 6 (track "Track" "1,E,N,W" true)) (regions P1 (sites Bottom)) (regions P2 (sites Top)) (map {(pair P1 FirstSite) (pair P2 LastSite)}) (piece "Seed" Shared)}) (rules (start (set Count 4 (sites Track))) (play (do (move Select (from (if (is Prev Mover) (sites {(last To true)}) (sites Mover)) (< 0 (count (from )))) (then (sow (if (> (count (to )) 1) (moveAgain ) (if (is In (to ) (sites Mover)) (fromTo (from (if (is Mover P1) (+ (to ) 6) (- (to ) 6))) (to (mapEntry (mover ))) (count (if (is Mover P1) (+ (to ) 6) (- (to ) 6))))))))) (< 0 (count (if (is Mover P1) (sites P2) (sites P1)))))) (end (if (no Moves Mover) (byScore {(score P1 (+ (count (mapEntry P1)) (count (sites P1)))) (score P2 (+ (count (mapEntry P2)) (count (sites P2))))})))))

2x5 board. Five counters in each hole. Sowing occurs in an anti-clockwise direction. When the final counters of a sowing lands in a hole, the contents of the next hole are picked up and sowing continues. When the final counter lands in a hole, and the next hole, from which sowing would normally continue, is empty, the player captures any counters in the next hole after the empty one. and the turn ends. Play continues until no more captures are possible, and the player who captured the most counters wins.
(game "Pachgarhwa" (players 2) (equipment {(mancalaBoard 2 5 None (track "Track" "0,E,N,W" true)) (regions P1 (sites Bottom)) (regions P2 (sites Top)) (piece "Seed" Shared) (hand Each)}) (rules (start (set Count 5 (sites Track))) (play (move Select (from (if (is Prev Mover) (sites {(value Pending)}) (sites Mover)) (> (count (from )) 0)) (then (sow true (if (is Occupied (trackSite Move (to ) 1)) (and {(set Pending (to )) (fromTo (from (trackSite Move (to ) 1)) (to (handSite Mover)) (count (trackSite Move (to ) 1))) (moveAgain )}) (if (is Occupied (trackSite Move (to ) 2)) (fromTo (from (trackSite Move (to ) 2)) (to (handSite Mover)) (count (trackSite Move (to ) 2))))))))) (end (if (= 1 (count (sites Board))) (byScore {(score P1 (+ (count Cell (handSite P1)) (count (sites P1)))) (score P2 (+ (count Cell (handSite P2)) (count (sites P2))))})))))

2x6 board. Five counters in each hole. Sowing occurs from any hole in the player's row in a clockwise direction. If the final counter lands into an empty hole, it is captured. If there is an unbroken line of holes behind it also having single counters, these are also captured. The player who captures the most counters wins.
(game "Vai Lung Thlan" (players 2) (equipment {(mancalaBoard 2 6 None (track "Track" "5,W,N,E" true)) (regions P1 (sites Bottom)) (regions P2 (sites Top)) (piece "Seed" Shared) (hand Each)}) (rules (start (set Count 5 (sites Track))) (play (move Select (from (sites Mover) (< 0 (count (from )))) (then (sow (= (count (to )) 1) (fromTo (from (to )) (to (handSite Mover)) (count (to ))) true)))) (end (if (no Moves Mover) (byScore {(score P1 (count Cell (handSite P1))) (score P2 (count Cell (handSite P2)))})))))

2x7 board, with two stores. Each player owns the store to their left. Seven counters per hole. Players take counters from one hole and sow them in a clockwise direction starting in the next hole from which the counters were taken. Players include their own store when sowing but ignore their opponent's store. If last counter falls into an empty hole, move ends. If it is on the player's side, the counters in the opponent's hole opposite are taken and added to the player's store. If the last counter falls into the player's store, the player may sow counters from another hole on their side. If the last counter drops into an occupied hole on either side of the board, the counters are picked up and sowing continues until the last counter drops into an empty hole. When all of the counters are in the players' stores, a new round begins. Players fill their holes with the counters in their store. Any holes which cannot be filled with seven counters are out of play for this round; any extra counters go back in the store. Play continues until one player cannot fill any holes, and the opponent wins.
(game "Sungka" (players 2) (equipment {(mancalaBoard 2 7 (track "Track" "7,W,WNW,ENE,E,ESE" true)) (regions P1 (sites Bottom)) (regions P2 (sites Top)) (map {(pair P1 FirstSite) (pair P2 LastSite)}) (piece "Seed" Shared)}) (rules (start (set Count 7 (union (sites P1) (sites P2)))) {(phase "Sowing" (play (move Select (from (if (and (is Prev Mover) (not (is Pending))) (sites {(var )}) (sites Mover)) (< 0 (count (from )))) (then (sow (if (= (to ) (mapEntry Mover)) (and (moveAgain ) (set Pending)) (if (and {(is In (to ) (sites Mover)) (= (count (to )) 1) (< 0 (count (if (is Mover P1) (+ (to ) 7) (- (to ) 7))))}) (fromTo (from (if (is Mover P1) (+ (to ) 7) (- (to ) 7))) (to (mapEntry (mover ))) (count (if (is Mover P1) (+ (to ) 7) (- (to ) 7)))) (if (> (count (to )) 1) (and (moveAgain ) (set Var (to )))))) (= (to ) (mapEntry Next)))))) (end (if (all Passed) {(if (> 7 (count (mapEntry P1))) (result P2 Win)) (if (> 7 (count (mapEntry P2))) (result P1 Win))})) (nextPhase (all Passed) "BetweenRounds")) (phase "BetweenRounds" (play (if (<= 7 (count (mapEntry Mover))) (move (from (mapEntry Mover)) (to (intersection (sites Empty) (sites Mover))) 7))) (nextPhase (all Passed) "Sowing"))}))

The board has two rows of six play pits with a larger scoring pit on either end. Play begins with four seeds in each hole, with one or two seeds moved to make the initial position fair, i.e. two perfect players will draw. Each player controls the row nearest them. Play consists of choosing one of the player's non-empty play pits, removing the pieces from it, and sowing the pieces one per pit consecutively in a counterclockwise pattern including the player's own scoring pit but not the opponent's. If the last piece is placed in a player's empty pit, that piece and any opposite are captured and put in the player's scoring pit. If the last seed falls in the scoring pit, the player gets another turn. When one player has no pieces in any of their play pits, the game ends. The other player captures all of the other pieces, and the player with the most scored pieces wins.
(game "FairKalah" (players 2) (equipment {(mancalaBoard 2 6 (track "Track" "0,ESE,E,ENE,WNW,N,W" true)) (regions P1 (sites Bottom)) (regions P2 (sites Top)) (map {(pair P1 LastSite) (pair P2 FirstSite)}) (piece "Seed" Shared)}) (rules (start {(set Count 4 1) (set Count 4 2) (set Count 5 3) (set Count 4 4) (set Count 3 5) (set Count 4 6) (set Count 0 13) (set Count 4 12) (set Count 4 11) (set Count 4 10) (set Count 4 9) (set Count 4 8) (set Count 4 7) (set Count 0 0)}) (play (move Select (from (sites Mover) (> (count (from )) 0)) (then (sow (if (= (to ) (mapEntry (mover ))) (moveAgain ) (if (and {(is In (to ) (sites Mover)) (= (count (to )) 1) (>= (count (if (is Mover P1) (+ (to ) 6) (- (to ) 6))) 0)}) (and (fromTo (from (to )) (to (mapEntry (mover ))) (count (to ))) (fromTo (from (if (is Mover P1) (+ (to ) 6) (- (to ) 6))) (to (mapEntry (mover ))) (count (if (is Mover P1) (+ (to ) 6) (- (to ) 6))))))) (= (to ) (mapEntry (next ))))))) (end (if (or (= (count (sites Bottom)) 0) (= (count (sites Top)) 0)) (byScore {(score P1 (+ (count (mapEntry P1)) (count (sites P1)))) (score P2 (+ (count (mapEntry P2)) (count (sites P2))))})))))

2x40-50 board. Each team controls one row. Play begins with each hole containing four counters (usually seeds or pebbles). A player picks up the counters in a hole in his team's row and sows them in a counterclockwise fashion, one in each consecutive hole. If the last counter is deposited into a hole containing counter, those counters are picked up and the player continues sowing. The turn continues in this fashion until the last counter falls into an empty hole. If this empty hole is on the player's side, the counters in the opposite hole in the other team's row are captured. The counter also causing the capture is taken. Play continues until one team cannot move, and the remaining counters are captured by the other team. The team with the most seeds wins.
(game "En Gehe" (players 2) (equipment {(mancalaBoard 2 40 None (track "Track" "0,E,N,W" true)) (regions P1 (sites Bottom)) (regions P2 (sites Top)) (piece "Seed" Shared) (hand Each)}) (rules (start (set Count 4 (sites Track))) (play (move Select (from (if (is Prev Mover) (sites {(last To true)}) (sites Mover)) (> (count (from )) 0)) (then (sow (if (> (count (to )) 1) (moveAgain ) (if (and (is In (to ) (sites Mover)) (> (count (if (is Mover P1) (+ (to ) 40) (- (to ) 40))) 0)) (and (fromTo (from (if (is Mover P1) (+ (to ) 40) (- (to ) 40))) (to (handSite Mover)) (count (if (is Mover P1) (+ (to ) 40) (- (to ) 40)))) (fromTo (from (to )) (to (handSite Mover)) (count (to )))))))))) (end (if (no Moves Mover) (byScore {(score P1 (+ (count Cell (handSite P1)) (count (sites P1)))) (score P2 (+ (count Cell (handSite P2)) (count (sites P2))))})))))

2x4 board with two stores on the ends. Six counters in each hole. Instead of owning the row of holes closest to them, players own the holes on the left half of the board. Play begins from any of the player's holes, sowing in either direction. When the last counter is sown, making the hole contain two or four counters, these are captured. If the adjacent holes also contain two or four counters, these are also captured. If the last counter falls into a hole, making it contain a number other than two or four, and adjacent holes contain two or four, the counters from only one of these adjacent holes may be captured. Play ends when each player is reduced to one counter. A second round begins with each player placing six counters in as many of their holes as they can, returning surplus to the store. Play continues as before. Rounds are played until one player loses all their counters.
(game "Gifia" (players 2) (equipment {(mancalaBoard 2 4 {(track "TrackCCW" "1,E,N,W" true) (track "TrackCW" "4,W,N,E" true)}) (regions P1 (difference (expand (sites Left) 2) (sites Left))) (regions P2 (difference (expand (sites Right) 2) (sites Right))) (map {(pair P1 FirstSite) (pair P2 LastSite)}) (piece "Seed" Shared)}) (rules (start (set Count 6 (sites Track))) {(phase "Sowing" (play (if (is Prev Mover) (or (move (from (ahead (last To true) W)) (to (mapEntry Mover)) (count (ahead (last To true) W))) (move (from (ahead (last To true) E)) (to (mapEntry Mover)) (count (ahead (last To true) E)))) (or (move Select (from (sites Mover) (is Occupied (from ))) (then (sow "TrackCCW" (if (or (= 2 (count (to ))) (= 4 (count (to )))) (and {(fromTo (from (to )) (to (mapEntry Mover)) (count (to ))) (if (!= (to ) (ahead (to ) W)) (if (or (= 2 (count (ahead (to ) W))) (= 4 (count (ahead (to ) W)))) (fromTo (from (ahead (to ) W)) (to (mapEntry Mover)) (count (ahead (to ) W))))) (if (!= (to ) (ahead (to ) E)) (if (or (= 2 (count (ahead (to ) E))) (= 4 (count (ahead (to ) E)))) (fromTo (from (ahead (to ) E)) (to (mapEntry Mover)) (count (ahead (to ) E)))))}) (if (and (if (!= (to ) (ahead (to ) W)) (if (or (= 2 (count (ahead (to ) W))) (= 4 (count (ahead (to ) W)))) false)) (if (!= (to ) (ahead (to ) E)) (if (or (= 2 (count (ahead (to ) E))) (= 4 (count (ahead (to ) E)))) false))) (moveAgain )))))) (move Select (from (sites Mover) (is Occupied (from ))) (then (sow "TrackCW" (if (or (= 2 (count (to ))) (= 4 (count (to )))) (and {(fromTo (from (to )) (to (mapEntry Mover)) (count (to ))) (if (!= (to ) (ahead (to ) W)) (if (or (= 2 (count (ahead (to ) W))) (= 4 (count (ahead (to ) W)))) (fromTo (from (ahead (to ) W)) (to (mapEntry Mover)) (count (ahead (to ) W))))) (if (!= (to ) (ahead (to ) E)) (if (or (= 2 (count (ahead (to ) E))) (= 4 (count (ahead (to ) E)))) (fromTo (from (ahead (to ) E)) (to (mapEntry Mover)) (count (ahead (to ) E)))))}) (if (and (if (!= (to ) (ahead (to ) W)) (if (or (= 2 (count (ahead (to ) W))) (= 4 (count (ahead (to ) W)))) false)) (if (!= (to ) (ahead (to ) E)) (if (or (= 2 (count (ahead (to ) E))) (= 4 (count (ahead (to ) E)))) false))) (moveAgain ))))))) (then (if (and (>= 1 (count Pieces All (sites P1))) (>= 1 (count Pieces All (sites P2)))) (and (forEach Site (sites P1) (fromTo (from (site )) (to (mapEntry P1)) (count (site )))) (forEach Site (sites P2) (fromTo (from (site )) (to (mapEntry P2)) (count (site ))))))))) (end (if (no Pieces All (union (sites Top) (sites Bottom))) {(if (> 6 (count (mapEntry P1))) (result P2 Win)) (if (> 6 (count (mapEntry P2))) (result P1 Win))})) (nextPhase (no Pieces All (union (sites Top) (sites Bottom))) "BetweenRounds")) (phase "BetweenRounds" (play (if (not (all Sites (sites Mover) (is Occupied (site )))) (if (<= 6 (count (mapEntry Mover))) (move (from (mapEntry Mover)) (to (sites Mover) (is Empty (to ))) 6)))) (nextPhase (all Passed) "Sowing"))}))

2x6 board with two stores. Seven counters in each hole. Play moves in an anti-clockwise direction and players sow into the store on their right hand side. A move may begin from any of the player's holes except their store. If the last counter falls into the store, they can sow again from any of the holes in their row. If it lands in a hole with counters in it, these are picked up and sowing continues. If the last counter falls into an empty hole the move ends, but if the hole is in the player's own row, any counters in the hole opposite it are captured and placed in the store. When no more moves can be made, a new round begins and each player fills as many holes as they can by putting seven in each. Surplus counters are placed in the store. Any unfilled holes are excluded from play. Play continues until one player cannot fill a hole with seven counters, and the opponent wins.
(game "Galatjang" (players 2) (equipment {(mancalaBoard 2 6 {(track "Track1" "1,E,ENE,WNW,W" true P1) (track "Track2" "12,W,WSW,ESE,E" true P2)}) (piece "Seed" Shared) (regions "Home" P1 (sites Bottom)) (regions "Home" P2 (sites Top)) (map {(pair P1 LastSite) (pair P2 FirstSite)})}) (rules (start {(set Count 7 (union (sites Bottom) (sites Top))) (forEach Value 1 12 (set RememberValue (value )))}) {(phase "Round" (play (move Select (from (if (and (not (is Pending)) (is Prev Mover)) (sites {(last To true)}) (forEach (sites Mover "Home") (is In (site ) (values Remembered)))) (> (count (from )) 0)) (then (sow "Track" (mover ) (if (= (to ) (mapEntry Mover)) (and (moveAgain ) (set Pending)) (if (> (count (to )) 1) (moveAgain ) (if (and (is In (to ) (sites Mover "Home")) (> (count (if (is Mover P1) (+ (to ) 6) (- (to ) 6))) 0)) (fromTo (from (if (is Mover P1) (+ (to ) 6) (- (to ) 6))) (to (mapEntry Mover)) (count (if (is Mover P1) (+ (to ) 6) (- (to ) 6))))))) (then (if (all Sites (forEach (difference (union (sites Bottom) (sites Top)) (sites Empty)) (is In (site ) (values Remembered))) (= 0 (count (site )))) (and (forEach Site (difference (sites P1 "Home") (sites Empty)) (fromTo (from (site )) (to (mapEntry P1)) (count (site )))) (forEach Site (difference (sites P2 "Home") (sites Empty)) (fromTo (from (site )) (to (mapEntry P2)) (count (site ))))))))))) (nextPhase (all Sites (forEach (difference (union (sites Bottom) (sites Top)) (sites Empty)) (is In (site ) (values Remembered))) (= 0 (count (site )))) "BetweenRound")) (phase "BetweenRound" (play (if (>= (count (mapEntry Mover)) 7) (move (from (mapEntry Mover)) (to (intersection (sites Empty) (sites Mover "Home"))) 7) (then (if (or (and (> 7 (count (mapEntry P2))) (= 42 (count (sites Bottom)))) (and (> 7 (count (mapEntry P1))) (= 42 (count (sites Top))))) (and (forget Value All) (forEach Site (sites Board) (if (= 7 (count (site ))) (remember Value (site ))))))))) (nextPhase (or (and (> 7 (count (mapEntry P2))) (= 42 (count (sites Bottom)))) (and (> 7 (count (mapEntry P1))) (= 42 (count (sites Top))))) "Round"))} (end (if (> 7 (count (difference (sites Board) (mapEntry Mover)))) (result Mover Win)))))

2x6 board. Four counters per hole. Players sow in a clockwise direction from their left three holes or anti-clockwise from their right three holes. When the final counter of a sowing falls into a hole in the opponent's row or in the leftmost or rightmost hole of the player's own row, which contains three counters, making it now contain four, this hole is marked and counters cannot be sown from this hole. Sowing cannot occur from a hole with a single counter into a hole containing three in the opponent's row, but is allowed when the hole containing three is in the player's own row. A player cannot sow  a lone counter that was sown into their row by the opponent on the previous turn back into the hole from which it was just moved. If a player is unable to sow from their row, the opponent may continue to play until the player is able to move. Play continues until all of the counters are in marked holes. The player with the most counters in their marked holes wins.
(game "Andot" (players 2) (equipment {(mancalaBoard 2 6 None {(track "TrackCCW" "0,E,N,W" true) (track "TrackCW" "5,W,N,E" true)}) (regions "Home" P1 (sites Bottom)) (regions "Home" P2 (sites Top)) (regions "LeftThree" P1 (expand (intersection (sites Bottom) (sites Left)) 2 E)) (regions "LeftThree" P2 (expand (intersection (sites Top) (sites Right)) 2 W)) (regions "RightThree" P1 (expand (intersection (sites Bottom) (sites Right)) 2 W)) (regions "RightThree" P2 (expand (intersection (sites Top) (sites Left)) 2 E)) (regions "ExtremeHoles" P1 (intersection (union (sites Left) (sites Right)) (sites Bottom))) (regions "ExtremeHoles" P2 (intersection (union (sites Left) (sites Right)) (sites Top))) (piece "Seed" Shared)}) (rules (start (set Count 4 (sites Board))) (play (or (move Select (from (sites Mover "LeftThree") (and (or (and (= (count (from )) 1) (and (!= (from ) (trackSite Move (last From) "TrackCCW" 1)) (if (is In (trackSite Move (from ) "TrackCW" 1) (sites Next "Home")) (!= (count (trackSite Move (from ) "TrackCW" 1)) 3) true))) (> (count (from )) 1)) (= 0 (state (from ))))) (then (sow "TrackCW" (if (and (= (count (to )) 4) (is In (to ) (union (sites Mover "ExtremeHoles") (sites Next "Home")))) (set State (to ) (mover )))))) (move Select (from (sites Mover "RightThree") (and (or (and (= (count (from )) 1) (and (!= (from ) (trackSite Move (last From) "TrackCW" 1)) (if (is In (trackSite Move (from ) "TrackCCW" 1) (sites Next "Home")) (!= (count (trackSite Move (from ) "TrackCCW" 1)) 3) true))) (> (count (from )) 1)) (= 0 (state (from ))))) (then (sow "TrackCCW" (if (and (= (count (to )) 4) (is In (to ) (union (sites Mover "ExtremeHoles") (sites Next "Home")))) (set State (to ) (mover )))))))) (end (if (= 0 (count (forEach (sites Board) (= 0 (state (site )))))) (byScore {(score P1 (count (forEach (sites Board) (= (id P1) (state (site )))))) (score P2 (count (forEach (sites Board) (= (id P2) (state (site ))))))})))))

2x6 board. Four counters in each hole. Sowing proceeds in an anti-clockwise direction. When the final counter of a sowing lands in an occupied hole, the counters are picked up and sowing continues. When the final counter lands in an occupied hole in the player's own row causing it to contain four counters, these are captured and the turn ends. If the final counter falls into an empty hole, the turn ends. If at any point in the sowing a hole in the player's own row is made to contain four counters, they are taken. When there are only eight counters left on the board, the first player to make four counters in a hole captures all the remaining counters. At the end of the game, players place their captured counters four by four into the remaining holes. Players may thus capture holes from the opponent's row, one for every four counters placed in a hole. They may capture from these holes in the next round. Play continues until one player owns no holes.
(game "J'erin" (players 2) (equipment {(mancalaBoard 2 6 None (track "Track" "0,E,N,W" true)) (piece "Seed" Shared) (regions P1 (sites Bottom)) (regions P2 (sites Top)) (hand Each)}) (rules (start {(set Count 4 (sites Track)) (set RememberValue "OwnedP1" (sites Bottom)) (set RememberValue "OwnedP2" (sites Top))}) {(phase "Sowing" (play (or {(move Select (from (if (is Prev Mover) (sites {(last To true)}) (if (is Mover P1) (sites (values Remembered "OwnedP1")) (sites (values Remembered "OwnedP2")))) (< 0 (count (from )))) (then (do (set Var "NumSowed" (count (last To))) (if (and (>= 8 (count Pieces All (sites Board))) (not (all Sites (sites Track (trackSite Move (last From) "Track" 1) (trackSite Move (last From) "Track" (var "NumSowed"))) (!= 3 (count (site )))))) (forEach Site (sites Board) (if (is Occupied (site )) (fromTo (from (site )) (to Cell (handSite Mover)) (count (site ))))) (sow (if (if (= 4 (count (to ))) (not (is In (to ) (if (is Mover P1) (sites (values Remembered "OwnedP1")) (sites (values Remembered "OwnedP2"))))) (!= 0 (count (to )))) (moveAgain ))) (then (and (forEach Site (intersection (if (is Mover P1) (sites (values Remembered "OwnedP1")) (sites (values Remembered "OwnedP2"))) (sites Track (last From) (trackSite Move (last From) "Track" (var "NumSowed")))) (if (= 4 (count (site ))) (fromTo (from (site )) (to (handSite Mover)) 4))) (set Var "NumSowed" 0)))))))} (then (if (all Sites (sites Board) (= 0 (count (site )))) (and (forget Value "OwnedP1" All) (forget Value "OwnedP2" All)))))) (end (if (all Sites (sites Board) (= 0 (count (site )))) {(if (> 4 (count Cell (handSite P1))) (result P2 Win)) (if (> 4 (count Cell (handSite P2))) (result P1 Win))})) (nextPhase (all Sites (sites Board) (= 0 (count (site )))) "BetweenRounds")) (phase "BetweenRounds" (play (if (<= 4 (count Cell (handSite Mover))) (if (not (all Sites (sites Mover) (is Occupied (site )))) (move (from (handSite Mover)) (to (sites Mover) (is Empty (to ))) 4 (then (if (is Mover P1) (remember Value "OwnedP1" (last To)) (remember Value "OwnedP2" (last To))))) (move (from (handSite Mover)) (to (sites Board) (is Empty (to ))) 4 (then (if (is Mover P1) (remember Value "OwnedP1" (last To)) (remember Value "OwnedP2" (last To)))))))) (nextPhase (and (> 4 (count Cell (handSite P1))) (> 4 (count Cell (handSite P2)))) "Sowing"))}))

2x6, 8, or 12 holes. Four counters in each hole. Play begins from a player's righthand hole and counters are sown clockwise. After this, a player may begin sowing from any hole in their row. When the final counter falls into an occupied hole, the counters in that hole are picked up and sowing continues. If the final counter falls into an empty hole, the turn ends; if this hole is in the player's own row, the contents of the opponent's hole are captured if they contain one, two, four, or more counters. If it contains three counters, one of the opponent's counters is taken and placed into the hole where sowing ended, so that each now has two counters. These holes cannot be sown from for the rest of the game and are owned by the player whose turn created them. Play ends when one player can no longer play. The opponent then takes all of the counters in their own row, and each player takes the counters that have accumulated in their captured holes. The player with the most counters wins.
(game "Leyla Gobale (Somaliland)" (players 2) (equipment {(mancalaBoard 2 6 None (track "Track" "5,W,N,E" true)) (piece "Seed" Shared) (regions P1 (sites Bottom)) (regions P2 (sites Top)) (hand Each)}) (rules (start (set Count 4 (sites Track))) (play (or {(move Select (from (if (= 0 (count Moves)) (sites {5}) (if (is Prev Mover) (sites {(var "Replay")}) (sites Mover))) (and (is Occupied (from )) (= 0 (state (from ))))) (then (sow (if (< 1 (count (to ))) (if (= 0 (state (to ))) (and (moveAgain ) (set Var "Replay" (to )))) (if (is In (to ) (sites Mover)) (if (!= 3 (count (if (is In (to ) (sites Bottom)) (+ (to ) 6) (- (to ) 6)))) (if (!= 0 (count (if (is In (to ) (sites Bottom)) (+ (to ) 6) (- (to ) 6)))) (fromTo (from (if (is In (to ) (sites Bottom)) (+ (to ) 6) (- (to ) 6))) (to (handSite Mover)) (count (if (is In (to ) (sites Bottom)) (+ (to ) 6) (- (to ) 6))))) (and {(fromTo (from (if (is In (to ) (sites Bottom)) (+ (to ) 6) (- (to ) 6))) (to (to )) 1) (set State (to ) (mover )) (set State (if (is In (to ) (sites Bottom)) (+ (to ) 6) (- (to ) 6)) (mover ))})))))))} (then (if (and (not (is Next Mover)) (or (all Sites (sites P1) (or (!= 0 (state (site ))) (is Empty (site )))) (all Sites (sites P2) (or (!= 0 (state (site ))) (is Empty (site )))))) (and {(forEach Site (sites P1) (if (= 0 (state (site ))) (fromTo (from (site )) (to (handSite P1)) (count (site ))))) (forEach Site (sites P2) (if (= 0 (state (site ))) (fromTo (from (site )) (to (handSite P2)) (count (site ))))) (forEach Site (sites Board) (if (= (state (site )) P1) (fromTo (from (site )) (to (handSite P1)) (count (site ))) (if (= (state (site )) P2) (fromTo (from (site )) (to (handSite P2)) (count (site ))))))}))))) (end (if (all Sites (sites Board) (= 0 (count (site )))) (byScore {(score P1 (count Cell (handSite P1))) (score P2 (count Cell (handSite P2)))})))))

Play begins with four counters in each hole. Players move by picking up all of the counters in any of the holes in their row and sowing them anti-clockwise. If the next hole after the one in which the final counter is dropped contains counters, these are picked up and sowing continues. If the next hole after the one in which the last counter was sown is empty, the counters in the hole after this one are taken and the turn is over. If that hole is empty, none are taken. When all of the holes in one row are empty, the player whose row still contains counters captures these counters. A new game begins. Each player fills as many of the holes in their row with four counters. The player which cannot fill all of their holes with four counters removes from play all of the holes that cannot be filled, and sets aside the extra counters. They play another round with the same rules as before, but without the eliminated hole(s). The game ends when one player must close all of the holes in their row, thus being unable to play.
(game "Bosh" (players 2) (equipment {(mancalaBoard 2 5 None (track "Track" "0,E,N,W" true)) (regions P1 (sites Bottom)) (regions P2 (sites Top)) (piece "Seed" Shared) (hand Each)}) (rules (start {(set Count 4 (sites Track)) (set RememberValue "OwnedP1" (sites Bottom)) (set RememberValue "OwnedP2" (sites Top))}) {(phase "Sowing" (play (or {(move Select (from (if (is Prev Mover) (sites {(trackSite Move (last To true) 1)}) (if (is Mover P1) (sites (values Remembered "OwnedP1")) (sites (values Remembered "OwnedP2")))) (> (count (from )) 0)) (then (sow (if (and (= (count (trackSite Move (to ) 1)) 0) (> (count (trackSite Move (to ) 2)) 0)) (fromTo (from (trackSite Move (to ) 2)) (to (handSite Mover)) (count (trackSite Move (to ) 2))) (if (> (count (trackSite Move (to ) 1)) 0) (moveAgain ))) (not (is In (to ) (union (values Remembered "OwnedP1") (values Remembered "OwnedP2")))))))} (then (if (or (no Pieces All (sites P1)) (no Pieces All (sites P2))) (and (forEach Site (sites P1) (fromTo (from (site )) (to (handSite P1)) (count (site )))) (forEach Site (sites P2) (fromTo (from (site )) (to (handSite P2)) (count (site ))))))))) (nextPhase (all Sites (sites Board) (= 0 (count (site )))) "BetweenRounds")) (phase "BetweenRounds" (play (if (<= 4 (count Cell (handSite Mover))) (move (from (handSite Mover)) (to (intersection (sites Empty) (sites Mover))) 4) (move Pass (then (forEach Site (if (is Mover P1) (sites (values Remembered "OwnedP1")) (sites (values Remembered "OwnedP2"))) (if (is Empty (site )) (if (is Mover P1) (forget Value "OwnedP1" (site )) (forget Value "OwnedP2" (site ))))))))) (end (if (all Passed) {(if (if (= 1 P1) (= 0 (size Array (values Remembered "OwnedP1"))) (= 0 (size Array (values Remembered "OwnedP2")))) (result P2 Win)) (if (if (= 2 P1) (= 0 (size Array (values Remembered "OwnedP1"))) (= 0 (size Array (values Remembered "OwnedP2")))) (result P1 Win))})) (nextPhase (all Passed) "Sowing"))}))

2x6 board with two stores. Four counters in each hole. Sowing occurs in an anti-clockwise direction. When the final counter lands in an occupied hole the counters are picked up and sowing continues, unless the hole contained three counters, causing it to contain four, in which case the counters are captured. An unbroken sequence of holes with four counters in them behind the hole from which the first capture was made are also captured. In addition, any holes which were sown into during the course of the turn which now contain four counters are captured by the owner of the row. Play continues until there are only eight counters left. The first player to make a capture with these eight counters captures them all. The player with the most counters wins.
(game "Duene" (players 2) (equipment {(mancalaBoard 2 6 (track "Track" "1,E,N,W" true)) (regions P1 (sites Bottom)) (regions P2 (sites Top)) (map {(pair P1 FirstSite) (pair P2 LastSite)}) (piece "Seed" Shared)}) (rules (start (set Count 4 (sites Track))) {(phase "Playing" (play (move Select (from (if (is Prev Mover) (sites {(var "To")}) (sites Mover)) (< 0 (count (from )))) (then (do (and (set Var "From" (last From)) (sow (and (set Var "To" (to )) (if (= (count (to )) 4) (fromTo (from (to )) (to (mapEntry (mover ))) (count (to ))) (if (> (count (to )) 1) (moveAgain )))) (= (count (to )) 4))) (and {(pass ) (forEach Site (forEach (sites Track (var "From") (var "To")) (and (is In (site ) (sites P1)) (= 4 (count (site ))))) (fromTo (from (site )) (to (mapEntry P1)) (count (site )))) (forEach Site (forEach (sites Track (var "From") (var "To")) (and (is In (site ) (sites P2)) (= 4 (count (site ))))) (fromTo (from (site )) (to (mapEntry P2)) (count (site ))))}))))) (nextPhase (<= (count (sites Track)) 8) "EndGame")) (phase "EndGame" (play (move Select (from (if (is Prev Mover) (sites {(var "To")}) (sites Mover)) (< 0 (count (from )))) (then (sow (if (= (count (to )) 4) (forEach Site (sites Track) (if (< 0 (count (site ))) (fromTo (from (site )) (to (mapEntry (mover ))) (count (site ))))) (if (> (count (to )) 1) (moveAgain ))))))))} (end (if (all Sites (sites Track) (= 0 (count (site )))) (byScore {(score P1 (+ (count (mapEntry P1)) (count (sites P1)))) (score P2 (+ (count (mapEntry P2)) (count (sites P2))))})))))

2x6 board. Three counters per hole. Sowing occurs in an anti-clockwise direction when starting from the right three holes of a player's row, or in a clockwise direction when starting from the player's left three holes. When the final counter falls into an occupied hole, these are picked up and sowing continues, except when this hole is made to contain four counters, in which case these counters are captured and the player takes another turn. These captures may not be made on the first turn. When the final counter lands in an empty hole, the turn ends. Play continues until one player is without counters in their row. The opponent then captures the remaining counters in their row, and the player that has captured the most counters wins.
(game "Wa'ache Waledat" (players 2) (equipment {(mancalaBoard 2 6 None {(track "TrackCCW" "0,E,N,W" true) (track "TrackCW" "5,W,N,E" true)}) (piece "Seed" Shared) (regions "Home" P1 (sites Bottom)) (regions "Home" P2 (sites Top)) (regions "RightHome" P1 (intersection (expand (sites Right) 2) (sites Bottom))) (regions "RightHome" P2 (intersection (expand (sites Right) 2) (sites Top))) (regions "LeftHome" P1 (intersection (expand (sites Left) 2) (sites Bottom))) (regions "LeftHome" P2 (intersection (expand (sites Left) 2) (sites Top))) (hand Each)}) (rules (start (set Count 3 (sites Track))) (play (or (if (or (>= 0 (var "Direction")) (= 1 (var "Direction"))) (move Select (from (if (and (is Prev Mover) (= 1 (var "ContinueSowing"))) (sites {(last To true)}) (sites Mover "RightHome")) (> (count (from )) 0)) (then (sow "TrackCCW" (if (< 1 (count (to ))) (and {(moveAgain ) (set Var "Direction" 1) (set Var "ContinueSowing" 1) (if (and (= 4 (count (to ))) (< 2 (count Turns))) (and (fromTo (from (to )) (to (handSite Mover)) 4) (set Var "ContinueSowing" 0)))}) (set Var "Direction" 0)))))) (if (or (>= 0 (var "Direction")) (= 2 (var "Direction"))) (move Select (from (if (and (is Prev Mover) (= 1 (var "ContinueSowing"))) (sites {(last To true)}) (sites Mover "LeftHome")) (> (count (from )) 0)) (then (sow "TrackCW" (if (< 1 (count (to ))) (and {(moveAgain ) (set Var "Direction" 2) (set Var "ContinueSowing" 1) (if (and (= 4 (count (to ))) (< 2 (count Turns))) (and (fromTo (from (to )) (to (handSite Mover)) 4) (set Var "ContinueSowing" 0)))}) (set Var "Direction" 0)))))) (then (if (or (all Sites (sites P1 "Home") (= 0 (count (site )))) (all Sites (sites P2 "Home") (= 0 (count (site ))))) (and (forEach Site (sites P1 "Home") (fromTo (from (site )) (to (handSite P1)) (count (site )))) (forEach Site (sites P2 "Home") (fromTo (from (site )) (to (handSite P2)) (count (site ))))))))) (end (if (all Sites (sites Board) (= 0 (count (site )))) (byScore {(score P1 (count Cell (handSite P1))) (score P2 (count Cell (handSite P2)))})))))

2x6 board, with a storage hole on either end. The game starts with four counters in each hole. A player picks up all of the counters in one of the holes in their row and sows them one-by-one in a counterclockwise direction in consecutive holes from the hole the pieces originated. The starting hole is always left empty, even if a player sows in a complete circuit of the board, the original house is skipped and sowing continues in the next hole after it. Players capture counters when the final counter is sown in the player's own row and the hole containing it has two or three counters (counting the counter just dropped into it). If the hole before it also has two or three counters, these are also captured and so on until reaching a hole without two or three counters or one not belonging to the player. If an opponent's holes are all empty, the other player must make a move placing counters in the opponent's row. If not possible, the player captures all the counters in their row. The player who has captured the most counters wins. If the game continues in a repeating loop, the players can agree to end the game and capture the counters remaining in their row.
        
(game "Fondji" (players 2) (equipment {(mancalaBoard 2 6 (track "Track" "1,E,N,W" true)) (regions P1 (sites Bottom)) (regions P2 (sites Top)) (map {(pair P1 FirstSite) (pair P2 LastSite)}) (piece "Seed" Shared)}) (rules (start (set Count 4 (sites Track))) (play (if (is Proposed "End") (or (move Vote "End") (move Vote "No")) (or (if (is Cycle) (move Propose "End")) (do (move Select (from (sites Mover) (< 0 (count (from )))) (then (sow (and (is In (to ) (sites Next)) (or (= (count (to )) 2) (= (count (to )) 3))) (fromTo (from (to )) (to (mapEntry (mover ))) (count (to ))) false true))) (< 0 (count (sites Next))))))) (end (if (or (no Moves Mover) (is Decided "End")) (byScore {(score P1 (+ (count (mapEntry P1)) (count (sites P1)))) (score P2 (+ (count (mapEntry P2)) (count (sites P2))))})))))

2x6 board, one store on either end. Four counters in each hole. Sowing occurs in an anti-clockwise direction and begins in the player's row. When the final counter lands in an occupied hole which is not followed by an empty hole, the contents are picked up and sowing continues. If the final counter falls in an occupied hole followed by an empty hole, or if it falls into an empty hole, the turn ends. Sowing always skips the hole from which the sowing began if it goes all the way around the board. When the final counter falls into an occupied hole in the opponent's row containing three counters, these are captured and the turn ends. Any holes in the opponent's row containing four counters in an unbroken consecutive sequence behind this hole are also captured. Single counters can only be sowed when the next hole is empty. Play continues until one player can no longer play. The player who has captured the most counters wins.
(game "Kay" (players 2) (equipment {(mancalaBoard 2 6 (track "Track" "1,E,N,W" true)) (piece "Seed" Shared) (regions "Home" P1 (sites Bottom)) (regions "Home" P2 (sites Top)) (map {(pair P1 FirstSite) (pair P2 LastSite)})}) (rules (start (set Count 4 (sites Track))) (play (move Select (from (if (is Prev Mover) (sites {(last To true)}) (sites Mover)) (or (< 1 (count (from ))) (and (= 1 (count (from ))) (is Empty (trackSite Move (from ) "Track" 1))))) (then (sow true (if (= 4 (count (to ))) (fromTo (from (to )) (to (mapEntry Mover)) (count (to ))) (if (< 1 (count (to ))) (if (is Occupied (trackSite Move (to ) "Track" 1)) (moveAgain )))) false (= 4 (count (to ))))))) (end (if (no Moves Next) (byScore {(score P1 (count (mapEntry P1))) (score P2 (count (mapEntry P2)))})))))

2x6 board. Four counters in each hole. Sowing occurs in an anti-clockwise direction. When the final counter of a sowing lands in an empty hole on the player's own row, the contents of the opponent's opposite hole are captured only if it contains one counter. If the final counter lands in an occupied hole, the contents of it are picked up and sowing continues. If the final counter lands in a hole in the opponent's row, causing it to contain four counters, the hole becomes a qasamo, and it can no longer be sown from. Play continues until all of the counters are captured or are in a qasamo. The player with the most counters captured and in all qasamo belonging to them wins.
(game "Gamacha (Nobility)" (players 2) (equipment {(mancalaBoard 2 6 None (track "Track" "0,E,N,W" true)) (piece "Seed" Shared) (regions P1 (sites Bottom)) (regions P2 (sites Top)) (hand Each)}) (rules (start (set Count 4 (sites Track))) (play (move Select (from (if (is Prev Mover) (sites {(last To true)}) (sites Mover)) (and (< 0 (count (from ))) (= 0 (state (from ))))) (then (sow (if (and (is In (to ) (sites Mover)) (= 1 (count (to )))) (if (= 1 (count (if (is Mover P1) (+ (to ) 6) (- (to ) 6)))) (fromTo (from (if (is Mover P1) (+ (to ) 6) (- (to ) 6))) (to (handSite Mover)) 1)) (if (< 1 (count (to ))) (and (moveAgain ) (if (and {(is In (to ) (sites Next)) (= 0 (state (to ))) (= 4 (count (to )))}) (set State (to ) (mover )))))))))) (end (if (all Sites (forEach (sites Board) (= 0 (state (site )))) (= 0 (count (site )))) (byScore {(score P1 (+ (count Cell (handSite P1)) (count (forEach (sites Board) (= (id P1) (state (site ))))))) (score P2 (+ (count Cell (handSite P2)) (count (forEach (sites Board) (= (id P2) (state (site )))))))})))))

2x7 board, with two stores. Seven counters in each hole. Players sow from any hole on their side of the board, in a clockwise direction, and sow into the store on their left, but not the one on the right. When the final counter of a sowing lands in an occupied hole that is not the store, the player picks up these counters and continues sowing. When then final counter lands in an empty hole, the turn ends. When the final counter lands in the store, the turn ends. Play continues until all of the counters are in the stores, and the player with the most counters in their store wins.
(game "Chungcajon" (players 2) (equipment {(mancalaBoard 2 7 {(track "Track1" "7,W,WNW,ENE,E" true P1) (track "Track2" "8,E,ESE,WSW,W" true P2)}) (regions P1 (sites Bottom)) (regions P2 (sites Top)) (map {(pair P1 FirstSite) (pair P2 LastSite)}) (piece "Seed" Shared)}) (rules (start (set Count 7 (union (sites P1) (sites P2)))) (play (move Select (from (if (is Prev Mover) (sites {(last To true)}) (sites Mover)) (> (count (from )) 0)) (then (sow "Track" (mover ) (and (> (count (to )) 1) (!= (to ) (mapEntry Mover))) (moveAgain ))))) (end (if (all Sites (union (sites P1) (sites P2)) (= 0 (count (site )))) (byScore {(score P1 (count (mapEntry P1))) (score P2 (count (mapEntry P2)))})))))

2x12 board. The board begins with the following pattern of counters in the holes, beginning from the bottom left row and proceeding in an anti-clockwise direction: 0-0-4-0-4-0-4-0-4-0-4-0-4-0-4-0-4-0-4-0-4-0-4-0. One player starts with an additional four counters in their left hand hole. The player with fewer counters on their first move places the counters from their seventh hole into the opponent's opposite hole. Sowing occurs in an anti-clockwise direction, and may only happen when the final counter lands either in an empty hole in the player's own row or in any hole in the opponent's row. When the final counter lands in an empty hole in the player's own row, the contents of the opposite hole in the opponent's row are captured. When the final counter lands in an occupied hole in the opponent's row, these counters are picked up and sowing continues. The final counter of this sowing is allowed to fall into an occupied hole in the player's own row, and these are picked up and sowing continues. Sowing ends when the final counter lands in an empty hole. The game ends when one player has no counters on their side of the board, and the opponent wins.
(game "Gamacha" (players 2) (equipment {(mancalaBoard 2 12 None (track "Track" "0,E,N,W" true)) (piece "Seed" Shared) (regions P1 (sites Bottom)) (regions P2 (sites Top)) (hand Each)}) (rules (start (set Count 4 (sites {"C1" "E1" "G1" "I1" "K1" "L2" "J2" "H2" "F2" "D2" "B2"}))) {(phase "Opening" (play (move (from 6) (to 18) 4)) (nextPhase "Sowing")) (phase "Sowing" (play (move Select (from (if (is Prev Mover) (sites {(last To true)}) (sites Mover)) (if (is Prev Mover) true (and (> (count (from )) 0) (if (is In (trackSite Move (from ) (count (from ))) (sites Next)) true (is Empty (trackSite Move (from ) (count (from )))))))) (then (sow (if (and (is In (to ) (sites Mover)) (<= (count (to )) 1)) (if (!= 0 (count (if (is Mover P1) (+ (to ) 12) (- (to ) 12)))) (fromTo (from (if (is Mover P1) (+ (to ) 12) (- (to ) 12))) (to (handSite Mover)) (count (if (is Mover P1) (+ (to ) 12) (- (to ) 12))))) (if (> (count (to )) 1) (moveAgain ))))))))} (end (forEach Player (all Sites (sites Player) (= 0 (count (site )))) (result Player Loss)))))

2x5 board. Ten counters in each hole. Sowing occurs in an anti-clockwise direction, sowing first into the hole from which the counters originally came. Opening phase: In the first ten turns, each player must sow from each of their five holes. Main phase: Captures are made when the last counter of a sowing falls into a hole preceding a hole containing one, three, or five counters. These counters are taken. Any subsequent holes also containing one, three, or five counters are captured, until a hole is reached that does not have one of these numbers of counters. The exception to this is in the first move when no captures are made. Sowing cannot begin from a hole with a single counter. A player wins when his opponent can no longer sow. However, if a player can no longer move, they can redistribute their captured beans into their holes, and if all five can be filled with ten, the game is a draw.
(game "Adjiboto" (players 2) (equipment {(mancalaBoard 2 5 None (track "Track" "0,E,N,W" true)) (piece "Seed" Shared) (hand Each) (regions P1 (sites Bottom)) (regions P2 (sites Top))}) (rules (start (set Count 10 (sites Track))) {(phase "Opening" (play (move Select (from (difference (sites Mover) (sites (if (is Mover P1) (values Remembered "SowedHolesP1") (values Remembered "SowedHolesP2")))) (< 1 (count (to )))) (then (and (sow true) (if (is Mover P1) (remember Value "SowedHolesP1" (last From) true) (remember Value "SowedHolesP2" (last From) true)))))) (nextPhase Mover (< 8 (count Turns)))) (phase "Main" (play (move Select (from (sites Mover) (< 1 (count (to )))) (then (sow (or {(= 1 (count (trackSite Move (to ) "Track" 1))) (= 3 (count (trackSite Move (to ) "Track" 1))) (= 5 (count (trackSite Move (to ) "Track" 1)))}) (fromTo (from (trackSite Move (to ) "Track" 1)) (to (handSite Mover)) (count (trackSite Move (to ) "Track" 1))) true true)))) (end (if (no Moves Next) {(if (< (count Cell (handSite Next)) 50) (result Mover Win)) (if (>= (count Cell (handSite Next)) 50) (result Mover Draw))})))}))

Play begins with six counters in each hole. Sowing is anti-clockwise. If the last counter of a sowing lands in the player's own hole making it even, the counters are captured. If the contents of the hole before it is also even, these are also taken, continuing until an odd or empty hole is reached. If the last counter makes a hole odd, the turn ends. If a player has no counters in their holes at the end of the turn, the opponent must play so that the player can play on the next turn. Play ends when neither player is able to move; the last player who was able to move takes the remaining counters and the player with the most counters captured wins.
(game "Halusa" (players 2) (equipment {(mancalaBoard 2 6 None (track "Track" "0,E,N,W" true)) (regions P1 (sites Bottom)) (regions P2 (sites Top)) (piece "Seed" Shared) (hand Each)}) (rules (start (set Count 6 (sites Track))) (play (do (move Select (from (sites Mover) (> (count (from )) 0)) (then (sow (and (is In (to ) (sites Mover)) (is Even (count (to )))) (fromTo (from (to )) (to (handSite Mover)) (count (to ))) true))) (> (count (sites Next)) 0))) (end (if (no Moves Mover) (byScore {(score P1 (+ (count Cell (handSite P1)) (count (sites P1)))) (score P2 (+ (count Cell (handSite P2)) (count (sites P2))))})))))

2x12, 15, 18, 21, or 24 board. Two counters per hole. Typically played by a team of players, who consult each other about the moves to be made. Sowing occurs most commonly in an anti-clockwise direction, but can be played clockwise if the players agree. Play begins with one player picking up the counters in one of the holes in their row and sowing them, then picking up the counters in the hole following the one in which the last counter was sown, and continuing to sow in this way until there is a pattern of holes with three counters alternating with empty holes. The players then decide who gets to play first. Players sow counters from a hole in their row in the agreed-upon direction. When the final counter lands in an occupied hole, these counters are picked up and sowing continues. When the last counter falls into an empty hole, the sowing ends. If the sowing ends in the player's own row, any counters in the opponent's hole opposite are captured. Once both players are reduced to only single counters in their holes, when a player reaches the end of their row with a counter, it is captured instead of continuing to sow it to the opponent's rows. The player who is the last in possession of counters wins.
(game "Andada" (players 2) (equipment {(mancalaBoard 2 12 None (track "Track" "0,E,N,W" true)) (regions P1 (sites Bottom)) (regions P2 (sites Top)) (piece "Seed" Shared) (hand Each)}) (rules (start (set Count 2 (sites Track))) {(phase "Opening" (play (move Select (from (if (is Prev Mover) (sites {(trackSite Move (last To true) "Track" 1)}) (sites Mover)) (> (count (from )) 0)) (then (sow (then (if (is Occupied (trackSite Move (last To true) "Track" 1)) (moveAgain ))))))) (nextPhase (is Mover P2) "Playing")) (phase "Playing" (play (move Select (from (if (is Prev Mover) (sites {(last To true)}) (sites Mover)) (> (count (from )) 0)) (then (sow (if (= 1 (count (to ))) (if (all Sites (sites Board) (<= (count (site )) 1)) (if (is In (trackSite Move (to ) "Track" 1) (sites Next)) (fromTo (from (to )) (to (handSite Mover)) (count (to )))) (if (and (is Occupied (if (is Mover P1) (+ (to ) 12) (- (to ) 12))) (is In (to ) (sites Mover))) (fromTo (from (if (is Mover P1) (+ (to ) 12) (- (to ) 12))) (to (handSite Mover)) (count (if (is Mover P1) (+ (to ) 12) (- (to ) 12)))))) (moveAgain )))))) (end (forEach Player (all Sites (sites Player) (= 0 (count (site )))) (result Player Loss))))}))

2x6 board. Eight counters in each hole; two holes in one player's row and one in the opponent's row are left empty. Sowing in an anti-clockwise direction. No captures in first two turns. If the last counter falls into a hole that is occupied, these are picked up and the sowing continues. When the last counter of a sowing falls into an empty hole, the counters in the opposite hole are captured. The player continues play by moving the counter that made the capture into the next hole, and continuing play. If the last counter falls into an empty hole and the opposite hole is also empty, the turn ends. The player who captures the most counters wins.
(game "Mangala (Suez)" (players 2) (equipment {(mancalaBoard 2 6 None (track "Track" "0,E,N,W" true)) (piece "Seed" Shared) (regions P1 (sites Bottom)) (regions P2 (sites Top)) (hand Each)}) (rules (start (set Count 8 (sites Track))) {(phase "Opening" (play (move Remove (sites Mover) (count (to )))) (nextPhase (<= 3 (count Turns)) "Sowing")) (phase "Sowing" (play (move Select (from (if (is Prev Mover) (sites {(var "Replay")}) (sites Mover)) (is Occupied (from ))) (then (sow (if (< 1 (count (to ))) (and (moveAgain ) (set Var "Replay" (to ))) (if (<= 7 (count Turns)) (if (is Occupied (if (is In (to ) (sites Bottom)) (+ (to ) 6) (- (to ) 6))) (and {(fromTo (from (if (is In (to ) (sites Bottom)) (+ (to ) 6) (- (to ) 6))) (to (handSite Mover)) (count (if (is In (to ) (sites Bottom)) (+ (to ) 6) (- (to ) 6)))) (moveAgain ) (set Var "Replay" (to ))})))))))) (end (if (no Moves Next) (byScore {(score P1 (+ (count Cell (handSite P1)) (count (sites P1)))) (score P2 (+ (count Cell (handSite P2)) (count (sites P2))))}))))}))

2x6 board. Play begins with four counters in each hole. A player picks up the contents of any of their holes and sowing them in an anti-clockwise direction, picking up the contents of the last hole in which his counters fall, and continuing sowing. This continues until the last counter falls in an empty hole. Then it is the other player's turn. A hole is captured when the last ball is dropped into an opponent's hole containing three counters, making it four. A player cannot then take from one of these holes that they have captured. Therefore, the player cannot begin a turn from their own captured hole nor can they continue sowing from it. If the last counter of a sowing falls into an opponent's captured hole, nothing happens on the first instance, but every time after that, one of those counters are removed from the board and placed in the store, and the sowing ends. Ownership of a hole continues even if it becomes empty. When a player cannot move (i.e., there are no counters in their holes except any that are in captured holes), the opponent continues to move until the player is able to move. Play continues until all counters are either placed in the store or in captured holes and thus cannot be moved. Players then count their pieces by placing four in each hole, and the player who has more than their original number takes ownership of one of the opponent's holes for every four counters more than the original number that have been taken. If no player took four more than the original, the player with three extra gets the hole, if each player has two extra the weaker player is given the two extra counters. Play then begins again as before. The game ends when one player owns all of the counters, and thus all of the holes.
(game "Awagagae" (players 2) (equipment {(mancalaBoard 2 6 None (track "Track" "0,E,N,W" true)) (piece "Seed" Shared) (hand Each) (regions P1 (sites Bottom)) (regions P2 (sites Top))}) (rules (start {(set RememberValue "OwnedP1" (sites Bottom)) (set RememberValue "OwnedP2" (sites Top)) (set Count 4 (sites Track))}) {(phase "Sowing" (play (or {(move Select (from (if (is Prev Mover) (sites {(last To true)}) (if (is Mover P1) (sites (values Remembered "OwnedP1")) (sites (values Remembered "OwnedP2")))) (and (if (is Mover P1) (not (is In (from ) (values Remembered "CapturedP2"))) (not (is In (from ) (values Remembered "CapturedP1")))) (< 0 (count (from ))))) (then (sow "Track" (if (not (if (= (mover ) P1) (is In (to ) (values Remembered "CapturedP1")) (is In (to ) (values Remembered "CapturedP2")))) (if (and (is In (to ) (sites Next)) (= (count (to )) 4)) (if (is Mover P1) (remember Value "CapturedP1" (to )) (remember Value "CapturedP2" (to ))) (if (if (= (mover ) P1) (is In (to ) (values Remembered "CapturedP2")) (is In (to ) (values Remembered "CapturedP1"))) (fromTo (from (to )) (to (handSite Next)) 1) (if (> (count (to )) 1) (moveAgain ))))))))} (then (if (no Pieces (forEach (sites Board) (and (not (is In (site ) (values Remembered "CapturedP1"))) (not (is In (site ) (values Remembered "CapturedP2")))))) (and {(forEach Site (sites Board) (if (and (is In (site ) (values Remembered "CapturedP1")) (is Occupied (site ))) (fromTo (from (site )) (to (handSite P1)) (count (site ))))) (forEach Site (sites Board) (if (and (is In (site ) (values Remembered "CapturedP2")) (is Occupied (site ))) (fromTo (from (site )) (to (handSite P2)) (count (site ))))) (forget Value "OwnedP1" All) (forget Value "OwnedP2" All) (forget Value "CapturedP1" All) (forget Value "CapturedP2" All)}))))) (end (if (all Sites (sites Board) (= 0 (count (site )))) {(if (= 0 (count Cell (handSite P1))) (result P2 Win)) (if (= 0 (count Cell (handSite P2))) (result P1 Win))})) (nextPhase (all Sites (sites Board) (= 0 (count (site )))) "BetweenRounds")) (phase "BetweenRounds" (play (if (<= 4 (count Cell (handSite Mover))) (move (from (handSite Mover)) (to (if (all Sites (sites Mover) (is Occupied (site ))) (sites Next) (sites Mover)) (is Empty (to ))) 4 (then (and (if (is Mover P1) (remember Value "OwnedP1" (last To)) (remember Value "OwnedP2" (last To))) (if (and (> 4 (count Cell (handSite P1))) (> 4 (count Cell (handSite P2)))) (and {(fromTo (from Cell (handSite P1)) (to (sites Empty)) (count Cell (handSite P1))) (fromTo (from Cell (handSite P2)) (to (sites Empty)) (count Cell (handSite P2))) (if (= 3 (count Cell (handSite P1))) (remember Value "OwnedP1" (regionSite (sites Empty) 0)) (remember Value "OwnedP2" (regionSite (sites Empty) 0)))}))))))) (nextPhase (and (is Empty (handSite P1)) (is Empty (handSite P2))) "Sowing"))}))

2x6 board. Four counters in each hole. Players sow counters in a clockwise directions from one of the holes in their opponent's row. When the final counter lands in an occupied hole, the contents of that hole are picked up and sowing continues, unless the next hole is empty, in which case the contents of the next hole after the empty hole are captured. When the final counter falls in an empty hole, the turn ends. Play continues until all of the holes are empty in one of the rows. The player who captured the most counters wins.
(game "Tap Urdy" (players 2) (equipment {(mancalaBoard 2 6 None (track "Track" "5,W,N,E" true)) (regions P1 (sites Bottom)) (regions P2 (sites Top)) (hand Each) (piece "Seed" Shared)}) (rules (start (set Count 4 (sites Track))) (play (move Select (from (if (is Prev Mover) (sites {(last To true)}) (sites Next)) (< 0 (count (from )))) (then (sow (if (and (!= (count (trackSite Move (to ) 1)) 0) (> (count (to )) 1)) (moveAgain ) (if (and (= (count (trackSite Move (to ) 1)) 0) (> (count (to )) 1)) (fromTo (from (trackSite Move (to ) 2)) (to (handSite (mover ))) (count (trackSite Move (to ) 2))))))))) (end (if (or (all Sites (sites P1) (= 0 (count (site )))) (all Sites (sites P2) (= 0 (count (site ))))) (byScore {(score P1 (+ (count Cell (handSite P1)) (count (sites P1)))) (score P2 (+ (count Cell (handSite P2)) (count (sites P2))))})))))

2x6 board. Four counters in each hole. Sowing proceeds in an anti-clockwise direction. When the final counter of a sowing lands in an occupied hole, the contents are picked up and sowing continues. When the final counter falls in an empty hole, the turn ends. If the empty hole is in the player's row, any counters in the opponent's opposite hole are captured. If a player cannot play, they pass their turn until they are able. The player who captures all of the counters wins. Players then count their pieces by placing four in each hole, and the player who has more than their original number takes ownership of one of the opponent's holes for every four counters more than the original number that have been taken. If no player took four more than the original, the player with three extra gets the hole, if each player has two extra they draw lots to see who gets an extra hole. Play then begins again as before. Play continues until one player owns all of the holes.
(game "Hufesay" (players 2) (equipment {(mancalaBoard 2 6 None (track "Track" "0,E,N,W" true)) (regions "Home" P1 (sites Bottom)) (regions "Home" P2 (sites Top)) (piece "Seed" Shared) (hand Each) (map "LeftMost" {(pair P1 0) (pair P2 11)})}) (rules (start {(set Count 4 (sites Track)) (set RememberValue "OwnedP1" (sites Bottom)) (set RememberValue "OwnedP2" (sites Top))}) {(phase "Sowing" (play (or {(move Select (from (if (is Prev Mover) (sites {(last To true)}) (if (is Mover P1) (sites (values Remembered "OwnedP1")) (sites (values Remembered "OwnedP2")))) (is Occupied (from ))) (then (sow (if (> (count (to )) 1) (moveAgain ) (if (and (is In (to ) (sites Mover)) (> (count (if (is Mover P1) (+ (to ) 6) (- (to ) 6))) 0)) (fromTo (from (if (is Mover P1) (+ (to ) 6) (- (to ) 6))) (to (handSite Mover)) (count (if (is Mover P1) (+ (to ) 6) (- (to ) 6)))))))))} (then (if (or (all Sites (sites P1) (= 0 (count (site )))) (all Sites (sites P2) (= 0 (count (site ))))) (and {(forEach Site (sites (values Remembered "OwnedP1")) (if (is Occupied (site )) (fromTo (from (site )) (to (handSite P1)) (count (site ))))) (forEach Site (sites (values Remembered "OwnedP2")) (if (is Occupied (site )) (fromTo (from (site )) (to (handSite P2)) (count (site ))))) (forget Value "OwnedP1" All) (forget Value "OwnedP2" All) (if (>= (+ (count Cell (handSite P1)) (count (sites P1))) (+ (count Cell (handSite P2)) (count (sites P2)))) (set NextPlayer (player 1)) (set NextPlayer (player 2)))}))))) (end (if (all Sites (sites Board) (= 0 (count (site )))) {(if (> 4 (count Cell (handSite P1))) (result P2 Win)) (if (> 4 (count Cell (handSite P2))) (result P1 Win))})) (nextPhase (all Sites (sites Board) (= 0 (count (site )))) "BetweenRounds")) (phase "BetweenRounds" (play (if (<= 4 (count Cell (handSite Mover))) (move (from (handSite Mover)) (to (trackSite FirstSite (mapEntry "LeftMost" Mover) (is Empty (to )))) 4 (then (and {(if (is Mover P1) (remember Value "OwnedP1" (last To)) (remember Value "OwnedP2" (last To))) (if (<= 4 (count Cell (handSite Mover))) (moveAgain ) (if (= 3 (count Cell (handSite Mover))) (and {(fromTo (from (handSite Mover)) (to (trackSite FirstSite (mapEntry "LeftMost" Mover) (is Empty (to )))) 3) (fromTo (from (handSite Next)) (to (trackSite FirstSite (mapEntry "LeftMost" Mover) (is Empty (to )))) 1) (if (is Mover P1) (remember Value "OwnedP1" (trackSite FirstSite (mapEntry "LeftMost" Mover) (is Empty (to )))) (remember Value "OwnedP2" (trackSite FirstSite (mapEntry "LeftMost" Mover) (is Empty (to )))))}) (fromTo (from (handSite Mover)) (to (handSite Next)) (count Cell (handSite Mover)))))}))))) (nextPhase (and (is Empty (handSite P1)) (is Empty (handSite P2))) "Sowing"))}))

Two rows of six holes encircling a larger hole in the center. Two counters in each hole, except the center hole. Players move by removing the counters from one of the holes in their row and sowing them in an anti-clockwise direction. If the final counter of the sowing falls into an occupied hole, these counters are picked up and sowing continues. When the final counter falls into an empty hole, the turn ends. If the final counter falls into a hole already containing two others, the player takes these counters and covers the hole. The three counters are sown beginning with the following hole. When sowing, if a player reaches a covered hole in their row, they skip it and continue sowing with the next available hole. If the player reaches a covered hole in the opponent's row, the counter that would fall into it is instead deposited into the central hole. If this is the final counter, the turn ends. It is possible to sow a single counter. The player who can no longer sow from their row loses.
(game "Deka" (players 2) (equipment {(board (merge {(rectangle 1 5) (rectangle 3 1) (shift 0.0 2.0 (rectangle 1 5)) (shift 4.0 0.0 (rectangle 3 1)) (shift 2.0 1.0 (square 1))}) (track "Track" "0,E,N,W,S1" true) Vertex) (regions P1 (sites {0 1 2 3 4 11})) (regions P2 (sites {5 6 7 8 9 10})) (piece "Seed" Shared)}) (rules (start (set Count 2 (difference (sites Board) 12))) (play (or {(move Select (from (if (is Prev Mover) (sites {(var "Replay")}) (sites Mover)) (is Occupied (from ))) (then (sow (if (not (and (is In (to ) (sites Next)) (= (next ) (state (to ))))) (if (= 3 (count (to ))) (and {(fromTo (from (to )) (to (trackSite Move (to ) 1)) 3) (sow (trackSite Move (to ) 1) 3 (and (is In (to ) (sites Mover)) (= 1 (state (to ))))) (set State (to ) 1)}) (if (< 1 (count (to ))) (and (moveAgain ) (set Var "Replay" (to )))))) (and (is In (to ) (sites Mover)) (= (mover ) (state (to )))))))} (then (forEach Site (if (is Mover P1) (sites P2) (sites P1)) (if (= 1 (state (site ))) (and (fromTo (from (site )) (to (centrePoint )) (count (site ))) (set State (site ) 1))))))) (end (forEach Player (no Moves Player) (result Player Loss)))))

Two rows of six holes with two stores. Each player owns the store to their right. Four counters in each hole. Sowing occurs from any hole in the player's row in an anti-clockwise direction. Sowing includes the player's store but not the opponent's. When the final counter lands into the player's store, they play again. When a player has no more counters in their row, they win, even if it is now the opponent's turn and they could place counters in the player's row.
(game "Waurie" (players 2) (equipment {(mancalaBoard 2 6 (track "Track" "0,ESE,E,ENE,WNW,W" true)) (regions P1 (sites Bottom)) (regions P2 (sites Top)) (map {(pair P1 LastSite) (pair P2 FirstSite)}) (piece "Seed" Shared)}) (rules (start (set Count 4 (union (sites P1) (sites P2)))) (play (move Select (from (sites Mover) (> (count (from )) 0)) (then (sow (if (= (to ) (mapEntry Mover)) (moveAgain )) (= (to ) (mapEntry Next)))))) (end (if (all Sites (sites Mover) (= 0 (count (site )))) (result Mover Win)))))

2x6 board. Four counters in each hole.  A player picks up all of the counters in one of the holes in their row and sows them one-by-one in a clockwise direction in consecutive holes from the hole the pieces originated. The starting hole is always left empty, even if a player sows in a complete circuit of the board, the original house is skipped and sowing continues in the next hole after it. When the final counter falls into an occupied hole, these are picked up and sowing continues. When the final counter of a sowing lands in an empty hole in the player's own row, the contents of the hole in the opponent's row opposite it are captured. If the opponent's holes are all empty, the other player must make a move placing counters in the opponent's row. If not possible, the player captures all the counters in their row. The player who has captured the most counters wins. If the game continues in a repeating loop, the players can agree to end the game and capture the counters remaining in their row.
        
(game "Foji" (players 2) (equipment {(mancalaBoard 2 6 None (track "Track" "5,W,N,E" true)) (piece "Seed" Shared) (hand Each) (regions P1 (sites Bottom)) (regions P2 (sites Top))}) (rules (start (set Count 4 (sites Track))) (play (if (is Proposed "End") (or (move Vote "End") (move Vote "No")) (or (if (is Cycle) (move Propose "End")) (if (is Prev Mover) (move Select (from (sites {(last To true)})) (then (sow (if (< 1 (count (to ))) (moveAgain ) (if (is In (to ) (sites Mover)) (if (is Occupied (if (is Mover P1) (+ (to ) 6) (- (to ) 6))) (fromTo (from (if (is Mover P1) (+ (to ) 6) (- (to ) 6))) (to (handSite Mover)) (count (if (is Mover P1) (+ (to ) 6) (- (to ) 6))))))) false))) (do (move Select (from (sites Mover) (is Occupied (from ))) (then (sow (if (< 1 (count (to ))) (moveAgain ) (if (is In (to ) (sites Mover)) (if (is Occupied (if (is Mover P1) (+ (to ) 6) (- (to ) 6))) (fromTo (from (if (is Mover P1) (+ (to ) 6) (- (to ) 6))) (to (handSite Mover)) (count (if (is Mover P1) (+ (to ) 6) (- (to ) 6))))))) false))) (if (is Mover P1) (< 0 (count (sites P2))) (< 0 (count (sites P1))))))))) (end (if (or (no Moves Mover) (is Decided "End")) (byScore {(score P1 (+ (count Cell (handSite P1)) (count (sites P1)))) (score P2 (+ (count Cell (handSite P2)) (count (sites P2))))})))))

2x6 board. Four counters in each hole. The first player takes three counters from each of their holes, and sows them beginning in the opponent's first hole. Sowing proceeds in an anti-clockwise direction, and when the final counter lands in an occupied hole, these are picked up and sowing continues. While sowing, if a hole is made to contain four counters, these are captured by the player. When the final counter falls into an empty hole, the turn ends, unless the player was able to make a capture during the sowing, in which case they may play again. A player with no counters on their side must pass, and may continue playing when there are counters in their holes again. Play continues until all the counters are captured, and the player with the most counters wins. A second round is played, each player placing four counters into each hole starting from the rightmost hole in their row. The player with more counters gains a hole from their opponent for every four extra balls they've captured. If an opponent has three extra after counting in such a way, they also gain a hole, but not if there are one or two extra. Play continues in several rounds like this until one player captures all the holes.
        
(game "Lam Waladach" (players 2) (equipment {(mancalaBoard 2 6 None {(track "TrackCCW" "0,E,N,W" true) (track "TrackCW" "5,W,N,E" true)}) (piece "Seed" Shared) (hand Each) (regions P1 (sites Bottom)) (regions P2 (sites Top)) (map "RightMost" {(pair P1 5) (pair P2 6)})}) (rules (start {(set Count 4 (sites Track)) (set RememberValue "OwnedP1" (sites Bottom)) (set RememberValue "OwnedP2" (sites Top))}) {(phase "Opening" (play (move Select (from 11) (then (and (forEach Site (sites Mover) (fromTo (from (site )) (to 11) 3)) (sow 18 "TrackCCW" (if (< 1 (count (to ))) (and (moveAgain ) (set Var "Replay" (to )))) true))))) (nextPhase "Sowing")) (phase "Sowing" (play (or {(move Select (from (if (and (not (is Pending)) (is Prev Mover)) (sites {(var "Replay")}) (if (is Mover P1) (sites (values Remembered "OwnedP1")) (sites (values Remembered "OwnedP2")))) (> (count (from )) 0)) (then (do (set Var "NumSowed" (count (last To))) (sow "TrackCCW" (if (< 1 (count (to ))) (and (moveAgain ) (set Var "Replay" (to ))))) (then (and (forEach Site (sites Track (last From) (trackSite Move (last From) "Track" (var "NumSowed"))) (if (= 4 (count (site ))) (and (fromTo (from (site )) (to (handSite Mover)) 4) (and (moveAgain ) (set Pending))))) (set Var "NumSowed" 0))))))} (then (if (all Sites (sites Board) (= 0 (count (site )))) (and (forget Value "OwnedP1" All) (forget Value "OwnedP2" All)))))) (end (if (all Sites (sites Board) (= 0 (count (site )))) {(if (> 3 (count Cell (handSite P1))) (result P2 Win)) (if (> 3 (count Cell (handSite P2))) (result P1 Win))})) (nextPhase (all Sites (sites Board) (= 0 (count (site )))) "BetweenRounds")) (phase "BetweenRounds" (play (if (<= 3 (count Cell (handSite Mover))) (move (from (handSite Mover)) (to (trackSite FirstSite "TrackCW" (mapEntry "RightMost" Mover) (is Empty (to )))) (if (>= (count Cell (handSite Mover)) 4) 4 3) (then (if (is Mover P1) (remember Value "OwnedP1" (last To)) (remember Value "OwnedP2" (last To))))))) (nextPhase (all Passed) "Sowing"))}))

2x6 board. 72 counters are distributed unevenly into the holes by one player in both rows, placing at least four in each hole. The opponent moves first, but may flip the board around if they prefer that arrangement. Each move must begin from the rightmost hole in a player's row or the next closest hole to it from which it is possible to move. Counters are sowed in an anti-clockwise direction. If the last counter falls into a hole making it odd, these are picked up and sowing continues. If it lands in a hole making it even, these counters are captured as are the ones in the opposite hole. If the previous hole also has an even number, these and the ones in the opposite hole are captured. If the last counter falls into an empty hole, the turn ends. If a player has no counters in their holes, the opponent must give them one counter, to be placed in the leftmost hole and played from there. Play ends when the board is cleared of counters. Each player counts the number of counters they captured. The player with more counters is given a score equal to the difference in the number of counters. Another round begins as before, with the loser distributing the counters and the winner playing first.. The game is won when a player accumulates sixty points.
(game "Li'b al-Ghashim" (players 2) (equipment {(mancalaBoard 2 6 None {(track "TrackCCW" "0,E,N,W" true) (track "TrackCW" "5,W,N,E" true)}) (piece "Seed" Shared) (hand Each) (regions P1 (sites Bottom)) (regions P2 (sites Top)) (map "RightMost" {(pair P1 5) (pair P2 6)})}) (rules (start (place "Seed" (handSite P1) 72)) {(phase "Opening1" (play (or {(if (is Occupied Cell (handSite P1)) (forEach Value 1 (count Cell (handSite P1)) (move (from (handSite P1)) (to (sites Board)) (value ))) (forEach Site (sites Board) (if (is Occupied (site )) (move (from (site )) (to (sites Board) (!= (to ) (from )))))) (then (moveAgain ))) (if (and (is Empty (handSite P1)) (all Sites (sites Board) (<= 4 (count (site ))))) (move Pass))})) (nextPhase (was Pass) "Opening2")) (phase "Opening2" (play (or (move Pass (then (and (set Pending) (moveAgain )))) (move Swap Players P1 P2 (then (and (set NextPlayer (player 1)) (set Pending)))))) (nextPhase "Sowing")) (phase "Sowing" (play (if (and (not (is Prev Mover)) (all Sites (sites Next) (= 0 (count (site ))))) (move (from (sites Mover) (is Occupied (from ))) (to (trackSite FirstSite "TrackCW" (mapEntry "RightMost" Mover) (and (is In (to ) (sites Mover)) (is Occupied (to )))))) (move Select (from (if (and (not (is Pending)) (is Prev Mover)) (sites {(var "Replay")}) (sites Mover)) (is Occupied (from ))) (then (sow "TrackCCW" true (if (is Odd (count (to ))) (and (moveAgain ) (set Var "Replay" (to ))) (and (fromTo (from (to )) (to (handSite Mover)) (count (to ))) (if (is Occupied (if (is In (to ) (sites Bottom)) (+ (to ) 6) (- (to ) 6))) (fromTo (from (if (is In (to ) (sites Bottom)) (+ (to ) 6) (- (to ) 6))) (to (handSite Mover)) (count (if (is In (to ) (sites Bottom)) (+ (to ) 6) (- (to ) 6))))))) (and (is Occupied (to )) (is Even (count (to ))))))) (then (if (= 1 (count (sites Board))) (and {(if (< (count Cell (handSite P1)) (count Cell (handSite P2))) (addScore P2 (- (count Cell (handSite P2)) (count Cell (handSite P1)))) (addScore P1 (- (count Cell (handSite P1)) (count Cell (handSite P2))))) (if (is Occupied Cell (handSite P2)) (fromTo (from (handSite P2)) (to (handSite P1)) (count Cell (handSite P2)))) (forEach Site (sites Board) (if (is Occupied (site )) (fromTo (from (site )) (to Cell (handSite P1)) (count (site )))))}))))) (nextPhase (= 1 (count (sites Board))) "Opening1"))} (end (forEach Player (<= 60 (score Player)) (result Player Win)))))

2x6 board with two stores. Four counters in each hole. Sowing occurs in a clockwise direction. When the final counter of a sowing lands in an occupied hole, these are picked up and sowing continues. When the final counter lands in an empty hole in the player's own row, the contents of the hole opposite it in the opponent's row are captured. If the final counter lands in an empty hole in the opponent's row, the opponent captures the counters in the hole opposite it in the player's row. The player who captures the most counters wins.
(game "Yovodi" (players 2) (equipment {(mancalaBoard 2 6 (track "Track" "6,W,N,E" true)) (regions P1 (sites Bottom)) (regions P2 (sites Top)) (map {(pair P1 FirstSite) (pair P2 LastSite)}) (piece "Seed" Shared)}) (rules (start (set Count 4 (sites Track))) (play (move Select (from (if (is Prev Mover) (sites {(last To true)}) (sites Mover)) (< 0 (count (from )))) (then (sow (if (> (count (to )) 1) (moveAgain ) (if (is In (to ) (sites Mover)) (fromTo (from (if (is In (to ) (sites Bottom)) (+ (to ) 6) (- (to ) 6))) (to (mapEntry (mover ))) (count (if (is In (to ) (sites Bottom)) (+ (to ) 6) (- (to ) 6)))) (fromTo (from (if (is In (to ) (sites Bottom)) (+ (to ) 6) (- (to ) 6))) (to (mapEntry (next ))) (count (if (is In (to ) (sites Bottom)) (+ (to ) 6) (- (to ) 6)))))))))) (end (if (no Moves Mover) (byScore {(score P1 (+ (count (mapEntry P1)) (count (sites P1)))) (score P2 (+ (count (mapEntry P2)) (count (sites P2))))})))))

2x6 board. Four counters in each hole. Players sow from any of the holes in their row in an anti-clockwise direction. When the final counter of a sowing falls into an occupied hole (except in the scenario below), these are picked up and sowing continues. If the final counter falls into either an empty hole or one of the opponent's holes with three counters, making that hole now have four counters, the sowing ends. When the final counter falls into a hole in the opponent's row containing four counters after sowing concludes, this hole is marked. If a player sows their final counter into their opponent's marked hole, the final counter and one of the counters in the hole are captured. The player then gets another turn. If the final counter falls into a player's own marked hole, the turn ends. The contents of marked holes cannot be sown. The game ends when only marked holes contain counters. These are then captured by the players who marked them. A new game begins. The player with the most counters places four in each hole beginning from the left hole in their row. Each hole that contains four counters is owned by that player for the new round. If the player has three counters remaining after filling as many holes with four as possible, they borrow one counter from the opponent to make four and own the corresponding hole. If there are two or one remaining, the opponent borrows these to fill and own the last hole. Play continues until one player owns no more holes.
(game "Um el Banat" (players 2) (equipment {(mancalaBoard 2 6 None (track "Track" "0,E,N,W" true)) (regions "Home" P1 (sites Bottom)) (regions "Home" P2 (sites Top)) (piece "Seed" Shared) (hand Each) (map "LeftMost" {(pair P1 0) (pair P2 11)})}) (rules (start {(set Count 4 (sites Track)) (set RememberValue "OwnedP1" (sites Bottom)) (set RememberValue "OwnedP2" (sites Top))}) {(phase "Sowing" (play (or {(move Select (from (if (and (is Prev Mover) (= 1 (var "ContinueSowing"))) (sites {(last To true)}) (if (is Mover P1) (sites (values Remembered "OwnedP1")) (sites (values Remembered "OwnedP2")))) (and (< 0 (count (from ))) (= 0 (state (from ))))) (then (sow (if (= (next ) (state (to ))) (and {(move (from (to )) (to (handSite Mover)) (min 2 (count (to )))) (moveAgain ) (set Var "ContinueSowing" 0)}) (if (= (mover ) (state (to ))) (set Var "ContinueSowing" 0) (if (and (< 1 (count (to ))) (!= 4 (count (to )))) (and (moveAgain ) (set Var "ContinueSowing" 1)) (if (and (= 4 (count (to ))) (not (is In (sites Mover "Home")))) (and (set State (to ) (mover )) (set Var "ContinueSowing" 0)))))))))} (then (if (all Sites (forEach (sites Board) (= 0 (state (site )))) (= 0 (count (site )))) (and {(forEach Site (forEach (sites Board) (= 1 (state (site )))) (fromTo (from (site )) (to (handSite P1)) (count (site )))) (forEach Site (forEach (sites Board) (= 2 (state (site )))) (fromTo (from (site )) (to (handSite P2)) (count (site )))) (forget Value "OwnedP1" All) (forget Value "OwnedP2" All) (if (>= (+ (count Cell (handSite 1)) (count (forEach (sites Board) (= 1 (state (site )))))) (+ (count Cell (handSite 2)) (count (forEach (sites Board) (= 2 (state (site ))))))) (set NextPlayer (player 1)) (set NextPlayer (player 2)))}))))) (end (if (all Sites (sites Board) (= 0 (count (site )))) {(if (= 0 (count Cell (handSite P1))) (result P2 Win)) (if (= 0 (count Cell (handSite P2))) (result P1 Win))})) (nextPhase (all Sites (sites Board) (= 0 (count (site )))) "BetweenRounds")) (phase "BetweenRounds" (play (if (<= 4 (count Cell (handSite Mover))) (move (from (handSite Mover)) (to (trackSite FirstSite (mapEntry "LeftMost" Mover) (is Empty (to )))) 4 (then (and {(if (is Mover P1) (remember Value "OwnedP1" (last To)) (remember Value "OwnedP2" (last To))) (if (<= 4 (count Cell (handSite Mover))) (moveAgain ) (if (= 3 (count Cell (handSite Mover))) (and {(fromTo (from (handSite Mover)) (to (trackSite FirstSite (mapEntry "LeftMost" Mover) (is Empty (to )))) 3) (fromTo (from (handSite Next)) (to (trackSite FirstSite (mapEntry "LeftMost" Mover) (is Empty (to )))) 1) (if (is Mover P1) (remember Value "OwnedP1" (trackSite FirstSite (mapEntry "LeftMost" Mover) (is Empty (to )))) (remember Value "OwnedP2" (trackSite FirstSite (mapEntry "LeftMost" Mover) (is Empty (to )))))}) (fromTo (from (handSite Mover)) (to (handSite Next)) (count Cell (handSite Mover)))))}))))) (nextPhase (and (is Empty (handSite P1)) (is Empty (handSite P2))) "Sowing"))}))

Two rows of four piles. Six counters in each pile. A player picks up the counters in one of her piles and sows them anti-clockwise, beginning in the place from which the pile originated. Any piles containing 2, 4, or 6 counters at the end of sowing are captured. Play continues until all of the counters have been captured. The player who captures the most counters wins.
(game "Oure Ngat" (players 2) (equipment {(mancalaBoard 2 4 None (track "Track" "0,E,N,W" true)) (piece "Seed" Shared) (regions "Home" P1 (sites Bottom)) (regions "Home" P2 (sites Top)) (hand Each)}) (rules (start (set Count 6 (sites Track))) (play (move Select (from (sites Mover "Home") (> (count (from )) 0)) (then (sow true (then (forEach Site (sites Track) (if (is In (count (site )) (sites {2 4 6})) (fromTo (from (site )) (to (handSite Mover)) (count (site )))))))))) (end (if (= 0 (count (sites Track))) (byScore {(score P1 (count Cell (handSite P1))) (score P2 (count Cell (handSite P2)))})))))

2x6 board. Four counters in each hole. Sowing occurs in an anti-clockwise direction, beginning from any hole in the player's row. When the final counter lands in a hole in the opponent's row containing three (four counting the last counter dropped into it), these are taken. In addition, the contents of any hole in the opponent's row which a player causes to contain four counters are captured. When the final counter lands in an empty hole, the turn ends. When the final counter lands in an occupied hole containing a number of counters other than three, the counters are picked up and sowing continues. If sowing reaches the original hole from which the sowing began, this hole is skipped over. A player must play so that the opponent has counters with which to play, if possible.
(game "Wouri" (players 2) (equipment {(mancalaBoard 2 6 None (track "Track" "0,E,N,W" true)) (regions P1 (sites Bottom)) (regions P2 (sites Top)) (piece "Seed" Shared) (hand Each)}) (rules (start (set Count 4 (sites Track))) (play (do (move Select (from (if (is Prev Mover) (sites {(last To true)}) (sites Mover)) (< 0 (count (from )))) (then (sow (if (and (is In (to ) (sites Next)) (= (count (to )) 4)) (fromTo (from (to )) (to (handSite Mover)) (count (to )) (then (forEach Site (if (is Mover P1) (sites P2) (sites P1)) (if (= (count (site )) 4) (fromTo (from (site )) (to (handSite Mover)) (count (site ))))))) (if (< 1 (count (to ))) (moveAgain ))) false))) (< 0 (count (if (is Mover P1) (sites P2) (sites P1)))))) (end (if (no Moves Mover) (byScore {(score P1 (+ (count Cell (handSite P1)) (count (sites P1)))) (score P2 (+ (count Cell (handSite P2)) (count (sites P2))))})))))

2x6 board, with a storage hole on either end. The game starts with four counters in each hole. A player picks up all of the counters in one of the holes in their row and sows them one-by-one in a counterclockwise direction in consecutive holes from the hole the pieces originated. The starting hole is always left empty, even if a player sows in a complete circuit of the board, the original house is skipped and sowing continues in the next hole after it. When the final counter of a sowing lands in a hole with three counters, the owner of that hole captures the counters. If an opponent's holes are all empty, the other player must make a move placing counters in the opponent's row. If not possible, the player captures all the counters in their row. The player who has captured the most counters wins. If the game continues in a repeating loop, the players can agree to end the game and capture the counters remaining in their row.
        
(game "Enindji" (players 2) (equipment {(mancalaBoard 2 6 (track "Track" "1,E,N,W" true)) (regions P1 (sites Bottom)) (regions P2 (sites Top)) (map {(pair P1 FirstSite) (pair P2 LastSite)}) (piece "Seed" Shared)}) (rules (start (set Count 4 (sites Track))) (play (if (is Proposed "End") (or (move Vote "End") (move Vote "No")) (or (if (is Cycle) (move Propose "End")) (do (move Select (from (sites Mover) (< 0 (count (from )))) (then (sow (= (count (to )) 4) (fromTo (from (to )) (to (if (is In (to ) (sites P1)) (mapEntry 1) (mapEntry 2))) (count (to ))) false))) (< 0 (count (sites Next))))))) (end (if (and (no Moves Mover) (no Moves Next)) (byScore {(score P1 (+ (count (mapEntry P1)) (count (sites P1)))) (score P2 (+ (count (mapEntry P2)) (count (sites P2))))})))))

2x6 board. Three counters in each hole. Sowing occurs in an anti-clockwise direction. When the final counter falls into an occupied hole, the player picks up the counters in the next hole and continues sowing from it. If that next hole is empty, the turn ends. If the final counter falls into an empty hole, the contents of the following hole are captured. Play continues until one player can no longer play because there are no counters left on their side. The opponent then takes the remainder of the counters on the board. For the next round, each player counts out the counters they captured, placing three each of the holes in their row. For every three in excess of the amount required to fill all of the holes in a row, the player claims one hole from the opponent's row. Play continues in this fashion until one player captures all of the holes on the board.
(game "Gabata (Adegrat)" (players 2) (equipment {(mancalaBoard 2 6 None (track "Track" "0,E,N,W" true)) (piece "Seed" Shared) (regions P1 (sites Bottom)) (regions P2 (sites Top)) (hand Each) (map "LeftMost" {(pair P1 0) (pair P2 11)})}) (rules (start {(set Count 3 (sites Track)) (set RememberValue "OwnedP1" (sites Bottom)) (set RememberValue "OwnedP2" (sites Top))}) {(phase "Sowing" (play (or {(move Select (from (if (is Prev Mover) (sites {(trackSite Move (last To true) 1)}) (if (is Mover P1) (sites (values Remembered "OwnedP1")) (sites (values Remembered "OwnedP2")))) (> (count (from )) 0)) (then (sow (if (> (count (to )) 1) (if (>= (count (trackSite Move (to ) 1)) 1) (moveAgain )) (if (>= (count (trackSite Move (to ) 1)) 1) (fromTo (from (trackSite Move (to ) 1)) (to (handSite Mover)) (count (trackSite Move (to ) 1))))))))} (then (if (or (all Sites (sites P1) (= 0 (count (site )))) (all Sites (sites P2) (= 0 (count (site ))))) (and {(if (all Sites (sites P1) (= 0 (count (site )))) (forEach Site (sites Board) (if (< 0 (count (site ))) (fromTo (from (site )) (to (handSite P2)) (count (site ))))) (forEach Site (sites Board) (if (< 0 (count (site ))) (fromTo (from (site )) (to (handSite P1)) (count (site )))))) (forget Value "OwnedP1" All) (forget Value "OwnedP2" All)}))))) (end (if (all Sites (sites Board) (= 0 (count (site )))) {(if (> 3 (count Cell (handSite P1))) (result P2 Win)) (if (> 3 (count Cell (handSite P2))) (result P1 Win))})) (nextPhase (all Sites (sites Board) (= 0 (count (site )))) "BetweenRounds")) (phase "BetweenRounds" (play (if (<= 3 (count Cell (handSite Mover))) (move (from (handSite Mover)) (to (trackSite FirstSite (mapEntry "LeftMost" Mover) (is Empty (to )))) 3 (then (if (is Mover P1) (remember Value "OwnedP1" (last To)) (remember Value "OwnedP2" (last To))))))) (nextPhase (all Passed) "Sowing"))}))

Played on a board with two rows of five holes with store holes on either side. To start, ten counters are placed in each hole except the stores. Play begins from any of a player's holes, and sowing proceeds in either direction, at the player's choice. The first seed is sown in the hole from which play started. When the last counter of a sowing falls into a hole, making the contents of that hole odd (but not more than nine), the counters are captured. The first capture must be of three counters, the second of one counter.
(game "Ako Okwe" (players 2) (equipment {(mancalaBoard 2 5 {(track "TrackCCW" "1,E,N,W" true) (track "TrackCW" "6,E,S,W" true)}) (regions P1 (sites Bottom)) (regions P2 (sites Top)) (map {(pair P1 FirstSite) (pair P2 LastSite)}) (piece "Seed" Shared)}) (rules (start (set Count 10 (sites Track))) (play (or (move Select (from (sites Mover) (> (count (from )) 0)) (then (sow "TrackCW" (or {(and {(<= (count (to )) 9) (is Odd (count (to ))) (>= (value Player Mover) 2)}) (and (= (value Player Mover) -1) (= (count (to )) 3)) (and (= (value Player Mover) 1) (= (count (to )) 1))}) (fromTo (from (to )) (to (mapEntry (mover ))) (count (to )) (then (and (if (= (value Player Mover) 1) (set Value Mover 2)) (if (= (value Player Mover) -1) (set Value Mover 1))))) true))) (move Select (from (sites Mover) (> (count (from )) 0)) (then (sow "TrackCCW" (or {(and {(<= (count (to )) 9) (is Odd (count (to ))) (>= (value Player Mover) 2)}) (and (= (value Player Mover) -1) (= (count (to )) 3)) (and (= (value Player Mover) 1) (= (count (to )) 1))}) (fromTo (from (to )) (to (mapEntry (mover ))) (count (to )) (then (and (if (= (value Player Mover) 1) (set Value Mover 2)) (if (= (value Player Mover) -1) (set Value Mover 1))))) true))))) (end (if (no Moves Mover) (byScore {(score P1 (+ (count (mapEntry P1)) (count (sites P1)))) (score P2 (+ (count (mapEntry P2)) (count (sites P2))))})))))

2x5 board, the right-most hole is the store. Four counters in each hole. Sowing in an anti-clockwise direction, including the store. Play begins by each player placing the counters in their fourth hole into their store. Moves may begin from any of a player's holes except the store. If the last counter of a sowing drops into a hole making it contain two or three counters, these are taken and placed in the store. As soon as a player has at least thirteen counters in their store, they are picked up and sown, omitting each player's store and takes any counters in the opponent's holes which now contain two or three counters. Each player performs this move only once. The player who captures the most counters wins.
(game "I Pere" (players 2) (equipment {(mancalaBoard 2 5 None (track "Track" "0,E,N,W" true)) (piece "Seed" Shared) (hand Each) (regions P1 (sites Bottom)) (regions P2 (sites Top)) (map {(pair P1 4) (pair P2 5)}) (map "Fourth" {(pair P1 3) (pair P2 6)})}) (rules (start (set Count 4 (sites Track))) {(phase "Opening" (play (move (from (mapEntry "Fourth" Mover)) (to (mapEntry Mover)) 4)) (nextPhase Mover "Sowing")) (phase "Sowing" (play (if (and (<= 13 (count (mapEntry Mover))) (!= 1 (value Player Mover))) (or {(move Select (from (mapEntry Mover)) (then (and (sow (or (= (to ) (mapEntry P1)) (= (to ) (mapEntry P2)))) (set Value Mover 1))))} (then (forEach Site (difference (sites Next) (mapEntry Next)) (if (or (= 2 (count (site ))) (= 3 (count (site )))) (fromTo (from (site )) (to (mapEntry Mover)) (count (site ))))))) (move Select (from (difference (sites Mover) (mapEntry Mover)) (is Occupied (from ))) (then (sow (if (or (= 2 (count (to ))) (= 3 (count (to )))) (fromTo (from (to )) (to (mapEntry Mover)) (count (to ))))))))))} (end (if (no Moves Next) (byScore {(score P1 (count (mapEntry P1))) (score P2 (count (mapEntry P2)))})))))

2x6 board. Four counters per hole. Sowing occurs in an anti-clockwise direction. When the final counter of a sowing lands in an occupied hole, these counters are picked up and the sowing continues. During sowing, the contents of any hole made to contain four counters are captured by the player in whose row the hole is located, except when this is the final counter of a sowing, in which case the player who is sowing captures these counters. When the sowing ends in an empty hole, the turn ends. Play continues until one player cannot move, and the other player captures the remaining counters. A second round is played, each player placing four counters into each hole starting from the rightmost hole in their row. The player with more counters gains a hole from their opponent for every four extra balls they've captured. If an opponent has three extra after counting in such a way, they also gain a hole, but not if there are one or two extra. Play continues in several rounds like this until one player captures all the holes.
(game "Rio Kadalis" (players 2) (equipment {(mancalaBoard 2 6 None {(track "TrackCCW" "0,E,N,W" true) (track "TrackCW" "5,W,N,E" true)}) (piece "Seed" Shared) (hand Each) (regions P1 (sites Bottom)) (regions P2 (sites Top)) (map "RightMost" {(pair P1 5) (pair P2 6)})}) (rules (start {(set Count 4 (sites Track)) (set RememberValue "OwnedP1" (sites Bottom)) (set RememberValue "OwnedP2" (sites Top))}) {(phase "Sowing" (play (or {(move Select (from (if (is Prev Mover) (sites {(var "Replay")}) (if (is Mover P1) (sites (values Remembered "OwnedP1")) (sites (values Remembered "OwnedP2")))) (is Occupied (from ))) (then (do (set Var "NumSowed" (count (last To))) (sow "TrackCCW" (if (= 4 (count (to ))) (fromTo (from (to )) (to (handSite Mover)) 4) (if (< 1 (count (to ))) (and (moveAgain ) (set Var "Replay" (to )))))) (then (and (forEach Site (sites Track (last From) (trackSite Move (last From) "Track" (- (var "NumSowed") 1))) (if (= 4 (count (site ))) (fromTo (from (site )) (to (if (is In (to ) (sites (values Remembered "OwnedP1"))) (handSite P1) (handSite P2))) 4))) (set Var "NumSowed" 0))))))} (then (if (and (not (is Next Mover)) (or (all Sites (sites (values Remembered "OwnedP1")) (is Empty (site ))) (all Sites (sites (values Remembered "OwnedP2")) (is Empty (site ))))) (and {(if (no Moves P1) (forEach Site (sites Board) (if (is Occupied (site )) (fromTo (from (site )) (to (handSite P1)) (count (site ))))) (forEach Site (sites Board) (if (is Occupied (site )) (fromTo (from (site )) (to (handSite P2)) (count (site )))))) (forget Value "OwnedP1" All) (forget Value "OwnedP2" All)}))))) (end (if (all Sites (sites Board) (= 0 (count (site )))) {(if (> 3 (count Cell (handSite P1))) (result P2 Win)) (if (> 3 (count Cell (handSite P2))) (result P1 Win))})) (nextPhase (all Sites (sites Board) (= 0 (count (site )))) "BetweenRounds")) (phase "BetweenRounds" (play (if (<= 3 (count Cell (handSite Mover))) (move (from (handSite Mover)) (to (trackSite FirstSite "TrackCW" (mapEntry "RightMost" Mover) (is Empty (to )))) (if (>= (count Cell (handSite Mover)) 4) 4 3) (then (if (is Mover P1) (remember Value "OwnedP1" (last To)) (remember Value "OwnedP2" (last To))))))) (nextPhase (all Passed) "Sowing"))}))

2x6 board with two stores. Four counters in each hole. Players alternate turns sowing from one of the holes on their side of the board in an anticlockwise direction. When a counter lands in one of the opponent's holes, making it contain six counters, those counters are captured. The player who captures the most counters wins.
        
(game "Wari" (players 2) (equipment {(mancalaBoard 2 6 {(track "Track" "1,E,N,W" true)}) (piece "Seed" Shared) (hand Each) (regions P1 (sites Bottom)) (regions P2 (sites Top)) (map {(pair P1 FirstSite) (pair P2 LastSite)})}) (rules (start (set Count 4 (sites Track))) (play (move Select (from (sites Mover) (> (count (from )) 0)) (then (sow (if (= 6 (count (to ))) (fromTo (from (to )) (to (mapEntry Mover)) 6)))))) (end (if (no Moves Mover) (byScore {(score P1 (count (mapEntry P1))) (score P2 (count (mapEntry P2)))})))))

2x12 board. Beginning from the leftmost hole closest to a player and proceeding in an anti-clockwise direction, the opening arrangement of counters is an alternating pattern of one empty hole, followed by two holes with three counters each. The first move for each player must be from an occupied hole in the right half of their row. Players sow in an anti-clockwise direction, but if the final counter is about to fall in a hole in the player's own row, it is instead placed in the first hole in the opponent's row. After this, players may sow from any hole in their row, provided that the final counter does not fall into an occupied hole in their row. When the final counter of a sowing lands in an occupied hole in the opponent's row, the counters there are picked up and sowing continues. When this happens, the player is allowed to drop the final counter into an occupied hole in their row, which would then be picked up and sowing would continue as before. When the final counter falls into an empty hole in the player's row, any counters in the opponent's hole opposite are captured. When the final counter falls into an empty hole in the opponent's row, the turn ends. The player who captures all of the opponent's counters wins. Players typically play to achieve five consecutive wins. 
(game "Tapata" (players 2) (equipment {(mancalaBoard 2 12 None (track "TrackCCW" "0,E,N,W" true)) (piece "Seed" Shared) (regions "Home" P1 (sites Bottom)) (regions "Home" P2 (sites Top)) (regions "Right Half" P1 (intersection (sites Bottom) (expand (sites Right) 5))) (regions "Right Half" P2 (intersection (sites Top) (expand (sites Left) 5))) (map {(pair P1 0) (pair P2 23)})}) (rules (start (set Count 3 (sites {1 2 4 5 7 8 10 11 22 21 19 18 16 15 13 12}))) {(phase "FirstMove" (play (move Select (from (difference (sites Mover "Right Half") (sites Empty))) (then (sow (if (is In (to ) (sites Mover "Home")) (fromTo (from (to )) (to (mapEntry Next)))))))) (nextPhase Mover "Play")) (phase "Play" (play (move Select (from (if (is Prev Mover) (sites {(last To true)}) (sites Mover "Home")) (and (> (count (from )) 0) (or (is Prev Mover) (and (not (is Prev Mover)) (not (and (is In (trackSite Move (from ) (count (from ))) (sites Mover "Home")) (!= 0 (count (trackSite Move (from ) (count (from ))))))))))) (then (sow (if (< 1 (count (to ))) (moveAgain ) (if (and (!= 0 (count (if (is Mover P1) (+ (to ) 12) (- (to ) 12)))) (is In (to ) (sites Mover "Home"))) (remove (if (is Mover P1) (+ (to ) 12) (- (to ) 12))))))))))} (end (forEach NonMover (= (count (sites Player "Home")) 0) (result Player Loss)))))

2x7 board. Seven counters in each hole. Sowing occurs in an anti-clockwise direction. When the final counter falls into an occupied hole, the contents of that hole are picked up and sowing continues. If the final counter falls into a hole containing one or three counters, the player captures those counters, plus any counters in the hole in the opposite row, as well as the contents of any holes in an unbroken sequence following the one in which the final counter which also contain two or four counters.When the final counter falls into an empty hole, the turn ends. Play continues until all of the pieces are captured. The player who captured the most counters wins.
(game "La'b Akila" (players 2) (equipment {(mancalaBoard 2 7 None (track "TrackCCW" "0,E,N,W" true)) (piece "Seed" Shared) (hand Each) (regions P1 (sites Bottom)) (regions P2 (sites Top))}) (rules (start (set Count 7 (sites Track))) (play (move Select (from (sites Mover) (is Occupied (from ))) (then (sow true (if (or (= 2 (count (to ))) (= 4 (count (to )))) (and (fromTo (from (to )) (to (handSite Mover)) (count (to ))) (if (!= 0 (count (if (is In (to ) (sites Bottom)) (+ (to ) 7) (- (to ) 7)))) (fromTo (from (if (is In (to ) (sites Bottom)) (+ (to ) 7) (- (to ) 7))) (to (handSite Mover)) (count (if (is In (to ) (sites Bottom)) (+ (to ) 7) (- (to ) 7))))))) (or (= 2 (count (to ))) (= 4 (count (to )))))))) (end (if (>= 1 (count Pieces All (sites Board))) (byScore {(score P1 (+ (count (sites Mover)) (count Cell (handSite P1)))) (score P2 (+ (count (sites Mover)) (count Cell (handSite P2))))})))))

2x6 board with two stores. Four counters per hole. Sowing occurs in an anti-clockwise direction. In the first and second moves, players may choose to drop as many counters as they wish into the holes they are sowing into. From the third turn on, the players must sow one counter at a time. The hole from which a sowing began is skipped if the sowing goes all the way around the board. When the final counter lands in a hole containing one or two people, thus causing it to contain two or three, these are captured. Any previous holes, in an unbroken sequence, also containing two or three counters, are captured. A move of a single counter cannot capture. When a player's row is empty, the opponent must sow into their row if it is possible to do so. Play ends when one player's row is empty, and the opponent claims all of the remaining counters. The player with the most counters wins.
(game "Ti" (players 2) (equipment {(mancalaBoard 2 6 (track "Track" "1,E,N,W" true)) (regions "Home" P1 (sites Bottom)) (regions "Home" P2 (sites Top)) (map {(pair P1 FirstSite) (pair P2 LastSite)}) (piece "Seed" Shared)}) (rules (start (set Count 4 (sites Track))) {(phase "TwoFirstTurn" (play (if (is Prev Mover) (forEach Value 1 (var "NumCounters") (move Add (piece (id "Seed" Shared)) (to (trackSite Move (last To) "Track" 1) (apply (set Var "NumCounters" (- (var "NumCounters") (value ))))) (value ) (then (if (< 0 (var "NumCounters")) (moveAgain ) (set Value Mover (+ 1 (value Player Mover))))))) (move Select (from (sites Mover "Home") (> (count (from )) 0)) (then (and {(moveAgain ) (remove (last To) (count (last To))) (set Var "NumCounters" (count (last To)))}))))) (nextPhase Mover (= (value Player Mover) 1) "Sowing")) (phase "Sowing" (play (do (or (move Select (from (sites Mover "Home") (> (count (from )) 1)) (then (sow (or (= (count (to )) 2) (= (count (to )) 3)) (fromTo (from (to )) (to (mapEntry (mover ))) (count (to ))) false true))) (move Select (from (sites Mover "Home") (= (count (from )) 1)) (then (sow )))) (< 0 (count (sites Next "Home"))))))} (end (if (no Moves Mover) (byScore {(score P1 (+ (count (mapEntry P1)) (count (sites P1)))) (score P2 (+ (count (mapEntry P2)) (count (sites P2))))})))))

2x6 board. Four counters in each hole. Sowing occurs in a clockwise direction when starting from the three holes on the left of the board, and in an anti-clockwise direction when starting from the three holes on the right. Sowing ends when the final counter is dropped, regardless of whether the hole is occupied or not. When the final counter is dropped into a hole containing three counters, thus making it contain four, the hole is captured. This can only be done if the hole is one of the end holes on either side of either row, or the penultimate holes on either side of the opponent's row. Sowing is not allowed from a captured hole. When no player is able to move, the player with the most counters in their captured holes wins.
(game "Qelat (Beni Amir-Mensa)" (players 2) (equipment {(mancalaBoard 2 6 None {(track "TrackCCW" "0,E,N,W" true) (track "TrackCW" "5,W,N,E" true)}) (piece "Seed" Shared) (regions "Left" P1 (intersection (expand (sites Left) 2) (sites Bottom))) (regions "Left" P2 (intersection (expand (sites Right) 2) (sites Top))) (regions "Right" P1 (intersection (expand (sites Right) 2) (sites Bottom))) (regions "Right" P2 (intersection (expand (sites Left) 2) (sites Top)))}) (rules (start (set Count 4 (sites Track))) (play (or (move Select (from (sites Mover "Left") (and (= 0 (state (from ))) (is Occupied (from )))) (then (sow "TrackCW" (if (and {(is In (to ) (union (expand (sites Right)) (expand (sites Left)))) (= 4 (count (to ))) (= 0 (state (to )))}) (set State (to ) (mover )))))) (move Select (from (sites Mover "Right") (and (= 0 (state (from ))) (is Occupied (from )))) (then (sow "TrackCCW" (if (and {(is In (to ) (union (expand (sites Right)) (expand (sites Left)))) (= 4 (count (to ))) (= 0 (state (to )))}) (set State (to ) (mover )))))))) (end (if (and (no Moves P1) (no Moves P2)) (byScore {(score P1 (count (forEach (sites Board) (= (id P1) (state (site )))))) (score P2 (count (forEach (sites Board) (= (id P2) (state (site ))))))})))))

2x6 board. Four counters per hole. Play begins with a simultaneous racing move, where players attempt to be the first to drop the final counter of their sowing into an empty hole. Sowing occurs in an anti-clockwise direction. If the final counter falls into an occupied hole, these are picked up and sowing continues. If the final counter falls into an empty hole, the turn ends. At any time during the sowing, if a hole is made to contain four counters, the owner of the hole in which the four counters are located captures them, unless it is the final hole of the sowing, in which case the player who is sowing captures them. Play continues until a player can no longer move because there are no counters in their row, and the opponent captures the remaining counters. Players then count their pieces by placing four in each hole, and the player who has more than their original number takes ownership of one of the opponent's holes for every four counters more than the original number that have been taken. If no player took four more than the original, the player with three extra gets the hole. Play then begins again as before. The game ends when one player owns all of the counters, and thus all of the holes.
(game "Mewelad" (players 2) (equipment {(mancalaBoard 2 6 None {(track "TrackCCW" "0,E,N,W" true) (track "TrackCW" "5,W,N,E" true)}) (piece "Seed" Shared) (hand Each) (regions P1 (sites Bottom)) (regions P2 (sites Top)) (map "RightMost" {(pair P1 5) (pair P2 6)})}) (rules (start {(set Count 4 (sites Track)) (set RememberValue "OwnedP1" (sites Bottom)) (set RememberValue "OwnedP2" (sites Top))}) {(phase "Sowing" (play (or {(move Select (from (if (is Prev Mover) (sites {(var "Replay")}) (if (is Mover P1) (sites (values Remembered "OwnedP1")) (sites (values Remembered "OwnedP2")))) (is Occupied (from ))) (then (do (set Var "NumSowed" (count (last To))) (sow "TrackCCW" (if (= 4 (count (to ))) (fromTo (from (to )) (to (handSite Mover)) 4) (if (< 1 (count (to ))) (and (moveAgain ) (set Var "Replay" (to )))))) (then (and (forEach Site (sites Track (last From) (trackSite Move (last From) "Track" (- (var "NumSowed") 1))) (if (= 4 (count (site ))) (fromTo (from (site )) (to (if (is In (to ) (sites (values Remembered "OwnedP1"))) (handSite P1) (handSite P2))) 4))) (set Var "NumSowed" 0))))))} (then (if (and (not (is Next Mover)) (or (all Sites (sites (values Remembered "OwnedP1")) (is Empty (site ))) (all Sites (sites (values Remembered "OwnedP2")) (is Empty (site ))))) (and {(if (no Moves P1) (forEach Site (sites Board) (if (is Occupied (site )) (fromTo (from (site )) (to (handSite P1)) (count (site ))))) (forEach Site (sites Board) (if (is Occupied (site )) (fromTo (from (site )) (to (handSite P2)) (count (site )))))) (forget Value "OwnedP1" All) (forget Value "OwnedP2" All)}))))) (end (if (all Sites (sites Board) (= 0 (count (site )))) {(if (> 3 (count Cell (handSite P1))) (result P2 Win)) (if (> 3 (count Cell (handSite P2))) (result P1 Win))})) (nextPhase (all Sites (sites Board) (= 0 (count (site )))) "BetweenRounds")) (phase "BetweenRounds" (play (if (<= 3 (count Cell (handSite Mover))) (move (from (handSite Mover)) (to (trackSite FirstSite "TrackCW" (mapEntry "RightMost" Mover) (is Empty (to )))) (if (>= (count Cell (handSite Mover)) 4) 4 3) (then (if (is Mover P1) (remember Value "OwnedP1" (last To)) (remember Value "OwnedP2" (last To))))))) (nextPhase (all Passed) "Sowing"))}))

2x5 board with one store on either side. Six counters in each hole. Players play each turn simultaneously. Players sow from the holes in their row in an anti-clockwise direction, including their own store but not the opponent's store. When the final counter is sown, the contents of the next hole are picked up and sowing continues. If this hole is empty, the move ends and the player must wait for the other player to finish the move before they begin again. If the move ends in the player's own row, the player captures the counters in the opponent's row opposite to the one in which the last counter was dropped. Play continues until all of the counters are in the stores. The counters are then redistributed into the holes as at the beginning of the game. The player with extra counters places them in the store.
(game "Sonka" (players 2) (equipment {(mancalaBoard 2 5 {(track "Track1" "11,10,W,S,E" true P1) (track "Track2" "0,1,E,N,W" true P2)}) (piece "Seed" Shared) (regions "Home" P1 (sites Bottom)) (regions "Home" P2 (sites Top)) (map {(pair P1 LastSite) (pair P2 FirstSite)})}) (rules (start (set Count 6 (union (sites Bottom) (sites Top)))) {(phase "Sowing" (play (move Select (from (if (is Prev Mover) (sites {(if (= (trackSite Move (last To true) 1) (mapEntry Mover)) (trackSite Move (last To true) 2) (trackSite Move (last To true) 1))}) (sites Mover "Home")) (< 0 (count (from )))) (then (sow "Track" (mover ) (if (!= 0 (count (if (= (trackSite Move (to ) 1) (mapEntry Mover)) (trackSite Move (to ) 2) (trackSite Move (to ) 1)))) (moveAgain ) (if (is In (to ) (sites Mover "Home")) (if (!= 0 (count (if (is Mover P1) (+ (to ) 5) (- (to ) 5)))) (fromTo (from (if (is Mover P1) (+ (to ) 5) (- (to ) 5))) (to (mapEntry Mover)) (count (if (is Mover P1) (+ (to ) 5) (- (to ) 5))))))))))) (end (if (all Passed) {(if (> 6 (count (mapEntry P1))) (result P2 Win)) (if (> 6 (count (mapEntry P2))) (result P1 Win))})) (nextPhase (all Passed) "BetweenRounds")) (phase "BetweenRounds" (play (if (<= 6 (count (mapEntry Mover))) (move (from (mapEntry Mover)) (to (intersection (sites Empty) (sites Mover "Home"))) 6))) (nextPhase (all Passed) "Sowing"))}))

2x6 board with a store on either end. Four counters in each hole. Players take turns sowing in an anti-clockwise direction from one of the holes in their row. Counters are captured when the final counter of a sowing is dropped into a hole in the opponent's row containing one or two counters, making it contain two or three counters. If the previous hole also contains two or three counters, they are also captured, in an unbroken line until a hole with a different number of counters is reached. If, while sowing, the hole from which the sowing originated is reached, this hole is skipped and sowing continues. If a player has no counters in their holes, the opponent must play so as to place counters in their row. The player who captures 25 coutners first wins.
(game "Uril" (players 2) (equipment {(mancalaBoard 2 6 (track "Track" "1,E,N,W" true)) (regions P1 (sites Bottom)) (regions P2 (sites Top)) (map {(pair P1 FirstSite) (pair P2 LastSite)}) (piece "Seed" Shared)}) (rules (start (set Count 4 (sites Track))) (play (do (move Select (from (sites Mover) (< 0 (count (from )))) (then (sow (and (is In (to ) (sites Next)) (or (= (count (to )) 2) (= (count (to )) 3))) (fromTo (from (to )) (to (mapEntry (mover ))) (count (to ))) false true))) (< 0 (count (sites Next))))) (end (forEach Player (>= (count (mapEntry Player)) 25) (result Player Win)))))

Counters are placed in piles: two rows of four piles. Six counters in each pile. A player sows from any of the piles in the player's row in an anti-clockwise direction. Any pile which contains 2, 4, or 6 counters is captured. The player with the most counters captured wins.
(game "Wore" (players 2) (equipment {(mancalaBoard 2 4 None (track "Track" "0,E,N,W" true)) (regions P1 (sites Bottom)) (regions P2 (sites Top)) (piece "Seed" Shared) (hand Each)}) (rules (start (set Count 6 (sites Track))) (play (move Select (from (sites Mover) (< 0 (count (from )))) (then (sow (or {(= (count (to )) 2) (= (count (to )) 4) (= (count (to )) 6)}) (fromTo (from (to )) (to (handSite Mover)) (count (to ))))))) (end (if (no Moves Mover) (byScore {(score P1 (count Cell (handSite P1))) (score P2 (count Cell (handSite P2)))})))))

2x3-7 board. Four counters in each hole. Players sow counters from their side of the board in an anti-clockwise direction. When the final counter of a sowing lands in a hole containing one or two counters, making it now contain two or three, these are captured. Any adjacent holes with two or three counters are also captured. Single counters cannot be sown. When a player only has single counters in holes in their row, they pass. The player who captures the most counters wins.
(game "I" (players 2) (equipment {(mancalaBoard 2 3 None (track "Track" "0,E,N,W" true)) (piece "Seed" Shared) (regions P1 (sites Bottom)) (regions P2 (sites Top)) (hand Each)}) (rules (start (set Count 4 (sites Track))) (play (move Select (from (sites Mover) (> (count (from )) 1)) (then (sow (if (or (= 2 (count (to ))) (= 3 (count (to )))) (and {(fromTo (from (to )) (to (handSite Mover)) (count (to ))) (if (!= (to ) (ahead (to ) E)) (if (or (= 2 (count (ahead (to ) E))) (= 3 (count (ahead (to ) E)))) (fromTo (from (ahead (to ) E)) (to (handSite Mover)) (count (ahead (to ) E))))) (if (!= (to ) (ahead (to ) W)) (if (or (= 2 (count (ahead (to ) W))) (= 3 (count (ahead (to ) W)))) (fromTo (from (ahead (to ) W)) (to (handSite Mover)) (count (ahead (to ) W)))))})))))) (end (if (and (no Moves P1) (no Moves P2)) (byScore {(score P1 (count Cell (handSite P1))) (score P2 (count Cell (handSite P2)))})))))

2x3 board. Eight counters in each pile. A player takes the counters from any of the piles and sows them anti-clockwise, beginning with the pile from which the counters were taken. Any piles that now contain 2, 4, or 6 counters are captured. The player who captures the most counters wins.
        
(game "Kapana Bona" (players 2) (equipment {(mancalaBoard 2 3 None (track "Track" "0,E,N,W" true)) (piece "Seed" Shared) (hand Each)}) (rules (start (set Count 8 (sites Track))) (play (move Select (from (sites Board) (> (count (from )) 0)) (then (sow true (then (forEach Site (sites Board) (if (or {(= (count (site )) 2) (= (count (site )) 4) (= (count (site )) 6)}) (fromTo (from (site )) (to (handSite Mover)) (count (site )))))))))) (end (if (= 0 (count Sites (forEach (sites Board) (< 1 (count (site )))))) (byScore {(score P1 (count Cell (handSite P1))) (score P2 (count Cell (handSite P2)))})))))

2x6 board, with stores on either end. The store to a player's left belongs to them. Four counters in each hole. Players sow in an anti-clockwise direction from any hole in their row. When the final counter lands in a hole in the opponent's row, causing it to contain two or four counters, these are captured and put in the store. The player also captures the contents of any adjacent holes in the opponent's row if they also contain two or four counters. Play continues until one player has no counters in their row, their opponent capturing the remaining counters. A new round begins. Players fill up their holes with four counters, beginning from the left. Any excess counters are placed in that player's store; the final hole of the player with fewer counters may contain fewer than four counters. Any empty holes are out of play. Play continues as before. The game repeats in this fashion until one player has no counters remaining, their opponent is the winner.
(game "Erherhe" (players 2) (equipment {(mancalaBoard 2 6 (track "Track" "1,E,N,W" true)) (regions P1 (sites Bottom)) (regions P2 (sites Top)) (map {(pair P1 FirstSite) (pair P2 LastSite)}) (map "LeftMost" {(pair P1 1) (pair P2 12)}) (piece "Seed" Shared)}) (rules (start {(set Count 4 (sites Track)) (set RememberValue "Playable" (union (sites Top) (sites Bottom)))}) {(phase "Sowing" (play (or {(move Select (from (sites Mover) (and (is Occupied (from )) (is In (from ) (sites (values Remembered "Playable"))))) (then (sow (if (and (is In (to ) (sites Next)) (or (= 2 (count (to ))) (= 4 (count (to ))))) (and {(fromTo (from (to )) (to (mapEntry Mover)) (count (to ))) (if (!= (to ) (ahead (to ) W)) (if (or (= 2 (count (ahead (to ) W))) (= 4 (count (ahead (to ) W)))) (fromTo (from (ahead (to ) W)) (to (mapEntry Mover)) (count (ahead (to ) W))))) (if (!= (to ) (ahead (to ) E)) (if (or (= 2 (count (ahead (to ) E))) (= 4 (count (ahead (to ) E)))) (fromTo (from (ahead (to ) E)) (to (mapEntry Mover)) (count (ahead (to ) E)))))})) (not (is In (to ) (sites (values Remembered "Playable")))))))} (then (if (or (all Sites (sites Bottom) (= 0 (count (site )))) (all Sites (sites Top) (= 0 (count (site ))))) (and {(forEach Site (sites P1) (fromTo (from (site )) (to (mapEntry P1)) (count (site )))) (forEach Site (sites P2) (fromTo (from (site )) (to (mapEntry P2)) (count (site )))) (forget Value "Playable" All)}))))) (end (if (all Sites (union (sites Top) (sites Bottom)) (= 0 (count (site )))) {(if (= 0 (count (mapEntry P1))) (result P2 Win)) (if (= 0 (count (mapEntry P2))) (result P1 Win))})) (nextPhase (all Sites (union (sites Top) (sites Bottom)) (= 0 (count (site )))) "BetweenRounds")) (phase "BetweenRounds" (play (if (not (all Sites (sites Mover) (is Occupied (site )))) (if (<= 4 (count (mapEntry Mover))) (move (from (mapEntry Mover)) (to (trackSite FirstSite (mapEntry "LeftMost" Mover) (is Empty (to )))) 4 (then (remember Value "Playable" (last To)))) (move (from (mapEntry Mover)) (to (trackSite FirstSite (mapEntry "LeftMost" Mover) (is Empty (to )))) (count (mapEntry Mover)) (then (remember Value "Playable" (last To))))))) (nextPhase (all Passed) "Sowing"))}))

2x7 board. Four counters per hole. The first player takes all of the counters from one of their holes. If they take from the central hole, they can be placed in any other hole on the board. If they are from any other hole, they can be placed in any hole except the opposite hole on the opponent's side. Once both players have made this initial move, the main phase of the game begins. Players alternate turns taking counters from one of the holes on their side of the board and sowing them. Groups of four counters are always sown. Play can occur in a clockwise or anti-clockwise direction. Players sow four counters at a time; that is, placing four counters in each hole. When the final four counters land in an empty hole in the player's row, any counters in the opponent's opposite hole are captured, and the player may sow again from another hole. Play continues until all of the counters have been captured, and the player with the most counters wins.
(game "Luuth" (players 2) (equipment {(mancalaBoard 2 7 None {(track "TrackCCW" "0,E,N,W" true) (track "TrackCW" "6,W,N,E" true)}) (piece "Seed" Shared) (hand Each) (regions P1 (sites Bottom)) (regions P2 (sites Top))}) (rules (start (set Count 4 (sites Track))) {(phase "Opening" (play (move (from (sites Mover)) (to (if (is In (from ) (sites Centre)) (difference (sites Board) (from )) (difference (sites Board) (sites {(from ) (if (is Mover P1) (+ (from ) 7) (- (from ) 7))})))) (count (from )))) (nextPhase Mover "Sowing")) (phase "Sowing" (play (or (move Select (from (sites Mover) (is Occupied (from ))) (then (sow 4 "TrackCCW" (if (and (is In (to ) (sites Mover)) (= 4 (count (to )))) (and (moveAgain ) (if (is Occupied (if (is Mover P1) (+ (to ) 7) (- (to ) 7))) (fromTo (from (if (is Mover P1) (+ (to ) 7) (- (to ) 7))) (to (handSite Mover)) (count (if (is Mover P1) (+ (to ) 7) (- (to ) 7)))))))))) (move Select (from (sites Mover) (is Occupied (from ))) (then (sow 4 "TrackCW" (if (and (is In (to ) (sites Mover)) (= 4 (count (to )))) (and (moveAgain ) (if (is Occupied (if (is Mover P1) (+ (to ) 7) (- (to ) 7))) (fromTo (from (if (is Mover P1) (+ (to ) 7) (- (to ) 7))) (to (handSite Mover)) (count (if (is Mover P1) (+ (to ) 7) (- (to ) 7)))))))))))))} (end (if (= 4 (count Pieces All (sites Board))) (byScore {(score P1 (+ (count (sites Mover)) (count Cell (handSite P1)))) (score P2 (+ (count (sites Mover)) (count Cell (handSite P2))))})))))

2x6 board. Four counters in each hole. Sowing occurs in an anti-clockwise direction. The hole from which sowing begins must remain empty throughout the player's turn. Captures are made when the last counter of a sowing fall into the opponent's row in a hole containing one or two counters (thus making two or three), capturing all of the counters in that hole. A continuous series of holes holding two or three counters behind it are also captured, provided the player's sowing caused them to contain this number. If a player has no counters in their holes, the opponent must play to place seeds in their row, if possible. The game ends when players have holes with only empty and single counters. The player who captured the most counters wins. 
(game "Awari" (players 2) (equipment {(mancalaBoard 2 6 None (track "Track" "0,E,N,W" true)) (regions P1 (sites Bottom)) (regions P2 (sites Top)) (piece "Seed" Shared) (hand Each)}) (rules (start (set Count 4 (sites Track))) (play (do (move Select (from (sites Mover) (< 0 (count (from )))) (then (sow (and (is In (to ) (sites Next)) (or (= (count (to )) 2) (= (count (to )) 3))) (fromTo (from (to )) (to (handSite Mover)) (count (to ))) false true))) (< 0 (count (sites Next))))) (end (if (all Sites (sites Track) (<= (count (site )) 1)) (byScore {(score P1 (count Cell (handSite P1))) (score P2 (count Cell (handSite P2)))})))))

2x2, 3, 4, or 6 board. Each hole contains a number of counters equal to the total number of holes in the board. Sowing begins from any hole in the player's row, and proceeds anti-clockwise. Counters are captured when the final counter lands in an occupied hole, making it contain 2, 4, 6, or 8 counters. When all of the counters have been captured, a second game begins. Each player fills their holes with the same number of counters as the beginning of the previous game. The player who has extra counters holds these in reserve. The other player will have either empty holes or one without the requisite number to fill the hole. Sowing cannot begin and captures cannot be made from these holes until the contents of these holes reaches the required number of counters to fill them. The second player in the first game now becomes the first player. Play continues with subsequent games until one player captures all the counters.
            
        Evidence Map
(game "Khrour" (players 2) (equipment {(mancalaBoard 2 2 None (track "Track" "0,E,N,W" true)) (piece "Seed" Shared) (hand Each) (regions P1 (sites Bottom)) (regions P2 (sites Top))}) (rules (start {(set Count 4 (sites Track)) (set RememberValue "Playable" (union (sites Top) (sites Bottom)))}) {(phase "Sowing" (play (or {(move Select (from (sites Mover) (and (is Occupied (from )) (is In (from ) (sites (values Remembered "Playable"))))) (then (sow (if (and (or {(= 2 (count (to ))) (= 4 (count (to ))) (= 6 (count (to ))) (= 8 (count (to )))}) (is In (to ) (sites (values Remembered "Playable")))) (fromTo (from (to )) (to (handSite Mover)) (count (to )))))))} (then (if (all Sites (union (sites Top) (sites Bottom)) (= 0 (count (site )))) (forget Value "Playable" All) (forEach Site (difference (sites Board) (sites (values Remembered "Playable"))) (if (<= 4 (count (site ))) (remember Value "Playable" (site )))))))) (end (if (all Sites (union (sites Top) (sites Bottom)) (= 0 (count (site )))) {(if (= 0 (count Cell (handSite P1))) (result P2 Win)) (if (= 0 (count Cell (handSite P2))) (result P1 Win))})) (nextPhase (all Sites (union (sites Top) (sites Bottom)) (= 0 (count (site )))) "BetweenRounds")) (phase "BetweenRounds" (play (if (not (all Sites (sites Mover) (is Occupied (site )))) (if (<= 4 (count Cell (handSite Mover))) (move (from (handSite Mover)) (to (sites Mover) (is Empty (to ))) 4 (then (remember Value "Playable" (last To)))) (move (from (handSite Mover)) (to (sites Mover) (is Empty (to ))) (count Cell (handSite Mover)))))) (nextPhase (all Passed) "Sowing"))}))

2x8 board. Four counters per hole. Players alternate turns taking the counters from one of the holes in their row and sowing them in an anticlockwise direction. When the final counter falls into a hole containing one or three counters, causing it to contain two or four, these counters are captured. Play continues until all of the counters have been captured. The player who captured the most counters wins.
(game "Ntyenge" (players 2) (equipment {(mancalaBoard 2 8 None (track "Track" "0,E,N,W" true)) (piece "Seed" Shared) (regions P1 (sites Bottom)) (regions P2 (sites Top)) (hand Each)}) (rules (start (set Count 4 (sites Track))) (play (move Select (from (sites Mover) (> (count (from )) 0)) (then (sow (if (or (= 2 (count (to ))) (= 4 (count (to )))) (fromTo (from (to )) (to (handSite Mover)) (count (to )))))))) (end (if (all Sites (sites Board) (= 0 (count (site )))) (byScore {(score P1 (+ (count Cell (handSite P1)) (count (sites P1)))) (score P2 (+ (count Cell (handSite P2)) (count (sites P2))))})))))

2x6 board with two stores. Play begins with four counters in each hole. A move begins from any of a player's holes, sowing happens anti-clockwise. Move ends if the last counter falls into an empty hole. If it lands in a hole with counters, these are picked up and sowing continues, unless the sowing makes the last hole contain four counters, in which case these are captured and the sowing continues from the next hole. When both players have too few counters to play, each one makes one move with one of their counters and then adds all of the counters on their side of the board to the store. The player with the most counters in the store wins.
(game "Meusueb" (players 2) (equipment {(mancalaBoard 2 6 (track "Track" "1,E,N,W" true)) (regions P1 (sites Bottom)) (regions P2 (sites Top)) (map {(pair P1 FirstSite) (pair P2 LastSite)}) (piece "Seed" Shared)}) (rules (start (set Count 4 (sites Track))) (play (move Select (from (if (is Prev Mover) (if (is Pending) (sites {(trackSite Move (last From true) 1)}) (sites {(last To true)})) (sites Mover)) (> (count (from )) 0)) (then (sow (if (= (count (to )) 4) (and (fromTo (from (to )) (to (mapEntry (mover ))) (count (to ))) (if (> (count (trackSite Move (to ) 1)) 0) (and (moveAgain ) (set Pending)))) (if (> (count (to )) 1) (moveAgain ))))))) (end (if (no Moves Mover) (byScore {(score P1 (+ (count (mapEntry P1)) (count (sites P1)))) (score P2 (+ (count (mapEntry P2)) (count (sites P2))))})))))

2x6 board. Each player has 36 counters which they arrange however they like in their holes. Play begins from any hole in a player's row. Sowing occurs in an anti-clockwise direction. When the last counter falls makes an odd number of counters in the final hole of the sowing, these are picked up and sowing continues. If the last hole is made to be even, these are captured, as well as the contents of the opposite hole. If the previous hole is also even, those counters and those in the opposite hole are also taken, continuing until there is an odd or empty hole. If the final counter falls into an empty hole, play ends. The round ends when one player is unable to move. A new round begins. The player with the smaller number of counters distributes them as they like in their holes. The opponent then copies this arrangement, keeping the surplus of counters. Play continues as before. Rounds are played until one player has no remaining counters.
(game "Baqura" (players 2) (equipment {(mancalaBoard 2 6 None (track "Track" "0,E,N,W" true)) (regions P1 (sites Bottom)) (regions P2 (sites Top)) (piece "Seed" Shared) (hand Each)}) (rules (start {(set Count 36 (handSite P1)) (set Count 36 (handSite P2))}) {(phase "Placement" (play (move (from (handSite Mover)) (to (sites Mover)))) (nextPhase Mover (all Sites (sites Hand Mover) (= 0 (count Cell (site )))) "Sowing")) (phase "Sowing" (play (if (not (all Sites (sites Mover) (= 0 (count (site ))))) (move Select (from (if (is Prev Mover) (sites {(last To true)}) (sites Mover)) (> (count (from )) 0)) (then (sow (> (count (to )) 1) (if (and (> (count (to )) 1) (is Odd (count (to )))) (moveAgain ) (and (if (> (count (if (is In (to ) (sites Bottom)) (+ (to ) 6) (- (to ) 6))) 0) (fromTo (from (if (is In (to ) (sites Bottom)) (+ (to ) 6) (- (to ) 6))) (to (handSite Mover)) (count (if (is In (to ) (sites Bottom)) (+ (to ) 6) (- (to ) 6))))) (fromTo (from (to )) (to (handSite Mover)) (count (to ))))) (and {(is In (to ) (sites Mover)) (> (count (to )) 1) (is Even (count (to )))})))) (move Pass (then (and (forEach Site (sites Next) (if (is Occupied (site )) (fromTo (from (site )) (to (handSite Next)) (count (site ))))) (if (< (+ (count Cell (handSite P1)) (count (sites P1))) (+ (count Cell (handSite P2)) (count (sites P2)))) (set NextPlayer (player 1)) (set NextPlayer (player 2)))))))) (nextPhase (was Pass) "PlacementLosingPlayer")) (phase "PlacementLosingPlayer" (play (move (from (handSite Mover)) (to (sites Mover)) (then (if (all Sites (sites Hand Mover) (= 0 (count Cell (site )))) (forEach Site (sites Mover) (if (is Occupied (site )) (fromTo (from Cell (handSite Next)) (to (if (is In (site ) (sites Bottom)) (+ (site ) 6) (- (site ) 6))) (count (site ))))) (moveAgain ))))) (nextPhase (all Sites (sites Hand Mover) (= 0 (count Cell (site )))) "Sowing"))} (end (forEach Player (= 0 (+ (count Cell (handSite Player)) (count (sites Player)))) (result Player Loss)))))

2x6-9 holes with a store on either end. Play starts with same number of counters in each hole as number of holes in the row (6 counters if 6 holes in a row, etc). Store on either end. A player's store is the store to their left. Stores are included when sowing. Play begins from any hole belonging to the player. Counters are sowed clockwise: if the final counter lands in an empty hole, in player's own row, they take the counters in the opposite hole and place them in the store. If play ends in the store, they can then take counters from any of their holes and sow again. if play ends in an empty hole in the opponent's row, play ends. If play ends in a hole with counters, those are collected and sowing continues. A round ends when there are no counters left in a player's row. The opponent then takes all remaining counters and adds them to their store. Next round begins with each player taking the counters from their store and placing the same number of counters in the holes as when the game began, starting from right to left. Surplus counters are placed in the store. Unfilled holes are excluded from play in this round. Play continues as before. Play continues with as many rounds as needed until one player does not have enough counters to fill a single hole.
(game "Main Chongkak" (players 2) (equipment {(mancalaBoard 2 6 (track "Track" "0,ENE,E,ESE,WSW,W" true)) (piece "Seed" Shared) (regions P1 (sites Bottom)) (regions P2 (sites Top)) (map {(pair P1 FirstSite) (pair P2 LastSite)}) (map "RightMost" {(pair P1 6) (pair P2 (+ 6 1))})}) (rules (start {(set RememberValue "Playable" (union (sites Top) (sites Bottom))) (set Count 6 (union (sites Bottom) (sites Top)))}) {(phase "Sowing" (play (or {(move Select (from (if (and (not (is Pending)) (is Prev Mover)) (sites {(var "Replay")}) (sites Mover)) (and (is Occupied (from )) (is In (from ) (sites (values Remembered "Playable"))))) (then (sow (if (and (is In (to ) (sites Mover)) (= 1 (count (to )))) (if (is Occupied (if (is Mover P1) (+ (to ) 6) (- (to ) 6))) (fromTo (from (if (is Mover P1) (+ (to ) 6) (- (to ) 6))) (to (mapEntry Mover)) (count (if (is Mover P1) (+ (to ) 6) (- (to ) 6))))) (if (= (to ) (mapEntry Mover)) (and (set Pending) (moveAgain )) (if (and (< 1 (count (to ))) (!= (to ) (mapEntry Next))) (and (moveAgain ) (set Var "Replay" (to )))))) (and {(not (is In (to ) (sites (values Remembered "Playable")))) (!= (to ) (mapEntry P1)) (!= (to ) (mapEntry P2))}))))} (then (if (or (all Sites (sites Bottom) (= 0 (count (site )))) (all Sites (sites Top) (= 0 (count (site ))))) (and {(forEach Site (sites P1) (fromTo (from (site )) (to (mapEntry P1)) (count (site )))) (forEach Site (sites P2) (fromTo (from (site )) (to (mapEntry P2)) (count (site )))) (forget Value "Playable" All)}))))) (end (if (all Sites (union (sites Top) (sites Bottom)) (= 0 (count (site )))) {(if (> 6 (count (mapEntry P1))) (result P2 Win)) (if (> 6 (count (mapEntry P2))) (result P1 Win))})) (nextPhase (all Sites (union (sites Top) (sites Bottom)) (= 0 (count (site )))) "BetweenRounds")) (phase "BetweenRounds" (play (if (not (all Sites (sites Mover) (is Occupied (site )))) (if (<= 6 (count (mapEntry Mover))) (move (from (mapEntry Mover)) (to (trackSite FirstSite (mapEntry "RightMost" Mover) (is Empty (to )))) 6 (then (remember Value "Playable" (last To))))))) (nextPhase (all Passed) "Sowing"))}))

2x7 board. Six counters in each hole. Play begins from any one of a player's holes, even if there is just one. Sowing occurs in an anti-clockwise direction. If they end in a hole with counters, these are picked up and sowing continues. If sowing ends in an empty hole, the contents of the next hole are captured and the turn ends. When sowing, if the contents of a hole are brought to four, they are immediately captured by the player in whose row the counters are located. Play ends when a player has no counters in their holes, remaining player takes all the remaining counters. In the next round, the player with the smaller number of counters captured from the previous round fills as many of their holes as they can, starting from the left and filling each hole with six counters. Leftover counters are placed in the player's store. The opponent then does the same. Any holes remaining empty are out of play for this round, otherwise play continues as before. The right to begin alternates from round to round. Further rounds are played until one player has fewer than six counters.
(game "Pallankuli" (players 2) (equipment {(mancalaBoard 2 7 None (track "Track" "0,E,N,W" true)) (piece "Seed" Shared) (regions P1 (sites Bottom)) (regions P2 (sites Top)) (map "LeftMost" {(pair P1 0) (pair P2 13)}) (hand Each)}) (rules (start {(set Count 6 (sites Track)) (set RememberValue "Playable" (union (sites Top) (sites Bottom)))}) {(phase "Sowing" (play (or {(move Select (from (if (is Prev Mover) (sites {(var "Replay")}) (sites Mover)) (and (is Occupied (from )) (is In (from ) (sites (values Remembered "Playable"))))) (then (do (set Var "NumSowed" (count (last To))) (sow (if (and (!= 4 (count (to ))) (< 1 (count (to )))) (and (moveAgain ) (set Var "Replay" (to ))) (if (= 1 (count (to ))) (if (is Occupied (trackSite Move (to ) 1)) (fromTo (from (trackSite Move (to ) 1)) (to (handSite Mover)) (count (trackSite Move (to ) 1)))))) (not (is In (to ) (sites (values Remembered "Playable"))))) (then (and (forEach Site (sites Track (last From) (trackSite Move (last From) "Track" (var "NumSowed"))) (if (= 4 (count (site ))) (fromTo (from (site )) (to (if (is In (to ) (sites P1)) (handSite P1) (handSite P2))) 4))) (set Var "NumSowed" 0))))))} (then (if (or (all Sites (sites Bottom) (= 0 (count (site )))) (all Sites (sites Top) (= 0 (count (site ))))) (and {(forEach Site (sites P1) (fromTo (from (site )) (to (handSite P1)) (count (site )))) (forEach Site (sites P2) (fromTo (from (site )) (to (handSite P2)) (count (site )))) (forget Value "Playable" All)}))))) (end (if (all Sites (sites Board) (= 0 (count (site )))) {(if (> 6 (count Cell (handSite P1))) (result P2 Win)) (if (> 6 (count Cell (handSite P2))) (result P1 Win))})) (nextPhase (all Sites (sites Board) (= 0 (count (site )))) "BetweenRounds")) (phase "BetweenRounds" (play (if (<= 6 (count Cell (handSite Mover))) (move (from (handSite Mover)) (to (trackSite FirstSite (mapEntry "LeftMost" Mover) (is Empty (to ))) (is In (to ) (sites Mover))) 6 (then (remember Value "Playable" (last To)))))) (nextPhase (all Passed) "Sowing"))}))

2x6 board. Four counters in each hole. Sowing occurs in an anti-clockwise direction. The first player sows from the hole on their right. When the final counter lands in an occupied hole, the turn ends. When the final counter lands in an empty hole, that counter is captured. The player who captures the most counters wins.
(game "Um el-Bil" (players 2) (equipment {(mancalaBoard 2 6 None (track "Track" "0,E,N,W" true)) (regions P1 (sites Bottom)) (regions P2 (sites Top)) (piece "Seed" Shared) (hand Each)}) (rules (start (set Count 4 (sites Track))) {(phase "Opening" (play (move Select (from (- 6 1)) (then (sow (= (count (to )) 1) (fromTo (from (to )) (to (handSite Mover)) 1))))) (nextPhase "Play")) (phase "Play" (play (move Select (from (sites Mover) (< 0 (count (from )))) (then (sow (= (count (to )) 1) (fromTo (from (to )) (to (handSite Mover)) 1))))))} (end (if (all Sites (sites Board) (is Empty (site ))) (byScore {(score P1 (count Cell (handSite P1))) (score P2 (count Cell (handSite P2)))})))))

2x6 board. Four counters in each hole. Play begins with a stylized move. One player takes one counter from their rightmost hole, and holds it in their hand. They then take one counter from the next hole, moving in an anti-clockwise direction, and place it in the next hole. They then take a counter from the next hole after that, and placing it in the next hole, continuing until there is an alternating pattern of a hole with five counters followed by a hole with three counters. Upon reaching the original hole, one counter is dropping in it, and then one counter in the following hole, thus capturing the counters in this hole. Players then alternate turns, sowing in an anti-clockwise direction. When the final counter of a sowing lands in an occupied hole, these counters are picked up and the sowing continues. During sowing, the contents of any hole made to contain four counters are captured by the player in whose row the hole is located, except when this is the final counter of a sowing, in which case the player who is sowing captures these counters. When the sowing ends in an empty hole, the turn ends. Play continues until one player cannot move, and the other player captures the remaining counters. A second round is played, each player placing four counters into each hole starting from the rightmost hole in their row. The player with more counters gains a hole from their opponent for every four extra balls they've captured. If an opponent has three extra after counting in such a way, they also gain a hole, but not if there are one or two extra. Play continues in several rounds like this until one player captures all the holes.
        
(game "Lamosh" (players 2) (equipment {(mancalaBoard 2 6 None {(track "TrackCCW" "0,E,N,W" true) (track "TrackCW" "5,W,N,E" true)}) (piece "Seed" Shared) (hand Each) (regions P1 (sites Bottom)) (regions P2 (sites Top)) (map "RightMost" {(pair P1 5) (pair P2 6)})}) (rules (start {(set Count 4 (sites Track)) (set RememberValue "OwnedP1" (sites Bottom)) (set RememberValue "OwnedP2" (sites Top))}) {(phase "Opening1" (play (move (from (if (is Prev Mover) (var "Replay") 11)) (to (trackSite Move (from ) "Track" 1)) (then (if (!= (trackSite Move (last To) "Track" 1) 11) (and (moveAgain ) (set Var "Replay" (trackSite Move (last To) "Track" 1))) (fromTo (from 11) (to (handSite Mover)) (count 11)))))) (nextPhase (not (is Next Mover)) "Sowing")) (phase "Sowing" (play (or {(move Select (from (if (is Prev Mover) (sites {(var "Replay")}) (if (is Mover P1) (sites (values Remembered "OwnedP1")) (sites (values Remembered "OwnedP2")))) (is Occupied (from ))) (then (do (set Var "NumSowed" (count (last To))) (sow "TrackCCW" (if (= 4 (count (to ))) (fromTo (from (to )) (to (handSite Mover)) 4) (if (< 1 (count (to ))) (and (moveAgain ) (set Var "Replay" (to )))))) (then (and (forEach Site (sites Track (last From) (trackSite Move (last From) "Track" (- (var "NumSowed") 1))) (if (= 4 (count (site ))) (fromTo (from (site )) (to (if (is In (to ) (sites (values Remembered "OwnedP1"))) (handSite P1) (handSite P2))) 4))) (set Var "NumSowed" 0))))))} (then (if (and (not (is Next Mover)) (or (all Sites (sites (values Remembered "OwnedP1")) (is Empty (site ))) (all Sites (sites (values Remembered "OwnedP2")) (is Empty (site ))))) (and {(if (no Moves P1) (forEach Site (sites Board) (if (is Occupied (site )) (fromTo (from (site )) (to (handSite P1)) (count (site ))))) (forEach Site (sites Board) (if (is Occupied (site )) (fromTo (from (site )) (to (handSite P2)) (count (site )))))) (forget Value "OwnedP1" All) (forget Value "OwnedP2" All)}))))) (end (if (all Sites (sites Board) (= 0 (count (site )))) {(if (> 3 (count Cell (handSite P1))) (result P2 Win)) (if (> 3 (count Cell (handSite P2))) (result P1 Win))})) (nextPhase (all Sites (sites Board) (= 0 (count (site )))) "BetweenRounds")) (phase "BetweenRounds" (play (if (<= 3 (count Cell (handSite Mover))) (move (from (handSite Mover)) (to (trackSite FirstSite "TrackCW" (mapEntry "RightMost" Mover) (is Empty (to )))) (if (>= (count Cell (handSite Mover)) 4) 4 3) (then (if (is Mover P1) (remember Value "OwnedP1" (last To)) (remember Value "OwnedP2" (last To))))))) (nextPhase (all Passed) "Sowing"))}))

2x12 board. Starting position, from the left hand hole, for each player: 0-3-3-0-3-3-0-3-3-0-3-3 In the opening play, one player must sow two counters from the second hole from their right. The opponent then makes the same play from their row, or from the fourth hole from their right. When the final counter lands in an occupied hole, these are picked up and sowing continues. A player's turn ends when the final counter falls into an empty hole. Players may now begin their move from any hole in their row, but only if it ends in an empty hole in their row or if it enters the opponent's row. If the final counter lands in an occupied hole in the opponent's row, these are picked up and sowing continues. If the final counter lands in an occupied hole in the player's row, the contents of the hole in the opponent's hole opposite it are captured. Sowing ends when a capture is made or when a counter falls into an empty hole.
(game "Intotoi" (players 2) (equipment {(mancalaBoard 2 12 None (track "Track" "0,E,N,W" true)) (piece "Seed" Shared) (hand Each) (regions P1 (sites Bottom)) (regions P2 (sites Top))}) (rules (start (set Count 3 (sites {1 2 4 5 7 8 10 11 22 21 19 18 16 15 13 12}))) {(phase "Opening1" (play (move Select (from 10) (then (sow 2)))) (nextPhase "Opening2")) (phase "Opening2" (play (if (is Prev Mover) (move Select (from (sites {(last To true)}) (> (count (from )) 0)) (then (sow (if (!= 1 (count (to ))) (moveAgain ))))) (move Select (from (sites {13 15}) (> (count (from )) 0)) (then (sow 2 (if (!= 1 (count (to ))) (moveAgain ))))))) (nextPhase (not (is Next Mover)) "Play")) (phase "Play" (play (move Select (from (sites From (do (move Select (from (sites Mover) (> (count (from )) 0)) (then (sow ))) (or (and (= 1 (count (last To true))) (is In (last To true) (sites Mover))) (is In (last To true) (sites Next))))) (> (count (from )) 0)) (then (sow (if (= 1 (count (to ))) (if (and (is Occupied (if (is Mover P1) (+ (to ) 12) (- (to ) 12))) (is In (to ) (sites Mover))) (fromTo (from (if (is Mover P1) (+ (to ) 12) (- (to ) 12))) (to (handSite Mover)) (count (if (is Mover P1) (+ (to ) 12) (- (to ) 12))))) (moveAgain )))))) (nextPhase Mover (is Next Mover) "Replay")) (phase "Replay" (play (move Select (from (sites {(last To true)}) (> (count (from )) 0)) (then (sow (if (= 1 (count (to ))) (if (and (is Occupied (if (is Mover P1) (+ (to ) 12) (- (to ) 12))) (is In (to ) (sites Mover))) (fromTo (from (if (is Mover P1) (+ (to ) 12) (- (to ) 12))) (to (handSite Mover)) (count (if (is Mover P1) (+ (to ) 12) (- (to ) 12))))) (moveAgain )))))) (nextPhase Mover (not (is Next Mover)) "Play"))} (end (if (no Moves Mover) (byScore {(score P1 (+ (count Cell (handSite P1)) (count (sites P1)))) (score P2 (+ (count Cell (handSite P2)) (count (sites P2))))})))))

2x5 board. Five counters per hole. Sowing can happen in either direction. When the last counter falls into a hole, sowing continues if there are counters in the following holes; these are picked up and sowing continues from there. When the hole after the end of a sowing is empty, the counters in the next hole following it are captured. If a pattern of alternating empty and occupied holes continues after this, the counters in the occupied holes are captured, until there are two occupied or two empty holes in a row. The player who captures the most counters wins.
(game "Dongjintian" (players 2) (equipment {(mancalaBoard 2 5 None {(track "TrackCCW" "0,E,N,W" true) (track "TrackCW" "4,W,N,E" true)}) (piece "Seed" Shared) (hand Each) (regions P1 (sites Bottom)) (regions P2 (sites Top))}) (rules (start (set Count 5 (sites Track))) (play (or (if (or (>= 0 (var "Direction")) (= (var "Direction") 1)) (move Select (from (if (is Prev Mover) (sites {(trackSite Move (last To true) "TrackCCW" 1)}) (sites Mover)) (is Occupied (from ))) (then (sow "TrackCCW" (if (is Occupied (trackSite Move (to ) "TrackCCW" 1)) (and (moveAgain ) (set Var "Direction" 1)) (if (and (is Empty (trackSite Move (to ) "TrackCCW" 1)) (is Occupied (trackSite Move (to ) "TrackCCW" 2))) (and (and (fromTo (from (trackSite Move (to ) "TrackCCW" 2)) (to (handSite Mover)) (count (trackSite Move (to ) "TrackCCW" 2))) (if (and (is Empty (trackSite Move (to ) "TrackCCW" 3)) (is Occupied (trackSite Move (to ) "TrackCCW" 4))) (and (fromTo (from (trackSite Move (to ) "TrackCCW" 4)) (to (handSite Mover)) (count (trackSite Move (to ) "TrackCCW" 4))) (if (and (is Empty (trackSite Move (to ) "TrackCCW" 5)) (is Occupied (trackSite Move (to ) "TrackCCW" 6))) (and (fromTo (from (trackSite Move (to ) "TrackCCW" 6)) (to (handSite Mover)) (count (trackSite Move (to ) "TrackCCW" 6))) (if (and (is Empty (trackSite Move (to ) "TrackCCW" 7)) (is Occupied (trackSite Move (to ) "TrackCCW" 8))) (fromTo (from (trackSite Move (to ) "TrackCCW" 8)) (to (handSite Mover)) (count (trackSite Move (to ) "TrackCCW" 8))))))))) (set Var "Direction" 0)))))))) (if (or (>= 0 (var "Direction")) (= (var "Direction") 2)) (move Select (from (if (is Prev Mover) (sites {(trackSite Move (last To true) "TrackCW" 1)}) (sites Mover)) (is Occupied (from ))) (then (sow "TrackCW" (if (is Occupied (trackSite Move (to ) "TrackCW" 1)) (and (moveAgain ) (set Var "Direction" 2)) (if (and (is Empty (trackSite Move (to ) "TrackCW" 1)) (is Occupied (trackSite Move (to ) "TrackCW" 2))) (and (and (fromTo (from (trackSite Move (to ) "TrackCW" 2)) (to (handSite Mover)) (count (trackSite Move (to ) "TrackCW" 2))) (if (and (is Empty (trackSite Move (to ) "TrackCW" 3)) (is Occupied (trackSite Move (to ) "TrackCW" 4))) (and (fromTo (from (trackSite Move (to ) "TrackCW" 4)) (to (handSite Mover)) (count (trackSite Move (to ) "TrackCW" 4))) (if (and (is Empty (trackSite Move (to ) "TrackCW" 5)) (is Occupied (trackSite Move (to ) "TrackCW" 6))) (and (fromTo (from (trackSite Move (to ) "TrackCW" 6)) (to (handSite Mover)) (count (trackSite Move (to ) "TrackCW" 6))) (if (and (is Empty (trackSite Move (to ) "TrackCW" 7)) (is Occupied (trackSite Move (to ) "TrackCW" 8))) (fromTo (from (trackSite Move (to ) "TrackCW" 8)) (to (handSite Mover)) (count (trackSite Move (to ) "TrackCW" 8))))))))) (set Var "Direction" 0)))))))))) (end (if (<= (count Pieces All (sites Board)) 1) (byScore {(score P1 (count Cell (handSite P1))) (score P2 (count Cell (handSite P2)))})))))

Two rows of six holes with two stores. Four counters in each hole. Players sow in an anti-clockwise direction from a hole in their row. Sowing ends when the last counter falls into a hole, making it contain four counters, which are taken. Sowing also ends when the last counter falls into an empty hole. Sowing continues in any other scenario by picking up the contents of the hole where the last counter was dropped and continuing to sow. The game ends when one player can no longer move. The remaining counters are taken by the last player that was able to move and put into the store. A new round begins: The winner of the previous round now owns seven holes - the six in his row and the next hole in the opponent's row. Player takes fours from the extra hole.
(game "Whyo" (players 2) (equipment {(mancalaBoard 2 6 (track "TrackCCW" "1,E,N,W" true)) (regions P1 (sites Bottom)) (regions P2 (sites Top)) (piece "Seed" Shared) (map {(pair P1 FirstSite) (pair P2 LastSite)})}) (rules (start (set Count 4 (sites Track))) (play (move Select (from (if (is Prev Mover) (sites {(last To true)}) (if (= (score P1) 1) (if (is Mover P1) (union (sites Mover) (sites {12})) (difference (sites Mover) (sites {12}))) (if (= (score P2) 1) (if (is Mover P2) (union (sites Mover) (sites {1})) (difference (sites Mover) (sites {1}))) (sites Mover)))) (> (count (from )) 0)) (then (sow (if (= (count (to )) 4) (fromTo (from (to )) (to (mapEntry Mover)) (count (to ))) (if (< (count (to )) 1) (moveAgain ))) (then (if (no Moves Next) (and (forEach Site (union (sites P1) (sites P2)) (if (> (count (site )) 0) (fromTo (from (site )) (to (mapEntry Mover)) (count (site )))) (then (and {(if (< (+ (count (mapEntry P1)) (count (sites P1))) (+ (count (mapEntry P2)) (count (sites P2)))) (addScore P2 1)) (if (< (+ (count (mapEntry P2)) (count (sites P2))) (+ (count (mapEntry P1)) (count (sites P1)))) (addScore P1 1)) (if (< (var ) 0) (and {(forEach Site (sites Board) (if (> (count (site )) 0) (remove (site )))) (forEach Site (union (sites P1) (sites P2)) (add (piece (id "Seed" Shared)) (to (site )) 4))}))}))) (set Var (+ (var ) 1))))))))) (end (if (= (var ) 1) (byScore )))))

2x3 board. Three counters in each hole. Players sow from any one of their holes. Sowing can occur in the following directions: From the leftmost hole, clockwise; from the rightmost hole, anti-clockwise; from the center hole, the player may choose either direction. If the final counter falls into a hole in the opponent's row containing one counter, making it now contain two, these are taken. If the holes before them also contain two, in an unbroken sequence, they may all be captured. Single counters cannot be sown. When neither player can move, the single counters in each player's rows are taken by the player belonging to those rows. The player with the most counters wins.
(game "Um el Tuweisat" (players 2) (equipment {(mancalaBoard 2 3 None {(track "TrackCCW" "0,E,N,W" true) (track "TrackCW" "2,W,N,E" true)}) (regions P1 (sites Bottom)) (regions P2 (sites Top)) (map "RightHole" {(pair P1 2) (pair P2 3)}) (map "CenterHole" {(pair P1 1) (pair P2 4)}) (map "LeftHole" {(pair P1 0) (pair P2 5)}) (piece "Seed" Shared) (hand Each)}) (rules (start (set Count 3 (sites Track))) (play (or {(move Select (from (mapEntry "RightHole" (mover )) (> (count (from )) 1)) (then (sow "TrackCCW" (and (= (count (to )) 2) (is In (to ) (sites Next))) (fromTo (from (to )) (to (handSite Mover)) (count (to ))) true))) (move Select (from (mapEntry "LeftHole" (mover )) (> (count (from )) 1)) (then (sow "TrackCW" (and (= (count (to )) 2) (is In (to ) (sites Next))) (fromTo (from (to )) (to (handSite Mover)) (count (to ))) true))) (move Select (from (mapEntry "CenterHole" (mover )) (> (count (from )) 1)) (then (sow "TrackCCW" (and (= (count (to )) 2) (is In (to ) (sites Next))) (fromTo (from (to )) (to (handSite Mover)) (count (to ))) true))) (move Select (from (mapEntry "CenterHole" (mover )) (> (count (from )) 1)) (then (sow "TrackCW" (and (= (count (to )) 2) (is In (to ) (sites Next))) (fromTo (from (to )) (to (handSite Mover)) (count (to ))) true)))})) (end (if (and (no Moves P1) (no Moves P2)) (byScore {(score P1 (+ (count Cell (handSite P1)) (count (sites P1)))) (score P2 (+ (count Cell (handSite P2)) (count (sites P2))))})))))

2x6 board with two stores. Five counters in each hole. Sowing occurs in an anti-clockwise direction. When the final counter lands in a hole in the opponent's row containing one or two counters, thus making it contain two or three counters, they are captured. Any other holes in the opponent's row which also contain two or three counters, in an unbroken sequence preceding the hole where the first capture was made, are captured. When a player sows around the board, the hole from which the coutners were taken is left empty. Play ends when one player cannot play from their row, and players capture any remaining counters in their holes. The player with the most counters wins.
(game "Shono" (players 2) (equipment {(mancalaBoard 2 6 (track "Track" "1,E,N,W" true)) (regions P1 (sites Bottom)) (regions P2 (sites Top)) (map {(pair P1 FirstSite) (pair P2 LastSite)}) (piece "Seed" Shared)}) (rules (start (set Count 5 (sites Track))) (play (move Select (from (sites Mover) (< 0 (count (from )))) (then (sow (and (is In (to ) (sites Next)) (or (= (count (to )) 2) (= (count (to )) 3))) (fromTo (from (to )) (to (mapEntry (mover ))) (count (to ))) false true)))) (end (if (no Moves Mover) (byScore {(score P1 (+ (count (mapEntry P1)) (count (sites P1)))) (score P2 (+ (count (mapEntry P2)) (count (sites P2))))})))))

Two rows of six holes with stores on either end. Four counters in each hole. Players sow in an anti-clockwise direction. When the last counter falls into a hole, and it now contains two or three counters, these are captured.
(game "Kpo" (players 2) (equipment {(mancalaBoard 2 6 (track "Track" "1,E,N,W" true)) (piece "Seed" Shared) (regions P1 (sites Bottom)) (regions P2 (sites Top)) (map {(pair P1 FirstSite) (pair P2 LastSite)})}) (rules (start (set Count 4 (sites Track))) (play (move Select (from (sites Mover) (> (count (from )) 0)) (then (sow (if (or (= (count (to )) 2) (= (count (to )) 3)) (fromTo (from (to )) (to (mapEntry Mover)) (count (to )))))))) (end (if (no Moves Next) (byScore {(score P1 (+ (count (sites P1)) (count (mapEntry P1)))) (score P2 (+ (count (sites P2)) (count (mapEntry P2))))})))))

2x6-12 board, six is the most common. Four counters in each hole. A player moves by picking up the contents of one of their holes and sowing them in an anti-clockwise direction. If the final counter lands in an occupied hole, the contents of this hole are picked up and sowing continues. If the final counter falls into an empty hole, the turn ends. If the final counter falls into a hole containing three counters, making it four after the sowing, then these counters are captured and the turn ends. If at any time during sowing a player drops a counter into a hole to make it contain four, these are captured. If a player cannot move because there are no counters in their holes, they pass. When eight counters are left, the player to first capture a group of four also takes the remaining four counters on the board.
(game "Hoyito" (players 2) (equipment {(mancalaBoard 2 6 None (track "Track" "0,E,N,W" true)) (regions P1 (sites Bottom)) (regions P2 (sites Top)) (piece "Seed" Shared) (hand Each)}) (rules (start (set Count 4 (sites Track))) (play (move Select (from (if (is Prev Mover) (sites {(last To true)}) (sites Mover)) (> (count (from )) 0)) (then (sow (if (= (count (to )) 4) (if (<= (count (sites Board)) 8) (forEach Site (sites Board) (if (> (count (site )) 0) (fromTo (from (site )) (to (handSite Mover)) (count (site ))))) (fromTo (from (to )) (to (handSite Mover)) (count (to )))) (if (< (count (to )) 1) (moveAgain ))))))) (end (if (no Moves Mover) (byScore {(score P1 (count Cell (handSite P1))) (score P2 (count Cell (handSite P2)))})))))

2x6 board, with a store hole on either end. Four counters in each hole. Each player owns the six holes, three holes in each row, to their right. Sowing occurs in an anti-clockwise direction, and only in the holes belonging to the player. Play begins with a stylized opening move. The first player takes the counters from the holes in each of the row of holes closest to them, and places them in the central row of their holes in the further row. The counters from the hole next in the direction of sowing are then sown. The counters from the central hole in the further of the player's rows are then sown. When this is completed, the player takes the counters from the holes in the row closest to them, and holds them until the opponent performs the same sequence of moves on their side of the board. At this point, each player places the counters they are holding into any hole on the opponent's side of the board which contains more than one counter. Players then alternate turns sowing pieces around their holes of the board. Sowing always skips the hole from which sowing began. When the final counter of a sowing causes a hole to contain four counters, these counters are placed on any hole on the opponent's side of the board that contains more than one counter. When a player has only single seeds in their holes, and the opponent is about to place counters in the player's holes, the opponent moves one of the player's counters into another hole containing one counter, thus making two, and places the counters from the opponent's side are placed there. The player who is able to place all of their counters on the opponent's side of the board wins.
(game "Lontu-Holo" (players 2) (equipment {(mancalaBoard 2 6 {(track "TrackCCW1" {1 2 3 9 8 7} true P1) (track "TrackCCW2" {4 5 6 12 11 10} true P2)}) (regions "Home" P1 (sites Track "TrackCCW1")) (regions "Home" P2 (sites Track "TrackCCW2")) (regions "TwoHolesClosestNotCentre" P1 (sites {1 3})) (regions "TwoHolesClosestNotCentre" P2 (sites {10 12})) (regions "TwoHolesFurtherNotCentre" P1 (sites {7 9})) (regions "TwoHolesFurtherNotCentre" P2 (sites {4 6})) (regions "LeftMostHoles" P1 (intersection (expand (sites Left)) (sites Track "TrackCCW1"))) (regions "LeftMostHoles" P2 (intersection (expand (sites Right)) (sites Track "TrackCCW2"))) (regions "RightMostHoles" P1 (intersection (sites Centre) (sites Track "TrackCCW1"))) (regions "RightMostHoles" P2 (intersection (sites Centre) (sites Track "TrackCCW2"))) (regions "ClosestRow" P1 (intersection (sites Bottom) (sites Track "TrackCCW1"))) (regions "ClosestRow" P2 (intersection (sites Top) (sites Track "TrackCCW2"))) (map "CentreFurtherRow" {(pair P1 8) (pair P2 5)}) (map "CentreClosestRow" {(pair P1 2) (pair P2 11)}) (map "RightFurtherRow" {(pair P1 9) (pair P2 4)}) (map "RightClosestRow" {(pair P1 3) (pair P2 10)}) (map "LeftFurtherRow" {(pair P1 7) (pair P2 6)}) (map "LeftClosestRow" {(pair P1 1) (pair P2 12)}) (piece "Seed" Shared) (map "Store" {(pair P1 FirstSite) (pair P2 LastSite)})}) (rules (start (set Count 4 (union (sites Bottom) (sites Top)))) {(phase "Opening1" (play (move (from (sites Mover "TwoHolesClosestNotCentre") (is Occupied (from ))) (to (mapEntry "CentreFurtherRow" Mover)) (count (from )))) (nextPhase Mover (all Sites (sites Mover "TwoHolesClosestNotCentre") (is Empty (site ))) "Opening2")) (phase "Opening2" (play (move Select (from (trackSite Move (mapEntry "CentreFurtherRow" Mover) "TrackCCW" 1)) (then (sow "TrackCCW" (mover ))))) (nextPhase Mover "Opening3")) (phase "Opening3" (play (move Select (from (mapEntry "CentreFurtherRow" Mover)) (then (sow "TrackCCW" (mover ))))) (nextPhase Mover "Opening4")) (phase "Opening4" (play (move (from (sites Mover "ClosestRow") (is Occupied (from ))) (to (mapEntry "Store" Mover)) (count (from )))) (nextPhase Mover (all Sites (sites Mover "ClosestRow") (is Empty (site ))) "Opening5")) (phase "Opening5" (play (move (from (mapEntry "Store" Mover)) (to (sites Mover "Home") (< 1 (count (to )))) 1)) (nextPhase Mover (is Empty (mapEntry "Store" Mover)) "Sowing")) (phase "Sowing" (play (if (is Prev Mover) (if (all Sites (sites Next "Home") (= 1 (count (site )))) (move (from (sites Next "Home")) (to (sites Next "Home") (!= (from ) (to ))) 1 (then (moveAgain ))) (move (from (var "Replay")) (to (sites Next "Home") (< 1 (count (to )))) 1 (then (if (is Occupied (last From)) (moveAgain ))))) (move Select (from (sites Mover "Home") (is Occupied (from ))) (then (sow "TrackCCW" (mover ) (if (= 4 (count (to ))) (and (moveAgain ) (set Var "Replay" (to ))))))))) (end (if (all Sites (sites Mover "Home") (is Empty (site ))) (result Mover Win))))}))

2x6 board. 72 counters are distributed unevenly into the holes with the only rule that corresponding holes on either side of the board must contain counters. The opponent moves first, but may flip the board around if they prefer that arrangement, sacrificing the first move. Counters are sowed in an anti-clockwise direction from a hole in the player's row. If the last counter falls into a hole making it odd, these are picked up and sowing continues. If it lands in a hole making it even, these counters are captured as are the ones in the opposite hole. If the previous hole also has an even number, these and the ones in the opposite hole are captured. If the last counter falls into an empty hole, the turn ends. If a player has no counters in their holes, the opponent must give them one counter, to be placed in the leftmost hole and played from there. Play ends when the board is cleared of counters. Each player counts the number of counters they captured. The player with more counters is given a score equal to the difference in the number of counters. Another round begins again exactly as before. The game is won when a player accumulates sixty points.
(game "Li'b al-'Aqil" (players 2) (equipment {(mancalaBoard 2 6 None (track "Track" "0,E,N,W" true)) (piece "Seed" Shared) (hand Each) (regions P1 (sites Bottom)) (regions P2 (sites Top)) (map "LeftMost" {(pair P1 0) (pair P2 11)})}) (rules (start (place "Seed" (handSite P1) 72)) {(phase "Opening1" (play (or {(if (is Occupied Cell (handSite P1)) (forEach Value 1 (count Cell (handSite P1)) (move (from (handSite P1)) (to (sites Board)) (value ))) (forEach Site (sites Board) (if (is Occupied (site )) (move (from (site )) (to (sites Board) (!= (to ) (from )))))) (then (moveAgain ))) (if (and (is Empty (handSite P1)) (all Sites (sites Bottom) (if (is Empty (site )) (is Empty (+ (site ) 6)) (is Occupied (+ (site ) 6))))) (move Pass))})) (nextPhase (was Pass) "Opening2")) (phase "Opening2" (play (or (move Pass (then (moveAgain ))) (move Swap Players P1 P2) (then (set Pending)))) (nextPhase "Sowing")) (phase "Sowing" (play (if (and (not (is Prev Mover)) (all Sites (sites Next) (= 0 (count (site ))))) (move (from (sites Mover) (is Occupied (from ))) (to (mapEntry "LeftMost" Next))) (move Select (from (if (and (not (is Pending)) (is Prev Mover)) (sites {(var "Replay")}) (sites Mover)) (is Occupied (from ))) (then (sow true (if (is Odd (count (to ))) (and (moveAgain ) (set Var "Replay" (to ))) (and (fromTo (from (to )) (to (handSite Mover)) (count (to ))) (if (is Occupied (if (is In (to ) (sites Bottom)) (+ (to ) 6) (- (to ) 6))) (fromTo (from (if (is In (to ) (sites Bottom)) (+ (to ) 6) (- (to ) 6))) (to (handSite Mover)) (count (if (is In (to ) (sites Bottom)) (+ (to ) 6) (- (to ) 6))))))) (and (is Occupied (to )) (is Even (count (to ))))))) (then (if (all Sites (sites Board) (= 0 (count (site )))) (and (if (< (count Cell (handSite P1)) (count Cell (handSite P2))) (addScore P2 (- (count Cell (handSite P2)) (count Cell (handSite P1)))) (addScore P1 (- (count Cell (handSite P1)) (count Cell (handSite P2))))) (if (is Occupied Cell (handSite P2)) (fromTo (from (handSite P2)) (to (handSite P1)) (count Cell (handSite P2))))))))) (nextPhase (all Sites (sites Board) (= 0 (count (site )))) "Opening1"))} (end (forEach Player (<= 60 (score Player)) (result Player Win)))))

2x6 board. Seventy counters. One player distributes the counters unevenly in the central four holes (central two holes of each row). The opponent then has the option to flip the board around if they are not satisfied with the distribution. Opponent begins play. The first move must be from the fourth hole in the row. Sowing occurs in a clockwise direction. Capturing cannot happen on the first move. If the last counter is dropped into a hole, creating an odd number of counters in it, play ends. If the number is now even and the hole in the other player's row also has an even number, the contents of both holes are captured. If the final hole is now even but the other player's row does not have an even number of counters, the counters are picked up and a new sowing begins. If the final hole has more than ten counters it cannot be captured and sowing must continue from this hole whether the number is even or odd. Play ends when a player has no more counters on their side of the board. The player who has captured the greatest number of counters wins.
(game "Mangala (Bedouin)" (players 2) (equipment {(mancalaBoard 2 6 None (track "Track" "5,W,N,E" true)) (piece "Seed" Shared) (hand Each) (hand Shared) (regions P1 (sites Bottom)) (regions P2 (sites Top)) (map "FourthHole" {(pair P1 3) (pair P2 8)})}) (rules (start (place "Seed" (handSite Shared) 17)) {(phase "OpeningP1" (play (move (from (handSite Shared)) (to (sites Centre)) (then (if (is Occupied (handSite Shared)) (moveAgain ))))) (nextPhase (is Empty (handSite Shared)) "OpeningP2")) (phase "OpeningP2" (play (or (move Pass) (if (is Mover P2) (move Pass (then (and {(remove (sites Centre)) (add (piece (id "Seed" Shared)) (to 9) (count 2)) (add (piece (id "Seed" Shared)) (to 2) (count 9)) (add (piece (id "Seed" Shared)) (to 8) (count 3)) (add (piece (id "Seed" Shared)) (to 3) (count 8))})))))) (nextPhase (all Passed) "SowingRestricted")) (phase "SowingRestricted" (play (move Select (from (mapEntry Mover) (is Occupied (from ))) (then (sow )))) (nextPhase Mover "Sowing")) (phase "Sowing" (play (move Select (from (if (is Prev Mover) (sites {(last To true)}) (sites Mover)) (> (count (from )) 0)) (then (sow (if (< 10 (count (to ))) (moveAgain ) (if (is Even (count (to ))) (if (is Even (count (if (is Mover P1) (+ (to ) 6) (- (to ) 6)))) (and (fromTo (from (to )) (to (handSite Mover)) (count (to ))) (fromTo (from (if (is Mover P1) (+ (to ) 6) (- (to ) 6))) (to (handSite Mover)) (count (if (is Mover P1) (+ (to ) 6) (- (to ) 6))))) (moveAgain )))))))) (end (if (or (all Sites (sites P1) (= 0 (count (site )))) (all Sites (sites P2) (= 0 (count (site ))))) (byScore {(score P1 (count Cell (handSite P1))) (score P2 (count Cell (handSite P2)))}))))}))

2x7 board. The game starts with five counters in each hole. Play begins from a player's hole, sowing in a counter clockwise direction. If the last counter is sown in a hole containing one or three counters, they are taken. if the previous hole also has one or three, these are also taken. Play continues until all the holes are empty. The taken stones are then placed five in each hole, and the player with more counters than that needed to fill the holes in their row wins.
(game "Mangala (Turkey)" (players 2) (equipment {(mancalaBoard 2 7 None (track "Track" "0,E,N,W" true)) (regions P1 (sites Bottom)) (regions P2 (sites Top)) (piece "Seed" Shared) (hand Each)}) (rules (start (set Count 5 (sites Track))) (play (move Select (from (sites Mover) (> (count (from )) 0)) (then (sow (or (= (count (to )) 1) (= (count (to )) 3)) (fromTo (from (to )) (to (handSite Mover)) (count (to ))) true)))) (end (if (= (count (sites Track)) 0) (byScore {(score P1 (count Cell (handSite P1))) (score P2 (count Cell (handSite P2)))})))))

2x6 board with store holes at either end. The game begins with six counters in each hole. Each player owns one row of holes. At the beginning of the turn, a player picks up all of the counters from their side of the board and sows them, one each, into consecutive holes in a counterclockwise pattern. If the last counter lands in a hole that contains 2, 4, or 6 (after sowing), then the player captures the counters in that hole. If the player captures counters in a hole, then they may also capture counters in the previous hole, if it also has 2,4, or 6, continuing until reaching a hole without 2, 4, or 6. Play continues until one player cannot play on their turn, at which point the other player receives all of the remaining counters. The player with the most captured counters wins.
(game "Das Bohnenspiel" (players 2) (equipment {(mancalaBoard 2 6 (track "Track" "1,E,N,W" true)) (regions "Home" P1 (sites Bottom)) (regions "Home" P2 (sites Top)) (map {(pair P1 FirstSite) (pair P2 LastSite)}) (piece "Seed" Shared)}) (rules (start (set Count 6 (sites Track))) (play (move Select (from (sites Mover) (> (count (from )) 0)) (then (sow (is In (count (to )) (sites {2 4 6})) (fromTo (from (to )) (to (mapEntry (mover ))) (count (to ))) true)))) (end (if (no Moves Mover) (byScore {(score P1 (+ (count (mapEntry P1)) (count (sites P1)))) (score P2 (+ (count (mapEntry P2)) (count (sites P2))))})))))

2x6 board. Four counters in each hole. Play begins with a stylised move. One player takes the four counters in their leftmost hole and places them into the next hole, moving in an anti-clockwise direction. They then take the four counters in the next hole, and place them in the following holes. This continues until the entire board has an alternation pattern of a hole with eight counters followed by one with zero counters. The player then sows beginning from the final hole with eight counters they created. When the final counter of a sowing lands in a hole with counters, the player picks up these counters and sowing continues. When the final counter falls into an empty hole, the turn ends. At any time during the sowing a hole is made to contain four counters, they are captured by the player who is sowing, except when it is the final hole of a sowing, in which case they are picked up and sowing continues. If a player cannot play, they must pass their turn and may resume play when they are next able. When all of the counters have been captured, the player who captured the most counters wins.
(game "Gabata (Oromo)" (players 2) (equipment {(mancalaBoard 2 6 None (track "Track" "0,E,N,W" true)) (piece "Seed" Shared) (hand Each) (regions P1 (sites Bottom)) (regions P2 (sites Top))}) (rules (start (set Count 4 (sites Track))) {(phase "Opening1" (play (move Select (from (if (is Prev Mover) (var "Replay") 0)) (then (sow 4 (and (moveAgain ) (if (is Occupied (trackSite Move (to ) "Track" 1)) (set Var "Replay" (trackSite Move (to ) "Track" 1)) (set Var "Replay" -1))))))) (nextPhase (= -1 (var "Replay")) "Opening2")) (phase "Opening2" (play (move Select (from (if (and (is Prev Mover) (!= -1 (var "Replay"))) (var "Replay") 6)) (then (do (set Var "NumSowed" (count (last To))) (sow (if (< 1 (count (to ))) (and (moveAgain ) (set Var "Replay" (to ))))) (then (and (forEach Site (sites Track (last From) (trackSite Move (last From) "Track" (- (var "NumSowed") 1))) (if (= 4 (count (site ))) (fromTo (from (site )) (to (handSite Mover)) 4))) (set Var "NumSowed" 0))))))) (nextPhase (not (is Next Prev)) "Sowing")) (phase "Sowing" (play (move Select (from (if (and (is Prev Mover) (!= -1 (var "Replay"))) (sites {(var "Replay")}) (sites Mover)) (is Occupied (from ))) (then (do (set Var "NumSowed" (count (last To))) (sow (if (< 1 (count (to ))) (and (moveAgain ) (set Var "Replay" (to ))))) (then (and (forEach Site (sites Track (last From) (trackSite Move (last From) "Track" (- (var "NumSowed") 1))) (if (= 4 (count (site ))) (fromTo (from (site )) (to (handSite Mover)) 4))) (set Var "NumSowed" 0))))))))} (end (if (all Sites (sites Board) (= 0 (count (site )))) (byScore {(score P1 (count Cell (handSite P1))) (score P2 (count Cell (handSite P2)))})))))

2x6 board with two store holes on either end. Play begins with four counters in each row. For the opening move, a player may take all of the counters in one hole and add them to the next hole. Play continues with players sowing from any one of the holes in their row in an anti-clockwise direction. If a sowing reaches the hole from which the sowing began, this hole is skipped. If the final counter falls in a hole containing three counters, thus making it contain four counters, these are captured. An unbroken sequence of holes containing four counters moving backwards from the final hole are also captured. Single counters cannot be sown. If a player cannot move, the opponent must sow in a way that allows them to play on the next turn. Play continues until one player has no counters on their side of the board. The player with the most captured counters wins.
(game "English Wari (St. Lucia)" (players 2) (equipment {(mancalaBoard 2 6 (track "Track" "1,E,N,W" true)) (regions P1 (sites Bottom)) (regions P2 (sites Top)) (map {(pair P1 FirstSite) (pair P2 LastSite)}) (piece "Seed" Shared)}) (rules (start (set Count 4 (sites Track))) {(phase "Init" (play (move Select (from (sites Mover)) (then (fromTo (from (last To)) (to (trackSite Move (last To) 1)) (count (last To)))))) (nextPhase (= (next ) 1) "Sowing")) (phase "Sowing" (play (do (move Select (from (sites Mover) (> (count (from )) 1)) (then (sow (= (count (to )) 4) (fromTo (from (to )) (to (mapEntry (mover ))) (count (to ))) false true))) (if (is Mover P1) (not (and {(< (count 7) 2) (< (count 8) 2) (< (count 9) 2) (< (count 10) 2) (< (count 11) 2) (< (count 12) 2)})) (not (and {(< (count 1) 2) (< (count 2) 2) (< (count 3) 2) (< (count 4) 2) (< (count 5) 2) (< (count 6) 2)}))))))} (end (if (no Moves Mover) (byScore {(score P1 (+ (count (mapEntry P1)) (count (sites P1)))) (score P2 (+ (count (mapEntry P2)) (count (sites P2))))})))))

2x4 board, rendered as holes in the sand. Six counters per hole. A player picks up all of the counters in one of the holes in their row and sows them in an anti-clockwise direction. When the final counter lands in an empty hole, the contents of the following hole are picked up and the sowing continues. When the final counter lands in a hole in the opponent's row causing it to contain six counters, these counters are captured. Play continues until one player has no counters in their holes, and the opponent wins.
(game "Boukerourou" (players 2) (equipment {(mancalaBoard 2 4 None (track "Track" "0,E,N,W" true)) (piece "Seed" Shared) (regions P1 (sites Bottom)) (regions P2 (sites Top))}) (rules (start (set Count 6 (sites Track))) (play (move Select (from (if (is Prev Mover) (sites {(trackSite Move (last To true) "Track" 1)}) (sites Mover)) (> (count (from )) 0)) (then (sow (if (and (= 1 (count (to ))) (is Occupied (trackSite Move (to ) "Track" 1))) (moveAgain ) (if (and (is In (to ) (sites Next)) (= 6 (count (to )))) (remove (to )))))))) (end (forEach Player (all Sites (sites Player) (= 0 (count (site )))) (result Player Loss)))))

2x6 board. Three counters in each hole. Sowing occurs from one of the holes in the player's row. If the final counter lands in an occupied hole, these counters are picked up and sowing continues. If the final counter lands in an empty hole in the player's own row, any counters in the opposite row hole are captured. A player wins when the opponent's row is empty.
(game "Altiev" (players 2) (equipment {(mancalaBoard 2 6 None (track "Track" "0,E,N,W" true)) (regions P1 (sites Bottom)) (regions P2 (sites Top)) (piece "Seed" Shared) (hand Each)}) (rules (start (set Count 3 (sites Track))) (play (move Select (from (if (is Prev Mover) (sites {(last To true)}) (sites Mover)) (> (count (from )) 0)) (then (sow (if (> (count (to )) 1) (moveAgain ) (if (is In (to ) (sites Mover)) (fromTo (from (if (is In (to ) (sites Bottom)) (+ (to ) 6) (- (to ) 6))) (to (handSite Mover)) (count (if (is In (to ) (sites Bottom)) (+ (to ) 6) (- (to ) 6)))))))))) (end {(if (all Sites (sites P1) (= 0 (count (site )))) (result P2 Win)) (if (all Sites (sites P2) (= 0 (count (site )))) (result P1 Win))})))

2x7 board, with one store at either end. Each player owns the store to their left. Seven counters in each hole. The first turn is played simultaneously by both players; at the point which one player's sowing lasts longer than the others, the player whose turn was shorter plays next and turns alternate from this point. Players sow in a clockwise direction from one of the holes in their row, also sowing into their store, but not in their opponent's store. When the final counter lands in an empty hole or in the store, the turn ends. When the final counter falls into an occupied hole, the player picks up the contents of this hole and continues to sow. If this occupied hole is in the player's row, they have the option to instead place the final counter in the opposite hole in the opponent's row, and to place this last counter as well as the contents of that hole into the store. When all of the counters are in the stores, a new game begins. The players take the counters from their stores and place seven in each hole, beginning from their right. Any player which cannot fill a hole with seven counters places the remaining counters in their store. Any holes which are left empty are out of play for this game. Play continues as before. Multiple games are played like this until all of the holes on one side are left empty. This player loses.
(game "Papan Dakon" (players 2) (equipment {(mancalaBoard 2 7 {(track "Track1" "0,8,E,S,W" true P1) (track "Track2" "15,7,W,N,E" true P2)}) (piece "Seed" Shared) (regions P1 (sites Bottom)) (regions P2 (sites Top)) (map {(pair P1 FirstSite) (pair P2 LastSite)}) (map "RightMost" {(pair P1 7) (pair P2 8)})}) (rules (start {(set Count 7 (union (sites P1) (sites P2))) (set RememberValue "Playable" (union (sites Top) (sites Bottom)))}) {(phase "Sowing" (play (or (move Select (from (if (is Prev Mover) (sites {(last To true)}) (sites Mover)) (and (> (count (from )) 0) (is In (from ) (sites (values Remembered "Playable"))))) (then (sow "Track" (mover ) (if (and (!= (to ) (mapEntry Mover)) (< 1 (count (to )))) (moveAgain )) (if (!= (to ) (mapEntry Mover)) (not (is In (to ) (sites (values Remembered "Playable")))))))) (if (and (is In (last To true) (sites Mover)) (is Prev Mover)) (if (is In (last To true) (sites (values Remembered "Playable"))) (move (from (last To true)) (to (if (is Mover P1) (+ (last To true) 7) (- (last To true) 7))) 1 (then (fromTo (from (last To)) (to (mapEntry Mover)) (count (last To))))))) (then (if (all Sites (union (sites Top) (sites Bottom)) (is Empty (site ))) (forget Value "Playable" All))))) (end (if (all Sites (union (sites Top) (sites Bottom)) (is Empty (site ))) {(if (> 7 (count (mapEntry P1))) (result P2 Win)) (if (> 7 (count (mapEntry P2))) (result P1 Win))})) (nextPhase (all Sites (union (sites Top) (sites Bottom)) (is Empty (site ))) "BetweenRounds")) (phase "BetweenRounds" (play (if (not (all Sites (sites Mover) (is Occupied (site )))) (if (<= 7 (count (mapEntry Mover))) (move (from (mapEntry Mover)) (to (trackSite FirstSite (mapEntry "RightMost" Mover) (is Empty (to )))) 7 (then (remember Value "Playable" (last To))))))) (nextPhase (all Passed) "Sowing"))}))

2x7 board. Four counters in each hole. Sowing occurs in an anti-clockwise direction and begins from one of the holes in the player's row. When the final counter lands in an occupied hole, these are picked up and sowing continues. If the occupied hole has three counters (four including the final counter from the sowing), these are captured. Then, the player picks up the counters in the next hole after the one from which the capture was made and continues sowing from there. When the final counter lands into an empty hole the turn ends. The game ends when one player no longer has any counters on their side of the board. The opponent then captures the remaining counters on the board. A new game begins, with each player filling holes with the counters they captured, four to each hole. The player now controls as many holes as they can fill with counters. Play begins with the player who played second in the previous game. Subsequent games are played until one player captures all of the holes, becoming the winner.
(game "Motiq" (players 2) (equipment {(mancalaBoard 2 7 None (track "Track" "0,E,N,W" true)) (regions "Home" P1 (sites Bottom)) (regions "Home" P2 (sites Top)) (piece "Seed" Shared) (hand Each)}) (rules (start {(set Count 4 (sites Track)) (set RememberValue "OwnedP1" (sites Bottom)) (set RememberValue "OwnedP2" (sites Top))}) {(phase "Sowing" (play (or {(move Select (from (if (is Prev Mover) (sites {(var "Replay")}) (if (is Mover P1) (sites (values Remembered "OwnedP1")) (sites (values Remembered "OwnedP2")))) (is Occupied (from ))) (then (sow (if (= 4 (count (to ))) (and (fromTo (from (to )) (to (handSite Mover)) 4) (if (is Occupied (trackSite Move (to ) 1)) (and (moveAgain ) (set Var "Replay" (trackSite Move (to ) 1))))) (if (< 1 (count (to ))) (and (moveAgain ) (set Var "Replay" (to ))))))))} (then (if (or (all Sites (sites P1) (= 0 (count (site )))) (all Sites (sites P2) (= 0 (count (site ))))) (and {(forEach Site (sites P1) (fromTo (from (site )) (to (handSite P1)) (count (site )))) (forEach Site (sites P2) (fromTo (from (site )) (to (handSite P2)) (count (site )))) (forget Value "OwnedP1" All) (forget Value "OwnedP2" All)}))))) (end (if (all Sites (sites Board) (= 0 (count (site )))) {(if (> 4 (count Cell (handSite P1))) (result P2 Win)) (if (> 4 (count Cell (handSite P2))) (result P1 Win))})) (nextPhase (all Sites (sites Board) (= 0 (count (site )))) "BetweenRounds")) (phase "BetweenRounds" (play (if (<= 4 (count Cell (handSite Mover))) (move (from (handSite Mover)) (to (if (all Sites (sites Mover) (is Occupied (site ))) (sites Board) (sites Mover)) (is Empty (to ))) 4 (then (if (is Mover P1) (remember Value "OwnedP1" (last To)) (remember Value "OwnedP2" (last To))))))) (nextPhase (all Passed) "Sowing"))}))

2x6 board. Six counters in each hole. Sowing occurs from any of the holes in the player's row, and continues in a clockwise direction. If the final counter lands in a hole in the player's row containing three counters, four with the addition of the final counter, these are captured. Play continues until one player cannot move or the board position repeats. When one player cannot move, the other player captures the remaining counters. The player with the most counters wins.
(game "Unnee Tugalluulax" (players 2) (equipment {(mancalaBoard 2 6 None (track "Track" "5,W,N,E" true)) (regions P1 (sites Bottom)) (regions P2 (sites Top)) (piece "Seed" Shared) (hand Each)}) (rules (start (set Count 6 (sites Track))) (play (move Select (from (sites Mover) (< 0 (count (from )))) (then (sow (= (count (to )) 4) (fromTo (from (to )) (to (handSite Mover)) (count (to ))))))) (end (if (or (no Moves Mover) (is Cycle)) (byScore {(score P1 (+ (count Cell (handSite P1)) (count (sites P1)))) (score P2 (+ (count Cell (handSite P2)) (count (sites P2))))})))))

Play begins with seven counters in each hole. Players begin by picking up the counters in one of their holes and sowing them anti-clockwise. If the final counter lands in an opponent's hole or the rightmost hole belonging to the player sowing, having dropped counters in the opponent's holes making them contain two, four, or six counters, the contents of those holes are captured. The player who has the most counters at the end of the game wins.
(game "Kara" (players 2) (equipment {(mancalaBoard 2 3 (track "Track" "1,E,N,W" true)) (regions P1 (sites Bottom)) (regions P2 (sites Top)) (map {(pair P1 FirstSite) (pair P2 LastSite)}) (map "RightHole" {(pair P1 3) (pair P2 4)}) (piece "Seed" Shared)}) (rules (start (set Count 7 (sites Track))) (play (move Select (from (sites Mover) (> (count (from )) 0)) (then (sow (and (is In (count (to )) (sites {2 4 6})) (is In (to ) (union (sites Next) (sites {(mapEntry "RightHole" (mover ))})))) (fromTo (from (to )) (to (mapEntry (mover ))) (count (to ))))))) (end (if (no Moves Mover) (byScore {(score P1 (+ (count (mapEntry P1)) (count (sites P1)))) (score P2 (+ (count (mapEntry P2)) (count (sites P2))))})))))

Two rows of ten holes Four counters in each hole First play must be from the rightmost hole.
(game "Dabuda" (players 2) (equipment {(mancalaBoard 2 10 None (track "Track" "0,E,N,W" true)) (regions "Home" P1 (sites Bottom)) (regions "Home" P2 (sites Top)) (regions "RightMost" P1 (sites {6 7 8 9})) (regions "RightMost" P2 (sites {10 11 12 13})) (piece "Seed" Shared) (hand Each)}) (rules (start (set Count 4 (sites Track))) {(phase "Rightmost" (play (move Select (from (if (is Prev Mover) (sites {(last To true)}) (sites Mover "RightMost")) (> (count (from )) 0)) (then (sow (if (and {(is In (to ) (sites Mover "Home")) (= (count (to )) 1) (> (count (if (is Mover P1) (+ (to ) 10) (- (to ) 10))) 0)}) (and (fromTo (from (if (is Mover P1) (+ (to ) 10) (- (to ) 10))) (to (handSite Mover)) (count (if (is Mover P1) (+ (to ) 10) (- (to ) 10)))) (fromTo (from (to )) (to (handSite Mover)) 1)) (if (> (count (to )) 1) (moveAgain ))))))) (nextPhase (= (count Turns) 2) "HomePhase")) (phase "HomePhase" (play (move Select (from (if (is Prev Mover) (sites {(last To true)}) (sites Mover "Home")) (> (count (from )) 0)) (then (sow (if (and {(is In (to ) (sites Mover "Home")) (= (count (to )) 1) (> (count (if (is Mover P1) (+ (to ) 10) (- (to ) 10))) 0)}) (and (fromTo (from (if (is Mover P1) (+ (to ) 10) (- (to ) 10))) (to (handSite Mover)) (count (if (is Mover P1) (+ (to ) 10) (- (to ) 10)))) (fromTo (from (to )) (to (handSite Mover)) 1)) (if (> (count (to )) 1) (moveAgain ))))))))} (end (if (no Moves Mover) (byScore {(score P1 (+ (count Cell (handSite P1)) (count (sites P1 "Home")))) (score P2 (+ (count Cell (handSite P2)) (count (sites P2 "Home"))))})))))

2x6 board. Six counters in each hole. Players take the contents of one of their holes and sow in an anti-clockwise direction. When the final counter of a sowing lands in a hole, making it contain two, four, or six counters,  these counters are taken. If the second to last hole also contains two, four, or six counters, these are also taken, continuing in an unbroken line until a hole with containing a number of counters other than two, four, or six. The game continues until all of the counters have been captured. The player who captured the most counters wins.
(game "Mankala" (players 2) (equipment {(mancalaBoard 2 6 None (track "Track" "0,E,N,W" true)) (regions P1 (sites Bottom)) (regions P2 (sites Top)) (piece "Seed" Shared) (hand Each)}) (rules (start (set Count 6 (sites Track))) (play (move Select (from (sites Mover) (< 0 (count (from )))) (then (sow (or {(= (count (to )) 2) (= (count (to )) 4) (= (count (to )) 6)}) (fromTo (from (to )) (to (handSite Mover)) (count (to ))) true)))) (end (if (and (no Moves Next) (no Moves Mover)) (byScore {(score P1 (count Cell (handSite P1))) (score P2 (count Cell (handSite P2)))})))))

2x5 board. Play begins with five counters in each hole. Players sow from any one of their holes. Sowing can occur in the following directions: From the leftmost two holes: clockwise. From the rightmost two holes: anti-clockwise. from the center hole: the player may choose either direction. If the final counter falls into a hole in the opponent's row containing either one or three counters, making it now contain two or four, these are taken. If the holes before them also contain two or four, in an unbroken sequence, they may all be captured. Single counters cannot be sown. When neither player can move, the single counters in each player's rows are taken by the player belonging to those rows. The player with the most counters wins.
(game "Um el-Bagara" (players 2) (equipment {(mancalaBoard 2 5 None {(track "TrackCCW" "0,E,N,W" true) (track "TrackCW" "4,W,N,E" true)}) (regions "Home1" P1 (sites Bottom)) (regions "Home2" P2 (sites Top)) (regions "Left1" P1 (sites {0 1 2})) (regions "Left2" P2 (sites {9 8 7})) (regions "Right1" P1 (sites {2 3 4})) (regions "Right2" P2 (sites {7 6 5})) (piece "Seed" Shared) (hand Each)}) (rules (start (set Count 5 (sites Track))) (play (or (move Select (from (sites Mover "Left") (> (count (from )) 1)) (then (sow "TrackCW" (and (is In (to ) (sites Next "Home")) (or (= (count (to )) 2) (= (count (to )) 4))) (fromTo (from (to )) (to (handSite Mover)) (count (to ))) true))) (move Select (from (sites Mover "Right") (> (count (from )) 1)) (then (sow "TrackCCW" (and (is In (to ) (sites Next "Home")) (or (= (count (to )) 2) (= (count (to )) 4))) (fromTo (from (to )) (to (handSite Mover)) (count (to ))) true))))) (end (if (all Passed) (byScore {(score P1 (+ (count Cell (handSite P1)) (count (sites P1)))) (score P2 (+ (count Cell (handSite P2)) (count (sites P2))))})))))

2x7 board, with two stores. Seven counters per hole. The first player may choose the direction of sowing, which must be maintained throughout the game. Sowing includes the player's store, which is the store following the last hole in the player's row, according to the direction of sowing. When the final counter of a sowing falls into an occupied hole, the counters in that hole are picked up and sowing continues. When the final counter of a sowing falls into an empty hole, that counter is captured along with any counters in the hole in the row opposite it. When the final counter falls into the player's store, the turn ends. The player who first captures half of the counters wins.
        
(game "Chonka" (players 2) (equipment {(mancalaBoard 2 7 {(track "Track1" "1,E,ENE,WNW,W" true P1) (track "Track2" "1,E,N,W,WSW" true P2)}) (piece "Seed" Shared) (regions P1 (sites Bottom)) (regions P2 (sites Top)) (map {(pair P1 LastSite) (pair P2 FirstSite)})}) (rules (start (set Count 7 (union (sites P1) (sites P2)))) (play (move Select (from (if (is Prev Mover) (sites {(last To true)}) (sites Mover)) (> (count (from )) 0)) (then (sow (if (!= (to ) (mapEntry Mover)) (if (> (count (to )) 1) (moveAgain ) (and (fromTo (from (if (is In (to ) (sites Bottom)) (+ (to ) 7) (- (to ) 7))) (to (mapEntry Mover)) (count (if (is In (to ) (sites Bottom)) (+ (to ) 7) (- (to ) 7)))) (fromTo (from (to )) (to (mapEntry Mover)) (count (to )))))))))) (end (if (<= (/ (* 7 (- (count Sites (sites Board)) 2)) 2) (count (mapEntry Mover))) (result Mover Win)))))

2x6 board. Four counters per hole. Each player's rightmost hole is their \"hogon,\" from which they cannot sow, except they must when it reaches fourteen counters. Sowing occurs in an anti-clockwise direction. Sowing from a hole with a single counter is forbidden. When the older player has only single counters in their regular holes, they pass. When the younger player has only single counters in their regular holes, they sow from their hogon. When a player must sow from their hogon and the opponent's holes only contain single counters, the player picks these up and sows them along with the contents of the hogon. When one player only has single counters in their row, the opponent wins. 
(game "Koro" (players 2) (equipment {(mancalaBoard 2 6 None (track "Track" "0,E,N,W" true)) (piece "Seed" Shared) (hand Each) (map "Hogon" {(pair P1 5) (pair P2 6)}) (regions P1 (sites Bottom)) (regions P2 (sites Top))}) (rules (start (set Count 4 (sites Track))) (play (if (<= 14 (count (mapEntry "Hogon" Mover))) (move Select (from (mapEntry "Hogon" Mover)) (then (sow ))) (if (all Sites (difference (sites Mover) (mapEntry "Hogon" Mover)) (>= 1 (count (site )))) (if (is Mover P1) (move Pass) (do (if (all Sites (difference (sites Next) (mapEntry "Hogon" Next)) (>= 1 (count (site )))) (forEach Site (difference (sites Next) (mapEntry "Hogon" Next)) (if (is Occupied (site )) (fromTo (from (site )) (to (mapEntry "Hogon" Mover)))))) (move Select (from (mapEntry "Hogon" Mover) (< 1 (count (from )))) (then (sow ))))) (move Select (from (difference (sites Mover) (mapEntry "Hogon" Mover)) (< 1 (count (from )))) (then (sow )))))) (end (forEach Player (all Sites (sites Player) (>= 1 (count (site )))) (result Player Loss)))))

2x10-20 board, 10 most common. Opening arrangement: Each player has this opening arrangement (number of counters in each hole, starting from the leftmost hole): 5-5-5-5-5-5-5-1-1-5-1-0-0-0-0-0-0-0-0-0. Boards have even numbers of holes, and the farthest left and farthest right holes are eliminated in succession from this opening arrangement to make smaller boards. The challenger concedes the first move. Opening phase: Player 1 removes the counters in the opponent's final four holes with counters and conceals them from the opponent. Player 2 removes the same counters, except leaving the single counter in the opponent's final hole with counters. Players take the counters from any of their holes and sow them in an anti-clockwise direction. When sowing, the first counter is dropped into the hole from which it just came, unless it is a single counter. If the last counter lands in the opponent's row and the opposite hole contains one, three, or five counters, theses are taken and added to the concealed store. In place of a move, a player may add some or all of the counters from the concealed store, sowing from the leftmost hole in their row. If the sowing reaches the rightmost hole in this row, sowing continues from the leftmost hole rather than continuing into the opponent's rows.
(game "Okwe (Nigeria)" (players 2) (equipment {(mancalaBoard 2 10 None {(track "Track" "0,E,N,W" true) (track "TrackSpecialHome1" "0,E" true P1) (track "TrackSpecialHome2" "19,W" true P2)}) (regions "OpeningRegion" P1 (sites {14 15 16 17})) (regions "OpeningRegion" P2 (sites {2 3 4})) (piece "Seed" Shared) (hand Each) (map "LeftMost" {(pair P1 0) (pair P2 (- (* 10 2) 1))}) (regions "Home" P1 (sites Bottom)) (regions "Home" P2 (sites Top))}) (rules (start {(set Count 5 (sites {0 1 4 19 18 15})) (set Count 1 (sites {2 3 5 17 16 14}))}) {(phase "Opening" (play (move (from (sites Mover "OpeningRegion") (is Occupied (from ))) (to (handSite Mover)) (count (from )))) (nextPhase (all Sites (union (sites P1 "OpeningRegion") (sites P2 "OpeningRegion")) (is Empty (site ))) "Sowing")) (phase "Sowing" (play (or (move Select (from (sites Mover "Home") (is Occupied (from ))) (then (sow "Track" (if (and (is In (to ) (sites Next "Home")) (or {(= 1 (count (if (is In (to ) (sites Bottom)) (+ (to ) 10) (- (to ) 10)))) (= 3 (count (if (is In (to ) (sites Bottom)) (+ (to ) 10) (- (to ) 10)))) (= 5 (count (if (is In (to ) (sites Bottom)) (+ (to ) 10) (- (to ) 10))))})) (fromTo (from (if (is In (to ) (sites Bottom)) (+ (to ) 10) (- (to ) 10))) (to (handSite Mover)) (count (if (is In (to ) (sites Bottom)) (+ (to ) 10) (- (to ) 10))))) (< 1 (count (from )))))) (if (is Occupied Cell (handSite Mover)) (do (set Var "NumToSow" (count Cell (handSite Mover))) (move (from (handSite Mover)) (to (mapEntry "LeftMost" Mover)) (count Cell (handSite Mover)) (then (and (sow (var "NumToSow") "TrackSpecialHome" (mover ) true) (set Var "NumToSow" 0)))))))))} (end (if (all Sites (sites Board) (= 0 (count (site )))) {(if (is Empty (handSite P1)) (result P2 Win)) (if (is Empty (handSite P2)) (result P1 Win))}))))

Two rows of seven holes. Twelve counters in each hole, except in the central hole of each row, one of which has one counter and the other is empty. Players do not own a row of holes, rather each player owns the six holes on one side of the central holes. Sowing occurs in an anti-clockwise direction. Neither player may begin sowing from the central holes. When sowing ends, if the next hole after the hole in which the final counter was placed is occupied, these counters are picked up and sown. If this hole is empty, the counters in the hole opposite it are captured. Play continues until all of the counters have been captured. The player who captures the most pieces wins.
(game "Kanji Guti" (players 2) (equipment {(mancalaBoard 2 7 None (track "Track" "0,E,N,W" true)) (piece "Seed" Shared) (hand Each) (regions "Home" P1 (expand (sites Left) 2)) (regions "Home" P2 (expand (sites Right) 2))}) (rules (start {(set Count 1 (coord "D1")) (set Count 12 (difference (sites Track) (sites Centre)))}) (play (move Select (from (if (is Prev Mover) (sites {(trackSite Move (last To true) 1)}) (sites Mover)) (< 0 (count (from )))) (then (sow (if (> (count (trackSite Move (to ) 1)) 0) (moveAgain ) (if (> (count (if (is In (trackSite Move (to ) 1) (sites Bottom)) (+ (trackSite Move (to ) 1) 7) (- (trackSite Move (to ) 1) 7))) 0) (fromTo (from (if (is In (trackSite Move (to ) 1) (sites Bottom)) (+ (trackSite Move (to ) 1) 7) (- (trackSite Move (to ) 1) 7))) (to (handSite Mover)) (count (if (is In (trackSite Move (to ) 1) (sites Bottom)) (+ (trackSite Move (to ) 1) 7) (- (trackSite Move (to ) 1) 7)))))))))) (end (if (= 0 (count (sites Track))) (byScore {(score P1 (count Cell (handSite P1))) (score P2 (count Cell (handSite P2)))})))))

2x6 board with two stores. Four counters in each hole. Play may begin from any of the player's holes. Counters are sown anti-clockwise. If the last counter falls into an empty hole or a hole in either row, making that hole contain four counters, play ends, and the four counters are taken. Also, if at any time during the sowing a hole contains four counters, the player on whose row this occurs takes those counters. Otherwise, the player lifts the counters in the hole in which the final counter lands and continues sowing. Play ends when one player can no longer move. The player with the most counters wins.
(game "Obridje" (players 2) (equipment {(mancalaBoard 2 6 (track "Track" "1,E,N,W" true)) (piece "Seed" Shared) (regions P1 (sites Bottom)) (regions P2 (sites Top)) (map {(pair P1 FirstSite) (pair P2 LastSite)})}) (rules (start (set Count 4 (sites Track))) (play (move Select (from (if (is Prev Mover) (sites {(var "Replay")}) (sites Mover)) (> (count (from )) 0)) (then (do (set Var "NumSowed" (count (last To))) (sow (if (and (!= 4 (count (to ))) (< 1 (count (to )))) (and (moveAgain ) (set Var "Replay" (to ))))) (then (and (forEach Site (sites Track (last From) (trackSite Move (last From) "Track" (var "NumSowed"))) (if (= 4 (count (site ))) (fromTo (from (site )) (to (if (is In (to ) (sites P1)) (mapEntry P1) (mapEntry P2))) 4))) (set Var "NumSowed" 0))))))) (end (if (no Moves Next) (byScore {(score P1 (+ (count (mapEntry P1)) (count (sites P1)))) (score P2 (+ (count (mapEntry P2)) (count (sites P2))))})))))

2x9 board, with two stores in between the holes. Players own the store to their right. Nine counters in each hole. A player takes all of the counters from one of the holes in their row and sows them anti-clockwise. The first stone is dropped into the hole that was just emptied, except when there is only one stone, in which case it is moved to the next hole. If the last counter falls into an opponent's hole making this hole have an even number of counters, these counters are captured and placed in the player's store. Otherwise, the turn ends. When the last counter falls into an opponent's hole, making it contain three counters, it is made into a \"tuzduk.\" A player can only create one tuzduk per game. When a player creates a tuzduk, the opponent cannot create a tuzduk in the same hole in the player's row, with respect to the index of the hole in the respective player's hole. Stones that fall into a tuzduk are captured by its owner. The game ends when a player cannot move because all of the holes, except the tuzduk, are empty. The other player claims the remaining counters and the player with the most counters wins.
(game "Toguz Kumalak" (players 2) (equipment {(board (merge {(rectangle 1 9) (shift 2.5 1.0 (rectangle 1 1)) (shift 5.5 1.0 (rectangle 1 1)) (shift 0.0 2.0 (rectangle 1 9))}) (track "Track" "0,E,19,W" true) Vertex) (regions P1 (sites Bottom)) (regions P2 (sites Top)) (map {(pair P1 9) (pair P2 10)}) (piece "Seed" Shared)}) (rules (start (set Count 9 (sites Track))) (play (move Select (from (sites Mover) (> (count (from )) 0)) (then (sow (if (and (is In (to ) (sites Next)) (is Even (count (to )))) (fromTo (from (to )) (to (mapEntry (mover ))) (count (to ))) (if (and {(is In (to ) (sites Next)) (= (count (to )) 3) (< (value Player Mover) 0) (if (< (value Player Next) 0) true (!= (+ (to ) (value Player Next)) 19))}) (and (set Value Mover (to )) (fromTo (from (to )) (to (mapEntry (mover ))) (count (to )))))) (!= (count (last From)) 1) (then (and (if (and (> (value Player P1) 0) (> (count (value Player P1)) 0)) (fromTo (from (value Player P1)) (to (mapEntry P1)) (count (value Player P1)))) (if (and (> (value Player P2) 0) (> (count (value Player P2)) 0)) (fromTo (from (value Player P2)) (to (mapEntry P2)) (count (value Player P2)))))))))) (end (if (no Moves Mover) (byScore {(score P1 (+ (count (mapEntry P1)) (count (sites P1)))) (score P2 (+ (count (mapEntry P2)) (count (sites P2))))})))))

2x6 board. Four counters in each hole. Sowing occurs in a clockwise direction. When the final counter of a sowing lands in an occupied hole, the contents of the hole are picked up and sowing continues. If this occupied hole is in the opponent's row and is made to contain four with the final counter, this hole and the one opposite it are captured, the counters remaining in the holes. Players may not sow from these holes. If on a subsequent turn the final counter of a sowing falls into an opponent's captured hole, one counter from the hole is captured, as well as the final counter of the sowing, and the turn ends. When the final counter of a sowing lands in an empty hole, the turn ends. Play continues until one of the players can no longer move, the opponent taking any remaining counters in free holes on their side of the board and each player taking the counters in their captured holes. A new round begins. Players attempt to fill their holes with four counters each. If a player has two extra counters, they may loan them to the other player, to be repaid when they can in a subsequent round. If a player has one extra counter, it is surrendered to the opponent. The player with more counter would only fill as many hole as the opponent is able to fill, retaining their extra counters for future rounds. Play continues until one player cannot fill any holes.
(game "Leyla" (players 2) (equipment {(mancalaBoard 2 6 None (track "Track" "5,W,N,E" true)) (piece "Seed" Shared) (regions P1 (sites Bottom)) (regions P2 (sites Top)) (hand Each)}) (rules (start (set Count 4 (sites Track))) {(phase "Sowing" (play (or {(move Select (from (if (is Prev Mover) (sites {(var "Replay")}) (sites Mover)) (and (is Occupied (from )) (= 0 (state (from ))))) (then (sow (if (!= 0 (state (to ))) (if (= (next ) (state (to ))) (and (fromTo (from (to )) (to (handSite Mover)) (min 2 (count (to )))) (set State (to ) (next )))) (if (and (is In (to ) (sites Next)) (= 4 (count (to )))) (and (set State (to ) (mover )) (set State (if (is In (to ) (sites Bottom)) (+ (to ) 6) (- (to ) 6)) (mover ))) (if (< 1 (count (to ))) (and (moveAgain ) (set Var "Replay" (to )))))))))} (then (if (and (not (is Next Mover)) (or (all Sites (sites P1) (or (!= 0 (state (site ))) (is Empty (site )))) (all Sites (sites P2) (or (!= 0 (state (site ))) (is Empty (site )))))) (and {(forEach Site (sites P1) (if (= 0 (state (site ))) (fromTo (from (site )) (to (handSite P1)) (count (site ))))) (forEach Site (sites P2) (if (= 0 (state (site ))) (fromTo (from (site )) (to (handSite P2)) (count (site ))))) (forEach Site (sites Board) (if (= (state (site )) P1) (and (fromTo (from (site )) (to (handSite P1)) (count (site ))) (set State (site ) 0)) (if (= (state (site )) P2) (and (fromTo (from (site )) (to (handSite P2)) (count (site ))) (set State (site ) 0)))))}))))) (end (if (no Pieces All (sites Board)) {(if (> 3 (count Cell (handSite P1))) (result P2 Win)) (if (> 3 (count Cell (handSite P2))) (result P1 Win))})) (nextPhase (no Pieces All (sites Board)) "BetweenRounds")) (phase "BetweenRounds" (play (if (<= 4 (count Cell (handSite Mover))) (move (from (handSite Mover)) (to (sites Mover) (is Empty (to ))) 4 (then (if (= 1 (count Cell (handSite Mover))) (fromTo (from (handSite Mover)) (to (handSite Next)) 1) (if (= 2 (count Cell (handSite Mover))) (fromTo (from (handSite Next)) (to (handSite Mover)) 2) (if (= 3 (count Cell (handSite Mover))) (fromTo (from (handSite Next)) (to (handSite Mover)) 1)))))))) (nextPhase (and (= (count Sites (forEach (sites P1) (is Occupied (site )))) (count Sites (forEach (sites P2) (is Occupied (site ))))) (or (is Empty (handSite P1)) (is Empty (handSite P2)))) "Sowing"))}))

2x6 board, with a storage hole on either end. The game starts with four counters in each hole. A player picks up all of the counters in one of the holes in their row and sows them one-by-one in a counterclockwise direction in consecutive holes from the hole the pieces originated. The starting hole is always left empty, even if a player sows in a complete circuit of the board, the original house is skipped and sowing continues in the next hole after it. Players capture counters when the final counter is sown in the opponent's row and the hole containing it has two or three counters (counting the counter just dropped into it). If the hole before it also has two or three counters, these are also captured and so on until reaching a hole without two or three counters or one not belonging to the opponent. A move which would capture all of the opponent's counters is not allowed. If an opponent's holes are all empty, the other player must make a move placing counters in the opponent's row. If not possible, the player captures all the counters in their row. Play continues until all of the counters are captured. The player who has captured the most counters wins. If the game continues in a repeating loop, the players can agree to end the game and capture the counters remaining in their row.
(game "Oware" (players 2) (equipment {(mancalaBoard 2 6 (track "Track" "1,E,N,W" true)) (regions P1 (sites Bottom)) (regions P2 (sites Top)) (map {(pair P1 FirstSite) (pair P2 LastSite)}) (piece "Seed" Shared)}) (rules (start (set Count 4 (sites Track))) (play (if (is Proposed "End") (or (move Vote "End") (move Vote "No")) (or (if (is Cycle) (move Propose "End")) (do (move Select (from (sites Mover) (< 0 (count (from )))) (then (sow (and (is In (to ) (sites Next)) (or (= (count (to )) 2) (= (count (to )) 3))) (fromTo (from (to )) (to (mapEntry (mover ))) (count (to ))) false true))) (< 0 (count (sites Next))))))) (end (if (or (no Moves Mover) (is Decided "End")) (byScore {(score P1 (+ (count (mapEntry P1)) (count (sites P1)))) (score P2 (+ (count (mapEntry P2)) (count (sites P2))))})))))

Play begins with each hole (except the large holes on the ends) holding 3 counters (usually seeds or stones), though 2 or 5 are also acceptable. A player picks up all of the counters in one of the holes on their side, depositing one in each consecutive hole in a counterclockwise manner. If the last counter is placed in a hole with one less than the original starting number of counters (thus making the number of counters equal to the starting number), the player \"makes a fish\" (ára ot-tjin) and captures the pieces in that hole. Sowing cannot begin from.a hole containing a single counter. Play continues until one player cannot play, at which point their opponent captures the remaining counters on the board. The player with the most captured counters wins. If both players have only single counters in their holes, they must play again.
(game "Aw-li On-nam Ot-tjin" (players 2) (equipment {(mancalaBoard 2 9 (track "Track" "1,E,N,W" true)) (regions P1 (sites Bottom)) (regions P2 (sites Top)) (map {(pair P1 FirstSite) (pair P2 LastSite)}) (piece "Seed" Shared)}) (rules (start (set Count 3 (sites Track))) (play (move Select (from (sites Mover) (> (count (from )) 1)) (then (sow (= (count (to )) 3) (fromTo (from (to )) (to (mapEntry (mover ))) (count (to ))))))) (end (if (no Moves Mover) {(if (no Moves Next) (result Mover Draw)) (if (is Mover P1) (byScore {(score P1 (count (mapEntry P1))) (score P2 (+ {(count (mapEntry P1)) (count (sites P1)) (count (sites P2))}))})) (if (is Mover P2) (byScore {(score P1 (+ {(count (mapEntry P2)) (count (sites P2)) (count (sites P1))})) (score P2 (count (mapEntry P2)))}))}))))

2x6 board with two stores. Four counters in each hole. Sowing occurs in an anti-clockwise direction. When the final counter lands in a hole containing one or two counters, thus making it contain two or three counters, these are captured. When this capture is made, other holes with two or three counters in them, in an uninterrupted sequence behind the hole from which the first capture was made, are captured. The player who captures the most counters wins.
(game "Adidada" (players 2) (equipment {(mancalaBoard 2 6 (track "Track" "1,E,N,W" true)) (regions P1 (sites Bottom)) (regions P2 (sites Top)) (map {(pair P1 FirstSite) (pair P2 LastSite)}) (piece "Seed" Shared)}) (rules (start (set Count 4 (sites Track))) (play (move Select (from (sites Mover) (< 0 (count (from )))) (then (sow (and (is In (to ) (sites Next)) (or (= (count (to )) 2) (= (count (to )) 3))) (fromTo (from (to )) (to (mapEntry (mover ))) (count (to ))) true)))) (end (if (no Moves Mover) (byScore {(score P1 (+ (count Cell (mapEntry P1)) (count (sites P1)))) (score P2 (+ (count Cell (mapEntry P2)) (count (sites P2))))})))))

2x6 board. Six counters in each hole. A player picks up all of the counters in one of the holes in their row and sows them one-by-one in a clockwise direction in consecutive holes from the hole the pieces originated. The starting hole is always left empty, even if a player sows in a complete circuit of the board, the original house is skipped and sowing continues in the next hole after it. Players capture counters when the final counter is sown in the opponent's row and the hole containing it has two or three counters (counting the counter just dropped into it). If the hole before it also has two or three counters, these are also captured and so on until reaching a hole without two or three counters or one not belonging to the opponent. A move which would capture all of the opponent's counters is not allowed. If an opponent's holes are all empty, the other player must make a move placing counters in the opponent's row. If not possible, the player captures all the counters in their row. The player who has captured the most counters wins. If the game continues in a repeating loop, the players can agree to end the game and capture the counters remaining in their row.
(game "Woli" (players 2) (equipment {(mancalaBoard 2 6 None (track "Track" "5,W,N,E" true)) (regions P1 (sites Bottom)) (regions P2 (sites Top)) (piece "Seed" Shared) (hand Each)}) (rules (start (set Count 6 (sites Track))) (play (if (is Proposed "End") (or (move Vote "End") (move Vote "No")) (or (if (is Cycle) (move Propose "End")) (do (move Select (from (sites Mover) (< 0 (count (from )))) (then (sow (and (is In (to ) (sites Next)) (or (= (count (to )) 2) (= (count (to )) 3))) (fromTo (from (to )) (to (handSite Mover)) (count (to ))) false true))) (< 0 (count (sites Next))))))) (end (if (or (no Moves Mover) (is Decided "End")) (byScore {(score P1 (+ (count Cell (handSite P1)) (count (sites P1)))) (score P2 (+ (count Cell (handSite P2)) (count (sites P2))))})))))

2x20 board. Opening arrangement: Each player has this opening arrangement (number of counters in each hole, starting from the leftmost hole): 5-5-5-5-5-5-5-1-1-5-2-1-0-0-0-0-0-0-0-0. Opening phase: Players remove the counters in their final four holes with counters and conceals them from the opponent. Players take the counters from any of their holes and sow them in an anti-clockwise direction. When sowing, the first counter is dropped into the hole from which it just came, unless it is a single counter. If the last counter lands in the opponent's row and this hole contains one or three, counters, these are taken and added to the concealed store. Also, if the hole from which a capture was made is preceded by an unbroken sequence of holes with one or three counters, these are also taken. In place of a move, a player may add all of the counters from the concealed store, sowing from the leftmost hole in their row. If the sowing reaches the rightmost hole in this row, sowing may continue from the leftmost hole or may continue into the opponent's row. If the player continues into the opponent's row, subsequent holes after the one in which the final counter was dropped are captured if they contain one or three counters, in an unbroken sequence.
(game "Azigo" (players 2) (equipment {(mancalaBoard 2 20 None {(track "Track" "0,E,N,W" true) (track "TrackSpecialHome1" "0,E" true P1) (track "TrackSpecialHome2" "39,W" true P2)}) (piece "Seed" Shared) (hand Each) (map "LeftMost" {(pair P1 0) (pair P2 39)}) (regions "OpeningRegion" P1 (sites {8 9 10 11})) (regions "OpeningRegion" P2 (sites {28 29 30 31})) (regions P1 (sites Bottom)) (regions P2 (sites Top))}) (rules (start {(set Count 5 (sites {0 1 2 3 4 5 6 9 39 38 37 36 35 34 33 30})) (set Count 1 (sites {7 8 11 32 31 28})) (set Count 2 (sites {10 29}))}) {(phase "Opening" (play (move (from (sites Mover "OpeningRegion") (is Occupied (from ))) (to (handSite Mover)) (count (from )))) (nextPhase Mover (all Sites (sites Mover "OpeningRegion") (is Empty (site ))) "Sowing")) (phase "Sowing" (play (or (move Select (from (sites Mover) (is Occupied (from ))) (then (sow "Track" (if (and (is In (to ) (sites Next)) (or (= 2 (count (to ))) (= 4 (count (to ))))) (fromTo (from (to )) (to (handSite Mover)) (count (to )))) (< 1 (count (from ))) true))) (if (is Occupied Cell (handSite Mover)) (or (do (set Var "NumToSow" (count Cell (handSite Mover))) (move (from (handSite Mover)) (to (mapEntry "LeftMost" Mover)) (count Cell (handSite Mover)) (then (and (sow (var "NumToSow") "Track" (and (is In (to ) (sites Next)) (or (= 2 (count (to ))) (= 4 (count (to ))))) (if (and (is In (to ) (sites Next)) (or (= 2 (count (to ))) (= 4 (count (to ))))) (fromTo (from (to )) (to (handSite Mover)) (count (to )))) true true) (set Var "NumToSow" 0))))) (do (set Var "NumToSow" (count Cell (handSite Mover))) (move (from (handSite Mover)) (to (mapEntry "LeftMost" Mover)) (count Cell (handSite Mover)) (then (and (sow (var "NumToSow") "TrackSpecialHome" (mover ) true) (set Var "NumToSow" 0))))))))))} (end (if (no Moves Mover) (byScore {(score P1 (+ (count Cell (handSite P1)) (count (sites P1)))) (score P2 (+ (count Cell (handSite P2)) (count (sites P2))))})))))

Pieces move one space orthogonally. Pieces are captured through the custodial capture move, but a piece moving in between two other pieces is not automatically captured. The goal of the player with the king is to reach the edge of the board. The goal of the other player is to capture the king.
(game "ArdRi" (players 2) (equipment {(board (square 7)) (piece "Thrall" P1 (move Step Orthogonal (to (and (not (is In (to ) (sites Centre))) (is Empty (to )))) (then (or {(custodial (from (last To)) Orthogonal (between (max 1) (= (what (between )) (id "Thrall2" Next)) (apply (remove (between )))) (to (is Friend (who (to ))))) (surround (from (last To)) Orthogonal (between (= (what (between )) (id "Jarl2")) (apply (trigger "Surrounded" P2))) (to (or (is Friend (who (to ))) (is In (to ) (sites Centre)))))})))) (piece "Thrall" P2 (move Step Orthogonal (to (and (not (is In (to ) (sites Centre))) (is Empty (to )))) (then (custodial (from (last To)) Orthogonal (between (max 1) (= (what (between )) (id "Thrall1" Next)) (apply (remove (between )))) (to (is Friend (who (to )))))))) (piece "Jarl" P2 (move Step Orthogonal (to (is Empty (to ))) (then (custodial (from (last To)) Orthogonal (between (max 1) (= (what (between )) (id "Thrall1" Next)) (apply (remove (between )))) (to (is Friend (who (to ))))))))}) (rules (start {(place "Thrall1" {"C1" "D1" "E1" "D2" "A3" "A4" "A5" "B4" "G3" "G4" "G5" "F4" "D6" "C7" "D7" "E7"}) (place "Thrall2" (difference (expand (sites Centre)) (sites Centre))) (place "Jarl2" (centrePoint ))}) (play (forEach Piece)) (end {(if (is Within (id "Jarl2") (sites Outer)) (result P2 Win)) (if (is Triggered "Surrounded" P2) (result P1 Win))})))

8x8 board. Sixteen pieces per player. The pieces begin on the first and third rank or squares with respect to each player. Pieces move orthogonally any distance. Pieces are captured when surrounded on both sides by an enemy piece. Enemy pieces may also be taken if a piece moves into a space such that the enemy pieces are on either side of it. The goal is to capture all of the enemy's pieces.
(game "Maak Yek" (players 2) (equipment {(board (square 8)) (piece "Marker" Each (move Slide Orthogonal (then (and (intervene (from (last To)) Orthogonal (to (is Enemy (who (to ))) (apply (remove (to ))))) (custodial (from (last To)) Orthogonal (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Friend (who (to )))))))))}) (rules (start {(place "Marker1" (union (sites Row 0) (sites Row 2))) (place "Marker2" (union (sites Row 5) (sites Row 7)))}) (play (forEach Piece)) (end (if (no Pieces Next) (result Next Loss)))))

5x5 board. Twelve pieces per player. Players alternate turns placing two pieces on an empty space on the board, except in the central space. Captures cannot be made during the placement phase. When all of the pieces have been placed, players alternate turns moving a piece orthogonally any distance. When an opponent's piece is between two of a player's pieces, it is captured. If a player is unable to make a move, they pass their turn and the opponent plays again. The player who captures all of the opponent's pieces wins.
(game "Kharebga (5x5)" (players 2) (equipment {(board (square 5)) (piece "Marker" Each (move Slide Orthogonal (then (custodial (from (last To)) Orthogonal (between (max 1) (is Enemy (who (between ))) (apply (remove (between )))) (to (is Friend (who (to )))))))) (hand Each)}) (rules (start (place "Marker" "Hand" 12)) {(phase "Placement" (play (move (from (handSite Mover)) (to (difference (sites Board) (centrePoint )) (is Empty (to ))) (then (if (not (is Prev Mover)) (moveAgain ))))) (nextPhase Mover (is Empty (handSite Mover)) "Capture")) (phase "Capture" (play (forEach Piece)))} (end (if (no Pieces Next) (result Next Loss)))))

7x7 board. One player plays as the king and four defenders, the other as eight attackers. The king begins in the center piece, with the defenders placed in the adjacent orthogonal squares. The attackers are placed two in each square extending in the orthogonal direction from the defenders' positions. Attackers move first. Pieces move any distance orthogonally. No piece may land on the central square. Only the king may enter the corner squares. A piece is captured when it is surrounded orthogonally on two sides by an opposing piece. Pieces may also be captured between the central square and an opponent or a corner square and the opponent. When in the central square, the king is captured by surrounding it on four orthogonal sides. When adjacent to the central square, the king is captured by surrounding it on the three other orthogonally adjacent sides. Otherwise, the king is captured as any other piece. The king wins by moving to a corner square. The attackers win by capturing the king.
(game "Brandub" (players 2) (equipment {(board (square 7)) (regions "Fortresses" (sites Corners)) (piece "Thrall" P1 (move Slide Orthogonal (to (apply (not (is In (to ) (union (sites Centre) (sites "Fortresses")))))) (then (or {(custodial (from (last To)) Orthogonal (between (max 1) (= (what (between )) (id "Thrall2")) (apply (remove (between )))) (to (or {(is Friend (who (to ))) (is In (to ) (sites "Fortresses")) (and (is In (to ) (sites Centre)) (is Empty (to )))}))) (surround (from (last To)) Orthogonal (between (and (= (what (between )) (id "Jarl" P2)) (is In (between ) (expand (centrePoint ) Orthogonal))) (apply (trigger "Surrounded" P2))) (to (or (is Friend (who (to ))) (is In (to ) (sites Centre))))) (custodial (from (last To)) Orthogonal (between (max 1) (and (= (what (between )) (id "Jarl" P2)) (not (is In (between ) (expand (centrePoint ) Orthogonal)))) (apply (trigger "Surrounded" P2))) (to (or (is Friend (who (to ))) (is In (to ) (sites "Fortresses")))))})))) (piece "Thrall" P2 (move Slide Orthogonal (to (apply (not (is In (to ) (union (sites Centre) (sites "Fortresses")))))) (then (custodial (from (last To)) Orthogonal (between (max 1) (= (what (between )) (id "Thrall1")) (apply (remove (between )))) (to (or {(is Friend (who (to ))) (is In (to ) (sites "Fortresses")) (and (is In (to ) (sites Centre)) (is Empty (to )))})))))) (piece "Jarl" P2 (move Slide Orthogonal (to (apply (not (= (to ) (centrePoint ))))) (then (custodial (from (last To)) Orthogonal (between (max 1) (= (what (between )) (id "Thrall1")) (apply (remove (between )))) (to (or {(is Friend (who (to ))) (is In (to ) (sites "Fortresses")) (and (is In (to ) (sites Centre)) (is Empty (to )))}))))))}) (rules (start {(place "Thrall1" {"D1" "D2" "A4" "B4" "F4" "G4" "D6" "D7"}) (place "Thrall2" {"D3" "C4" "E4" "D5"}) (place "Jarl2" (centrePoint ))}) (play (forEach Piece)) (end {(if (is Within (id "Jarl2") (sites "Fortresses")) (result P2 Win)) (if (is Triggered "Surrounded" P2) (result P1 Win))})))

The players take turns placing one piece on any vacant square. In this phase no captures are made.
                When all the pieces have been placed, the players take turns moving pieces on the board. The pieces can be moved orthogonally to any adjacent square. A piece can leap over any single piece of either color, if the square behind is unoccupied. Several leaps in one turn are possible (as in Draughts).
                If a player can trap an enemy piece between two friendly pieces, the enemy piece is blocked and cannot be moved. 
                On the next turn, instead of moving a piece, the player can capture the trapped piece by removing it from the board, provided his own two surrounding pieces are still free. The trapped piece is immediately free if one of its two enemies is itself surrounded.
                A player reduced to only one piece left on the board has lost the game.
        
(game "Ludus Latrunculorum" (players 2) (equipment {(board (square 8)) (hand Each) (piece "Vagi" Each (flips 0 1) (if (= 0 (state (from ))) (or (move Step Orthogonal (to (is Empty (to )))) (move Hop Orthogonal (between (is Occupied (between ))) (to (and (is Empty (to )) (not (is Visited (to ))))) (then (if (can Move (move Hop (from (last To)) Orthogonal (between (is Occupied (between ))) (to (and (is Empty (to )) (not (is Visited (to ))))))) (moveAgain )))) (then (and (custodial (from (last From)) Orthogonal (between (max 1) (and (= (what (between )) (next )) (= 1 (state (between )))) (apply (flip (between )))) (to (and (is Friend (who (to ))) (= 0 (state (to )))))) (custodial (from (last To)) Orthogonal (between (max 1) (and (= (what (between )) (next )) (= 0 (state (between )))) (apply (and (flip (between )) (custodial (from (between )) Orthogonal (between (max 1) (and (= (what (between )) (mover )) (= 1 (state (between )))) (apply (flip (between )))) (to (and (is Enemy (who (to ))) (= 0 (state (to ))))))))) (to (and (is Friend (who (to ))) (= 0 (state (to )))))))))))}) (rules (meta (no Repeat)) (start (place "Vagi" "Hand" 16)) {(phase "Placement" (play (move (from (handSite Mover)) (to (sites Empty)))) (nextPhase Mover (all Sites (sites Hand Mover) (= 0 (count Cell (site )))) "Movement")) (phase "Movement" (play (if (is Prev Mover) (or (move Hop (from (last To)) Orthogonal (between (is Occupied (between ))) (to (and (is Empty (to )) (not (is Visited (to ))))) (then (and {(if (can Move (move Hop (from (last To)) Orthogonal (between (is Occupied (between ))) (to (and (is Empty (to )) (not (is Visited (to ))))))) (moveAgain )) (custodial (from (last From)) Orthogonal (between (max 1) (and (= (what (between )) (next )) (= 1 (state (between )))) (apply (flip (between )))) (to (and (is Friend (who (to ))) (= 0 (state (to )))))) (custodial (from (last To)) Orthogonal (between (max 1) (and (= (what (between )) (next )) (= 0 (state (between )))) (apply (and (flip (between )) (custodial (from (between )) Orthogonal (between (max 1) (and (= (what (between )) (mover )) (= 1 (state (between )))) (apply (flip (between )))) (to (and (is Enemy (who (to ))) (= 0 (state (to ))))))))) (to (and (is Friend (who (to ))) (= 0 (state (to ))))))}))) (move Pass)) (or (forEach Piece) (move Remove (forEach (sites Occupied Next) (= 1 (state (site )))))))))} (end (if (= (count Pieces Next) 1) (result Mover Win)))))

There are 30 game-pieces for each player and eleven castles. The gameboard is divided into three sections: homes and center section. Object of the game is to capture four castles (among those of the central section and the other side) or 28 pawns of your opponent. In a turn a player moves one of their pieces, horizontally, vertically. A pawn can step to an adjacent empty cell. Additionally a pawn can jump over another pawn as long as the square behind that pawn is free. Multiple jumps are allowed and all enemy pawns are captured this way and removed from the deck. A pawn can capture a maximum of five enemy pieces, and his movement ends after the fifth piece is captured. A castle is conquered when it is surrounded by three pawns.
(game "Castello" (players 2) (equipment {(board (rectangle 15 21)) (piece "Pawn" Each (or (move Hop Orthogonal (between (and (!= (what (between )) (id "Castle0")) (is Occupied (between ))) (apply (if (= (who (between )) (next )) (remove (between ))))) (to (is Empty (to ))) (then (if (can Move (hop (from (last To)) Orthogonal (between (if (< (counter ) (- 5 1)) (and (!= (what (between )) (id "Castle0")) (is Occupied (between ))) (is Friend (who (between )))) (apply (if (= (who (between )) (next )) (remove (between ))))) (to (and (is Empty (to )) (not (is Visited (to ))))))) (moveAgain ) (set Counter)))) (move Step Orthogonal (to (is Empty (to )))))) (piece "Castle" Neutral) (hand Each 3) (regions "LeftPart" (expand (sites Left) 6)) (regions "RightPart" (expand (sites Right) 6)) (regions "Middle" (expand (sites Centre)))}) (rules (start {(place "Pawn1" (expand (sites Left))) (place "Pawn2" (expand (sites Right))) (place "Castle0" (sites {"G2" "F6" "G10" "F14" "K3" "K8" "K13" "P2" "O6" "P10" "O14"}))}) (play (if (is Prev Mover) (or (move Hop (from (last To)) Orthogonal (between (if (< (counter ) 5) (and (!= (what (between )) (id "Castle0")) (is Occupied (between ))) (is Friend (who (between )))) (apply (if (= (who (between )) (next )) (remove (between ))))) (to (and (is Empty (to )) (not (is Visited (to ))))) (then (if (can Move (hop (from (last To)) Orthogonal (between (if (< (counter ) (- 5 1)) (and (!= (what (between )) (id "Castle0")) (is Occupied (between ))) (is Friend (who (between )))) (apply (if (= (who (between )) (next )) (remove (between ))))) (to (and (is Empty (to )) (not (is Visited (to ))))))) (moveAgain ) (set Counter)))) (move Pass)) (forEach Piece) (then (and (if (is In (last To) (sites "LeftPart")) (if (< (count Cell (handSite Mover)) 3) (surround (from (last To)) Orthogonal (between (= (what (between )) (id "Castle0")) (apply (fromTo (from (between )) (to (handSite Mover))))) (to (is Friend (who (to )))) 1)) (if (is In (last To) (sites "RightPart")) (surround (from (last To)) Orthogonal (between (= (what (between )) (id "Castle0")) (apply (fromTo (from (between )) (to (handSite Mover 2))))) (to (is Friend (who (to )))) 1) (if (is In (last To) (sites "Middle")) (if (> (count Cell (handSite Mover 2)) 0) (surround (from (last To)) Orthogonal (between (= (what (between )) (id "Castle0")) (apply (fromTo (from (between )) (to (handSite Mover 1))))) (to (is Friend (who (to )))) 1)) (surround (from (last To)) Orthogonal (between (= (what (between )) (id "Castle0")) (apply (fromTo (from (between )) (to (handSite Mover 1))))) (to (is Friend (who (to )))) 1)))) (set Counter))))) (end {(if (<= (count Pieces Next) 3) (result Next Loss)) (if (> (count (sites Hand Mover)) 3) (result Mover Win))})))

Each player has four pieces.
            Players take turns moving a piece to an empty dot.
            A player may capture an opponent’s piece by placing a piece on either side of an opponent’s piece. If a player moves their own piece between two of the opponent’s pieces, it is not captured.
            A player wins by reducing the opponent to one piece.
        
(game "Boseog Gonu" (players 2) (equipment {(board (remove (merge {(rectangle 3 3 Alternating) (shift 0.0 -1.0 (rotate 180.0 (wedge 2))) (shift 0.0 2.0 (wedge 2)) (shift -1.5 0.5 (rotate 90.0 (wedge 2))) (shift 1.5 0.5 (rotate -90.0 (wedge 2)))}) {{{1.0 1.0} {0.0 0.0}} {{1.0 1.0} {2.0 2.0}} {{1.0 1.0} {2.0 0.0}} {{1.0 1.0} {0.0 2.0}}}) Vertex) (piece "Disc" Each (move Step (to (is Empty (to ))) (then (custodial (from (last To)) (between (max 1) (is Enemy (who (between ))) (apply (remove (between )))) (to (= (what (to )) (what (last To))))))))}) (rules (start {(place "Disc1" {"A3" "B3" "B4" "B2"}) (place "Disc2" {"D2" "D3" "E3" "D4"})}) (play (forEach Piece)) (end (if (<= (count Pieces Next) 1) (result Next Loss)))))

5x5 board. Players begin by placing their pieces two-by-two in places as they see fit, except for the central space. Once all the spaces except the central one are filled, the player who placed their pieces last moves a piece one space orthogonally to the empty space. Pieces are captured by surrounding them on either side by a player's own pieces. Multiple captures are allowed, and multiple pieces can be captured in a single move. A player may move their piece between two of the opponent's pieces without it resulting in a capture. Pieces in the central spot cannot be captured. If a player cannot move, the opponent must move so that the player can move on their next turn. The player to capture all of the opponent's pieces wins.
        
(game "Shantarad" (players 2) (equipment {(board (square 5)) (hand Each) (piece "Marker" Each (move Step Orthogonal (to (is Empty (to ))) (then (custodial (from (last To)) Orthogonal (between (max 1) (and (is Enemy (who (between ))) (!= (centrePoint ) (between ))) (apply (and (remove (between )) (if (or {(can Move (custodial (from (ahead (last To) N)) Orthogonal (between (max 1) (and (is Enemy (who (between ))) (!= (centrePoint ) (between )))) (to (is Friend (who (to )))))) (can Move (custodial (from (ahead (last To) E)) Orthogonal (between (max 1) (and (is Enemy (who (between ))) (!= (centrePoint ) (between )))) (to (is Friend (who (to )))))) (can Move (custodial (from (ahead (last To) W)) Orthogonal (between (max 1) (and (is Enemy (who (between ))) (!= (centrePoint ) (between )))) (to (is Friend (who (to )))))) (can Move (custodial (from (ahead (last To) S)) Orthogonal (between (max 1) (and (is Enemy (who (between ))) (!= (centrePoint ) (between )))) (to (is Friend (who (to ))))))}) (moveAgain ) (if (no Moves Next) (and (set Pending) (moveAgain ))))))) (to (is Friend (who (to ))))))))}) (rules (start (place "Marker" "Hand" 12)) {(phase "Placement" (play (if (= (count Moves) 24) (forEach Piece) (move (from (handSite Mover)) (to (difference (sites Empty) (centrePoint ))) (then (if (or (= (count Moves) 24) (not (is Prev Mover))) (moveAgain )))))) (nextPhase (= (count Moves) 25) "Movement")) (phase "Movement" (play (if (is Prev Mover) (move Step (from (last To)) Orthogonal (to (and (is Empty (to )) (or {(and (is Enemy (who (ahead (to ) W))) (is Friend (who (ahead (ahead (to ) W) W)))) (and (is Enemy (who (ahead (to ) E))) (is Friend (who (ahead (ahead (to ) E) E)))) (and (is Enemy (who (ahead (to ) N))) (is Friend (who (ahead (ahead (to ) N) N)))) (and (is Enemy (who (ahead (to ) S))) (is Friend (who (ahead (ahead (to ) S) S))))}))) (then (custodial (from (last To)) Orthogonal (between (max 1) (and (is Enemy (who (between ))) (!= (centrePoint ) (between ))) (apply (and (remove (between )) (if (or {(can Move (custodial (from (ahead (last To) N)) Orthogonal (between (max 1) (and (is Enemy (who (between ))) (!= (centrePoint ) (between )))) (to (is Friend (who (to )))))) (can Move (custodial (from (ahead (last To) E)) Orthogonal (between (max 1) (and (is Enemy (who (between ))) (!= (centrePoint ) (between )))) (to (is Friend (who (to )))))) (can Move (custodial (from (ahead (last To) W)) Orthogonal (between (max 1) (and (is Enemy (who (between ))) (!= (centrePoint ) (between )))) (to (is Friend (who (to )))))) (can Move (custodial (from (ahead (last To) S)) Orthogonal (between (max 1) (and (is Enemy (who (between ))) (!= (centrePoint ) (between )))) (to (is Friend (who (to ))))))}) (moveAgain ) (if (no Moves Next) (and (set Pending) (moveAgain ))))))) (to (is Friend (who (to ))))))) (do (forEach Piece) (not (no Moves Next))))))} (end (if (no Pieces Next) (result Next Loss)))))

9x9 intersecting lines, pieces are played on the intersections. 16 pieces per player, one player is black, the other white. Pieces begin placed on the edge of the board: Black on the top and right, white on the bottom and left. Sixteen others are held in reserve for each player. Pieces move any distance orthogonally along the lines. Opponent's pieces are captured when they are surrounded by two of a player's pieces. When this is done, the surrounded player's pieces are removed and replaced with the pieces of the player that surrounded them. If multiple opponent's pieces are in a line and the other player places their pieces at either end of the line, all the pieces in between are captured. When a player is reduced to one piece, it gains the ability to capture by jumping. The player that removes all of their opponent's pieces wins.
(game "Gundru" (players 2) (equipment {(board (square 9) Vertex) (piece "Marker" Each (or (if (= 1 (+ (count Cell (handSite Mover)) (count Pieces Mover))) (move Hop (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to ))))) (move Slide (then (custodial (from (last To)) (between (range 1 (count Rows)) (is Enemy (who (between ))) (apply (and (remove (between )) (fromTo (from (handSite Mover)) (to (between )))))) (to (is Friend (who (to ))))))))) (hand Each)}) (rules (start {(place "Marker" "Hand" 16) (place "Marker1" (union (sites Top) (difference (sites Right) (sites Bottom)))) (place "Marker2" (union (sites Bottom) (difference (sites Left) (sites Top))))}) (play (forEach Piece)) (end (if (no Moves Next) (result Mover Win)))))

12x12 board, with a line of six extra squares centered on each side. Diagonals in every square. Pieces are played on the intersections of lines. Played with two or four players; with four players, the top and left players play against the bottom and right players. Six pieces per player, with one larger piece. Each player's six pieces begin on the central intersection of the extra spaces. Pieces move one spot at a time diagonally. When a player surrounds an opponent's piece on two opposite sides, this piece is captured. The piece is then replaced by the larger piece, which may move diagonally or orthogonally. Pieces may not move backward. When all of the players' remaining pieces reach the starting squares of the opponent, the player with the most captured pieces wins.
(game "Awithlaknakwe" (players {(player N) (player E) (player S) (player W)}) (equipment {(board (merge (merge (merge (merge (square 13 Solid) (shift 3.0 -1.0 (rectangle 2 7 Solid))) (shift 3.0 12.0 (rectangle 2 7 Solid))) (shift -3.5 5.5 (rotate 90.0 (rectangle 2 7 Solid)))) (shift 9.5 5.5 (rotate 90.0 (rectangle 2 7 Solid)))) Vertex) (piece "Counter" Each (move Step (directions {FR FL}) (to (is Empty (to ))))) (piece "DoubleCounter" Each (move Step (directions {Rightward Forwards Leftward}) (to (is Empty (to ))))) (regions "Home" P1 (sites {"D9" "E8" "F7" "G6" "H5" "I4"})) (regions "Home" P2 (sites {"I22" "H21" "G20" "F19" "E18" "D17"})) (regions "Home" P3 (sites {"Q22" "R21" "S20" "T19" "U18" "V17"})) (regions "Home" P4 (sites {"V9" "U8" "T7" "S6" "R5" "Q4"})) (hand Each)}) (rules (start {(set Team 1 {P1 P4}) (set Team 2 {P2 P3}) (place "Counter1" (sites P1)) (place "Counter2" (sites P2)) (place "Counter3" (sites P3)) (place "Counter4" (sites P4)) (place "DoubleCounter" "Hand")}) (play (forEach Piece (then (custodial (from (last To)) Orthogonal (between (max 1) (is Enemy (who (between ))) (apply (and {(remove (between )) (if (not (all Sites (sites Hand Mover) (= 0 (count Cell (site ))))) (fromTo (from (handSite Mover)) (to (between )))) (addScore Mover 1)}))) (to (is Friend (who (to )))))))) (end (if (and (all Sites (union (sites Occupied P1) (sites Occupied P4)) (is In (site ) (union (sites P2) (sites P3)))) (all Sites (union (sites Occupied P2) (sites Occupied P3)) (is In (site ) (union (sites P1) (sites P4))))) {(if (> (+ (score P1) (score P4)) (+ (score P2) (score P3))) (result Team1 Win)) (if (< (+ (score P1) (score P4)) (+ (score P2) (score P3))) (result Team2 Win)) (if (= (+ (score P1) (score P4)) (+ (score P2) (score P3))) (result Mover Draw))}))))

11x11 board. The king is placed in the centre of the board, with his defenders around him and the attackers at the edge of the board. The attackers move first. Pieces move orthogonally any number of spaces. A pieces is captured by surrounding it on two opposite sides, by an opponent's piece. It is possible to capture two or three pieces at once by so surrounding them. It is not possible to capture a row of pieces. The defending player wins the game by moving the king to any square on the edge of the board. The attacking player wins by capturing the king.
(game "Tawlbwrdd" (players 2) (equipment {(board (square 11)) (regions "Fortresses" (sites Corners)) (piece "Thrall" P1 (move Slide Orthogonal (between (and (not (is In (between ) (union (sites Centre) (sites "Fortresses")))) (is Empty (between )))) (then (or {(custodial (from (last To)) Orthogonal (between (max 1) (= (what (between )) (id "Thrall2")) (apply (remove (between )))) (to (or (is Friend (who (to ))) (is In (to ) (union (sites Centre) (sites "Fortresses")))))) (custodial (from (last To)) Orthogonal (between (max 1) (= (what (between )) (id "Jarl" P2)) (apply (trigger "Surrounded" P2))) (to (or (is Friend (who (to ))) (is In (to ) (union (sites Centre) (sites "Fortresses"))))))})))) (piece "Thrall" P2 (move Slide Orthogonal (between (and (not (is In (between ) (union (sites Centre) (sites "Fortresses")))) (is Empty (between )))) (then (custodial (from (last To)) Orthogonal (between (max 1) (= (what (between )) (id "Thrall1")) (apply (remove (between )))) (to (or (is Friend (who (to ))) (is In (to ) (union (sites Centre) (sites "Fortresses"))))))))) (piece "Jarl" P2 (move Slide Orthogonal (then (custodial (from (last To)) Orthogonal (between (max 1) (= (what (between )) (id "Thrall1")) (apply (remove (between )))) (to (or (is Friend (who (to ))) (is In (to ) (union (sites Centre) (sites "Fortresses")))))))))}) (rules (start {(place "Thrall1" {"D1" "E1" "F1" "G1" "H1" "F2" "A4" "A5" "A6" "A7" "A8" "B6" "K4" "K5" "K6" "K7" "K8" "J6" "F10" "D11" "E11" "F11" "G11" "H11" "F10"}) (place "Thrall2" {"F3" "F4" "F5" "C6" "D6" "E6" "G6" "H6" "I6" "F7" "F8" "F9"}) (place "Jarl2" (centrePoint ))}) (play (forEach Piece)) (end {(if (is Within (id "Jarl2") (sites Outer)) (result P2 Win)) (if (is Triggered "Surrounded" P2) (result P1 Win))})))

3x3 intersecting lines, with diagonals in the square. Three pieces per player, which begin on opposite sides of the square. Players alternate turns moving one of their pieces along the lines of the board. When a player surrounds one of the opponent's pieces with two of their pieces, the opponent's piece is captured. The player who captures all of the opponent's pieces wins.
(game "El-Mthaltha" (players 2) (equipment {(board (rectangle 3 3 Alternating) Vertex) (piece "Marker" Each (move Step (to (is Empty (to ))) (then (custodial (from (last To)) Orthogonal (between (max 1) (is Enemy (who (between ))) (apply (remove (between )))) (to (is Friend (who (to ))))))))}) (rules (start {(place "Marker1" (sites Bottom)) (place "Marker2" (sites Top))}) (play (forEach Piece)) (end (if (no Pieces Next) (result Next Loss)))))

The game begins with the pieces set out as in the diagram. 2. The king's side takes the first move, play then alternating between players. 3. In his turn a player moves one of his pieces along a straight line, horizontally or vertically. 4. No piece may land on another, nor is there any jumping. 5. Only the king can land on the central space, though other pieces can pass through it. 6. Only the king may move to the spaces occupied by the fixed men: see rule 11. 7. The king is captured by surrounding him on all four sides by counts. If he is next to the central square or the edge of the board, he may be captured by surrounding him on the other three sides. 8. Dukes and counts are captured by surrounding them with enemies on two opposite sides, horizontally or vertically. Two or three men may be captured simultaneously if each falls between the moving piece and another enemy. 9. The fixed men in the corners may be used to capture pieces by either player. 10. A piece may come to rest voluntarily between two others, without being captured. 11. If the king moves to one of the squares occupied by the fixed men, he has escaped the board and wins the game. 12. If the king is captured by his opponents, then he has lost the game.
(game "Alea Evangelii" (players 2) (equipment {(board (square 19)) (regions "Fortresses" (expand (sites Corners))) (piece "Thrall" P1 (move Slide Orthogonal (between (and (not (is In (between ) (sites "Fortresses"))) (is Empty (between )))) (to (apply (!= (to ) (centrePoint )))) (then (or {(custodial (from (last To)) Orthogonal (between (max 1) (= (what (between )) (id "Thrall2" Next)) (apply (remove (between )))) (to (or {(is Friend (who (to ))) (is In (to ) (sites "Fortresses")) (and (is In (to ) (sites Centre)) (is Empty (to )))}))) (surround (from (last To)) Orthogonal (between (and (= (what (between )) (id "Jarl" P2)) (is In (between ) (expand (centrePoint ) Orthogonal))) (apply (trigger "Surrounded" P2))) (to (or (is Friend (who (to ))) (is In (to ) (sites Centre))))) (custodial (from (last To)) Orthogonal (between (and (= (what (between )) (id "Jarl" P2)) (not (is In (between ) (expand (centrePoint ) Orthogonal)))) (apply (trigger "Surrounded" P2))) (to (is Friend (who (to )))))})))) (piece "Thrall" P2 (move Slide Orthogonal (between (and (not (is In (between ) (sites "Fortresses"))) (is Empty (between )))) (to (apply (!= (to ) (centrePoint )))) (then (custodial (from (last To)) Orthogonal (between (max 1) (= (what (between )) (id "Thrall1" Next)) (apply (remove (between )))) (to (or {(is Friend (who (to ))) (is In (to ) (sites "Fortresses")) (and (is In (to ) (sites Centre)) (is Empty (to )))})))))) (piece "Jarl" P2 (move Slide Orthogonal (to (apply (!= (to ) (centrePoint ))))))}) (rules (start {(place "Thrall1" {"C1" "F1" "N1" "Q1" "A3" "F3" "N3" "S3" "H4" "L4" "G5" "I5" "K5" "M5" "A6" "C6" "Q6" "S6" "E7" "O7" "D8" "P8" "E9" "O9" "E11" "O11" "D12" "P12" "E13" "O13" "A14" "C14" "Q14" "S14" "G15" "I15" "K15" "M15" "H16" "L16" "A17" "F17" "N17" "S17" "C19" "F19" "N19" "Q19"}) (place "Thrall2" {"J4" "F6" "N6" "J7" "I8" "K8" "H9" "J9" "L9" "D10" "G10" "I10" "K10" "M10" "P10" "H11" "J11" "L11" "I12" "K12" "J13" "F14" "N14" "J16"}) (place "Jarl2" (centrePoint ))}) (play (forEach Piece)) (end {(if (is Within (id "Jarl2") (sites "Fortresses")) (result P2 Win)) (if (is Triggered "Surrounded" P2) (result P1 Win))})))

5x5 board. Twelve pieces per player. Players alternate turns placing two pieces on the board. The first piece of each player must be placed on a spot adjacent to the central spot. The central spot cannot be filled. When both players have placed their pieces, they move their pieces orthogonally to an empty adjacent space. When an opponent's piece is surrounded on two opposite sides by pieces belonging to the player, the opponent's piece is captured. The player who made the capture may move the same piece they moved to make a capture another time if another capture is possible by doing so.
            
            The player who captures all of their opponent's pieces, or which blocks the opponent from being able to move, wins.
            
            In a case where the second player has created a blockade of their pieces containing one or more of only their own pieces which can move infinitely without possibility of being taken, the second player player may declare H'ajeb in order to regain the possibility of winning. The second player declares H'ajeb on their turn, and then the first player gains the ability to move any distance orthogonally or diagonally. The first player may also make multiple captures not just with the same piece, but with more than one. The second player may rescind the H'ajeb declaration at any time and the captures must stop. If the second player allows the first player to continue until the first player cannot capture, the second player captures any two of the first player's pieces, and the first player captures one of the second player's pieces that is able to move infinitely.
        
(game "Sabou'iyya" (players 2) (equipment {(board (square 5)) (piece "Marker" Each (move Step Orthogonal (to (is Empty (to ))) (then (custodial (from (last To)) Orthogonal (between (max 1) (is Enemy (who (between ))) (apply (remove (between )))) (to (is Friend (who (to )))) (then (if (can Move (step (from (last To)) Orthogonal (to (and (is Empty (to )) (or {(and (is Enemy (who (ahead (to ) W))) (is Friend (who (ahead (to ) 2 W)))) (and (is Enemy (who (ahead (to ) E))) (is Friend (who (ahead (to ) 2 E)))) (and (is Enemy (who (ahead (to ) N))) (is Friend (who (ahead (to ) 2 N)))) (and (is Enemy (who (ahead (to ) S))) (is Friend (who (ahead (to ) 2 S))))}))))) (moveAgain ))))))) (hand Each)}) (rules (start (place "Marker" "Hand" 12)) {(phase "Placement" (play (move (from (handSite Mover)) (to (if (= 0 (count Pieces Mover (sites Board))) (forEach (sites Around (centrePoint ) Orthogonal) (is Empty (site ))) (difference (sites Board) (centrePoint ))) (is Empty (to ))) (then (if (not (is Prev Mover)) (moveAgain ))))) (nextPhase Mover (is Empty (handSite Mover)) "Capture")) (phase "Capture" (play (if (is Prev Mover) (or (move Step (from (last To)) Orthogonal (to (and (is Empty (to )) (or {(and (is Enemy (who (ahead (to ) W))) (is Friend (who (ahead (to ) 2 W)))) (and (is Enemy (who (ahead (to ) E))) (is Friend (who (ahead (to ) 2 E)))) (and (is Enemy (who (ahead (to ) N))) (is Friend (who (ahead (to ) 2 N)))) (and (is Enemy (who (ahead (to ) S))) (is Friend (who (ahead (to ) 2 S))))}))) (then (custodial (from (last To)) Orthogonal (between (max 1) (is Enemy (who (between ))) (apply (remove (between )))) (to (is Friend (who (to )))) (then (if (can Move (step (from (last To)) Orthogonal (to (and (is Empty (to )) (or {(and (is Enemy (who (ahead (to ) W))) (is Friend (who (ahead (to ) 2 W)))) (and (is Enemy (who (ahead (to ) E))) (is Friend (who (ahead (to ) 2 E)))) (and (is Enemy (who (ahead (to ) N))) (is Friend (who (ahead (to ) 2 N)))) (and (is Enemy (who (ahead (to ) S))) (is Friend (who (ahead (to ) 2 S))))}))))) (moveAgain )))))) (move Pass)) (forEach Piece))))} (end (if (no Moves Next) (result Mover Win)))))

The central square is the castle, which cannot be entered by pieces or by the king once it has left. There are two sides: one with the king and 8 pieces, another with 16 undifferentiated pieces. The king begins on the castle space, and his associated pieces are arranged with two pieces on each orthogonal side of the king. The opposing side is arranged on the sides of the board, one piece on each of the three central squares on each of the four sides, and one further piece on the next row in on the central square of the row. Pieces move orthogonally any number of squares. Pieces cannot jump. If a piece is caught between two opposing pieces, it is removed from play. A piece may also be captured by trapping it between an enemy piece and the castle. The king, when in the castle, can only be captured when surrounded on four sides. If it is in a space adjacent to one of the sides, it can be captured when the opponent surrounds it on the remaining three sides. Otherwise, it is captured like any other piece. If the king moves to the edge of the board, the player controlling the king wins. If the opposing side captures the king, they win.
(game "Tablut" (players 2) (equipment {(board (square 9)) (piece "Thrall" P1 (move Slide Orthogonal (between (and (!= (between ) (centrePoint )) (is Empty (between )))) (then (or {(custodial (from (last To)) Orthogonal (between (max 1) (= (what (between )) (id "Thrall2")) (apply (remove (between )))) (to (or (is Friend (who (to ))) (= (to ) (centrePoint ))))) (surround (from (last To)) Orthogonal (between (and (= (what (between )) (id "Jarl2")) (or (= (between ) (centrePoint )) (is In (between ) (sites "OrthogonalSitesCentre")))) (apply (trigger "Surrounded" P2))) (to (or (is Friend (who (to ))) (= (to ) (centrePoint ))))) (custodial (from (last To)) Orthogonal (between (max 1) (and (= (what (between )) (id "Jarl2")) (and (!= (between ) (centrePoint )) (not (is In (between ) (sites "OrthogonalSitesCentre"))))) (apply (trigger "Surrounded" P2))) (to (is Friend (who (to )))))})))) (piece "Thrall" P2 (move Slide Orthogonal (between (and (!= (between ) (centrePoint )) (is Empty (between )))) (then (custodial (from (last To)) Orthogonal (between (max 1) (= (what (between )) (id "Thrall1")) (apply (remove (between )))) (to (or (is Friend (who (to ))) (= (to ) (centrePoint )))))))) (piece "Jarl" P2 (move Slide Orthogonal (between (and (!= (between ) (centrePoint )) (is Empty (between )))) (then (custodial (from (last To)) Orthogonal (between (max 1) (= (what (between )) (id "Thrall1")) (apply (remove (between )))) (to (or (is Friend (who (to ))) (= (to ) (centrePoint )))))))) (regions "OrthogonalSitesCentre" (difference (expand (centrePoint ) Orthogonal) (centrePoint )))}) (rules (start {(place "Thrall1" {"D1" "E1" "F1" "E2" "A4" "A5" "A6" "B5" "I4" "I5" "I6" "H5" "E8" "D9" "E9" "F9" "E8"}) (place "Thrall2" {"E3" "E4" "E6" "E7" "C5" "D5" "F5" "G5"}) (place "Jarl2" (centrePoint ))}) (play (forEach Piece)) (end {(if (is Within (id "Jarl2") (sites Outer)) (result P2 Win)) (if (is Triggered "Surrounded" P2) (result P1 Win))})))

Objectives
            One player has a gold fleet consisting of one large flagship and twelve escorts, with the objective of evading capture while breaking through his or her opponent's blockade to transport the flagship to the perimeter of the board. The other player has a silver fleet of twenty ships, and forms a blockade to trap the gold flagship and destroy the gold fleet's escorts with the objective of capturing the flagship.
            
            Setup
            Gold player places the flagship on the center square of the game board, and positions the rest of the ships anywhere within the boldly ruled central area of the board.
            
            Silver player then positions the silver ships on twenty squares in the lightly ruled peripheral area of the board.
            
            Play
            Gold player chooses who goes first. Players move alternately by making two moves or one capture anywhere on the board. When the flagship is moved, only one move or capture is made (thus only the flagship).
            
            Moves
            A player may move two of the smaller playing pieces any number of vacant squares either horizontally or vertically on the board (as a rook in Chess, except that no captures can be made with this move), although if the flagship is moved, the gold player may not move another playing piece.
            
            Captures
            A player may move any playing piece (including the flagship) one square diagonally to capture one of his opponent's playing pieces. (This move is similar to the capture-move of the pawn in Chess, except that captures can be made on any of the four diagonals.)
            
            This game uses displacement capture (like Chess), rather than custodial capture (like Hnefatafl), thus when a capture is made, the captured piece is removed from the board and the vacated square is occupied by the captor.
            
        Play continues until one player achieves his or her objective. If the flagship of the gold fleet reaches one of the outermost squares on the board, gold player wins. If the flagship is captured before it reaches the outer edge of the board, silver player wins.
(game "Breakthru" (players 2) (equipment {(board (square 11)) (piece "Disc" Each (or (if (not (is Prev Mover)) (move Step Diagonal (to (is Enemy (who (to ))) (apply (remove (to )))))) (move Slide Orthogonal (then (if (not (is Prev Mover)) (moveAgain )))))) (piece "Commander" P1 (if (not (is Prev Mover)) (or (move Step Diagonal (to (is Enemy (who (to ))) (apply (remove (to ))))) (move Slide Orthogonal)))) (hand Each) (regions "CentreSites" (expand (sites Centre) 2))}) (rules (start {(place "Commander1" (sites Centre)) (place "Disc1" (handSite P1) 12) (place "Disc2" (handSite P2) 20)}) {(phase "PlacementP1" (play (move (from (handSite P1)) (to (intersection (sites "CentreSites") (sites Empty))) (then (if (is Occupied (handSite P1)) (moveAgain ))))) (nextPhase (is Empty (handSite P1)) "PlacementP2")) (phase "PlacementP2" (play (move (from (handSite P2)) (to (difference (sites Empty) (sites "CentreSites"))) (then (if (is Occupied (handSite P2)) (moveAgain ))))) (nextPhase (is Empty (handSite P2)) "Movement")) (phase "Movement" (play (forEach Piece)) (end {(if (is Within (id "Commander1") (sites Outer)) (result P1 Win)) (if (= (where "Commander" P1) -1) (result P2 Win))}))}))

5x5 board. Players begin by placing their pieces in prescribed spaces, and then alternating two-by-two in places as they see fit, except for the central space. Once all the spaces except the central one are filled, the first player moves a piece one space orthogonally to the empty space. Pieces are captured by surrounding them on either side by a player's own pieces. The player to capture all of the opponent's pieces wins.
(game "Seega" (players 2) (equipment {(board (square 5)) (hand Each) (piece "Marker" Each (move Step Orthogonal (to (is Empty (to ))) (then (custodial (from (last To)) Orthogonal (between (max 1) (is Enemy (who (between ))) (apply (remove (between )))) (to (is Friend (who (to ))))))))}) (rules (start (place "Marker" "Hand" 12)) {(phase "Placement" (play (move (from (handSite Mover)) (to (difference (sites Empty) (centrePoint ))) (then (if (not (is Prev Mover)) (moveAgain ))))) (nextPhase Mover (all Sites (sites Hand Mover) (= 0 (count Cell (site )))) "Movement")) (phase "Movement" (play (forEach Piece)))} (end (if (no Pieces Next) (result Next Loss)))))

HeXentafl can be played on a 4x4 or 5x5 hex grid.
            
            For the 4x4 version:
            The King sits on the central space, the throne, surrounded by three defenders. Six attackers sit on the outer corners of the grid.
            The attackers must capture the King in order to win. The defenders must escort the King to any of the six corners of the board in order to win.
            
            All pieces except the King move in a
            straight line, as many spaces as they like to an unoccupied space (like a rook in Chess). Only one piece at a time can occupy a space. A piece cannot jump over another piece.
            The King can move into any vacant adjacent space, moving one space at a time (similar to the king in Chess).
            
            Pieces are captured by surrounding them on two sides. Except for the corners, the pieces can be captured by surrounding them with two pieces which are not adjacents. You cannot \"capture\" your own piece by moving between two enemy pieces.
            
            The central space of the board is the throne. Only the King may occupy the throne. When the King is on the throne, he is harder to capture. He must be surrounded on three sides which are not adjacents each other.
            
        HeXentafl on a 5x5 grid is almost identical to a 4x4 grid, except there are more attackers and defenders, and the King moves just like the other pieces. It is not limited to one space at a time.
(game "HeXentafl" (players 2) (equipment {(board (rotate 90.0 (hex 4))) (piece "Thrall" P1 (move Slide (between (and (!= (between ) (centrePoint )) (is Empty (between )))) (then (and (surround (from (last To)) Orthogonal (between (and {(is In (between ) (sites "Fortresses")) (is Enemy (who (between ))) (all Sites (sites Around (between ) Own) (all Sites (sites Around (site ) Own) (not (is In (to ) (sites Around (between ) Own)))))}) (apply (remove (between )))) (to (is Friend (who (to )))) 1) (custodial (from (last To)) Orthogonal (between (max 1) (and (!= (between ) (centrePoint )) (is Enemy (who (between )))) (apply (remove (between )))) (to (is Friend (who (to ))))))))) (piece "Thrall" P2 (move Slide (between (and (!= (between ) (centrePoint )) (is Empty (between )))) (then (and {(surround (from (last To)) Orthogonal (between (and {(= (between ) (centrePoint )) (= (what (between )) (id "Jarl" P1)) (all Sites (sites Around (between ) Own) (all Sites (sites Around (site ) Own) (not (is In (to ) (sites Around (between ) Own)))))}) (apply (remove (between )))) (to (is Friend (who (to )))) 3) (surround (from (last To)) Orthogonal (between (and {(is In (between ) (sites "Fortresses")) (is Enemy (who (between ))) (all Sites (sites Around (between ) Own) (all Sites (sites Around (site ) Own) (not (is In (to ) (sites Around (between ) Own)))))}) (apply (remove (between )))) (to (is Friend (who (to )))) 1) (custodial (from (last To)) Orthogonal (between (max 1) (and (!= (between ) (centrePoint )) (is Enemy (who (between )))) (apply (remove (between )))) (to (is Friend (who (to )))))})))) (piece "Jarl" P1 (move Step (to (is Empty (to ))) (then (and (surround (from (last To)) Orthogonal (between (and {(is In (between ) (sites "Fortresses")) (is Enemy (who (between ))) (all Sites (sites Around (between ) Own) (all Sites (sites Around (site ) Own) (not (is In (to ) (sites Around (between ) Own)))))}) (apply (remove (between )))) (to (is Friend (who (to )))) 1) (custodial (from (last To)) Orthogonal (between (max 1) (and (!= (between ) (centrePoint )) (is Enemy (who (between )))) (apply (remove (between )))) (to (is Friend (who (to ))))))))) (regions "Fortresses" (sites Corners))}) (rules (start {(place "Jarl1" (centrePoint )) (place "Thrall2" (sites "Fortresses")) (place "Thrall1" {"D3" "C4" "E5"})}) (play (forEach Piece)) (end {(if (is Within (id "Jarl1") (sites "Fortresses")) (result P1 Win)) (if (= (where "Jarl" P1) -1) (result P2 Win))})))

17x17 board. 144 pieces per player. Players alternate turns placing two pieces on an empty space on the board, except in the central space. Captures cannot be made during the placement phase. When all of the pieces have been placed, players alternate turns moving a piece orthogonally any distance. When an opponent's piece is between two of a player's pieces, it is captured. If a player in unable to make a move, they pass their turn and the opponent plays again. The player who captures all of the opponent's pieces wins.
        
(game "Poprad Game" (players 2) (equipment {(board (square 17)) (piece "Marker" Each (move Slide Orthogonal (then (custodial (from (last To)) Orthogonal (between (max 1) (is Enemy (who (between ))) (apply (remove (between )))) (to (is Friend (who (to )))))))) (hand Each)}) (rules (meta (no Repeat)) (start (place "Marker" "Hand" 144)) {(phase "Placement" (play (move (from (handSite Mover)) (to (difference (sites Board) (centrePoint )) (is Empty (to ))) (then (if (and (is Occupied (handSite Mover)) (not (is Prev Mover))) (moveAgain ))))) (nextPhase Mover (is Empty (handSite Mover)) "Capture")) (phase "Capture" (play (forEach Piece)))} (end (if (<= (count Pieces Next) 1) (result Next Loss)))))

7x7 board. 24 pieces per player. Players alternate turns placing two pieces on an empty space on the board, except in the central space. Captures cannot be made during the placement phase. When all of the pieces have been placed, players alternate turns moving a piece orthogonally any distance. When an opponent's piece is between two of a player's pieces, it is captured. If a player is unable to make a move, they pass their turn and the opponent plays again. The player who captures all of the opponent's pieces wins.
        
(game "Kharebga (7x7)" (players 2) (equipment {(board (square 7)) (piece "Marker" Each (move Slide Orthogonal (then (custodial (from (last To)) Orthogonal (between (max 1) (is Enemy (who (between ))) (apply (remove (between )))) (to (is Friend (who (to )))))))) (hand Each)}) (rules (start (place "Marker" "Hand" 24)) {(phase "Placement" (play (move (from (handSite Mover)) (to (difference (sites Board) (centrePoint )) (is Empty (to ))) (then (if (not (is Prev Mover)) (moveAgain ))))) (nextPhase Mover (is Empty (handSite Mover)) "Capture")) (phase "Capture" (play (forEach Piece)))} (end (if (no Pieces Next) (result Next Loss)))))

7x7 board. 24 pieces per player. Players alternate turns placing two pieces on the board. The first piece of each player must be placed on a spot adjacent to the central spot. The central spot cannot be filled. When both players have placed their pieces, they move their pieces orthogonally to an empty adjacent space. When an opponent's piece is surrounded on two opposite sides by pieces belonging to the player, the opponent's piece is captured. The player who made the capture may move the same piece they moved to make a capture another time if another capture is possible by doing so. 
            
            The player who captures all of their opponent's pieces, or which blocks the opponent from being able to move, wins. 
            
        In a case where the second player has created a blockade of their pieces containing one or more of only their own pieces which can move infinitely without possibility of being taken, the second player player may declare H'ajeb in order to regain the possibility of winning. The second player declares H'ajeb on their turn, and then the first player gains the ability to move any distance orthogonally or diagonally. The first player may also make multiple captures not just with the same piece, but with more than one. The second player may rescind the H'ajeb declaration at any time and the captures must stop. If the second player allows the first player to continue until the first player cannot capture, the second player captures any two of the first player's pieces, and the first player captures one of the second player's pieces that is able to move infinitely. 
(game "Khamousiyya" (players 2) (equipment {(board (square 7)) (piece "Marker" Each (move Step Orthogonal (to (is Empty (to ))) (then (custodial (from (last To)) Orthogonal (between (max 1) (is Enemy (who (between ))) (apply (remove (between )))) (to (is Friend (who (to )))) (then (if (can Move (step (from (last To)) Orthogonal (to (and (is Empty (to )) (or {(and (is Enemy (who (ahead (to ) W))) (is Friend (who (ahead (to ) 2 W)))) (and (is Enemy (who (ahead (to ) E))) (is Friend (who (ahead (to ) 2 E)))) (and (is Enemy (who (ahead (to ) N))) (is Friend (who (ahead (to ) 2 N)))) (and (is Enemy (who (ahead (to ) S))) (is Friend (who (ahead (to ) 2 S))))}))))) (moveAgain ))))))) (hand Each)}) (rules (start (place "Marker" "Hand" 24)) {(phase "Placement" (play (move (from (handSite Mover)) (to (if (no Pieces Mover (sites Board)) (forEach (sites Around (centrePoint ) Orthogonal) (is Empty (site ))) (difference (sites Board) (centrePoint ))) (is Empty (to ))) (then (if (not (is Prev Mover)) (moveAgain ))))) (nextPhase Mover (is Empty (handSite Mover)) "Capture")) (phase "Capture" (play (if (is Prev Mover) (or (move Step (from (last To)) Orthogonal (to (and (is Empty (to )) (or {(and (is Enemy (who (ahead (to ) W))) (is Friend (who (ahead (to ) 2 W)))) (and (is Enemy (who (ahead (to ) E))) (is Friend (who (ahead (to ) 2 E)))) (and (is Enemy (who (ahead (to ) N))) (is Friend (who (ahead (to ) 2 N)))) (and (is Enemy (who (ahead (to ) S))) (is Friend (who (ahead (to ) 2 S))))}))) (then (custodial (from (last To)) Orthogonal (between (max 1) (is Enemy (who (between ))) (apply (remove (between )))) (to (is Friend (who (to )))) (then (if (can Move (step (from (last To)) Orthogonal (to (and (is Empty (to )) (or {(and (is Enemy (who (ahead (to ) W))) (is Friend (who (ahead (to ) 2 W)))) (and (is Enemy (who (ahead (to ) E))) (is Friend (who (ahead (to ) 2 E)))) (and (is Enemy (who (ahead (to ) N))) (is Friend (who (ahead (to ) 2 N)))) (and (is Enemy (who (ahead (to ) S))) (is Friend (who (ahead (to ) 2 S))))}))))) (moveAgain )))))) (move Pass)) (forEach Piece))))} (end (if (no Moves Next) (result Mover Win)))))

Played on an 11x11 board. The defending side comprises twelve soldiers and a king, who start the game in a cross formation in the center of the board.
                Their objective is for the king to escape by reaching any of the four corner squares.
                The attackers comprise 24 soldiers positioned in four groups of 6 around the perimeter of the board.
                The King piece is the only piece that can occupy the central and the four corner squares.
        All pieces move orthogonally any number of spaces, and pieces are taken by custodial capture (surrounding an enemy  piece on either side with two of a player's pieces). The king piece must be captured by surrounding it on all four sides.
(game "Hnefatafl" (players 2) (equipment {(board (square 11)) (regions "Fortresses" (sites Corners)) (piece "Thrall" P1 (move Slide Orthogonal (between (and (not (is In (between ) (union (sites Centre) (sites "Fortresses")))) (is Empty (between )))) (then (and {(custodial (from (last To)) Orthogonal (between (max 1) (= (what (between )) (id "Thrall2" Next)) (apply (remove (between )))) (to (or (is Friend (who (to ))) (is In (to ) (union (sites Centre) (sites "Fortresses")))))) (surround (from (last To)) Orthogonal (between (= (what (between )) (id "Jarl" P2)) (apply (trigger "Surrounded" P2))) (to (or (is Friend (who (to ))) (is In (to ) (union (sites Centre) (sites "Fortresses"))))))})))) (piece "Thrall" P2 (move Slide Orthogonal (between (and (not (is In (between ) (union (sites Centre) (sites "Fortresses")))) (is Empty (between )))) (then (custodial (from (last To)) Orthogonal (between (max 1) (= (what (between )) (id "Thrall1" Next)) (apply (remove (between )))) (to (or (is Friend (who (to ))) (is In (to ) (union (sites Centre) (sites "Fortresses"))))))))) (piece "Jarl" P2 (move Slide Orthogonal (then (custodial (from (last To)) Orthogonal (between (max 1) (= (what (between )) (id "Thrall1" Next)) (apply (remove (between )))) (to (or (is Friend (who (to ))) (is In (to ) (union (sites Centre) (sites "Fortresses")))))))))}) (rules (start {(place "Thrall1" {"D1" "E1" "F1" "G1" "H1" "F2" "A4" "A5" "A6" "A7" "A8" "B6" "K4" "K5" "K6" "K7" "K8" "J6" "F10" "D11" "E11" "F11" "G11" "H11" "F10"}) (place "Thrall2" {"F4" "E5" "F5" "G5" "D6" "E6" "G6" "H6" "E7" "F7" "G7" "F8"}) (place "Jarl2" (centrePoint ))}) (play (forEach Piece)) (end {(if (is Within (id "Jarl2") (sites "Fortresses")) (result P2 Win)) (if (is Triggered "Surrounded" P2) (result P1 Win))})))

One player has red pegs, the other player blue pegs. The player who can get all his color pegs pressed down first wins the game. Each player can press his opponent's color pegs. At any time during the game, if it becomes impossible to press a peg next to the last one pressed the game finishes. The player with the most of his own color pegs pressed down is the winner.
(game "Press Ups" (players 2) (equipment {(board (square 7)) (piece "Disc" Each) (piece "Disc" Neutral) (regions P1 (difference (union (sites Bottom) (sites Top)) (union (sites Right) (sites Left)))) (regions P2 (difference (union (sites Right) (sites Left)) (union (sites Bottom) (sites Top))))}) (rules (start {(place "Disc1" (sites P1)) (place "Disc2" (sites P2)) (place "Disc0" (difference (sites Board) (union (sites P1) (sites P2))))}) {(phase "Init" (play (move Select (from (difference (sites Board) (union (sites P1) (sites P2)))) (then (remove (last To))))) (nextPhase "Remove")) (phase "Remove" (play (move Select (from (sites Around (last To)) (is Occupied (from ))) (then (remove (last To))))))} (end {(if (no Pieces P1) (result P1 Loss)) (if (no Pieces P2) (result P2 Loss)) (if (no Moves Next) (byScore {(score P1 (count Pieces P1)) (score P2 (count Pieces P2))}))})))

To start the game, each of the squares on the checkerboard is occupied by a stone. White stones are placed on the white squares and black stones on the black squares. To move, the player must pick up one of his or her own stones and 'clobber' an opponent's stone on an adjacent square, either horizontally or vertically. Once the opponent's stone is clobbered, it must then be removed from the board and replaced by the stone that was moved. The player who, on their turn, is unable to move, loses the game.
(game "Clobber" (players 2) (equipment {(board (rectangle 10 10)) (piece "Marker" Each (move Step Orthogonal (to (is Enemy (who (to ))) (apply (remove (to ))))))}) (rules (start {(place "Marker1" (sites Phase 1)) (place "Marker2" (sites Phase 0))}) (play (forEach Piece)) (end (if (no Moves Next) (result Next Loss)))))

9x9 board. Played with the full complement of Shogi pieces, placed in the first and second rows. All pieces move only one space orthogonally forward or laterally. Pieces capture by hopping over an opponent's piece. The player to capture all of the opponent's pieces wins.
(game "Tobi Shogi" (players {(player N) (player S)}) (equipment {(board (square 9)) (piece "Osho" Each (or (move Step (directions {Forward Rightward Leftward}) (to (is Empty (to )))) (move Hop (directions {Forward Rightward Leftward}) (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to )))))) (piece "Kinsho" Each (or (move Step (directions {Forward Rightward Leftward}) (to (is Empty (to )))) (move Hop (directions {Forward Rightward Leftward}) (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to )))))) (piece "Ginsho" Each (or (move Step (directions {Forward Rightward Leftward}) (to (is Empty (to )))) (move Hop (directions {Forward Rightward Leftward}) (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to )))))) (piece "Keima" Each (or (move Step (directions {Forward Rightward Leftward}) (to (is Empty (to )))) (move Hop (directions {Forward Rightward Leftward}) (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to )))))) (piece "Kyosha" Each (or (move Step (directions {Forward Rightward Leftward}) (to (is Empty (to )))) (move Hop (directions {Forward Rightward Leftward}) (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to )))))) (piece "Fuhyo" Each (or (move Step (directions {Forward Rightward Leftward}) (to (is Empty (to )))) (move Hop (directions {Forward Rightward Leftward}) (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to ))))))}) (rules (start {(place "Osho1" "E1") (place "Kinsho1" {"D1" "F1"}) (place "Ginsho1" {"C1" "G1"}) (place "Keima1" {"B1" "H1"}) (place "Kyosha1" {"A1" "I1"}) (place "Fuhyo1" (sites Row 1)) (place "Osho2" "E9") (place "Kinsho2" {"D9" "F9"}) (place "Ginsho2" {"C9" "G9"}) (place "Keima2" {"B9" "H9"}) (place "Kyosha2" {"A9" "I9"}) (place "Fuhyo2" (sites Row 7))}) (play (forEach Piece)) (end (if (no Pieces Next) (result Next Loss)))))

Play begins with the pieces arranged in the last row of squares on opposite sides of the board. Pieces move as rooks in Chess. An opponent's piece is captured by surrounding it on two opposite sides by a player's piece. Play continues until all but one player's pieces are captured.
(game "Hasami Shogi" (players 2) (equipment {(board (square 9)) (piece "Fuhyo" P1 (move Slide Orthogonal (then (or (custodial (from (last To)) Orthogonal (between (max 1) (is Enemy (who (between ))) (apply (remove (between )))) (to (is Friend (who (to ))))) (surround (from (last To)) Orthogonal (between (and (is In (between ) (sites Corners)) (is Enemy (who (between )))) (apply (remove (between )))) (to (is Friend (who (to ))))))))) (piece "Tokin" P2 (move Slide Orthogonal (then (or (custodial (from (last To)) Orthogonal (between (max 1) (is Enemy (who (between ))) (apply (remove (between )))) (to (is Friend (who (to ))))) (surround (from (last To)) Orthogonal (between (and (is In (between ) (sites Corners)) (is Enemy (who (between )))) (apply (remove (between )))) (to (is Friend (who (to )))))))))}) (rules (start {(place "Fuhyo1" (sites Bottom)) (place "Tokin2" (sites Top))}) (play (forEach Piece)) (end (if (= (count Pieces Next) 1) (result Mover Win)))))

The 32 pieces in Chex represent the 16 chess pieces on each side of a normal chess game. Each player shuffles his own 16 tiles and places them face down, then white draws his top tile and places it, with the piece oriented so it looks upright to him. Black then draws the top tile in his pile and places it so that it touches white's piece, either orthogonally or diagonally, and oriented so that it looks upright to him.
            
            At that point, white can either add another piece or move his piece on the board. A move must be a legal chess move and may not separate any element of the board; all pieces much remain touching, even if just diagonally, when a move has ended. Thus you can \"pin\" a piece by placing a new piece on the far corner of a piece already in play.
            
        The game ends in checkmate or stalemate, with a stalemate occurring when you must place your king into check when you draw it.
(game "Chex" (players {(player N) (player S)}) (equipment {(boardless Square) (hand Each) (tile "Pawn" Each 4 (or {(move Step Forward (to (is Empty (to )))) (move Step (directions {FR FL}) (to (is Enemy (who (to ))) (apply (remove (to )))))})) (tile "Rook" Each 4 (move Slide Orthogonal (to (is Enemy (who (to ))) (apply (remove (to )))))) (tile "King" Each 4 (move Step (to (not (is Friend (who (to )))) (apply (remove (to )))))) (tile "Bishop" Each 4 (move Slide Diagonal (to (is Enemy (who (to ))) (apply (remove (to )))))) (tile "Knight" Each 4 (move Leap {{F F R F} {F F L F}} (to (not (is Friend (who (to )))) (apply (if (is Enemy (who (to ))) (remove (to ))))))) (tile "Queen" Each 4 (move Slide (to (is Enemy (who (to ))) (apply (remove (to ))))))}) (rules (start {(place Random {(count "Pawn1" 8) (count "Rook1" 2) (count "Knight1" 2) (count "Bishop1" 2) (count "Queen1" 1) (count "King1" 1)} (handSite 1)) (place Random {(count "Pawn2" 8) (count "Rook2" 2) (count "Knight2" 2) (count "Bishop2" 2) (count "Queen2" 1) (count "King2" 1)} (handSite 2)) (forEach Value 0 (topLevel (handSite 1)) (set Hidden What (handSite 1) (value ) P1)) (forEach Value 0 (topLevel (handSite 1)) (set Hidden What (handSite 1) (value ) P2)) (forEach Value 0 (topLevel (handSite 2)) (set Hidden What (handSite 2) (value ) P1)) (forEach Value 0 (topLevel (handSite 2)) (set Hidden What (handSite 2) (value ) P2))}) (play (if (is Prev Mover) (if (= (count Moves) 1) (move (from (handSite (mover ))) (to (centrePoint ))) (do (move (from (handSite (mover ))) (to (sites Around (union (sites Occupied P1 "Board") (sites Occupied P2 "Board")) Empty))) (not (is Threatened (id "King" Mover))))) (or (if (is Occupied (handSite (mover ))) (move Select (from (handSite (mover ))) (then (and {(moveAgain ) (set Hidden What (last To) (topLevel (last To)) false P1) (set Hidden What (last To) (topLevel (last To)) false P2)})))) (do (forEach Piece) (and (= 1 (count Groups)) (not (is Threatened (id "King" Mover)))))))) (end {(if (and {(not (can Move (if (!= (what (handSite (mover ))) 0) (move Select (from (handSite (mover ))))))) (!= (where "King" Next) -1) (is Threatened (id "King" Next)) (not (can Move (do (forEach Piece Next) (and (= 1 (count Groups)) (not (is Threatened (id "King" Next)))))))}) (result Mover Win)) (if (and {(is Prev Mover) (is Threatened (id "King" Mover)) (not (can Move (do (move (from (handSite (mover ))) (to (sites Around (union (sites Occupied P1 "Board") (sites Occupied P2 "Board")) Empty))) (not (is Threatened (id "King" Mover))))))}) (result Next Win)) (if (no Moves Mover) (result Mover Draw))})))

8x8 board. The pieces move as follows, with the number per player: 1 x King (king): moves one space orthogonally or diagonally. 1 x Queen (counselor): One square diagonally. 2 x Rook (rook): Any number of spaces orthogonally. 2 x Fil (elephant): Two squares diagonally, jumping over the first. Cannot capture another Fil. 2 x Knight: Moves as a chess knight. 8 x Pawn: Moves one space forward orthogonally; one space forward diagonally to capture. No en passant. Promoted to Fers when reaching the eighth rank. No castling. An opponent's piece is captured by moving a player's own piece onto a space occupied by the opponent's piece. When a Shah can be captured on the next turn by an opponent's piece, it is in check. The Shah must not be in check at the end of the player's turn. If this is not possible, it is checkmate and the opponent wins. Stalemate results in a win for that player causing it.
        
(game "Medieval Chess" (players {(player N) (player S)}) (equipment {(board (square 8)) (piece "Pawn" Each (or {(move Step Forward (to (is Empty (to )))) (move Step (directions {FR FL}) (to (is Enemy (who (to ))) (apply (remove (to )))))} (then (if (is In (last To) (sites Mover "Promotion")) (moveAgain ))))) (piece "Rook" Each (move Slide Orthogonal (to (is Enemy (who (to ))) (apply (remove (to )))))) (piece "King_noCross" Each (move Step (to (not (is Friend (who (to )))) (apply (if (is Enemy (who (to ))) (remove (to ))))))) (piece "Bishop_noCross" Each (move Hop Diagonal (between true) (to (or (is Empty (to )) (is Enemy (who (to )))) (apply (remove (to )))))) (piece "Knight" Each (move Leap {{F F R F} {F F L F}} (to (not (is Friend (who (to )))) (apply (if (is Enemy (who (to ))) (remove (to ))))))) (piece "Ferz_noCross" Each (move Step Diagonal (to (not (is Friend (who (to )))) (apply (remove (to )))))) (regions "Promotion" P1 (sites Top)) (regions "Promotion" P2 (sites Bottom))}) (rules (start {(place "Pawn1" (sites Row 1)) (place "Pawn2" (sites Row 6)) (place "Rook1" {"A1" "H1"}) (place "Knight1" {"B1" "G1"}) (place "Bishop_noCross1" {"C1" "F1"}) (place "Ferz_noCross1" "D1") (place "King_noCross1" "E1") (place "Rook2" {"A8" "H8"}) (place "Knight2" {"B8" "G8"}) (place "Bishop_noCross2" {"C8" "F8"}) (place "Ferz_noCross2" "D8") (place "King_noCross2" "E8")}) (play (if (is Prev Mover) (move Promote (last To) (piece "Ferz_noCross") Mover) (do (forEach Piece) (not (is Threatened (id "King_noCross" Mover)))))) (end {(if (and (is Threatened (id "King_noCross" Next)) (not (can Move (do (forEach Piece Next) (not (is Threatened (id "King_noCross" Next))))))) (result Mover Win)) (if (= (count Pieces Next) 1) (result Mover Win)) (if (no Moves Next) (result Mover Win))})))

8x8 board. The pieces move as follows, with the number per player: 1 x King (king): moves one space orthogonally or diagonally. The King may leap to the second or third square on its first move, or move as a Knight, and does not hop over an opponent's piece. The King also cannot capture with this move. 1 x Queen: One square diagonally. On its first move, the Queen may jump diagonally two squares. The Queen cannot capture when making this move. 2 x Rook: Any number of spaces orthogonally. 2 x Bishop: Two squares diagonally, jumping over the first. Cannot capture another Bishop. 2 x Knight: Moves one space orthogonally and then one space diagonally, jumping over any intervening pieces. 8 x Pawn: Moves one space forward orthogonally; one space forward diagonally to capture. May move two spaces on its first move. En passant is not allowed. Promoted to Queen when reaching the eighth rank, and may make the Queen's leap on its first move after being promoted. If this promotion is made with the opponent's King at the distance of the extended move, it does not give check on that turn. No castling. An opponent's piece is captured by moving a player's own piece onto a space occupied by the opponent's piece. When a King can be captured on the next turn by an opponent's piece, it is in check. The King must not be in check at the end of the player's turn. If this is not possible, it is checkmate and the opponent wins. Stalemate results in a draw. 
        
(game "Lombard Chess" (players {(player N) (player S)}) (equipment {(board (square 8)) (piece "King" Each (or (move Step (to (not (is Friend (who (to )))) (apply (remove (to ))))) (if (= 1 (state (from ))) (or (move Hop (between (range 1 2) (not (is Enemy (who (between ))))) (to (is Empty (to )))) (move Leap {{F F R F} {F F L F}} (to (is Empty (to )))))) (then (if (= (state (last To)) 1) (set State (last To) 0))))) (piece "Rook" Each (move Slide Orthogonal (to (is Enemy (who (to ))) (apply (remove (to )))))) (piece "Bishop" Each (move Hop Diagonal (between true) (to (not (is Friend (who (to )))) (apply (if (is Enemy (who (to ))) (remove (to ))))))) (piece "Knight" Each (move Leap {{F F R F} {F F L F}} (to (not (is Friend (who (to )))) (apply (if (is Enemy (who (to ))) (remove (to ))))))) (piece "Queen" Each (or (move Step Diagonal (to (not (is Friend (who (to )))) (apply (remove (to )))) (then (if (= (state (last To)) 1) (set State (last To) 0)))) (if (= 1 (state (from ))) (move Hop Diagonal (between true) (to (is Empty (to ))))) (then (if (= (state (last To)) 1) (set State (last To) 0))))) (piece "Pawn" Each (or {(move Step Forward (to (is Empty (to )))) (move Step (directions {FR FL}) (to (is Enemy (who (to ))) (apply (remove (to ))))) (if (is In (from ) (sites Start (piece (what (from ))))) (move Slide Forward (between (exact 2) (is Empty (between ))) (to (is Empty (to )))))} (then (if (is In (last To) (sites Mover "Promotion")) (and (promote (last To) (piece (id "Queen" Mover))) (set State (last To) 1)))))) (regions "Promotion" P1 (sites Top)) (regions "Promotion" P2 (sites Bottom))}) (rules (start {(place "Pawn1" (sites Row 1)) (place "Pawn2" (sites Row 6)) (place "Rook1" {"A1" "H1"}) (place "Knight1" {"B1" "G1"}) (place "Bishop1" {"C1" "F1"}) (place "Queen1" "D1" 1) (place "King1" "E1" 1) (place "Rook2" {"A8" "H8"}) (place "Knight2" {"B8" "G8"}) (place "Bishop2" {"C8" "F8"}) (place "Queen2" "D8" 1) (place "King2" "E8" 1)}) (play (do (forEach Piece) (not (is Threatened (id "King" Mover))) (then (if (and (= 1 (state (where "King" Next))) (is Threatened (id "King" Next))) (set State (where "King" Next) 0))))) (end {(if (and (is Threatened (id "King" Next)) (not (can Move (do (forEach Piece Next) (not (is Threatened (id "King" Next))))))) (result Mover Win)) (if (no Moves Next) (result Mover Draw))})))

Same as standard Chess except:
            1. The board is initially empty and each player has the normal complement of 16 pieces in reserve.
            2. During a turn, a player must do one of three things:
            --- place a piece from in hand on an empty square on the board
            --- move a previously placed piece to an empty square
            --- move a previously placed piece onto a square occupied by an opposing piece, capturing it.
            3. Pawns may be entered on the first, second, third or fourth rows only.
            4. No en-passant, castling, or initial double-step pawn moves.
        5. A player's King must be placed before being allowed to make any capturing moves. A piece that controls the square that the enemy King occupies does not check it until the friendly King is entered onto the board. That is called 'quasi-check'. A player is under no compulsion to move out of quasi-check, and may even move into quasi-check. A player may legally move into quasi-check.
(game "Unachess" (players {(player N) (player S)}) (equipment {(board (square 8)) (piece "Pawn" Each (or {(move Step Forward (to (is Empty (to )))) (move Step (directions {FR FL}) (to (is Enemy (who (to ))) (apply (remove (to )))))} (then (and (if (is In (last To) (sites Mover "Promotion")) (moveAgain )) (set Counter))))) (piece "Rook" Each (move Slide Orthogonal (to (is Enemy (who (to ))) (apply (remove (to ) (then (set Counter))))))) (piece "King" Each (move Step (to (not (is Friend (who (to )))) (apply (if (is Enemy (who (to ))) (remove (to ) (then (set Counter)))))))) (piece "Bishop" Each (move Slide Diagonal (to (is Enemy (who (to ))) (apply (remove (to ) (then (set Counter))))))) (piece "Knight" Each (move Leap {{F F R F} {F F L F}} (to (not (is Friend (who (to )))) (apply (if (is Enemy (who (to ))) (remove (to ) (then (set Counter)))))))) (piece "Queen" Each (move Slide (to (is Enemy (who (to ))) (apply (remove (to ) (then (set Counter))))))) (map "King" {(pair 1 "E1") (pair 2 "E8")}) (map "RookLeft" {(pair 1 "A1") (pair 2 "A8")}) (map "RookRight" {(pair 1 "H1") (pair 2 "H8")}) (regions "Promotion" P1 (sites Top)) (regions "Promotion" P2 (sites Bottom)) (regions "PawnPlacementRows" P1 (expand (sites Bottom) 3)) (regions "PawnPlacementRows" P2 (expand (sites Top) 3)) (hand Each 6)}) (rules (start {(place "Pawn1" (handSite P1 0) 8) (place "Pawn2" (handSite P2 0) 8) (place "Rook1" (handSite P1 1) 2 1) (place "Knight1" (handSite P1 2) 2) (place "Bishop1" (handSite P1 3) 2) (place "Queen1" (handSite P1 4)) (place "King1" (handSite P1 5) 1) (place "Rook2" (handSite P2 1) 2 1) (place "Knight2" (handSite P2 2) 2) (place "Bishop2" (handSite P2 3) 2) (place "Queen2" (handSite P2 4)) (place "King2" (handSite P2 5) 1)}) (play (if (is Prev Mover) (move Promote (last To) (piece {"Queen" "Knight" "Bishop" "Rook"}) Mover) (do (or {(do (move (from (sites Occupied Mover "Hand" {"King" "Queen" "Rook" "Bishop" "Knight"})) (to (sites Empty))) true) (do (move (from (sites Occupied Mover "Hand" "Pawn")) (to (intersection (sites Empty) (sites Mover "PawnPlacementRows")))) true) (forEach Piece)}) (or (not (is Threatened (id "King" Mover))) (no Pieces Next "King" (sites Board)))))) (end {(if (and (is Threatened (id "King" Next)) (not (can Move (do (forEach Piece Next) (not (is Threatened (id "King" Next))))))) (result Mover Win)) (if (or (no Moves Mover) (= (counter ) 99)) (result Mover Draw))})))

8x8 board. The pieces move as follows, with the number per player: 1 x King (king): moves one space orthogonally or diagonally. 1 x Queen: One square diagonally. 2 x Rook: Any number of spaces orthogonally. 2 x Fil (elephant): Two squares diagonally, jumping over the first. Cannot capture another Fil. 2 x Knight: Moves as a chess knight. 8 x Pawn: Moves one space forward orthogonally; one space forward diagonally to capture. No en passant. Promoted to Queen when reaching the eighth rank. The pieces begin in the following position: Fils on the third and sixth spaces of the first row, King on the fifth space of the first row, Rooks on the third and sixth spaces of the second row, Knights on the fourth and fifth spaces of the second row, Pawns on the third row, the Queen sharing a space with the Pawn in the fifth space. Kings are on the same column. The only time two pieces can be on the same space is in this initial arrangement. No castling. An opponent's piece is captured by moving a player's own piece onto a space occupied by the opponent's piece. When a King can be captured on the next turn by an opponent's piece, it is in check. The King must not be in check at the end of the player's turn. If this is not possible, it is checkmate and the opponent wins. Stalemate results in a win for that player causing it. Capturing all of an opponent's pieces except the King also results in a win.
        
(game "Short Assize" (players {(player N) (player S)}) (equipment {(board (square 8)) (piece "King" Each (move Step (from (from ) (level )) (to (not (is Friend (who (to )))) (apply (if (is Enemy (who (to ))) (forEach Level (to ) (remove (to ) (level )))))))) (piece "Rook" Each (move Slide (from (from ) (level )) Orthogonal (to (is Enemy (who (to ))) (apply (if (is Enemy (who (to ))) (forEach Level (to ) (remove (to ) (level )))))))) (piece "Bishop" Each (move Hop (from (from ) (level )) Diagonal (between true) (to (not (is Friend (who (to )))) (apply (if (is Enemy (who (to ))) (forEach Level (to ) (remove (to ) (level )))))))) (piece "Knight" Each (move Leap (from (from ) (level )) {{F F R F} {F F L F}} (to (not (is Friend (who (to )))) (apply (if (is Enemy (who (to ))) (forEach Level (to ) (remove (to ) (level )))))))) (piece "Queen" Each (move Step (from (from ) (level )) Diagonal (to (not (is Friend (who (to )))) (apply (if (is Enemy (who (to ))) (forEach Level (to ) (remove (to ) (level )))))))) (piece "Pawn" Each (or (move Step (from (from ) (level )) Forward (to (is Empty (to )))) (move Step (from (from ) (level )) (directions {FR FL}) (to (is Enemy (who (to ))) (apply (forEach Level (to ) (remove (to ) (level )))))) (then (if (is In (last To) (sites Mover "Promotion")) (promote (last To) (piece (id "Queen" Mover))))))) (regions "Promotion" P1 (sites Top)) (regions "Promotion" P2 (sites Bottom))}) (rules (start {(place "Bishop1" (sites {"C1" "F1"})) (place "Rook1" (sites {"C2" "F2"})) (place "Knight1" (sites {"D2" "E2"})) (place "King1" "E1") (place Stack "Pawn1" (sites Row 2)) (place Stack "Queen1" (sites {"D3"})) (place "Bishop2" (sites {"C8" "F8"})) (place "Rook2" (sites {"C7" "F7"})) (place "Knight2" (sites {"D7" "E7"})) (place "King2" "E8") (place Stack "Pawn2" (sites Row 5)) (place Stack "Queen2" (sites {"D6"}))}) (play (do (forEach Piece) (not (is Threatened (id "King" Mover))))) (end {(if (and (is Threatened (id "King" Next)) (not (can Move (do (forEach Piece Next) (not (is Threatened (id "King" Next))))))) (result Mover Win)) (if (no Moves Next) (result Mover Win)) (if (= (count Pieces Next) 1) (result Mover Win))})))

Glinski Chess is played on a hexagonal board with each side having length 6, and each space oriented horizontally. The board has 91 spaces.
            
            Piece Movement:
            * Kings can move one space in any of the 12 directions from the current space. There is no castling.
            * Rooks can slide in any of the six 'adjacent' directions from their current space---North, South, or 60 degrees off either of those.
            * Bishops can slide in the six 'diagonal' directions: West, East, or 30 degrees off due North or 30 degrees off due South. Note that, given the 3-colour colouring of the board, each of the three Bishops remains on the same colour that it started the game on.
            * Queens can make any move that would be available to a Rook or a Bishop on the current space.
            * Knights can leap to any space that is two spaces away in an adjacent direction (North, South, or 60 degrees off either of those), plus one more space 60 degrees off of that direction. Note that a Knight always moves to a space of a different colour than the space it moved from.
            * Pawns can advance one space forward without capturing. They capture by moving to one of the two adjacent spaces 60 degrees left or right of forward. A Pawn on a Pawn start space can advance two spaces forward without capturing, even if it has previously moved (by capturing) to a different Pawn start space than it started the game on. A Pawn can capture an opponent Pawn 'en passant' if the opponent Pawn just advanced two spaces on its previous turn, and the capture direction of the current player's Pawn lands it on the space that the opponent Pawn just skipped over. On reaching the farthest rank in a given file, Pawns are promoted to a Queen, Rook, Bishop, or Knight, as the player chooses.
            
            The game ends on a checkmate or stalemate. By convention, the player that causes the stalemate is awarded 3/4 of a point, while the other player is awarded 1/4 of a point.
            
        Variations: Shift the innermost 3 or 5 Pawns toward the edge of the board by one space, as proposed in A Player's Guide to Table Games, by John Jackson, Stackpole Books, 1975.
(game "Glinski Chess" (players {(player N) (player S)}) (equipment {(board (rotate 90.0 (hex 6))) (piece "King" Each (move Step All (to (or (is In (to ) (sites Empty)) (is Enemy (who (to )))) (apply (if (is Enemy (who (to ))) (remove (to ) (then (set Counter)))))))) (piece "Queen" Each (move Slide All (to (is Enemy (who (to ))) (apply (if (is Enemy (who (to ))) (remove (to ) (then (set Counter)))))))) (piece "Rook" Each (move Slide Orthogonal (to (is Enemy (who (to ))) (apply (if (is Enemy (who (to ))) (remove (to ) (then (set Counter)))))))) (piece "Bishop" Each (move Slide Diagonal (to (is Enemy (who (to ))) (apply (if (is Enemy (who (to ))) (remove (to ) (then (set Counter)))))))) (piece "Knight" Each (move Leap {{F F R F} {F F L F}} (to (or (is In (to ) (sites Empty)) (is Enemy (who (to )))) (apply (if (is Enemy (who (to ))) (remove (to ) (then (set Counter)))))))) (piece "Pawn" Each (or {(move Step Forward (to (is Empty (to )))) (if (is In (from ) (sites Start (piece (what (from ))))) (move Hop Forward (between (is In (between ) (sites Empty))) (to (is In (to ) (sites Empty))) (then (and {(set Pending (ahead (last To) Backward)) (set Var (last To))})))) (move Step (if (is Mover P1) (directions {WNW ENE}) (directions {WSW ESE})) (to (is Enemy (who (to ))) (apply (remove (to ))))) (move Step (if (is Mover P1) (directions {WNW ENE}) (directions {WSW ESE})) (to (and (is Pending) (= (to ) (value Pending)))) (then (remove (var ))))} (then (and (if (is In (last To) (sites Mover "PromotionZone")) (moveAgain )) (set Counter))))) (regions "PromotionZone" P1 (union (sites Side NW) (sites Side NE))) (regions "PromotionZone" P2 (union (sites Side SW) (sites Side SE))) (regions "Region-Dark" (sites Phase 0)) (regions "Region-Light" (sites Phase 2)) (regions "Region-Medium" (sites Phase 1))}) (rules (start {(place "King1" "B1") (place "Queen1" "A2") (place "Rook1" {"A4" "D1"}) (place "Bishop1" {"A1" "B2" "C3"}) (place "Knight1" {"A3" "C1"}) (place "King2" "K10") (place "Queen2" "J11") (place "Rook2" {"H11" "K8"}) (place "Bishop2" {"K11" "J10" "I9"}) (place "Knight2" {"I11" "K9"}) (place "Pawn1" {"A5" "B5" "C5" "D5" "E5" "E4" "E3" "E2" "E1"}) (place "Pawn2" {"G11" "G10" "G9" "G8" "G7" "H7" "I7" "J7" "K7"})}) {(phase "Movement" (play (if (is Prev Mover) (move Promote (last To) (piece {"Queen" "Rook" "Bishop" "Knight"}) Mover) (do (forEach Piece) (not (is Threatened (id "King" Mover)))))) (end {(if (and (is Threatened (id "King" Next)) (not (can Move (do (forEach Piece Next) (not (is Threatened (id "King" Next))))))) (result Mover Win)) (if (or (no Moves Mover) (= (counter ) 100)) (result Mover Draw))}))}))

Played on an 8x8 board with pieces with specialized moves: Pawns (8): can move one space forward or two on their first turn, capture diagonally one space forward; Rooks (2): can move any number of spaces orthogonally; Bishops (2): can move any number of spaces diagonally; Knight (2): moves in any direction, one space orthogonally with one space forward diagonally; Queens (1): can move any number of spaces orthogonally or diagonally; Kings (1): can move one space orthogonally or diagonally. Players move three pieces on their first turn. Players capture pieces by moving onto a space occupied by an opponent's piece. When a king can be captured on the next turn, it is in check, and the king must not be in check at the beginning of the opponent's next turn. If this is not possible, it is checkmate, and the opponent wins.
        
(game "Shatera" (players {(player N) (player S)}) (equipment {(board (square 8)) (piece "Pawn" Each (or {(if (is In (from ) (sites Start (piece (what (from ))))) (move Slide Forward (between (exact 2) (is Empty (between ))) (to (is Empty (to ))))) (move Step Forward (to (is Empty (to )))) (move Step (directions {FR FL}) (to (is Enemy (who (to ))) (apply (remove (to )))))})) (piece "Rook" Each (move Slide Orthogonal (to (is Enemy (who (to ))) (apply (if (is Enemy (who (to ))) (remove (to ))))))) (piece "King" Each (move Step (to (not (is Friend (who (to )))) (apply (if (is Enemy (who (to ))) (remove (to ))))))) (piece "Bishop" Each (move Slide Diagonal (to (is Enemy (who (to ))) (apply (if (is Enemy (who (to ))) (remove (to ))))))) (piece "Knight" Each (move Leap {{F F R F} {F F L F}} (to (not (is Friend (who (to )))) (apply (if (is Enemy (who (to ))) (remove (to ))))))) (piece "Queen" Each (move Slide (to (is Enemy (who (to ))) (apply (if (is Enemy (who (to ))) (remove (to ))))))) (regions "Promotion" P1 (sites Top)) (regions "Promotion" P2 (sites Bottom))}) (rules (start {(place "Pawn1" (sites Row 1)) (place "Pawn2" (sites Row 6)) (place "Rook1" {"A1" "H1"}) (place "Knight1" {"B1" "G1"}) (place "Bishop1" {"C1" "F1"}) (place "Queen1" "D1") (place "King1" "E1") (place "Rook2" {"A8" "H8"}) (place "Knight2" {"B8" "G8"}) (place "Bishop2" {"C8" "F8"}) (place "Queen2" "D8") (place "King2" "E8")}) {(phase "Opening" (play (do (forEach Piece) (not (is Threatened (id "King" Mover))) (then (and (set Value Mover (+ 1 (value Player Mover))) (if (!= (value Player Mover) 1) (moveAgain )))))) (nextPhase Mover (= 2 (value Player Mover)) "Playing")) (phase "Playing" (play (if (is Prev Mover) (move Promote (last To) (piece {"Queen" "Knight" "Bishop" "Rook"}) Mover) (do (forEach Piece) (not (is Threatened (id "King" Mover)))))))} (end (if (and (is Threatened (id "King" Next)) (not (can Move (do (forEach Piece Next) (not (is Threatened (id "King" Next))))))) (result Mover Win)))))

In Chessence, kings do not move and must remain fixed on their starting squares the entire game. (Thus, a king is unable to move out of check.) 
            
            A man has capability to move based on its relative position to other friendly men on the board, as follows:
            - If a man is orthogonally adjacent to a friendly man, then both have the ability to move as a rook in chess.
            - If a man is diagonally adjacent to a friendly man, then both have the ability to move as a chess bishop.
            - If a man is a knight's move away from a friendly man, then both have the ability to move as a knight.
            
            A man with more than one position relationship has the ability to move in more than one way. Likewise, if a man has no position relationship defined above, that man cannot move. The king has no bearing on how the other men may move.
            
            A man may not move to, nor through, a non-existent (blackened-out) square; except that a man moving as a knight may jump over a non-existent square. For a turn, a player may move a man on the board, or alternatively, they may put one of their reserve men in play by placing it on any of their six initial starting squares that are currently open.
            
        Checks, checkmate, and captures are as in standard chess. If a player has no legal moves, they lose the game.
(game "Chessence" (players 2) (equipment {(board (rectangle 9 6)) (piece "Pawn" Each (or {(if (not (all Sites (sites Around (from ) Orthogonal) (not (= (what (site )) (id "Pawn" Mover))))) (move Slide Orthogonal (between (and (is Empty (between )) (not (is In (between ) (sites "BlackenedSquares"))))) (to (is Enemy (who (to ))) (apply (not (is In (to ) (sites "BlackenedSquares"))) (if (is Enemy (who (to ))) (remove (to ))))))) (if (not (all Sites (sites Around (from ) Diagonal) (not (= (what (site )) (id "Pawn" Mover))))) (move Slide Diagonal (between (and (is Empty (between )) (not (is In (between ) (sites "BlackenedSquares"))))) (to (is Enemy (who (to ))) (apply (not (is In (to ) (sites "BlackenedSquares"))) (if (is Enemy (who (to ))) (remove (to ))))))) (if (not (all Sites (forEach (sites Around (sites To (hop Orthogonal (between true) (to true))) Orthogonal) (= 2 (count Steps (from ) (site )))) (!= (what (site )) (id "Pawn" Mover)))) (move Leap {{F F R F} {F F L F}} (to (and (not (is Friend (who (to )))) (not (is In (to ) (sites "BlackenedSquares")))) (apply (not (is In (to ) (sites "BlackenedSquares"))) (if (is Enemy (who (to ))) (remove (to )))))))})) (piece "King" Each) (hand Each) (regions "BlackenedSquares" (sites {"A2" "B3" "B5" "C6" "D4" "E5" "E7" "F8"})) (regions "PawnStart" P1 (sites {"E1" "E2" "F2" "D2" "D3" "E3"})) (regions "PawnStart" P2 (sites {"B9" "B8" "A8" "C8" "C7" "B7"}))}) (rules (start {(place "Pawn" "Hand" 3) (place "Pawn1" (sites P1 "PawnStart")) (place "Pawn2" (sites P2 "PawnStart")) (place "King1" "F1") (place "King2" "A9")}) (play (or (do (forEach Piece) (not (is Threatened (id "King" Mover)))) (if (is Occupied (handSite Mover)) (move (from (sites Hand)) (to (sites Mover "PawnStart") (is Empty (to ))))))) (end {(if (and (is Threatened (id "King" Next)) (not (can Move (do (forEach Piece Next) (not (is Threatened (id "King" Next))))))) (result Mover Win)) (if (no Moves Mover) (result Mover Loss))})))

8x12 board. Each player begins with a complement of pieces, each with their own powers of movement as follows: King (x1): may move one space in any direction; Queen (x1): moves one space diagonally, may leap two spaces diagonally on its first move over any intervening pieces; Man (x1): moves one space in any direction; Fool (x1): moves orthogonally one space; Courier (x2): moves diagonally any distance; Bishop (x2): moves diagonally two spaces, jumping over any intervening pieces; Knight (x2): moves orthogonally one space and then diagonally another space, jumping over any intervening pieces; Rook (x2): moves orthogonally any distance; Pawns (x12): move forward one space or diagonally forward one space to capture. Only the Rooks' and Queens' pawns may move forward two spaces for their first move. Each player must move the Rooks' Pawns and Queens' Pawn in this way in their first three moves. A piece is captured when an opponent's piece moves onto its space. The King is in check when it can be taken on the opponent's next turn; it must not remain in check at the end of the player's turn. When the king cannot move out of check, it is checkmated and the opponent wins.
(game "Currierspiel" (players {(player N) (player S)}) (equipment {(board (rectangle 8 12)) (regions "StartingPawnRookQueen" P1 (sites {"A2" "G2" "L2"})) (regions "StartingPawnRookQueen" P2 (sites {"A7" "G7" "L7"})) (piece "King" Each (move Step (to (not (is Friend (who (to )))) (apply (if (is Enemy (who (to ))) (remove (to ))))))) (piece "Queen" Each (or (move Step Diagonal (to (not (is Friend (who (to )))) (apply (remove (to ))))) (if (= 1 (state (from ))) (move Hop (between true) (to (not (is Friend (who (to )))) (apply (remove (to ))))) (then (set State (last To) 0))))) (piece "Mann" Each (move Step (to (not (is Friend (who (to )))) (apply (if (is Enemy (who (to ))) (remove (to ))))))) (piece "Fool" Each (move Step Orthogonal (to (not (is Friend (who (to )))) (apply (remove (to )))))) (piece "Ferz" Each (move Slide Diagonal (to (is Enemy (who (to ))) (apply (remove (to )))))) (piece "Bishop" Each (move Hop (between true) (to (not (is Friend (who (to )))) (apply (remove (to )))))) (piece "Knight" Each (move Leap {{F F R F} {F F L F}} (to (not (is Friend (who (to )))) (apply (if (is Enemy (who (to ))) (remove (to ))))))) (piece "Rook" Each (move Slide Orthogonal (to (is Enemy (who (to ))) (apply (remove (to )))))) (piece "Pawn" Each (or {(move Step Forward (to (is Empty (to )))) (move Step (directions {FR FL}) (to (is Enemy (who (to ))) (apply (remove (to )))))}))}) (rules (start {(place "Pawn1" (sites Row 1)) (place "Pawn2" (sites Row 6)) (place "Rook1" {"A1" "L1"}) (place "Knight1" {"B1" "K1"}) (place "Ferz1" {"C1" "J1"}) (place "Bishop1" {"D1" "I1"}) (place "Queen1" "G1" 1) (place "Fool1" "H1") (place "Mann1" "E1") (place "King1" "F1") (place "Rook2" {"A8" "L8"}) (place "Knight2" {"B8" "K8"}) (place "Ferz2" {"C8" "J8"}) (place "Bishop2" {"D8" "I8"}) (place "Queen2" "G8" 1) (place "Fool2" "H8") (place "Mann2" "E8") (place "King2" "F8")}) {(phase "Opening" (play (forEach Site (intersection (sites Occupied Mover) (sites Mover)) (move (from (site )) (to (ahead (site ) 2 Forward))))) (nextPhase Mover (= 0 (count Sites (intersection (sites Occupied Mover) (sites Mover)))) "Playing")) (phase "Playing" (play (do (forEach Piece) (not (is Threatened (id "King" Mover))))))} (end (if (and (is Threatened (id "King" Next)) (not (can Move (do (forEach Piece Next) (not (is Threatened (id "King" Next))))))) (result Mover Win)))))

8x8 board. The pieces move as follows, with the number per player: 1 x King (king): moves one space orthogonally or diagonally. The King may leap to the second square on its first move if it has not yet been checked and does not hop over an opponent's piece. 1 x Queen: One square diagonally. On its first move, the Queen may jump diagonally two squares. The Queen cannot capture when making this move. 2 x Rook: Any number of spaces orthogonally. 2 x Fil (elephant): Two squares diagonally, jumping over the first. Cannot capture another Fil. 2 x Knight: Moves as a chess knight. 8 x Pawn: Moves one space forward orthogonally; one space forward diagonally to capture. May move two spaces on its first move. En passant is allowed. Promoted to Queen when reaching the eighth rank, and may make the Queen's leap on its first move after being promoted. No castling. An opponent's piece is captured by moving a player's own piece onto a space occupied by the opponent's piece. When a King can be captured on the next turn by an opponent's piece, it is in check. The King must not be in check at the end of the player's turn. If this is not possible, it is checkmate and the opponent wins. Stalemate results in a draw. Capturing all of an opponent's pieces except the King also results in a win.
(game "Long Assize" (players {(player N) (player S)}) (equipment {(board (square 8)) (piece "King" Each (or (move Step (to (not (is Friend (who (to )))) (apply (remove (to ))))) (if (= 1 (state (from ))) (move Hop (between (not (is Enemy (who (between ))))) (to (not (is Friend (who (to )))) (apply (if (is Enemy (who (to ))) (remove (to ))))))) (then (if (= (state (last To)) 1) (set State (last To) 0))))) (piece "Rook" Each (move Slide Orthogonal (to (is Enemy (who (to ))) (apply (remove (to )))))) (piece "Bishop" Each (move Hop Diagonal (between true) (to (not (is Friend (who (to )))) (apply (if (is Enemy (who (to ))) (remove (to ))))))) (piece "Knight" Each (move Leap {{F F R F} {F F L F}} (to (not (is Friend (who (to )))) (apply (if (is Enemy (who (to ))) (remove (to ))))))) (piece "Queen" Each (or (move Step Diagonal (to (not (is Friend (who (to )))) (apply (remove (to )))) (then (if (= (state (last To)) 1) (set State (last To) 0)))) (if (= 1 (state (from ))) (move Hop Diagonal (between true) (to (is Empty (to ))))) (then (if (= (state (last To)) 1) (set State (last To) 0))))) (piece "Pawn" Each (or {(move Step Forward (to (is Empty (to )))) (move Step (directions {FR FL}) (to (is Enemy (who (to ))) (apply (remove (to ))))) (or (if (is In (from ) (sites Start (piece (what (from ))))) (move Slide Forward (between (exact 2) (is Empty (between ))) (to (is Empty (to ))) (then (set Pending (ahead (last To) Backward))))) (move Step (directions {FR FL}) (to (and (is Pending) (= (to ) (value Pending)))) (then (remove (ahead (last To) Backward)))))} (then (if (is In (last To) (sites Mover "Promotion")) (and (promote (last To) (piece (id "Queen" Mover))) (set State (last To) 1)))))) (regions "Promotion" P1 (sites Top)) (regions "Promotion" P2 (sites Bottom))}) (rules (start {(place "Pawn1" (sites Row 1)) (place "Pawn2" (sites Row 6)) (place "Rook1" {"A1" "H1"}) (place "Knight1" {"B1" "G1"}) (place "Bishop1" {"C1" "F1"}) (place "Queen1" "D1" 1) (place "King1" "E1" 1) (place "Rook2" {"A8" "H8"}) (place "Knight2" {"B8" "G8"}) (place "Bishop2" {"C8" "F8"}) (place "Queen2" "D8" 1) (place "King2" "E8" 1)}) (play (do (forEach Piece) (not (is Threatened (id "King" Mover))) (then (if (and (= 1 (state (where "King" Next))) (is Threatened (id "King" Next))) (set State (where "King" Next) 0))))) (end {(if (and (is Threatened (id "King" Next)) (not (can Move (do (forEach Piece Next) (not (is Threatened (id "King" Next))))))) (result Mover Win)) (if (no Moves Next) (result Mover Draw)) (if (= (count Pieces Next) 1) (result Mover Win))})))

Half Chess is played with the same rules as chess.
(game "Half Chess" (players 2) (equipment {(board (rectangle 4 8)) (piece "Rook" Each (move Slide Orthogonal (to (is Enemy (who (to ))) (apply (remove (to ) (then (set Counter))))))) (piece "King" Each (move Step (to (not (is Friend (who (to )))) (apply (if (is Enemy (who (to ))) (remove (to ) (then (set Counter)))))))) (piece "Bishop" Each (move Slide Diagonal (to (is Enemy (who (to ))) (apply (remove (to ) (then (set Counter))))))) (piece "Knight" Each (move Leap {{F F R F} {F F L F}} (to (not (is Friend (who (to )))) (apply (if (is Enemy (who (to ))) (remove (to ) (then (set Counter)))))))) (piece "Queen" Each (move Slide (to (is Enemy (who (to ))) (apply (remove (to ) (then (set Counter)))))))}) (rules (start {(place "Rook1" {"H1" "H4"}) (place "Knight1" {"G1" "G4"}) (place "Bishop1" {"G2" "G3"}) (place "Queen1" "H3") (place "King1" "H2") (place "Rook2" {"A1" "A4"}) (place "Knight2" {"B1" "B4"}) (place "Bishop2" {"B2" "B3"}) (place "Queen2" "A3") (place "King2" "A2")}) (play (do (forEach Piece) (not (is Threatened (id "King" Mover))))) (end {(if (and (is Threatened (id "King" Next)) (not (can Move (do (forEach Piece Next) (not (is Threatened (id "King" Next))))))) (result Mover Win)) (if (or (no Moves Mover) (= (counter ) 100)) (result Mover Draw))})))

McCooey Chess is played on a hexagonal board with each side having length 6, and each space oriented horizontally. The board has has 91 spaces.
            
            Piece Movement:
            * All pieces other than Pawns move as in Glinski Chess.
            - Kings step one space in any of the 12 directions. They do not castle.
            - Queens slide in any of the 12 directions.
            - Rooks slide in any of the 6 adjacent direction.
            - Bishops slide in any of the 6 'diagonal' directions.
            - Knights move two spaces in any adjacent direction, then one space in another direction.
            * Pawns can advance one space forward without capturing. A Pawn on a Pawn start space but not in the innermost column can advance two spaces forward without capturing. Pawns capture 'diagonally forward' (i.e., to a space ahead connected by an edge, and having the same colour). En Passant capture and Pawn promotion take place as in Glinski Chess.
            
        The game ends on a checkmate or stalemate.
(game "McCooey Chess" (players {(player N) (player S)}) (equipment {(board (rotate 90.0 (hex 6))) (piece "King" Each (move Step All (to (or (is In (to ) (sites Empty)) (is Enemy (who (to )))) (apply (if (is Enemy (who (to ))) (remove (to ) (then (set Counter)))))))) (piece "Queen" Each (move Slide All (to (is Enemy (who (to ))) (apply (if (is Enemy (who (to ))) (remove (to ) (then (set Counter)))))))) (piece "Rook" Each (move Slide Orthogonal (to (is Enemy (who (to ))) (apply (if (is Enemy (who (to ))) (remove (to ) (then (set Counter)))))))) (piece "Bishop" Each (move Slide Diagonal (to (is Enemy (who (to ))) (apply (if (is Enemy (who (to ))) (remove (to ) (then (set Counter)))))))) (piece "Knight" Each (move Leap {{F F R F} {F F L F}} (to (or (is In (to ) (sites Empty)) (is Enemy (who (to )))) (apply (if (is Enemy (who (to ))) (remove (to ) (then (set Counter)))))))) (piece "Pawn" Each (or {(move Step Forward (to (is Empty (to )))) (if (and (is In (from ) (sites Start (piece (what (from ))))) (not (is In (from ) (sites Mover "CentrePawnStartCell")))) (move Hop Forward (between (is In (between ) (sites Empty))) (to (is In (to ) (sites Empty))) (then (and {(set Pending (ahead (last To) Backward)) (set Var (last To))})))) (move Step (if (is Mover P1) (directions {NNW NNE}) (directions {SSW SSE})) (to (is Enemy (who (to ))) (apply (remove (to ))))) (move Step (if (is Mover P1) (directions {NNW NNE}) (directions {SSW SSE})) (to (and (is Pending) (= (to ) (value Pending)))) (then (remove (var ))))} (then (and (if (is In (last To) (sites Mover "PromotionZone")) (moveAgain )) (set Counter))))) (regions "CentrePawnStartCell" P1 (sites {"D4"})) (regions "CentrePawnStartCell" P2 (sites {"H8"})) (regions "PromotionZone" P1 (union (sites Side NW) (sites Side NE))) (regions "PromotionZone" P2 (union (sites Side SW) (sites Side SE))) (regions "Region-Dark" (sites Phase 0)) (regions "Region-Light" (sites Phase 2)) (regions "Region-Medium" (sites Phase 1))}) (rules (start {(place "King1" "B1") (place "Queen1" "A2") (place "Rook1" {"A3" "C1"}) (place "Bishop1" {"A1" "B2" "C3"}) (place "Knight1" {"B3" "C2"}) (place "King2" "K10") (place "Queen2" "J11") (place "Rook2" {"I11" "K9"}) (place "Bishop2" {"K11" "J10" "I9"}) (place "Knight2" {"I10" "J9"}) (place "Pawn1" {"A4" "B4" "C4" "D4" "D3" "D2" "D1"}) (place "Pawn2" {"H11" "H10" "H9" "H8" "I8" "J8" "K8"})}) {(phase "Movement" (play (if (is Prev Mover) (move Promote (last To) (piece {"Queen" "Rook" "Bishop" "Knight"}) Mover) (do (forEach Piece) (not (is Threatened (id "King" Mover)))))) (end {(if (and (is Threatened (id "King" Next)) (not (can Move (do (forEach Piece Next) (not (is Threatened (id "King" Next))))))) (result Mover Win)) (if (or (no Moves Mover) (= (counter ) 100)) (result Mover Draw))}))}))

8x8 board. The pieces move as follows: King (x1): one space in any direction' Queen (x1): moves one square diagonally. On its first move, the Queen may jump diagonally two squares. The Queen cannot capture when making this move. Bishop (x2): jumps exactly two squares diagonally; Knight (x2): moves one space orthogonally and then one space diagonally, jumping over the intervening spaces; Rook (x2): moves any distance orthogonally; Pawns (x8): move one square forward orthogonally or one square forward diagonally to capture. Pawns may move two squares on their first move, but only if there have been no captures yet in the game. When reaching the opposite edge of the board, pawns may be promoted to Queen if the Queen has already been taken. If the King can be captured on the opponent's next move, it is in check. The King must not be in check at the end of the player's turn. If this is impossible, it is checkmate, and the opponent wins. 
(game "Acedrex (Alfonso)" (players {(player N) (player S)}) (equipment {(board (square 8)) (piece "King" Each (move Step (to (not (is Friend (who (to )))) (apply (if (is Enemy (who (to ))) (remove (to ) (then (set Var 1)))))))) (piece "Queen" Each (or (move Step Diagonal (to (not (is Friend (who (to )))) (apply (if (is Enemy (who (to ))) (remove (to ) (then (set Var 1))))))) (if (not (= 1 (state (from )))) (move Hop Diagonal (between true) (to (is Empty (to ))))) (then (if (not (= 1 (state (last To)))) (set State (last To) 1))))) (piece "Bishop" Each (move Hop Diagonal (between true) (to (not (is Friend (who (to )))) (apply (if (is Enemy (who (to ))) (remove (to ) (then (set Var 1)))))))) (piece "Knight" Each (move Leap {{F F R F} {F F L F}} (to (not (is Friend (who (to )))) (apply (if (is Enemy (who (to ))) (remove (to ) (then (set Var 1)))))))) (piece "Rook" Each (move Slide Orthogonal (to (is Enemy (who (to ))) (apply (remove (to ) (then (set Var 1))))))) (piece "Pawn" Each (or {(if (and (not (= (var ) 1)) (is In (from ) (sites Start (piece (what (from )))))) (move Slide Forward (between (exact 2) (is Empty (between ))) (to (is Empty (to ))))) (move Step Forward (to (is Empty (to )))) (move Step (directions {FR FL}) (to (is Enemy (who (to ))) (apply (if (is Enemy (who (to ))) (remove (to ) (then (set Var 1)))))))} (then (if (and (= (where "Queen" Mover) -1) (is In (last To) (sites Mover "Promotion"))) (promote (last To) (piece "Queen") Mover))))) (regions "Promotion" P1 (sites Top)) (regions "Promotion" P2 (sites Bottom))}) (rules (start {(place "Pawn1" (sites Row 1)) (place "Pawn2" (sites Row 6)) (place "Rook1" {"A1" "H1"} 1) (place "Knight1" {"B1" "G1"}) (place "Bishop1" {"C1" "F1"}) (place "Queen1" "D1") (place "King1" "E1" 1) (place "Rook2" {"A8" "H8"} 1) (place "Knight2" {"B8" "G8"}) (place "Bishop2" {"C8" "F8"}) (place "Queen2" "D8") (place "King2" "E8" 1)}) (play (do (forEach Piece) (not (is Threatened (id "King" Mover))))) (end (if (and (is Threatened (id "King" Next)) (not (can Move (do (forEach Piece Next) (not (is Threatened (id "King" Next))))))) (result Mover Win)))))

Starchess is played on a star-shaped hexagonal board that can be thought of as a hexagon-shaped board with each side having length 6, but with four spaces removed from each corner. The board has 37 spaces.
            
            Starchess starts off with the non-Pawn pieces being placed behind the Pawns. This happens one piece at a time, in alternating turns, until all non-Pawn pieces have been placed. Then the 'movement phase' of the game begins as usual.
            
            Piece Movement:
            * Knights move as in Glinsky Chess.
            - They move two spaces in any adjacent direction, then one space in another direction.
            * Kings can move one space in any of those same six adjacent directions. There is no castling.
            * Queens can slide in any of the six adjacent directions from their current space---North, South, or 60 degrees off either of those.
            * Rooks can slide forward or backward only in their given column.
            * Bishops can slide in only four of the adjacent directions: they cannot slide North or South.
            * Pawns can advance one space forward without capturing. A Pawn on a Pawn start space can advance two spaces forward, even if it has previously moved (by capturing) to a different Pawn start space than it started the game on. Pawns capture by moving to one of the two adjacent spaces 60 degrees left or right of forward. On reaching the farthest rank in any of the innermost five columns, Pawns are promoted to a Queen, Rook, Bishop, or Knight, as the player chooses.
            
            The game ends on a checkmate or stalemate.
            
        Some terminology: a Pawn off to the side, in one of the two spaces at the extremes of the middle row is called a 'mummy', while a Pawn in one of the spaces adjacent to that is called a 'dead Pawn'. Mummies and dead Pawns cannot be promoted until they return to one of the innermost five columns.
(game "Starchess" (players {(player N) (player S)}) (equipment {(board (rotate 30.0 (hex Star 2))) (piece "King" Each (move Step Orthogonal (to (or (is In (to ) (sites Empty)) (is Enemy (who (to )))) (apply (if (is Enemy (who (to ))) (remove (to ) (then (set Counter)))))))) (piece "Queen" Each (move Slide Orthogonal (to (is Enemy (who (to ))) (apply (if (is Enemy (who (to ))) (remove (to ) (then (set Counter)))))))) (piece "Rook" Each (move Slide (directions {N S}) (to (is Enemy (who (to ))) (apply (if (is Enemy (who (to ))) (remove (to ) (then (set Counter)))))))) (piece "Bishop" Each (move Slide (directions {WNW ENE WSW ESE}) (to (is Enemy (who (to ))) (apply (if (is Enemy (who (to ))) (remove (to ) (then (set Counter)))))))) (piece "Knight" Each (move Leap {{F F R F} {F F L F}} (to (not (is Friend (who (to )))) (apply (if (is Enemy (who (to ))) (remove (to ) (then (set Counter)))))))) (piece "Pawn" Each (or {(move Step Forward (to (is Empty (to )))) (if (is In (from ) (sites Start (piece (what (from ))))) (move Hop Forward (between (is In (between ) (sites Empty))) (to (is In (to ) (sites Empty))) (then (and (set Pending (ahead (last To) Backward)) (set Var (last To)))))) (move Step (if (is Mover P1) (directions {WNW ENE}) (directions {WSW ESE})) (to (is Enemy (who (to ))) (apply (remove (to ))))) (move Step (if (is Mover P1) (directions {WNW ENE}) (directions {WSW ESE})) (to (and (is Pending) (= (to ) (value Pending)))) (then (remove (var ))))} (then (and (if (is In (last To) (sites Mover "PromotionZone")) (moveAgain )) (set Counter))))) (hand Each 5) (regions "Home" P1 (sites {"A3" "B3" "C3" "C2" "C1"})) (regions "Home" P2 (sites {"G9" "G8" "G7" "H7" "I7"})) (regions "PromotionZone" P1 (sites P2 "Home")) (regions "PromotionZone" P2 (sites P1 "Home")) (regions "Region-Dark" (sites Phase 1)) (regions "Region-Light" (sites Phase 2)) (regions "Region-Medium" (sites Phase 0))}) (rules (start {(place "King" "Hand" 1) (place "Queen" "Hand" 1) (place "Rook" "Hand" 1) (place "Bishop" "Hand" 1) (place "Knight" "Hand" 1) (place "Pawn1" {"B4" "C4" "D4" "D3" "D2"}) (place "Pawn2" {"F8" "F7" "F6" "G6" "H6"})}) {(phase "Placement" (play (move (from (sites Occupied Mover (mover ))) (to (intersection (sites Mover "Home") (sites Empty))))) (nextPhase (all Sites (sites Hand P2) (= 0 (count Cell (site )))) "Movement")) (phase "Movement" (play (if (is Prev Mover) (move Promote (last To) (piece {"Queen" "Rook" "Bishop" "Knight"}) Mover) (do (forEach Piece) (not (is Threatened (id "King" Mover)))))) (end {(if (and (is Threatened (id "King" Next)) (not (can Move (do (forEach Piece Next) (not (is Threatened (id "King" Next))))))) (result Mover Win)) (if (or (no Moves Mover) (= (counter ) 100)) (result Mover Draw))}))}))

8x8 board. The pieces move as follows, with the number per player: 1 x King (king): moves one space orthogonally or diagonally. The King may leap one, two, or three squares on its first move if it has not yet been checked and does not hop over an opponent's piece. The King cannot make this leap over an opponent's piece. A capture cannot be made with this special first move. 1 x Queen: One square diagonally. On its first move, the Queen may jump diagonally two squares. The Queen cannot capture when making this move. 2 x Rook: Any number of spaces orthogonally. 2 x Bishop: Two squares diagonally, jumping over the first. Cannot capture another Bishop. 2 x Knight: Moves as a chess knight. 8 x Pawn: Moves one space forward orthogonally; one space forward diagonally to capture. The Rook's, King's and Queen's Pawns may move two spaces on its first move. The King's and Queen's Pawns are restricted in having this ability only if no piece on the board has been captured. Promoted to Queen when reaching the eighth rank, and may make the Queen's leap on its first move after being promoted, but cannot capture with this move. No castling. An opponent's piece is captured by moving a player's own piece onto a space occupied by the opponent's piece. When a King can be captured on the next turn by an opponent's piece, it is in check. The King must not be in check at the end of the player's turn. If this is not possible, it is checkmate and the opponent wins.
        
(game "Schachzabel" (players {(player N) (player S)}) (equipment {(board (square 8)) (piece "King" Each (or (move Step (to (not (is Friend (who (to )))) (apply (remove (to ))))) (if (= 1 (state (from ))) (move Hop (between (range 1 3) (not (is Enemy (who (between ))))) (to (is Empty (to ))))) (then (if (= (state (last To)) 1) (set State (last To) 0))))) (piece "Rook" Each (move Slide Orthogonal (to (is Enemy (who (to ))) (apply (remove (to )))))) (piece "Bishop" Each (move Hop Diagonal (between true) (to (not (is Friend (who (to )))) (apply (if (is Enemy (who (to ))) (remove (to ))))))) (piece "Knight" Each (move Leap {{F F R F} {F F L F}} (to (not (is Friend (who (to )))) (apply (if (is Enemy (who (to ))) (remove (to ))))))) (piece "Queen" Each (or (move Step Diagonal (to (not (is Friend (who (to )))) (apply (remove (to )))) (then (if (= (state (last To)) 1) (set State (last To) 0)))) (if (= 1 (state (from ))) (move Hop Diagonal (between true) (to (is Empty (to ))))) (then (if (= (state (last To)) 1) (set State (last To) 0))))) (piece "Pawn" Each (or {(move Step Forward (to (is Empty (to )))) (move Step (directions {FR FL}) (to (is Enemy (who (to ))) (apply (remove (to ))))) (if (and {(is In (from ) (sites Start (piece (what (from ))))) (= 1 (state (from ))) (= 32 (count Sites (sites Occupied All)))}) (move Slide Forward (between (exact 2) (is Empty (between ))) (to (is Empty (to )))))} (then (if (is In (last To) (sites Mover "Promotion")) (and (promote (last To) (piece (id "Queen" Mover))) (set State (last To) 1)))))) (regions "Promotion" P1 (sites Top)) (regions "Promotion" P2 (sites Bottom))}) (rules (start {(place "Pawn1" (sites {"A2" "D2" "E2" "H2"}) 1) (place "Pawn2" (sites {"A7" "D7" "E7" "H7"}) 1) (place "Pawn1" (sites {"B2" "C2" "F2" "G2"})) (place "Pawn2" (sites {"B7" "C7" "F7" "G7"})) (place "Rook1" {"A1" "H1"}) (place "Knight1" {"B1" "G1"}) (place "Bishop1" {"C1" "F1"}) (place "Queen1" "D1" 1) (place "King1" "E1" 1) (place "Rook2" {"A8" "H8"}) (place "Knight2" {"B8" "G8"}) (place "Bishop2" {"C8" "F8"}) (place "Queen2" "D8" 1) (place "King2" "E8" 1)}) (play (do (forEach Piece) (not (is Threatened (id "King" Mover))) (then (if (and (= 1 (state (where "King" Next))) (is Threatened (id "King" Next))) (set State (where "King" Next) 0))))) (end (if (and (is Threatened (id "King" Next)) (not (can Move (do (forEach Piece Next) (not (is Threatened (id "King" Next))))))) (result Mover Win)))))

The rules are the same as for Chess, except pawns cannot move two spaces on the first move, there is no castling, and no en-passant capture.
(game "Los Alamos Chess" (players {(player N) (player S)}) (equipment {(board (square 6)) (piece "Pawn" Each (or {(move Step Forward (to (is Empty (to )))) (move Step (directions {FR FL}) (to (is Enemy (who (to ))) (apply (remove (to )))))} (then (and (if (is In (last To) (sites Mover "Promotion")) (moveAgain )) (set Counter))))) (piece "Rook" Each (move Slide Orthogonal (to (is Enemy (who (to ))) (apply (remove (to ) (then (set Counter))))))) (piece "King" Each (move Step (to (not (is Friend (who (to )))) (apply (if (is Enemy (who (to ))) (remove (to ) (then (set Counter)))))))) (piece "Knight" Each (move Leap {{F F R F} {F F L F}} (to (not (is Friend (who (to )))) (apply (if (is Enemy (who (to ))) (remove (to ) (then (set Counter)))))))) (piece "Queen" Each (move Slide (to (is Enemy (who (to ))) (apply (remove (to ) (then (set Counter))))))) (regions "Promotion" P1 (sites Top)) (regions "Promotion" P2 (sites Bottom))}) (rules (start {(place "Pawn1" (sites Row 1)) (place "Pawn2" (sites Row 4)) (place "Rook1" {"A1" "F1"}) (place "Knight1" {"B1" "E1"}) (place "Queen1" "C1") (place "King1" "D1") (place "Rook2" {"A6" "F6"}) (place "Knight2" {"B6" "E6"}) (place "Queen2" "C6") (place "King2" "D6")}) (play (if (is Prev Mover) (move Promote (last To) (piece {"Queen" "Knight" "Rook"}) Mover) (do (forEach Piece) (not (is Threatened (id "King" Mover)))))) (end {(if (and (is Threatened (id "King" Next)) (not (can Move (do (forEach Piece Next) (not (is Threatened (id "King" Next))))))) (result Mover Win)) (if (or (no Moves Mover) (= (counter ) 100)) (result Mover Draw))})))

Viking Chess is played on a board with 12 files and 7 ranks. The pieces are set up with both sides starting on the same side of board. Both sides' Pawns move in the same direction, and all Pawns promote normally upon reaching the (same) 7th rank. There is no Pawn double-move or en passant capture. There is no castling.
(game "Viking Chess" (players {(player N) (player N)}) (equipment {(board (rectangle 7 12)) (piece "Pawn" Each (or {(move Step Forward (to (is Empty (to )))) (move Step (directions {FR FL}) (to (is Enemy (who (to ))) (apply (remove (to )))))} (then (and (if (is In (last To) (sites Mover "Promotion")) (moveAgain )) (set Counter))))) (piece "Rook" Each (move Slide Orthogonal (to (is Enemy (who (to ))) (apply (remove (to )))))) (piece "King" Each (move Step (to (not (is Friend (who (to )))) (apply (if (is Enemy (who (to ))) (remove (to ))))))) (piece "Bishop" Each (move Slide Diagonal (to (is Enemy (who (to ))) (apply (remove (to )))))) (piece "Knight" Each (move Leap {{F F R F} {F F L F}} (to (not (is Friend (who (to )))) (apply (if (is Enemy (who (to ))) (remove (to ))))))) (piece "Queen" Each (move Slide (to (is Enemy (who (to ))) (apply (remove (to )))))) (regions "Promotion" P1 (sites Top)) (regions "Promotion" P2 (sites Top))}) (rules (start {(place "Pawn1" {"B2" "B3" "C3" "D3" "E3" "E2" "F2" "F1"}) (place "Rook1" {"A1" "A2"}) (place "Knight1" {"C2" "D2"}) (place "Bishop1" {"B1" "E1"}) (place "Queen1" "D1") (place "King1" "C1") (place "Pawn2" {"G1" "G2" "H2" "H3" "I3" "J3" "K3" "K2"}) (place "Rook2" {"L1" "L2"}) (place "Knight2" {"J2" "I2"}) (place "Bishop2" {"K1" "H1"}) (place "Queen2" "I1") (place "King2" "J1")}) (play (if (is Prev Mover) (move Promote (last To) (piece {"Queen" "Knight" "Bishop" "Rook"}) Mover) (do (forEach Piece) (not (is Threatened (id "King" Mover)))))) (end {(if (and (is Threatened (id "King" Next)) (not (can Move (do (forEach Piece Next) (not (is Threatened (id "King" Next))))))) (result Mover Win)) (if (or (no Moves Mover) (= (counter ) 100)) (result Mover Draw))})))

Mini Hexchess is played on a hexagonal board with each side having length 5, and each space oriented horizontally. The board has 37 spaces.
            
            Piece Movement:
            * Kings, Rooks, Bishops, and Knights move as in Glinski Chess.
            - Kings step one space in any of the 12 directions. They do not castle.
            - Rooks slide in any of the 6 adjacent directions.
            - Bishops slide in any of the 6 'diagonal' directions.
            - Knights move two spaces in any adjacent direction, then one space in another direction.
            * There are no Queens in Mini Hexchess.
            * Pawns can advance one space forward without capturing. Pawns can never advance more than one space. Pawns capture 'diagonally forward' (i.e., to a space ahead connected by an edge, and having the same colour). There is no en passant capture. On reaching the farthest rank in a given file, Pawns are promoted to a Rook, Bishop, or Knight. Note that a Pawn cannot be promoted to a Queen, since there are no Queens in Mini Hexchess.
            
        The game ends on a checkmate or stalemate.
(game "Mini Hexchess" (players {(player N) (player S)}) (equipment {(board (rotate 90.0 (hex 4))) (piece "King" Each (move Step All (to (or (is In (to ) (sites Empty)) (is Enemy (who (to )))) (apply (if (is Enemy (who (to ))) (remove (to ) (then (set Counter)))))))) (piece "Queen" Each (move Slide (to (is Enemy (who (to ))) (apply (remove (to ) (then (set Counter))))))) (piece "Rook" Each (move Slide Orthogonal (to (is Enemy (who (to ))) (apply (remove (to ) (then (set Counter))))))) (piece "Bishop" Each (move Slide Diagonal (to (is Enemy (who (to ))) (apply (remove (to ) (then (set Counter))))))) (piece "Knight" Each (move Leap {{F F R F} {F F L F}} (to (not (is Friend (who (to )))) (apply (if (is Enemy (who (to ))) (remove (to ) (then (set Counter)))))))) (piece "Pawn" Each (or {(move Step Forward (to (is Empty (to )))) (move Step (if (is Mover P1) (directions {NNW NNE}) (directions {SSW SSE})) (to (is Enemy (who (to ))) (apply (remove (to )))))} (then (and (if (is In (last To) (sites Mover "PromotionZone")) (moveAgain )) (set Counter))))) (regions "PromotionZone" P1 (union (sites Side NW) (sites Side NE))) (regions "PromotionZone" P2 (union (sites Side SW) (sites Side SE))) (regions "Region-Dark" (sites Phase 2)) (regions "Region-Light" (sites Phase 1)) (regions "Region-Medium" (sites Phase 0))}) (rules (start {(place "King1" "B2") (place "Rook1" "B1") (place "Bishop1" "A1") (place "Knight1" "A2") (place "King2" "F6") (place "Rook2" "F7") (place "Bishop2" "G7") (place "Knight2" "G6") (place "Pawn1" {"A3" "B3" "C3" "C2" "C1"}) (place "Pawn2" {"E7" "E6" "E5" "F5" "G5"})}) {(phase "Movement" (play (if (is Prev Mover) (move Promote (last To) (piece {"Rook" "Bishop" "Knight"}) Mover) (do (forEach Piece) (not (is Threatened (id "King" Mover)))))) (end {(if (and (is Threatened (id "King" Next)) (not (can Move (do (forEach Piece Next) (not (is Threatened (id "King" Next))))))) (result Mover Win)) (if (or (no Moves Mover) (= (counter ) 100)) (result Mover Draw))}))}))

Here, the King and Rook move as usual, and the knight moves exactly two squares, and may jump over a piece doing that. Gardner asks his readers whether white can win. (White can make a draw by taking the opponents rook and thus giving stalemate.).
(game "1D Chess" (players 2) (equipment {(board (rectangle 1 8)) (piece "Rook" Each (move Slide Orthogonal (to (is Enemy (who (to ))) (apply (remove (to )))))) (piece "King" Each (move Step (to (not (is Friend (who (to )))) (apply (if (is Enemy (who (to ))) (remove (to ))))))) (piece "Knight" Each (move Leap {{F F}} (to (not (is Friend (who (to )))) (apply (if (is Enemy (who (to ))) (remove (to )))))))}) (rules (start {(place "Rook1" "C1") (place "Knight1" "B1") (place "King1" "A1") (place "Rook2" "F1") (place "Knight2" "G1") (place "King2" "H1")}) (play (do (forEach Piece) (not (is Threatened (id "King" Mover))))) (end {(if (and (is Threatened (id "King" Next)) (not (can Move (do (forEach Piece Next) (not (is Threatened (id "King" Next))))))) (result Mover Win)) (if (or (no Moves Mover) (= (counter ) 100)) (result Mover Draw))})))

All rules are the same as regular Xiangqi.
(game "Xiang Hex" (players {(player N) (player S)}) (equipment {(board (renumber Cell (rotate 90.0 (remove (hex Rectangle 9 11) {0 1 11 21 63 74 85 84 94 93 83 73 31 20 9 10})))) (piece "Jiang" Each (move Step Orthogonal (to (and (is In (to ) (sites Mover "Palace")) (not (is Friend (who (to ))))) (apply (remove (to )))))) (piece "Shi" Each (move Step Diagonal (to (and (is In (to ) (sites Mover "Palace")) (not (is Friend (who (to ))))) (apply (remove (to )))))) (piece "Xiang" Each (move Slide Diagonal (between (exact 2) (and {(is In (between ) (sites Mover "Home")) (is Empty (between ))})) (to (is Enemy (who (to ))) (apply (remove (to )))))) (piece "Ma" Each (forEach Direction Orthogonal (to (is Empty (to )) (apply (forEach Direction (from (to )) (directions {FR FL} All) (if (not (is Friend (who (to )))) (move (from ) (to (apply (is Enemy (who (to ))) (remove (to ))))))))))) (piece "Ju" Each (move Slide Orthogonal (to (is Enemy (who (to ))) (apply (remove (to )))))) (piece "Pao" Each (or (move Slide Orthogonal) (move Hop Orthogonal (between (count Rows) (count Rows) (is Occupied (between ))) (to (is Empty (to )) (apply (is Enemy (who (to ))) (remove (to ))))))) (piece "Zu" Each (move Step (if (is In (from ) (sites Mover "Home")) Forward (union (directions {Forward FL FR}) (directions {W E}))) (to (not (is Friend (who (to )))) (apply (remove (to )))))) (regions "PalaceP1" P1 {0 1 2 4 7 8 12}) (regions "PalaceP2" P2 {66 70 71 74 76 77 78}) (regions "Home" P1 (forEach (sites Board) (< (site ) 37))) (regions "Home" P2 (forEach (sites Board) (> (site ) 41)))}) (rules (start {(place "Jiang1" "A1") (place "Shi1" {"A2" "B1"}) (place "Xiang1" {"A3" "C1"}) (place "Ma1" {"A4" "D1"}) (place "Ju1" {"A5" "E1"}) (place "Pao1" {"B5" "E2"}) (place "Zu1" {"B6" "C5" "D4" "E3" "F2"}) (place "Jiang2" "K11") (place "Shi2" {"J11" "K10"}) (place "Xiang2" {"I11" "K9"}) (place "Ma2" {"H11" "K8"}) (place "Ju2" {"G11" "K7"}) (place "Pao2" {"G10" "J7"}) (place "Zu2" {"F10" "G9" "H8" "I7" "J6"})}) (play (do (forEach Piece) (and (if (= (column (where "Jiang" P1)) (column (where "Jiang" P2))) (not (= (count Sites (forEach (sites Direction (where "Jiang" P1) N (= (to ) (where "Jiang" P2))) (is Occupied (site )))) 0)) true) (not (is Threatened (id "Jiang" Mover)))))) (end {(if (and (is Threatened (id "Jiang" Next)) (not (can Move (do (forEach Piece Next) (not (is Threatened (id "Jiang" Next))))))) (result Mover Win)) (if (no Moves Next) (result Mover Win))})))

Played on a board with 9x10 intersecting lines. Pieces are placed on the intersections of the lines. Centered on opposite sides of the boards are two areas, known as the gong (\"castle\
(game "Xiangqi" (players {(player N) (player S)}) (equipment {(board (rectangle 10 9) Vertex) (piece "Jiang" Each (move Step Orthogonal (to (and (is In (to ) (sites Mover "Palace")) (not (is Friend (who (to ))))) (apply (remove (to )))))) (piece "Shi" Each (move Step Diagonal (to (and (is In (to ) (sites Mover "Palace")) (not (is Friend (who (to ))))) (apply (remove (to )))))) (piece "Xiang" Each (move Slide Diagonal (between (exact 2) (and {(is In (between ) (sites Mover "Home")) (is Empty (between ))})) (to (is Enemy (who (to ))) (apply (remove (to )))))) (piece "Ma" Each (forEach Direction Orthogonal (to (is Empty (to )) (apply (forEach Direction (from (to )) (directions {FR FL} All) (if (not (is Friend (who (to )))) (move (from ) (to (apply (is Enemy (who (to ))) (remove (to ))))))))))) (piece "Ju" Each (move Slide Orthogonal (to (is Enemy (who (to ))) (apply (remove (to )))))) (piece "Pao" Each (or (move Slide Orthogonal) (move Hop Orthogonal (between (count Rows) (count Rows) (is Occupied (between ))) (to (is Empty (to )) (apply (is Enemy (who (to ))) (remove (to ))))))) (piece "Zu" Each (move Step (if (is In (from ) (sites Mover "Home")) Forward (directions {Forward Rightward Leftward})) (to (not (is Friend (who (to )))) (apply (remove (to )))))) (regions "PalaceP1" P1 {3 4 5 12 13 14 21 22 23}) (regions "PalaceP2" P2 {66 67 68 75 76 77 84 85 86}) (regions "Home" P1 (expand (sites Bottom) 4)) (regions "Home" P2 (expand (sites Top) 4))}) (rules (start {(place "Jiang1" "E1") (place "Shi1" {"D1" "F1"}) (place "Xiang1" {"C1" "G1"}) (place "Ma1" {"B1" "H1"}) (place "Ju1" {"A1" "I1"}) (place "Pao1" {"B3" "H3"}) (place "Zu1" {"A4" "C4" "E4" "G4" "I4"}) (place "Jiang2" "E10") (place "Shi2" {"D10" "F10"}) (place "Xiang2" {"C10" "G10"}) (place "Ma2" {"B10" "H10"}) (place "Ju2" {"A10" "I10"}) (place "Pao2" {"B8" "H8"}) (place "Zu2" {"A7" "C7" "E7" "G7" "I7"})}) (play (do (forEach Piece) (and (if (= (column (where "Jiang" P1)) (column (where "Jiang" P2))) (not (= (count Sites (forEach (sites Direction (where "Jiang" P1) N (= (to ) (where "Jiang" P2))) (is Occupied (site )))) 0)) true) (not (is Threatened (id "Jiang" Mover)))))) (end {(if (and (is Threatened (id "Jiang" Next)) (not (can Move (do (forEach Piece Next) (not (is Threatened (id "Jiang" Next))))))) (result Mover Win)) (if (no Moves Next) (result Mover Win))})))

The rules for pieces are the same as regular Xiangqi, except pawns start with the ability to move sideways.
(game "MiniXiangqi" (players {(player N) (player S)}) (equipment {(board (rectangle 7 7) Vertex) (piece "Jiang" Each (move Step Orthogonal (to (and (is In (to ) (sites Mover "Palace")) (not (is Friend (who (to ))))) (apply (remove (to )))))) (piece "Ma" Each (forEach Direction Orthogonal (to (is Empty (to )) (apply (forEach Direction (from (to )) (directions {FR FL} All) (if (not (is Friend (who (to )))) (move (from ) (to (apply (is Enemy (who (to ))) (remove (to ))))))))))) (piece "Ju" Each (move Slide Orthogonal (to (is Enemy (who (to ))) (apply (remove (to )))))) (piece "Pao" Each (or (move Slide Orthogonal) (move Hop Orthogonal (between (count Rows) (count Rows) (is Occupied (between ))) (to (is Empty (to )) (apply (is Enemy (who (to ))) (remove (to ))))))) (piece "Zu" Each (move Step (directions {Forward Rightward Leftward}) (to (not (is Friend (who (to )))) (apply (remove (to )))))) (regions "PalaceP1" P1 {2 3 4 9 10 11 16 17 18}) (regions "PalaceP2" P2 {30 31 32 37 38 39 44 45 46})}) (rules (start {(place "Jiang1" "D1") (place "Ma1" {"C1" "E1"}) (place "Ju1" {"A1" "G1"}) (place "Pao1" {"B1" "F1"}) (place "Zu1" {"A2" "C2" "D2" "E2" "G2"}) (place "Jiang2" "D7") (place "Ma2" {"C7" "E7"}) (place "Ju2" {"A7" "G7"}) (place "Pao2" {"B7" "F7"}) (place "Zu2" {"A6" "C6" "D6" "E6" "G6"})}) (play (do (forEach Piece) (and (if (= (column (where "Jiang" P1)) (column (where "Jiang" P2))) (not (= (count Sites (forEach (sites Direction (where "Jiang" P1) N (= (to ) (where "Jiang" P2))) (is Occupied (site )))) 0)) true) (not (is Threatened (id "Jiang" Mover)))))) (end {(if (and (is Threatened (id "Jiang" Next)) (not (can Move (do (forEach Piece Next) (not (is Threatened (id "Jiang" Next))))))) (result Mover Win)) (if (no Moves Next) (result Mover Win))})))

Manzhouqi is played on a Xiangqi board. The black player's pieces are set up as in Xiangqi, but the white player has the following pieces: Five soldiers: Move one space forward orthogonally. Two courtiers: Move one space diagonally and cannot leave the palace. One general: Moves on space orthogonally and cannot leave the palace. Two elephants: Move two spaces diagonally and cannot cross the river. One chariot: can move any distance orthogonally, taking either by jumping or by landing on the same space, and can also move like a knight in chess. The player that checkmates the other player's general wins.
(game "Manzhouqi" (players {(player N) (player S)}) (equipment {(board (rectangle 10 9) Vertex) (piece "Jiang" Each (move Step Orthogonal (to (and (is In (to ) (sites Mover "Palace")) (not (is Friend (who (to ))))) (apply (remove (to )))))) (piece "Shi" Each (move Step Diagonal (to (and (is In (to ) (sites Mover "Palace")) (not (is Friend (who (to ))))) (apply (remove (to )))))) (piece "Xiang" Each (move Slide Diagonal (between (exact 2) (and {(is In (between ) (sites Mover "Home")) (is Empty (between ))})) (to (is Enemy (who (to ))) (apply (remove (to )))))) (piece "Ma" Each (forEach Direction Orthogonal (to (is Empty (to )) (apply (forEach Direction (from (to )) (directions {FR FL} All) (if (not (is Friend (who (to )))) (move (from ) (to (apply (is Enemy (who (to ))) (remove (to ))))))))))) (piece "Ju" Each (if (is Mover P2) (move Slide Orthogonal (to (is Enemy (who (to ))) (apply (remove (to ))))) (or {(move Slide Orthogonal (to (is Enemy (who (to ))) (apply (remove (to ))))) (forEach Direction Orthogonal (to (is Empty (to )) (apply (forEach Direction (from (to )) (directions {FR FL} All) (if (not (is Friend (who (to )))) (move (from ) (to (apply (is Enemy (who (to ))) (remove (to )))))))))) (or (move Slide Orthogonal) (move Hop Orthogonal (between (count Rows) (count Rows) (is Occupied (between ))) (to (is Empty (to )) (apply (is Enemy (who (to ))) (remove (to ))))))}))) (piece "Pao" Each (or (move Slide Orthogonal) (move Hop Orthogonal (between (count Rows) (count Rows) (is Occupied (between ))) (to (is Empty (to )) (apply (is Enemy (who (to ))) (remove (to ))))))) (piece "Zu" Each (move Step (if (is In (from ) (sites Mover "Home")) Forward (directions {Forward Rightward Leftward})) (to (not (is Friend (who (to )))) (apply (remove (to )))))) (regions "PalaceP1" P1 {3 4 5 12 13 14 21 22 23}) (regions "PalaceP2" P2 {66 67 68 75 76 77 84 85 86}) (regions "Home" P1 (expand (sites Bottom) 4)) (regions "Home" P2 (expand (sites Top) 4))}) (rules (start {(place "Jiang1" "E1") (place "Shi1" {"D1" "F1"}) (place "Xiang1" {"C1" "G1"}) (place "Ju1" "A1") (place "Zu1" {"A4" "C4" "E4" "G4" "I4"}) (place "Jiang2" "E10") (place "Shi2" {"D10" "F10"}) (place "Xiang2" {"C10" "G10"}) (place "Ma2" {"B10" "H10"}) (place "Ju2" {"A10" "I10"}) (place "Pao2" {"B8" "H8"}) (place "Zu2" {"A7" "C7" "E7" "G7" "I7"})}) (play (do (forEach Piece) (and (if (= (column (where "Jiang" P1)) (column (where "Jiang" P2))) (not (= (count Sites (forEach (sites Direction (where "Jiang" P1) N (= (to ) (where "Jiang" P2))) (is Occupied (site )))) 0)) true) (not (is Threatened (id "Jiang" Mover)))))) (end {(if (and (is Threatened (id "Jiang" Next)) (not (can Move (do (forEach Piece Next) (not (is Threatened (id "Jiang" Next))))))) (result Mover Win)) (if (no Moves Next) (result Mover Win))})))

14x14 board. 28 pieces per player. Pieces begin on the board in the following arrangement, and with the following movements: Outer row, from left corner: Rukh: moves orthogonally any distance; Ghora: moves orthogonally one space and then diagonally another space, jumping over the first space; Dahja: moves orthogonally any distance; Ratha: moves orthogonally any distance; Fil: moves diagonally any distance; Shahzada: moves diagonally or orthogonally any distance; Wazir: moves diagonally or orthogonally any distance; Raja: moves one space in any direction; Rani: moves one square in any direction; Fil, Ratha, Dahja, Ghora, Rukh. In the second row are fourteen Paidal: moves one square forward orthogonally or one diagonally to capture. Players alternate turns moving a piece to a space on the board. If one of the opponent's pieces is on the space to which a player moves their piece, the opponent's piece is captured. If the Raja can be captured on the opponent's next turn, it is in check. The Raja cannot remain in check at the end of the player's turn. If this is not possible, it is checkmate and the opponent wins.
        
(game "Shatranj (14x14)" (players 2) (equipment {(board (square 14)) (piece "Pawn" Each (or {(move Step Forward (to (is Empty (to )))) (move Step (directions {FR FL}) (to (is Enemy (who (to ))) (apply (remove (to )))))})) (piece "Rook" Each (move Slide Orthogonal (to (is Enemy (who (to ))) (apply (remove (to )))))) (piece "Commoner" Each (move Slide Orthogonal (to (is Enemy (who (to ))) (apply (remove (to )))))) (piece "Wazir" Each (move Slide Orthogonal (to (is Enemy (who (to ))) (apply (remove (to )))))) (piece "King_noCross" Each (move Step (to (not (is Friend (who (to )))) (apply (if (is Enemy (who (to ))) (remove (to ))))))) (piece "Mann" Each (move Step (to (not (is Friend (who (to )))) (apply (if (is Enemy (who (to ))) (remove (to ))))))) (piece "Bishop_noCross" Each (move Slide Diagonal (to (is Enemy (who (to ))) (apply (remove (to )))))) (piece "Knight" Each (move Leap {{F F R F} {F F L F}} (to (not (is Friend (who (to )))) (apply (if (is Enemy (who (to ))) (remove (to ))))))) (piece "Queen" Each (move Slide (to (is Enemy (who (to ))) (apply (remove (to )))))) (piece "Amazon" Each (move Slide (to (is Enemy (who (to ))) (apply (remove (to ))))))}) (rules (start {(place "Pawn1" (sites Row 1)) (place "Pawn2" (sites Row 12)) (place "Rook1" {"A1" "N1"}) (place "Knight1" {"B1" "M1"}) (place "Commoner1" {"C1" "L1"}) (place "Wazir1" {"D1" "K1"}) (place "Bishop_noCross1" {"E1" "J1"}) (place "Amazon1" "F1") (place "Queen1" "G1") (place "King_noCross1" "H1") (place "Mann1" "I1") (place "Rook2" {"A14" "N14"}) (place "Knight2" {"B14" "M14"}) (place "Commoner2" {"C14" "L14"}) (place "Wazir2" {"D14" "K14"}) (place "Bishop_noCross2" {"E14" "J14"}) (place "Amazon2" "I14") (place "Queen2" "H14") (place "King_noCross2" "G14") (place "Mann2" "F14")}) (play (do (forEach Piece) (not (is Threatened (id "King_noCross" Mover))))) (end (if (and (is Threatened (id "King_noCross" Next)) (not (can Move (do (forEach Piece Next) (not (is Threatened (id "King_noCross" Next))))))) (result Mover Win)))))

8x8 board. 8 Bhata (or Padati; move like Chess pawns but without being able to move two on the first turn); 2 Ashva (horses; move like Chess knights); 2 Gaja (elephants; two spaces in any orthogonal direction, jumping over the first square); 2 Ratha (chariots; moves like a rook in chess); 1 Mantri (counselor; moves one square diagonally in any direction); 1 Raja (king; moves one square in any direction). These are set up along one edge of the board: Gaja-Ratha-Ashva-Mantri-Raja-Ashva-Ratha-Gaja, with the eight Bhata lined up in the row in front of these. Players take turns moving. When one piece lands on the space occupied by another piece, it is captured. When a Raja can be captured by an opponent's piece on the next turn, it is in check. The Raja must not be in check at the end of the player's turn. When this is unavoidable, it is checkmate and the opponent wins. A Raja that is stalemated wins. A player who reduces their opponent to only the Raja wins.
        
(game "Chaturanga (al-Adli)" (players {(player N) (player S)}) (equipment {(board (square 8)) (piece "King_noCross" (move Step (to (not (is Friend (who (to )))) (apply (remove (to )))))) (piece "Rook" Each (move Slide Orthogonal (to (is Enemy (who (to ))) (apply (remove (to )))))) (piece "Elephant" (move Hop Orthogonal (between (exact 1) true) (to (not (is Friend (who (to )))) (apply (if (is Enemy (who (to ))) (remove (to ))))))) (piece "Knight" Each (move Leap {{F F R F} {F F L F}} (to (not (is Friend (who (to )))) (apply (if (is Enemy (who (to ))) (remove (to ))))))) (piece "Pawn" Each (or {(move Step Forward (to (is Empty (to )))) (move Step (directions {FR FL}) (to (is Enemy (who (to ))) (apply (remove (to )))))})) (piece "Queen" (move Step Diagonal (to (not (is Friend (who (to )))) (apply (remove (to )))))) (regions "Promotion" P1 (sites Top)) (regions "Promotion" P2 (sites Bottom))}) (rules (start {(place "Pawn1" (sites Row 1)) (place "Pawn2" (sites Row 6)) (place "Elephant1" {"A1" "H1"}) (place "Rook1" {"B1" "G1"}) (place "Knight1" {"C1" "F1"}) (place "Queen1" "D1") (place "King_noCross1" "E1") (place "Elephant2" {"A8" "H8"}) (place "Rook2" {"B8" "G8"}) (place "Knight2" {"C8" "F8"}) (place "Queen2" "E8") (place "King_noCross2" "D8")}) (play (do (forEach Piece) (not (is Threatened (id "King_noCross" Mover))))) (end {(if (and (is Threatened (id "King_noCross" Next)) (not (can Move (do (forEach Piece Next) (not (is Threatened (id "King_noCross" Next))))))) (result Mover Win)) (if (= (count Pieces Next) 1) (result Mover Loss))})))

Played on an 8x8 board. 8 Bhata (or Padati; move like Chess pawns but without being able to move two on the first turn); 2 Ashva (horses; move like Chess knights); 2 Gaja (elephants; two spaces in any orthogonal direction, jumping over the first square); 2 Ratha (chariots; moves like a rook in chess); 1 Mantri (counselor; moves one square diagonally in any direction); 1 Raja (king; moves one square in any direction). These are set up along one edge of the board: Ratha-Ashva-Gaja-Mantri-Raja-Gaja-Ashva-Ratha, with the eight Bhata lined up in the row in front of these, as in chess. Players take turns moving. When one piece lands on the space occupied by another piece, it is captured. Play continues until one player's king cannot move without being captured.
(game "Chaturanga" (players {(player N) (player S)}) (equipment {(board (square 8)) (piece "Pawn" Each (or {(move Step Forward (to (is Empty (to )))) (move Step (directions {FR FL}) (to (is Enemy (who (to ))) (apply (remove (to )))))} (then (if (is In (last To) (sites Mover "Promotion")) (moveAgain ))))) (piece "Rook" Each (move Slide Orthogonal (to (is Enemy (who (to ))) (apply (remove (to )))))) (piece "King_noCross" Each (move Step (to (not (is Friend (who (to )))) (apply (if (is Enemy (who (to ))) (remove (to ))))))) (piece "Elephant" Each (move Hop Orthogonal (between true) (to (not (is Friend (who (to )))) (apply (remove (to )))))) (piece "Knight" Each (move Leap {{F F R F} {F F L F}} (to (not (is Friend (who (to )))) (apply (if (is Enemy (who (to ))) (remove (to ))))))) (piece "Ferz_noCross" Each (move Step Diagonal (to (not (is Friend (who (to )))) (apply (remove (to )))))) (regions "Promotion" P1 (sites Top)) (regions "Promotion" P2 (sites Bottom))}) (rules (start {(place "Pawn1" (sites Row 1)) (place "Pawn2" (sites Row 6)) (place "Rook1" {"A1" "H1"}) (place "Knight1" {"B1" "G1"}) (place "Elephant1" {"C1" "F1"}) (place "Ferz_noCross1" "D1") (place "King_noCross1" "E1") (place "Rook2" {"A8" "H8"}) (place "Knight2" {"B8" "G8"}) (place "Elephant2" {"C8" "F8"}) (place "Ferz_noCross2" "E8") (place "King_noCross2" "D8")}) (play (if (is Prev Mover) (move Promote (last To) (piece "Ferz_noCross") Mover) (do (forEach Piece) (not (is Threatened (id "King_noCross" Mover)))))) (end {(if (and (is Threatened (id "King_noCross" Next)) (not (can Move (do (forEach Piece Next) (not (is Threatened (id "King_noCross" Next))))))) (result Mover Win)) (if (no Moves Mover) (result Mover Win)) (if (<= (count Pieces Next) 1) (result Next Loss))})))

8x8 board. Pieces move as follows: Raja (x1): moves one space in any direction; Mantri (x1): moves any distance orthogonally or diagonally; Ushtra (x2): moves diagonally any distance; Vaha (x2): move orthogonally one space and then diagonally another, jumping over any intervening pieces; Danti (x2): moves orthogonally any distance. Padati (x8): move forward orthogonally one space or one space diagonally forward to capture. When a Padati reaches the opposite edge of the board, it is promoted to a Mantri and is moved immediately to the space it last moved from. An opponent's piece is captured by moving one of the player's own pieces onto the space occupied by the opponent's piece. If the Raja can be captured on the opponent's next turn, it is in check. The Raja cannot be in check at the end of the player's turn. If this is impossible, the opponent wins. When a player is reduced to only their Raja and Padati, the opponent wins. In the case of a stalemate, the player in stalemate may remove any of the opponent's pieces (except their Raja). 
(game "Chaturanga (Kridakausalya)" (players {(player N) (player S)}) (equipment {(board (square 8)) (piece "King_noCross" Each (move Step (to (not (is Friend (who (to )))) (apply (if (is Enemy (who (to ))) (remove (to ))))))) (piece "Ferz_noCross" Each (move Slide (to (is Enemy (who (to ))) (apply (remove (to )))))) (piece "Knight" Each (move Leap {{F F R F} {F F L F}} (to (not (is Friend (who (to )))) (apply (if (is Enemy (who (to ))) (remove (to ))))))) (piece "Elephant" Each (move Slide Diagonal (to (is Enemy (who (to ))) (apply (remove (to )))))) (piece "Rook" Each (move Slide Orthogonal (to (is Enemy (who (to ))) (apply (remove (to )))))) (piece "Pawn" Each (or {(move Step Forward (to (is Empty (to )))) (move Step (directions {FR FL}) (to (is Enemy (who (to ))) (apply (remove (to )))))} (then (if (is In (last To) (sites Mover "Promotion")) (and (promote (last To) (piece "Ferz_noCross") Mover) (fromTo (from (last To)) (to (last From)))))))) (regions "Promotion" P1 (sites Top)) (regions "Promotion" P2 (sites Bottom))}) (rules (start {(place "Pawn1" (sites Row 1)) (place "Pawn2" (sites Row 6)) (place "Rook1" {"A1" "H1"}) (place "Knight1" {"B1" "G1"}) (place "Elephant1" {"C1" "F1"}) (place "Ferz_noCross1" "D1") (place "King_noCross1" "E1") (place "Rook2" {"A8" "H8"}) (place "Knight2" {"B8" "G8"}) (place "Elephant2" {"C8" "F8"}) (place "Ferz_noCross2" "D8") (place "King_noCross2" "E8")}) (play (if (can Move (do (forEach Piece) (not (is Threatened (id "King_noCross" Mover))))) (do (forEach Piece) (not (is Threatened (id "King_noCross" Mover)))) (move Remove (difference (sites Occupied Next) (sites Occupied Next "King_noCross"))))) (end {(if (and (is Threatened (id "King_noCross" Next)) (not (can Move (do (forEach Piece Next) (not (is Threatened (id "King_noCross" Next))))))) (result Mover Win)) (if (and {(no Pieces Next "Ferz_noCross") (no Pieces Next "Knight") (no Pieces Next "Elephant") (no Pieces Next "Rook")}) (result Mover Win))})))

8x8 board. One player plays as one Shah, which can move like any of the other pieces. The other player has the usual complement of pieces, as in Chess. Pawns (x8): can move one space forward and capture one space forward diagonally; Rook (x2): can move any number of spaces orthogonally; Elephant (x2): can move any number of spaces diagonally; Horse (2): moves in any direction, one space orthogonally with one space forward diagonally; Vizier (x1): can move any number of spaces orthogonally or diagonally; Shah (x1): can move one space orthogonally or diagonally, but can also move like the horse on its first move, if it has not yet been checked. The pieces are arranged as in Chess, with the Vizier is place to the left of the Shah. Players capture pieces by moving onto a space occupied by an opponent's piece. When a pawn reaches the opposite edge of the board from where it started, it may be promoted to the more powerful piece that begins the game in that position, but only if one of these belonging to the player has already been captured. If this has not happened, the pawn cannot move to the final row. When a player can capture the opponent's Shah on the next turn, the Shah is in check, the opponent's next move must free the Shah from check. If the opponent cannot, it is checkmate and the player wins.
(game "Shatranj Diwana Shah" (players 2) (equipment {(board (square 8)) (piece "Pawn" P2 S (do (or {(move Step Forward (to (is Empty (to )))) (move Step (directions {FR FL}) (to (is Enemy (who (to ))) (apply (remove (to )))))}) (if (is In (last To) (sites Mover "Promotion")) (!= -1 (if (and (is In (last To) (sites Corners)) (!= 2 (count Pieces Mover "Boat"))) (id "Boat" Mover) (if (and (or (= (column (last To)) 1) (= (column (last To)) 6)) (!= 2 (count Pieces Mover "Knight"))) (id "Knight" Mover) (if (and (or (= (column (last To)) 2) (= (column (last To)) 5)) (!= 2 (count Pieces Mover "Elephant"))) (id "Elephant" Mover) (if (and (= (column (last To)) 3) (!= 1 (count Pieces Mover "Queen"))) (id "Queen" Mover) -1))))) true) (then (if (is In (last To) (sites Mover "Promotion")) (promote (last To) (piece (if (and (is In (last To) (sites Corners)) (!= 2 (count Pieces Mover "Boat"))) (id "Boat" Mover) (if (and (or (= (column (last To)) 1) (= (column (last To)) 6)) (!= 2 (count Pieces Mover "Knight"))) (id "Knight" Mover) (if (and (or (= (column (last To)) 2) (= (column (last To)) 5)) (!= 2 (count Pieces Mover "Elephant"))) (id "Elephant" Mover) (if (and (= (column (last To)) 3) (!= 1 (count Pieces Mover "Queen"))) (id "Queen" Mover) -1))))) Mover))))) (piece "Boat" P2 (move Slide Orthogonal (to (is Enemy (who (to ))) (apply (remove (to )))))) (piece "King_noCross" Each (if (is Mover P1) (or (move Leap {{F F R F} {F F L F}} (to (not (is Friend (who (to )))) (apply (if (is Enemy (who (to ))) (remove (to )))))) (move Slide (to (is Enemy (who (to ))) (apply (remove (to )))))) (or (move Step (to (not (is Friend (who (to )))) (apply (remove (to ))))) (if (= (state (from )) 1) (move Leap {{F F R F} {F F L F}} (to (not (is Friend (who (to )))) (apply (if (is Enemy (who (to ))) (remove (to ))))))) (then (if (= (state (last To)) 1) (set State (last To) 0)))))) (piece "Elephant" P2 (move Slide Diagonal (to (is Enemy (who (to ))) (apply (remove (to )))))) (piece "Knight" P2 (move Leap {{F F R F} {F F L F}} (to (not (is Friend (who (to )))) (apply (if (is Enemy (who (to ))) (remove (to ))))))) (piece "Queen" P2 (move Slide (to (is Enemy (who (to ))) (apply (remove (to )))))) (regions "Promotion" P2 (sites Bottom))}) (rules (start {(place "Pawn2" (sites Row 6)) (place "King_noCross1" "D1") (place "Boat2" {"A8" "H8"}) (place "Knight2" {"B8" "G8"}) (place "Elephant2" {"C8" "F8"}) (place "Queen2" "D8") (place "King_noCross2" "E8" 1)}) (play (do (forEach Piece) (not (is Threatened (id "King_noCross" Mover))) (then (if (and (= (what (last To)) (id "King_noCross" P1)) (= (state (where "King_noCross" P2)) 1)) (if (is Threatened (id "King_noCross" P2)) (set State (where "King_noCross" P2) 0)))))) (end (if (and (is Threatened (id "King_noCross" Next)) (not (can Move (do (forEach Piece Next) (not (is Threatened (id "King_noCross" Next))))))) (result Mover Win)))))

8x8 board, with markings in the four central squares, the four corner squares, and the two middle squares of each edge. The pieces have the following movement values: Raja (x1): moves one space in any direction; Mantri (x1): moves diagonally one space; Karabha (x2): jumps exactly two squares diagonally; Raji (x2): moves orthogonally one space and then diagonally another space, jumping over any intervening pieces; Kunjara (x2): moves orthogonally any distance; Patti (x8): move forward orthogonally one space, diagonally forward one space to capture. When a Patti reaches a marked space on the opposite edge of the board, it is promoted to Mantri if it is on a marked square. If it is on an unmarked square, the Patti must move back to the space from which it moved to the last row and is then promoted to Mantri. If the Raja can be taken on the opponent's next turn, it is in check. The Raja must not be in check at the end of the player's turn. If this is not possible, it is checkmate and the opponent wins.If a Raja is in stalemate, and no other pieces can move the player may remove one of the opponent's pieces causing the stalemate. If the opponent is reduced to only their Raja, it is also a victory, though considered a lesser one. Checking the opponent's Raja 64 consecutive times is a win.
        
(game "Krida Buddhibalasrita" (players {(player N) (player S)}) (equipment {(board (square 8)) (piece "King_noCross" Each (move Step (to (not (is Friend (who (to )))) (apply (if (is Enemy (who (to ))) (remove (to ))))))) (piece "Ferz_noCross" Each (move Step Diagonal (to (not (is Friend (who (to )))) (apply (remove (to )))))) (piece "Knight" Each (move Leap {{F F R F} {F F L F}} (to (not (is Friend (who (to )))) (apply (if (is Enemy (who (to ))) (remove (to ))))))) (piece "Elephant" Each (move Hop Diagonal (between true) (to (not (is Friend (who (to )))) (apply (if (is Enemy (who (to ))) (remove (to ))))))) (piece "Rook" Each (move Slide Orthogonal (to (is Enemy (who (to ))) (apply (remove (to )))))) (piece "Pawn" Each (or {(move Step Forward (to (is Empty (to )))) (move Step (directions {FR FL}) (to (is Enemy (who (to ))) (apply (remove (to )))))} (then (if (is In (last To) (sites Mover "Promotion")) (and (promote (last To) (piece "Ferz_noCross") Mover) (if (not (is In (last To) (sites "PromotionMarked"))) (fromTo (from (last To)) (to (last From))))))))) (regions "Promotion" P1 (sites Top)) (regions "Promotion" P2 (sites Bottom)) (regions "PromotionMarked" (sites {"A1" "D1" "E1" "H1" "A8" "D8" "E8" "H8"}))}) (rules (start {(place "Pawn1" (sites Row 1)) (place "Pawn2" (sites Row 6)) (place "Rook1" {"A1" "H1"}) (place "Knight1" {"B1" "G1"}) (place "Elephant1" {"C1" "F1"}) (place "Ferz_noCross1" "D1") (place "King_noCross1" "E1") (place "Rook2" {"A8" "H8"}) (place "Knight2" {"B8" "G8"}) (place "Elephant2" {"C8" "F8"}) (place "Ferz_noCross2" "D8") (place "King_noCross2" "E8")}) (play (if (can Move (do (forEach Piece) (not (is Threatened (id "King_noCross" Mover))) (then (if (is Threatened (id "King_noCross" Next)) (set Value Mover (+ 1 (value Player Mover))) (set Value Mover 0))))) (do (forEach Piece) (not (is Threatened (id "King_noCross" Mover))) (then (if (is Threatened (id "King_noCross" Next)) (set Value Mover (+ 1 (value Player Mover))) (set Value Mover 0)))) (move Remove (difference (sites Occupied Next) (sites Occupied Next "King_noCross"))))) (end {(if (or (and (is Threatened (id "King_noCross" Next)) (not (can Move (do (forEach Piece Next) (not (is Threatened (id "King_noCross" Next) (forEach Piece))))))) (= 1 (count Pieces Next))) (result Mover Win)) (if (= (value Player P1) 64) (result P1 Win)) (if (= (value Player P2) 64) (result P2 Win))})))

4x16 board. The pieces move as follows, with the number per player: Shah (king)x1: moves one space orthogonally or diagonally. Fers (counselor)x1: one square diagonally; Rukh (rook)x2: any number of spaces orthogonally; Pil (elephant)x2: two squares diagonally, jumping over the first, cannot capture another Pil; Asb (horse)x2: moves orthogonally one space and then diagonally one space, jumping over any intervening pieces; Sarbaz (soldier)x8: moves one space forward orthogonally or one space forward diagonally to capture. No en passant, promoted to Fers when reaching the sixteenth rank. Pieces are placed with the Shah and Fers in the center of the row closest to the player (Shah to the right), a Pil on either side of them, the Asb on the two center squares in the second row, flanked by the Rukh, and the Sarbaz on the fifth and sixth rows. Movement of the pieces is determined by one six-sided die, with the following throws: 6=Shah, 5=Fers, 4=Pil, 3=Asb, 2=Rukh, 1=Sarbaz. No castling. Stalemate results in win for player causing it. When the Shah is in check, the opponent must roll a 6 for it to escape. The player who checkmates the Shah wins. 
        
(game "Shatranj al-Mustatila" (players {(player N) (player S)}) (equipment {(board (rectangle 16 4)) (piece "King_noCross" Each (move Step (to (not (is Friend (who (to )))) (apply (if (is Enemy (who (to ))) (remove (to ))))))) (piece "Queen" Each (move Step Diagonal (to (not (is Friend (who (to )))) (apply (remove (to )))))) (piece "Elephant" Each (move Hop Diagonal (between true) (to (or (is Empty (to )) (and (is Enemy (who (to ))) (not (= (what (to )) (id "Elephant" Next))))) (apply (remove (to )))))) (piece "Knight" Each (move Leap {{F F R F} {F F L F}} (to (not (is Friend (who (to )))) (apply (if (is Enemy (who (to ))) (remove (to ))))))) (piece "Rook" Each (move Slide Orthogonal (to (is Enemy (who (to ))) (apply (remove (to )))))) (piece "Pawn" Each (or {(move Step Forward (to (is Empty (to )))) (move Step (directions {FR FL}) (to (is Enemy (who (to ))) (apply (remove (to )))))} (then (if (is In (last To) (sites Mover "Promotion")) (promote (last To) (piece "Queen") Mover))))) (regions "Promotion" P1 (sites Top)) (regions "Promotion" P2 (sites Bottom)) (dice 6 1 1)}) (rules (start {(place "Pawn1" (union (sites Row 4) (sites Row 5))) (place "Pawn2" (union (sites Row 10) (sites Row 11))) (place "Elephant1" (sites {"A1" "D1"})) (place "Knight1" (sites {"B2" "C2"})) (place "Rook1" (sites {"A2" "D2"})) (place "King_noCross1" "B1") (place "Queen1" "C1") (place "Elephant2" (sites {"A16" "D16"})) (place "Knight2" (sites {"B15" "C15"})) (place "Rook2" (sites {"A15" "D15"})) (place "King_noCross2" "C16") (place "Queen2" "B16")}) (play (do (do (roll ) (if (is Threatened (id "King_noCross" Next) (forEach Piece)) (move Pass (then (trigger "NextCanNotEscape" (next )))) (if (= (count Pips) 6) (forEach Piece "King_noCross") (if (= (count Pips) 5) (forEach Piece "Queen") (if (= (count Pips) 4) (forEach Piece "Elephant") (if (= (count Pips) 3) (forEach Piece "Knight") (if (= (count Pips) 2) (forEach Piece "Rook") (forEach Piece "Pawn")))))))) (not (is Threatened (id "King_noCross" Mover) (forEach Piece Next))))) (end {(if (and (is Threatened (id "King_noCross" Next)) (not (can Move (do (forEach Piece Next) (not (is Threatened (id "King_noCross" Next))))))) (result Mover Win)) (if (is Triggered "CanNotEscape" Next) (result Mover Win)) (if (not (can Move (forEach Piece Next))) (result Mover Win))})))

8x8 board. Pieces have specific moves, as follows: Mai (x1): moves one space in any direction; Chiroma (x1): Moves one space diagonally; Bintu (x2): moves exactly two spaces diagonally, jumping over the first square; Fer (x2): moves orthogonally one space and then diagonally another space, jumping over any intervening pieces; Kaigamma (x2): moves orthogonally any distance; Gollo: (x8) move one space forward orthogonally, or one space diagonally forward to capture. Pieces capture the opponent's pieces by moving onto the spot they occupy. No en passant; no castling. When the Mai can be captured at the beginning of the opponent's next turn, it is in check and must be removed from this state on the player's turn. If this is not possible, it is checkmate and the player who threatened the Mai wins. 
(game "Tsatsarandi" (players 2) (equipment {(board (square 8)) (piece "Pawn" Each (or {(move Step Forward (to (is Empty (to )))) (move Step (directions {FR FL}) (to (is Enemy (who (to ))) (apply (remove (to )))))})) (piece "Rook" Each (move Slide Orthogonal (to (is Enemy (who (to ))) (apply (remove (to )))))) (piece "King_noCross" Each (move Step (to (not (is Friend (who (to )))) (apply (if (is Enemy (who (to ))) (remove (to ))))))) (piece "Bishop_noCross" (move Hop Diagonal (between true) (to (or (is Empty (to )) (is Enemy (who (to )))) (apply (remove (to )))))) (piece "Knight" Each (move Leap {{F F R F} {F F L F}} (to (not (is Friend (who (to )))) (apply (if (is Enemy (who (to ))) (remove (to ))))))) (piece "Ferz_noCross" (move Step Diagonal (to (not (is Friend (who (to )))) (apply (remove (to ))))))}) (rules (start {(place "King_noCross1" "E1") (place "King_noCross2" "E8") (place "Ferz_noCross1" "D1") (place "Ferz_noCross2" "D8") (place "Bishop_noCross1" {"C1" "F1"}) (place "Bishop_noCross2" {"C8" "F8"}) (place "Knight1" {"B1" "G1"}) (place "Knight2" {"B8" "G8"}) (place "Rook1" {"A1" "H1"}) (place "Rook2" {"A8" "H8"}) (place "Pawn1" (sites Row 1)) (place "Pawn2" (sites Row 6))}) (play (do (forEach Piece) (not (is Threatened (id "King_noCross" Mover))))) (end (if (and (is Threatened (id "King_noCross" Next)) (not (can Move (do (forEach Piece Next) (not (is Threatened (id "King_noCross" Next))))))) (result Mover Win)))))

10x10 board. 22 pieces per player. Pieces begin on the board in the following  arrangement, and with the following movements: Outer row, from  left corner: Rukh: moves orthogonally any distance; Ghora: moves orthogonally one space and then diagonally another  space, jumping over the first space;  Fil: moves diagonally any distance; Wazir: moves diagonally or orthogonally any distance; Shahzada: can move like the Wazir and like the Ghora; Padshah: moves one space in any direction; Kotwal: moves like the Shahzada; Fil, Ghora, Rukh. In the next row, the central two squares are occupied by the Urdabegini: move one space in the direction of the opponent's Padshah; the other spaces are occupied by Paidal: moves one square forward orthogonally or one diagonally to capture. The central two squares of the third row contain two more Ghora. Players alternate turns moving a piece to a space on the board. If one of the opponent's pieces is on the space to which a player moves their piece, the opponent's piece is captured. If  the Padshah can be captured on the opponent's next turn, it is in check. The Padshah cannot remain in check at the end of the player's turn. If this is not possible, it is checkmate and the opponent wins.  
(game "Qatranj" (players {(player N) (player S)}) (equipment {(board (square 10)) (piece "Rook" Each (move Slide Orthogonal (to (is Enemy (who (to ))) (apply (remove (to )))))) (piece "Knight" Each (move Leap {{F F R F} {F F L F}} (to (not (is Friend (who (to )))) (apply (if (is Enemy (who (to ))) (remove (to ))))))) (piece "Bishop_noCross" Each (move Slide Diagonal (to (is Enemy (who (to ))) (apply (remove (to )))))) (piece "Queen" Each (move Slide (to (is Enemy (who (to ))) (apply (remove (to )))))) (piece "Commoner" Each (or (move Slide (to (is Enemy (who (to ))) (apply (remove (to ))))) (move Leap {{F F R F} {F F L F}} (to (not (is Friend (who (to )))) (apply (if (is Enemy (who (to ))) (remove (to )))))))) (piece "King_noCross" Each (move Step (to (not (is Friend (who (to )))) (apply (if (is Enemy (who (to ))) (remove (to ))))))) (piece "Mann" Each (or (move Slide (to (is Enemy (who (to ))) (apply (remove (to ))))) (move Leap {{F F R F} {F F L F}} (to (not (is Friend (who (to )))) (apply (if (is Enemy (who (to ))) (remove (to )))))))) (piece "Wazir" Each (do (move Step (to (not (is Friend (who (to )))) (apply (remove (to ))))) (> (count Steps (last From) (where "King_noCross" Next)) (count Steps (last To) (where "King_noCross" Next))))) (piece "Pawn" Each (or (move Step Forward (to (is Empty (to )))) (move Step (directions {FR FL}) (to (is Enemy (who (to ))) (apply (remove (to )))))))}) (rules (start {(place "Rook1" (sites {"A1" "J1"})) (place "Rook2" (sites {"A10" "J10"})) (place "Knight1" (sites {"B1" "I1" "E3" "F3"})) (place "Knight2" (sites {"B10" "I10" "E8" "F8"})) (place "Bishop_noCross1" (sites {"C1" "H1"})) (place "Bishop_noCross2" (sites {"C10" "H10"})) (place "Queen1" "D1") (place "Queen2" "G10") (place "Commoner1" "E1") (place "Commoner2" "F10") (place "King_noCross1" "F1") (place "King_noCross2" "E10") (place "Mann1" "G1") (place "Mann2" "D10") (place "Wazir1" (sites {"E2" "F2"})) (place "Wazir2" (sites {"E9" "F9"})) (place "Pawn1" (difference (sites Row 1) (sites {"E2" "F2"}))) (place "Pawn2" (difference (sites Row 8) (sites {"E9" "F9"})))}) (play (do (forEach Piece) (not (is Threatened (id "King_noCross" Mover))))) (end (if (and (is Threatened (id "King_noCross" Next)) (not (can Move (do (forEach Piece Next) (not (is Threatened (id "King_noCross" Next))))))) (result Mover Win)))))

8x8 board. The pieces move as follows, with the number per player: 1 x Negus (king): moves one space orthogonally or diagonally. 1 x Ferz (counselor): One square diagonally. 2 x Der (castle): Any number of spaces orthogonally. 2 x Säbä (man): Three squares diagonally, jumping over the first two. 2 x Färäs (horse): Moves as a chess knight. 8 x Médéq: Moves one space forward orthogonally; one space forward diagonally to capture. No en passant. Promoted to Ferz when reaching the eighth rank. No castling, except in the opening phase. In the opening phase, players play simultaneously at will, with no turn structure, until the first piece is captured, at which point turns alternate for the main phase of the game. Castling is allowed during the opening phase, and pawns may move any distance forward. If only a player's Negus remains, the opponent must checkmate it in ten moves or less, or the game is a stalemate. The player who checkmates the king wins.
(game "Santaraj" (players {(player N) (player S)}) (equipment {(board (square 8)) (hand Each 5) (piece "King_noCross" Each (move Step (to (not (is Friend (who (to )))) (apply (if (is Enemy (who (to ))) (remove (to ))))))) (piece "Castle" Each (move Slide Orthogonal (to (is Enemy (who (to ))) (apply (remove (to )))))) (piece "Ferz_noCross" Each (move Hop Diagonal (between (exact 2) true) (to (not (is Friend (who (to )))) (apply (if (is Enemy (who (to ))) (remove (to ))))))) (piece "Knight" Each (move Leap {{F F R F} {F F L F}} (to (not (is Friend (who (to )))) (apply (if (is Enemy (who (to ))) (remove (to ))))))) (piece "Pawn" Each (or {(move Step Forward (to (is Empty (to )))) (move Step (directions {FR FL}) (to (is Enemy (who (to ))) (apply (remove (to )))))} (then (if (is In (last To) (sites Mover "Promotion")) (promote (last To) (piece "Queen") Mover))))) (piece "Queen" Each (move Step Diagonal (to (not (is Friend (who (to )))) (apply (remove (to )))))) (regions "Promotion" P1 (sites Top)) (regions "Promotion" P2 (sites Bottom))}) (rules (start {(place "Pawn1" (sites Row 1)) (place "Pawn2" (sites Row 6)) (place "Castle1" {"A1" "H1"}) (place "Knight1" {"B1" "G1"}) (place "Ferz_noCross1" {"C1" "F1"}) (place "Queen1" "D1") (place "King_noCross1" "E1") (place "Castle2" {"A8" "H8"}) (place "Knight2" {"B8" "G8"}) (place "Ferz_noCross2" {"C8" "F8"}) (place "Queen2" "D8") (place "King_noCross2" "E8")}) (play (do (forEach Piece) (not (is Threatened (id "King_noCross" Mover))) (then (if (and (> (count Pieces P1) 1) (> (count Pieces P2) 1)) (set Counter))))) (end {(if (and (is Threatened (id "King_noCross" Next)) (not (can Move (do (forEach Piece Next) (not (is Threatened (id "King_noCross" Next))))))) (result Mover Win)) (if (and (or (= (count Pieces P1) 1) (= (count Pieces P2) 1)) (= (counter ) 20)) (result Mover Draw))})))

8x8 board. One player plays with the following pieces: Raja (x1): moves one space in any direction; Mantri (x1): moves any distance orthogonally or diagonally; Ushtra (x2): moves diagonally any distance; Vaha (x2): move orthogonally one space and then diagonally another, jumping over any intervening pieces; Danti (x2): moves orthogonally any distance. Padati (x8): move forward orthogonally one space or one space diagonally forward to capture. When a Padati reaches the opposite edge of the board, it is promoted to a Mantri and is moved immediately to the space it last moved from. The opponent plays as one Raja, which can move as any of the other pieces. This Raja cannot move to a space adjacent to the opponent's Raja. An opponent's piece is captured by moving one of the player's own pieces onto the space occupied by the opponent's piece. If the Raja can be captured on the opponent's next turn, it is in check. The Raja cannot be in check at the end of the player's turn. If this is impossible, the opponent wins. Check and checkmate rules apply to the player with a single Raja.
(game "Cittabhramanrpasya Khelanam" (players {(player S) (player N)}) (equipment {(board (square 8)) (piece "Pawn" P1 (or (move Step Forward (to (is Empty (to )))) (move Step (directions {FR FL}) (to (is Enemy (who (to ))) (apply (remove (to ))))) (then (if (is In (last To) (sites Mover "Promotion")) (and (promote (last To) (piece "Ferz_noCross") Mover) (fromTo (from (last To)) (to (last From)))))))) (piece "Rook" P1 (move Slide Orthogonal (to (is Enemy (who (to ))) (apply (remove (to )))))) (piece "King_noCross" P1 (move Step (to (not (is Friend (who (to )))) (apply (remove (to )))))) (piece "Elephant" P1 (move Slide Diagonal (to (is Enemy (who (to ))) (apply (remove (to )))))) (piece "Knight" P1 (move Leap {{F F R F} {F F L F}} (to (not (is Friend (who (to )))) (apply (if (is Enemy (who (to ))) (remove (to ))))))) (piece "Ferz_noCross" P1 (move Slide (to (is Enemy (who (to ))) (apply (remove (to )))))) (piece "King_noCross" P2 (or (move Leap {{F F R F} {F F L F}} (to (and (not (is Friend (who (to )))) (not (is In (to ) (sites Around (where "King-noCross" Next))))) (apply (remove (to ))))) (move Slide (to (is Enemy (who (to ))) (apply (not (is In (to ) (sites Around (where "King-noCross" Next)))) (remove (to ))))))) (regions "Promotion" P1 (sites Bottom))}) (rules (start {(place "Pawn1" (sites Row 6)) (place "Rook1" {"A8" "H8"}) (place "Knight1" {"B8" "G8"}) (place "Elephant1" {"C8" "F8"}) (place "Ferz_noCross1" "E8") (place "King_noCross1" "D8") (place "King_noCross2" "E1")}) (play (do (forEach Piece) (not (is Threatened (id "King_noCross" Mover))))) (end (if (and (is Threatened (id "King_noCross" Next)) (not (can Move (do (forEach Piece Next) (not (is Threatened (id "King_noCross" Next))))))) (result Mover Win)))))

10x10 board, with an extra square placed diagonally behind each Rukh. The pieces move as follows, with the number per player: 1 x Shah (king): moves one space orthogonally or diagonally. 1 x Fers (counselor): One square diagonally. 2 x Rukh (rook): Any number of spaces orthogonally. 2x Dabbaba: any number of squares diagonally. 2 x Pil (elephant): Two squares diagonally, jumping over the first. Cannot capture another Pil. 2 x Asb (horse): Moves as a Chess knight. 12 x Sarbaz (soldier): Moves one space forward orthogonally; one space forward diagonally to capture. No en passant. Promoted to Fers when reaching the tenth rank. No castling. Stalemate results in win for player causing it. The player who checkmates the king wins. If a player moves their king into one of the extra squares on the opposite side of the board, the game is a draw.
        
(game "Shatranj al-Husun" (players {(player N) (player S)}) (equipment {(board (merge {(square 10) (shift -1.0 -1.0 (square 1)) (shift 10.0 -1.0 (square 1)) (shift -1.0 10.0 (square 1)) (shift 10.0 10.0 (square 1))})) (piece "King" Each (move Step (to (not (is Friend (who (to )))) (apply (if (is Enemy (who (to ))) (remove (to ))))))) (piece "Queen" Each (move Step Diagonal (to (not (is Friend (who (to )))) (apply (remove (to )))))) (piece "Rook" Each (move Slide Orthogonal (to (is Enemy (who (to ))) (apply (remove (to )))))) (piece "Knight" Each (move Leap {{F F R F} {F F L F}} (to (not (is Friend (who (to )))) (apply (if (is Enemy (who (to ))) (remove (to ))))))) (piece "Elephant" Each (move Hop Diagonal (between true) (to (or (is Empty (to )) (and (is Enemy (who (to ))) (not (= (what (to )) (id "Elephant" Next))))) (apply (remove (to )))))) (piece "Bishop" Each (move Slide Diagonal (to (is Enemy (who (to ))) (apply (remove (to )))))) (piece "Pawn" Each (or {(move Step Forward (to (is Empty (to )))) (move Step (directions {FR FL}) (to (is Enemy (who (to ))) (apply (remove (to ))))) (if (is In (from ) (sites Start (piece (what (from ))))) (move Slide Forward (between (exact 2) (is Empty (between ))) (to (is Empty (to )))))} (then (if (is In (last To) (sites Mover "Promotion")) (promote (last To) (piece "Queen") Mover))))) (regions "Promotion" P1 (sites Row 10)) (regions "Promotion" P2 (sites Row 1)) (regions "OppositeExtraSquares" P1 (sites Top)) (regions "OppositeExtraSquares" P2 (sites Bottom))}) (rules (start {(place "Pawn1" (sites Row 2)) (place "Pawn2" (sites Row 9)) (place "Rook1" (sites {"B2" "K2"})) (place "Knight1" (sites {"C2" "J2"})) (place "Elephant1" (sites {"D2" "I2"})) (place "Bishop1" (sites {"E2" "H2"})) (place "King1" "F2") (place "Queen1" "G2") (place "Rook2" (sites {"B11" "K11"})) (place "Knight2" (sites {"C11" "J11"})) (place "Elephant2" (sites {"D11" "I11"})) (place "Bishop2" (sites {"E11" "H11"})) (place "King2" "F11") (place "Queen2" "G11")}) (play (do (forEach Piece) (not (is Threatened (id "King" Mover))))) (end {(if (is In (where "King" Mover) (sites Mover "OppositeExtraSquares")) (result Mover Draw)) (if (and (is Threatened (id "King" Next)) (not (can Move (do (forEach Piece Next) (not (is Threatened (id "King" Next))))))) (result Mover Win)) (if (no Moves Next) (result Mover Win))})))

8x8 board. Two players. Pieces and movement are as follows: King x1, placed on the fifth space from the left on one edge of the board: Moves one space orthogonally or diagonally. Pawns x8, arranged along the row in front of the king: moves one space forward orthogonally or one space forward diagonally to capture. The opponent's pieces are placed in the same position on the opposite side of the board. If the King can be taken on the next turn it is in check, it must not remain in check on the next turn. If the king cannot move out of check, checkmate is declared and the opponent wins.
(game "Shatr ikh Padan" (players {(player N) (player S)}) (equipment {(board (square 8)) (piece "Pawn" Each (or {(move Step Forward (to (is Empty (to )))) (move Step (directions {FR FL}) (to (is Enemy (who (to ))) (apply (remove (to )))))})) (piece "King_noCross" Each (move Step (to (not (is Friend (who (to )))) (apply (if (is Enemy (who (to ))) (remove (to )))))))}) (rules (start {(place "Pawn1" (sites Row 1)) (place "Pawn2" (sites Row 6)) (place "King_noCross1" "E1") (place "King_noCross2" "D8")}) (play (do (forEach Piece) (not (is Threatened (id "King_noCross" Mover))))) (end (if (and (is Threatened (id "King_noCross" Next)) (not (can Move (do (forEach Piece Next) (not (is Threatened (id "King_noCross" Next))))))) (result Mover Win)))))

8x8 board, with diagonals in every square. Pieces have special moves, as follows: Raja (king), moves one square in any direction, but on the first move, it may jump two squares or move as a knight, with the exception that it cannot jump two squares diagonally; Mantri (minister), moves orthogonally or diagonally any number of spaces; Gajah (x2); move diagonally any distance; Kuda (horse) x2, moves orthogonally one space then diagonal one space from there, jumping over any intervening pieces; Ter/Chemor (chariot) x2, moves orthogonally any distance; Bídaq (pawn) x8: moves one square forward or one square forward diagonally to capture. May move two spaces forward orthogonally if it is that piece's first move. Upon reaching the opposite edge of the board, the Bídaq moves in the opposite direction, reversing again if it reaches the opposite edge.  The Mantri is placed to the right of the Raja at the beginning of play. Castling occurs in two moves, the rook moving to the king and then the king jumping over the rook. Pieces are captured by moving onto a space occupied by an opponent's piece. If the Raja can be captured on its next turn, it is in check. The Raja cannot be in check at the end of its turn. When this is unavoidable, it is checkmate and the opponent wins. A stalemate is considered a draw.
(game "Main Chator (Batak)" (players {(player N) (player S)}) (equipment {(board (square 8)) (piece "King_noCross" (or (move Step (to (not (is Friend (who (to )))) (apply (remove (to ))))) (if (not (= 1 (state (from )))) (or {(move Hop Orthogonal (between (exact 2) true) (to (not (is Friend (who (to )))) (apply (if (is Enemy (who (to ))) (remove (to )))))) (move Leap {{F F R F} {F F L F}} (to (not (is Friend (who (to )))) (apply (if (is Enemy (who (to ))) (remove (to )))))) (if (is In (from ) (sites {"E8" "D1"})) (or (if (and {(is Empty (ahead (from ) 2 W)) (= (what (ahead (from ) W)) (id "Rook" Mover)) (not (= 1 (state (ahead (from ) W))))}) (move (from ) (to (ahead (from ) 2 W)))) (if (and {(is Empty (ahead (from ) 2 E)) (= (what (ahead (from ) E)) (id "Rook" Mover)) (not (= 1 (state (ahead (from ) E))))}) (move (from ) (to (ahead (from ) 2 E))))))} (then (set State (last To) 1)))))) (piece "Rook" Each (move Slide Orthogonal (to (is Enemy (who (to ))) (apply (remove (to )))) (then (if (and (not (= 1 (state (last To)))) (not (is In (last To) (sites {"C1" "E1" "D8" "F8"})))) (set State (last To) 1))))) (piece "Bishop_noCross" Each (move Slide Diagonal (to (is Enemy (who (to ))) (apply (remove (to )))))) (piece "Knight" Each (move Leap {{F F R F} {F F L F}} (to (not (is Friend (who (to )))) (apply (if (is Enemy (who (to ))) (remove (to ))))))) (piece "Pawn" (or {(if (and (= 0 (state (last To))) (is In (from ) (sites Start (piece (what (from )))))) (move Slide Forward (between (exact 2) (is Empty (between ))) (to (is Empty (to ))))) (move Step (if (= 1 (state (from ))) Backward Forward) (to (is Empty (to )))) (move Step (directions {FR FL}) (to (is Enemy (who (to ))) (apply (remove (to )))))} (then (if (is In (last To) (union (sites Bottom) (sites Top))) (if (= 0 (state (last To))) (set State (last To) 1) (set State (last To) 2)))))) (piece "Queen" Each (move Slide (to (is Enemy (who (to ))) (apply (remove (to ))))))}) (rules (start {(place "Pawn1" (sites Row 1)) (place "Pawn2" (sites Row 6)) (place "Rook1" {"A1" "H1"}) (place "Knight1" {"B1" "G1"}) (place "Bishop_noCross1" {"C1" "F1"}) (place "Queen1" "E1") (place "King_noCross1" "D1") (place "Rook2" {"A8" "H8"}) (place "Knight2" {"B8" "G8"}) (place "Bishop_noCross2" {"C8" "F8"}) (place "Queen2" "D8") (place "King_noCross2" "E8")}) (play (do (forEach Piece) (not (is Threatened (id "King_noCross" Mover))))) (end {(if (and (is Threatened (id "King_noCross" Next)) (not (can Move (do (forEach Piece Next) (not (is Threatened (id "King_noCross" Next))))))) (result Mover Win)) (if (no Moves Next) (result Mover Draw))})))

8x8 checkered board. The pieces move as follows: Álix' (\"old man\
(game "Saxun" (players {(player N) (player S)}) (equipment {(board (square 8)) (piece "Pawn" Each (or {(move Step Forward (to (is Empty (to )))) (move Step (directions {FR FL}) (to (is Enemy (who (to ))) (apply (remove (to )))))})) (piece "Rook" Each (move Slide Orthogonal (to (is Enemy (who (to ))) (apply (remove (to )))))) (piece "King_noCross" Each (move Step (to (not (is Friend (who (to )))) (apply (if (is Enemy (who (to ))) (remove (to ))))))) (piece "Bishop_noCross" Each (move Slide Diagonal (to (is Enemy (who (to ))) (apply (remove (to )))))) (piece "Knight" Each (move Leap {{F F R F} {F F L F}} (to (not (is Friend (who (to )))) (apply (if (is Enemy (who (to ))) (remove (to ))))))) (piece "Queen" Each (move Slide (to (is Enemy (who (to ))) (apply (remove (to ))))))}) (rules (start {(place "Pawn1" {"F4" "G4" "H4" "B3" "C3" "D3" "E3" "A2"}) (place "Pawn2" {"H7" "H6" "G6" "F6" "E6" "A5" "B5" "C5"}) (place "Rook1" {"C2" "D1"}) (place "Knight1" {"B1" "H2"}) (place "Bishop_noCross1" {"E1" "F1"}) (place "Queen1" "D2") (place "King_noCross1" "C1") (place "Rook2" {"C7" "B8"}) (place "Knight2" {"A7" "H8"}) (place "Bishop_noCross2" {"F7" "G7"}) (place "Queen2" "B7") (place "King_noCross2" "C8")}) (play (do (forEach Piece) (not (is Threatened (id "King_noCross" Mover))))) (end (if (and (is Threatened (id "King_noCross" Next)) (not (can Move (do (forEach Piece Next) (not (is Threatened (id "King_noCross" Next))))))) (result Mover Win)))))

8x8 board. The pieces move as follows, with the number per player: 1 x Shah (king): moves one space orthogonally or diagonally. May move like an Asb if it is not in check and has never been in check. Place to a player's square right of center. 1 x Fers (counselor): Any distance orthogonally or diagonally; 2 x Rukh (rook): Any number of spaces orthogonally. 2 x Pil (elephant): Any distance diagonally. 2 x Asb (horse): Moves as a chess knight. 8 x Sarbaz (soldier): Moves one space forward orthogonally; one space forward diagonally to capture. Promoted to Fers when reaching the eighth rank. No en passant. No castling. An opponent's piece is captured by moving a player's own piece onto a space occupied by the opponent's piece. When a Shah can be captured on the next turn by an opponent's piece, it is in check. The Shah must not be in check at the end of the player's turn. If this is not possible, it is checkmate and the opponent wins. Stalemate results in a win for that player causing it. The game ends in a draw only when a player's final piece, being a Sarbaz, is lost, that player's Shah captures the opponent's only remaining piece, a Sarbaz.
(game "Shatranj (Algeria)" (players {(player N) (player S)}) (equipment {(board (square 8)) (piece "Pawn" Each (or {(move Step Forward (to (is Empty (to )))) (move Step (directions {FR FL}) (to (is Enemy (who (to ))) (apply (remove (to )))))} (then (if (is In (last To) (sites Mover "Promotion")) (promote (last To) (piece "Ferz_noCross") Mover))))) (piece "Rook" Each (move Slide Orthogonal (to (is Enemy (who (to ))) (apply (remove (to )))))) (piece "King_noCross" Each (or (move Step (to (not (is Friend (who (to )))) (apply (remove (to ))))) (if (!= (value Player Mover) (mover )) (move Leap {{F F R F} {F F L F}} (to (is Empty (to ))) (then (set Value Mover (mover ))))))) (piece "Elephant" Each (move Slide Diagonal (to (is Enemy (who (to ))) (apply (remove (to )))))) (piece "Knight" Each (move Leap {{F F R F} {F F L F}} (to (not (is Friend (who (to )))) (apply (if (is Enemy (who (to ))) (remove (to ))))))) (piece "Ferz_noCross" Each (move Slide (to (is Enemy (who (to ))) (apply (remove (to )))))) (regions "Promotion" P1 (sites Top)) (regions "Promotion" P2 (sites Bottom))}) (rules (start {(place "Pawn1" (sites Row 1)) (place "Pawn2" (sites Row 6)) (place "Rook1" {"A1" "H1"}) (place "Knight1" {"B1" "G1"}) (place "Elephant1" {"C1" "F1"}) (place "Ferz_noCross1" "D1") (place "King_noCross1" "E1") (place "Rook2" {"A8" "H8"}) (place "Knight2" {"B8" "G8"}) (place "Elephant2" {"C8" "F8"}) (place "Ferz_noCross2" "E8") (place "King_noCross2" "D8")}) (play (do (forEach Piece) (not (is Threatened (id "King_noCross" Mover))) (then (if (!= (next ) (value Player Next)) (if (is Threatened (id "King_noCross" Next)) (set Value Next (next ))))))) (end {(if (and (is Threatened (id "King_noCross" Next)) (not (can Move (do (forEach Piece Next) (not (is Threatened (id "King_noCross" Next))))))) (result Mover Win)) (if (= (count Pieces Next) 1) (result Mover Win)) (if (no Moves Next) (result Mover Win))})))

Played on an 8x8 board. One player plays as one Raja, the other with the following pieces: 8 Bhata (or Padati; move like Chess pawns but without being able to move two on the first turn); 2 Ashva (horses; move like Chess knights); 2 Gaja (elephants; two spaces in any orthogonal direction, jumping over the first square); 2 Ratha (chariots; moves like a rook in chess); 1 Mantri (counselor; moves one square diagonally in any direction); 1 Raja (king; moves one square in any direction). These are set up along one edge of the board: Ratha-Ashva-Gaja-Mantri-Raja-Gaja-Ashva-Ratha, with the eight Bhata lined up in the row in front of these, as in chess. The player with the full complement of pieces rolls a six-sided die to determine which piece to move: 6=Raja, 5= Mantri, 4=Gaja, 3 = Ashva, 2=Ratha, 1= Bhata. The player with the single Raja can move it according to the moves of any piece. Players take turns moving. When one piece lands on the space occupied by another piece, it is captured. The goal of the player with a full complement of pieces is to block the single Raja so that it cannot move. The Goal of the single Raja is to checkmate the opponent's Raja.
(game "Sarvatobhadra" (players {(player N) (player S)}) (equipment {(board (square 8)) (dice 6 1 1) (piece "King_noCross" P1 (move Step (to (not (is Friend (who (to )))) (apply (remove (to )))))) (piece "Ferz_noCross" P1 (move Step Diagonal (to (not (is Friend (who (to )))) (apply (remove (to )))))) (piece "Knight" P1 (move Leap {{F F R F} {F F L F}} (to (not (is Friend (who (to )))) (apply (if (is Enemy (who (to ))) (remove (to ))))))) (piece "Elephant" P1 (move Hop Orthogonal (between true) (to (not (is Friend (who (to )))) (apply (if (is Enemy (who (to ))) (remove (to ))))))) (piece "Rook" P1 (move Slide Orthogonal (to (is Enemy (who (to ))) (apply (remove (to )))))) (piece "Pawn" P1 (or (move Step Forward (to (is Empty (to )))) (move Step (directions {FR FL}) (to (is Enemy (who (to ))) (apply (remove (to ))))) (then (if (is In (last To) (sites Top)) (promote (last To) (piece "Ferz_noCross") Mover))))) (piece "King_noCross" P2 (or {(move Slide Orthogonal (to (is Enemy (who (to ))) (apply (remove (to ))))) (move Leap {{F F R F} {F F L F}} (to (not (is Friend (who (to )))) (apply (if (is Enemy (who (to ))) (remove (to )))))) (move Hop Orthogonal (between true) (to (not (is Friend (who (to )))) (apply (if (is Enemy (who (to ))) (remove (to )))))) (move Step Diagonal (to (not (is Friend (who (to )))) (apply (remove (to ))))) (move Step Diagonal (to (not (is Friend (who (to )))) (apply (remove (to ))))) (move Step (to (not (is Friend (who (to )))) (apply (remove (to )))))}))}) (rules (start {(place "Pawn1" (sites Row 1)) (place "Rook1" {"A1" "H1"}) (place "Knight1" {"B1" "G1"}) (place "Elephant1" {"C1" "F1"}) (place "Ferz_noCross1" "D1") (place "King_noCross1" "E1") (place "King_noCross2" "E8")}) (play (do (if (is Mover P1) (do (roll ) (if (= (count Pips) 6) (forEach Piece "King_noCross") (if (= (count Pips) 5) (forEach Piece "Ferz_noCross") (if (= (count Pips) 4) (forEach Piece "Elephant") (if (= (count Pips) 3) (forEach Piece "Knight") (if (= (count Pips) 2) (forEach Piece "Rook") (forEach Piece "Pawn"))))))) (forEach Piece)) (not (is Threatened (id "King_noCross" Mover) (forEach Piece Next))))) (end {(if (and {(is Mover P2) (is Threatened (id "King_noCross" Next)) (not (can Move (do (forEach Piece Next) (not (is Threatened (id "King_noCross" Next) (forEach Piece))))))}) (result P2 Win)) (if (and (is Mover P1) (no Moves P2)) (result P1 Win)) (if (and {(is Mover P1) (is Threatened (id "King_noCross" P1)) (no Moves P1)}) (result P2 Win))})))

Played on an 8x8 board with pieces with specialized moves: Pawns (8): can move one space orthogonally forward, or two steps orthogonally forward only if it is the first move of any of that player's pawns, capture one space diagonally forward; Rooks (2): can move any number of spaces orthogonally; Bishops (2): can move any number of spaces diagonally; Knight (2): moves in any direction, one space orthogonally with one space forward diagonally; Queens (1): can move any number of spaces orthogonally or diagonally; Kings (1): can move one space orthogonally or diagonally. An opponent's piece is captured by moving a player's own piece onto a space occupied by the opponent's piece. When a King can be captured on the next turn by an opponent's piece, it is in check. The King must not be in check at the end of the player's turn. If this is not possible, it is checkmate and the opponent wins. When a player is reduced to a King without any other pieces, the game is a draw.
        
(game "Chandaraki" (players {(player N) (player S)}) (equipment {(board (square 8)) (piece "Pawn" Each (or {(move Step Forward (to (is Empty (to )))) (move Step (directions {FR FL}) (to (is Enemy (who (to ))) (apply (remove (to ))))) (if (is In (from ) (sites Start (piece (what (from ))))) (move Slide Forward (between (exact 2) (is Empty (between ))) (to (is Empty (to )))))})) (piece "Rook" Each (move Slide Orthogonal (to (is Enemy (who (to ))) (apply (remove (to )))))) (piece "King" Each (move Step (to (not (is Friend (who (to )))) (apply (if (is Enemy (who (to ))) (remove (to ))))))) (piece "Bishop" Each (move Slide Diagonal (to (is Enemy (who (to ))) (apply (remove (to )))))) (piece "Knight" Each (move Leap {{F F R F} {F F L F}} (to (not (is Friend (who (to )))) (apply (if (is Enemy (who (to ))) (remove (to ))))))) (piece "Queen" Each (move Slide (to (is Enemy (who (to ))) (apply (remove (to )))))) (regions "Promotion" P1 (sites Top)) (regions "Promotion" P2 (sites Bottom))}) (rules (start {(place "Pawn1" (sites Row 1)) (place "Pawn2" (sites Row 6)) (place "Rook1" {"A1" "H1"} 1) (place "Knight1" {"B1" "G1"}) (place "Bishop1" {"C1" "F1"}) (place "Queen1" "D1") (place "King1" "E1" 1) (place "Rook2" {"A8" "H8"} 1) (place "Knight2" {"B8" "G8"}) (place "Bishop2" {"C8" "F8"}) (place "Queen2" "D8") (place "King2" "E8" 1)}) (play (do (forEach Piece) (not (is Threatened (id "King" Mover))))) (end {(if (and (is Threatened (id "King" Next)) (not (can Move (do (forEach Piece Next) (not (is Threatened (id "King" Next))))))) (result Mover Win)) (if (= 1 (count Pieces Next)) (result Mover Draw))})))

12x12 board. Pieces move as follows: Raja (King, x1): moves one space in any direction; Mantri (Minister, placed to the left of the Raja, x1): moves any distance orthogonally or diagonally; Ushtra (Camel, x2): moves diagonally any distance; Chariot (x2), moves orthogonally any distance; Flagcar (x2), moves diagonally any distance; Vaha (Horse, x2): move orthogonally one space and then diagonally another, jumping over any intervening pieces; Danti (Elephant, x2): moves orthogonally any distance. Padati (Pawn, x12): move forward orthogonally one space or one space diagonally forward to capture. When a Padati reaches the opposite edge of the board, it is promoted to a Mantri and is moved immediately to the space it last moved from. An opponent's piece is captured by moving one of the player's own pieces onto the space occupied by the opponent's piece. If the Raja can be captured on the opponent's next turn, it is in check. The Raja cannot be in check at the end of the player's turn. If this is impossible, the opponent wins. When a player is reduced to only their Raja and Padati, the opponent wins. In the case of a stalemate, the player in stalemate may remove any of the opponent's pieces (except their Raja).
(game "Chaturanga (12x12)" (players {(player N) (player S)}) (equipment {(board (square 12)) (piece "Pawn" Each (or {(move Step Forward (to (is Empty (to )))) (move Step (directions {FR FL}) (to (is Enemy (who (to ))) (apply (remove (to )))))} (then (if (is In (last To) (sites Mover "Promotion")) (and (promote (last To) (piece "Ferz_noCross") Mover) (fromTo (from (last To)) (to (last From)))))))) (piece "Rook" Each (move Slide Orthogonal (to (is Enemy (who (to ))) (apply (remove (to )))))) (piece "Camel" Each (move Slide Diagonal (to (is Enemy (who (to ))) (apply (remove (to )))))) (piece "King_noCross" Each (move Step (to (not (is Friend (who (to )))) (apply (if (is Enemy (who (to ))) (remove (to ))))))) (piece "Bishop_noCross" Each (move Slide Diagonal (to (is Enemy (who (to ))) (apply (remove (to )))))) (piece "Elephant" Each (move Slide Orthogonal (to (is Enemy (who (to ))) (apply (remove (to )))))) (piece "Knight" Each (move Leap {{F F R F} {F F L F}} (to (not (is Friend (who (to )))) (apply (if (is Enemy (who (to ))) (remove (to ))))))) (piece "Ferz_noCross" Each (move Slide (to (is Enemy (who (to ))) (apply (remove (to )))))) (regions "Promotion" P1 (sites Top)) (regions "Promotion" P2 (sites Bottom))}) (rules (start {(place "Pawn1" (sites Row 1)) (place "Pawn2" (sites Row 10)) (place "Elephant1" {"A1" "L1"}) (place "Knight1" {"B1" "K1"}) (place "Bishop_noCross1" {"C1" "J1"}) (place "Rook1" {"D1" "I1"}) (place "Camel1" {"E1" "H1"}) (place "Ferz_noCross1" "F1") (place "King_noCross1" "G1") (place "Elephant2" {"A12" "L12"}) (place "Knight2" {"B12" "K12"}) (place "Bishop_noCross2" {"C12" "J12"}) (place "Rook2" {"D12" "I12"}) (place "Camel2" {"E12" "H12"}) (place "Ferz_noCross2" "G12") (place "King_noCross2" "F12")}) (play (if (no Moves Mover) (move Remove (difference (sites Occupied Next) (where "King_noCross" Next))) (do (forEach Piece) (not (is Threatened (id "King_noCross" Mover)))))) (end {(if (and (is Threatened (id "King_noCross" Next)) (not (can Move (do (forEach Piece Next) (not (is Threatened (id "King_noCross" Next))))))) (result Mover Win)) (if (and {(no Pieces Next "Ferz_noCross") (no Pieces Next "Knight") (no Pieces Next "Bishop_noCross") (no Pieces Next "Elephant") (no Pieces Next "Rook") (no Pieces Next "Camel")}) (result Mover Win))})))

Circular board. Empty central circle, with four concentric rows of spaces, sixteen spaces per circle. Pieces are as follows: Rukh (x2), placed on two adjacent squares in the outer circle, move any number of spaces orthogonally; Asb (x2), placed in the two spaces adjacent to the Rukh in the next circle, move as Chess knights; Pil (x2): Placed in the two spaces adjacent to the Asb in the next circle in, move two spaces diagonally, jumping over the first space; Fres (x1): placed on the inner circle adjacent to the left Pil, moves one space diagonally; Shah (x1), placed to the right of the Fers, moves one space in any direction, Baidaq (x8), placed in each space flanking the other pieces, those on the left move clockwise, those on the right anti-clockwise, one space forward or one space diagonally forward to capture. No en passant, no promotion. When two Baidaq meet and neither can move, the opponent captures them. The opponent who can checkmate the opponent's Shah wins.
(game "Shatranj ar-Rumiya" (players 2) (equipment {(board (remove (concentric {0 0 0 16 16 16 16}) {1})) (piece "Pawn" Each (or {(move Step (if (= (state (from )) 0) CW CCW) (to (is Empty (to )))) (move (from ) (to (sites Around (sites To (move Step (if (= (state (from )) 0) CW CCW) (to true))) Orthogonal) (and (is Related Diagonal (from ) (to )) (is Enemy (who (to ))))))} (then (if (= (state (last To)) 0) (if (= (what (ahead (last To) CW)) (id "Pawn" Next)) (and (remove (last To)) (remove (ahead (last To) CW)))) (if (= (what (ahead (last To) CCW)) (id "Pawn" Next)) (and (remove (last To)) (remove (ahead (last To) CCW)))))))) (piece "Rook" Each (move Slide Rotational (to (is Enemy (who (to ))) (apply (remove (to )))))) (piece "Knight" Each (forEach Direction Orthogonal (to true (apply (forEach Direction (from (to )) Diagonal (if (and (not (is Friend (who (to )))) (= 3 (count Steps Orthogonal (from ) (to )))) (move (from ) (to (apply (is Enemy (who (to ))) (remove (to ))))))))))) (piece "Elephant" Each (move (from ) (to (sites Around (sites Around (from ) Diagonal) Diagonal) (and (not (is Friend (who (to )))) (< 2 (count Steps Orthogonal (from ) (to )))) (apply (is Enemy (who (to ))) (remove (to )))))) (piece "Queen" Each (move Step Diagonal (to (not (is Friend (who (to )))) (apply (remove (to )))))) (piece "King_noCross" Each (move Step (to (not (is Friend (who (to )))) (apply (if (is Enemy (who (to ))) (remove (to )))))))}) (rules (start {(place "Rook1" (sites {52 53})) (place "Rook2" (sites {61 60})) (place "Knight1" (sites {36 37})) (place "Knight2" (sites {44 45})) (place "Elephant1" (sites {20 21})) (place "Elephant2" (sites {28 29})) (place "Queen1" 4) (place "Queen2" 12) (place "King_noCross1" 5) (place "King_noCross2" 13) (place "Pawn1" (sites {3 19 35 51}) 0) (place "Pawn1" (sites {54 38 22 6}) 1) (place "Pawn2" (sites {11 27 43 59}) 0) (place "Pawn2" (sites {14 30 46 62}) 1)}) (play (do (forEach Piece) (not (is Threatened (id "King_noCross" Mover))))) (end {(if (and (is Threatened (id "King_noCross" Next)) (not (can Move (do (forEach Piece Next) (not (is Threatened (id "King_noCross" Next))))))) (result Mover Win))})))

10x10 board. Pieces move as follows: Raja (x1): moves one space in any direction; Crown Prince (placed to the left of the Raja, x1): moves like any of the other pieces; Kotwal (Police Chief, placed to the right of the Raja, x1): Moves like the Elephant and the Vaha; Mantri (x1): moves any distance orthogonally or diagonally; Elephant (x2): moves diagonally any distance; Vaha (two placed in front of the Queens, x4): move orthogonally one space and then diagonally another, jumping over any intervening pieces; Chariot (x2): moves orthogonally any distance; Queen (placed in front of the Raja and Crown Prince, x2): move one square orthogonally or diagonally; Padati (placed in the second row, except for the central two squares, x8): move forward orthogonally one space or one space diagonally forward to capture. When a Padati reaches the opposite edge of the board, it is promoted to a Mantri and is moved immediately to the space it last moved from. An opponent's piece is captured by moving one of the player's own pieces onto the space occupied by the opponent's piece. If the Raja can be captured on the opponent's next turn, it is in check. The Raja cannot be in check at the end of the player's turn. If this is impossible, the opponent wins. When a player is reduced to only their Raja and Padati, the opponent wins. In the case of a stalemate, the player in stalemate may remove any of the opponent's pieces (except their Raja).
        
(game "Shataranja" (players {(player N) (player S)}) (equipment {(board (square 10)) (piece "Pawn" Each (or {(move Step Forward (to (is Empty (to )))) (move Step (directions {FR FL}) (to (is Enemy (who (to ))) (apply (remove (to )))))} (then (if (is In (last To) (sites Mover "Promotion")) (and (promote (last To) (piece "Bishop_noCross") Mover) (fromTo (from (last To)) (to (last From)))))))) (piece "Rook" Each (move Slide Orthogonal (to (is Enemy (who (to ))) (apply (remove (to )))))) (piece "King_noCross" Each (move Step (to (not (is Friend (who (to )))) (apply (if (is Enemy (who (to ))) (remove (to ))))))) (piece "Elephant" Each (move Slide Orthogonal (to (is Enemy (who (to ))) (apply (remove (to )))))) (piece "Knight" Each (move Leap {{F F R F} {F F L F}} (to (not (is Friend (who (to )))) (apply (if (is Enemy (who (to ))) (remove (to ))))))) (piece "Queen" Each (move Step (to (not (is Friend (who (to )))) (apply (if (is Enemy (who (to ))) (remove (to ))))))) (piece "Ferz_noCross" Each (or (move Slide (to (is Enemy (who (to ))) (apply (remove (to ))))) (move Leap {{F F R F} {F F L F}} (to (not (is Friend (who (to )))) (apply (if (is Enemy (who (to ))) (remove (to )))))))) (piece "Bishop_noCross" Each (move Slide (to (is Enemy (who (to ))) (apply (remove (to )))))) (piece "Commoner" Each (or (move Slide Diagonal (to (is Enemy (who (to ))) (apply (remove (to ))))) (move Leap {{F F R F} {F F L F}} (to (not (is Friend (who (to )))) (apply (if (is Enemy (who (to ))) (remove (to )))))))) (regions "Promotion" P1 (sites Top)) (regions "Promotion" P2 (sites Bottom))}) (rules (start {(place "Pawn1" (difference (sites Row 1) (sites {"E2" "F2"}))) (place "Pawn2" (difference (sites Row 8) (sites {"E2" "F2"}))) (place "Queen1" {"E2" "F2"}) (place "Queen2" {"E9" "F9"}) (place "Rook1" {"A1" "J1"}) (place "Knight1" {"B1" "I1" "E3" "F3"}) (place "Elephant1" {"C1" "H1"}) (place "Ferz_noCross1" "E1") (place "Commoner1" "G1") (place "Bishop_noCross1" "D1") (place "King_noCross1" "F1") (place "Rook2" {"A10" "J10"}) (place "Knight2" {"B10" "I10" "E8" "F8"}) (place "Elephant2" {"C10" "H10"}) (place "Ferz_noCross2" "F10") (place "Commoner2" "D10") (place "Bishop_noCross2" "G10") (place "King_noCross2" "E10")}) (play (if (no Moves Mover) (move Remove (difference (sites Occupied Next) (where "King_noCross" Next))) (do (forEach Piece) (not (is Threatened (id "King_noCross" Mover)))))) (end {(if (and (is Threatened (id "King_noCross" Next)) (not (can Move (do (forEach Piece Next) (not (is Threatened (id "King_noCross" Next))))))) (result Mover Win)) (if (and {(no Pieces Next "Ferz_noCross") (no Pieces Next "Queen") (no Pieces Next "Knight") (no Pieces Next "Bishop_noCross") (no Pieces Next "Elephant") (no Pieces Next "Rook") (no Pieces Next "Commoner")}) (result Mover Win))})))

8x8 board, with diagonals in every square. Pieces have special moves, as follows: Raja (king), moves one square in any direction, but on the first move, it may jump two squares or move as a knight, with the exception that it cannot jump two squares diagonally; Mantri (minister), moves orthogonally or diagonally any number of spaces; Gajah (x2); move diagonally any distance; Kuda (horse) x2, moves orthogonally one space then diagonal one space from there, jumping over any intervening pieces; Ter/Chemor (chariot) x2, moves orthogonally any distance; Bídaq (pawn) x8: moves one square forward or one square forward diagonally to capture. May move two spaces forward orthogonally if it is that piece's first move. Upon reaching the opposite edge of the board, the Bídaq moves in the opposite direction, reversing again if it reaches the opposite edge. The Mantri is placed to the right of the Raja at the beginning of play. Castling occurs in two moves, the rook moving to the king and then the king jumping over the rook. Pieces are captured by moving onto a space occupied by an opponent's piece. If the Raja can be captured on its next turn, it is in check. The Raja cannot be in check at the end of its turn. When this is unavoidable, it is checkmate and the opponent wins.
        
(game "Tepong" (players {(player N) (player S)}) (equipment {(board (square 8)) (piece "King_noCross" Each (or (move Step (to (not (is Friend (who (to )))) (apply (remove (to )))) (then (if (not (= 1 (state (last To)))) (set State (last To) 1)))) (if (not (= 1 (state (from )))) (or {(move Hop Orthogonal (between (exact 2) true) (to (not (is Friend (who (to )))) (apply (if (is Enemy (who (to ))) (remove (to )))))) (move Leap {{F F R F} {F F L F}} (to (not (is Friend (who (to )))) (apply (if (is Enemy (who (to ))) (remove (to )))))) (if (is In (from ) (sites {"E8" "D1"})) (or (if (and {(is Empty (ahead (from ) 2 W)) (= (what (ahead (from ) W)) (id "Rook" Mover)) (not (= 1 (state (ahead (from ) W))))}) (move (from ) (to (ahead (from ) 2 W)))) (if (and {(is Empty (ahead (from ) 2 E)) (= (what (ahead (from ) E)) (id "Rook" Mover)) (not (= 1 (state (ahead (from ) E))))}) (move (from ) (to (ahead (from ) 2 E))))))} (then (set State (last To) 1)))))) (piece "Queen" Each (move Slide (to (is Enemy (who (to ))) (apply (remove (to )))))) (piece "Bishop_noCross" Each (move Slide Diagonal (to (is Enemy (who (to ))) (apply (remove (to )))))) (piece "Knight" Each (move Leap {{F F R F} {F F L F}} (to (not (is Friend (who (to )))) (apply (if (is Enemy (who (to ))) (remove (to ))))))) (piece "Rook" Each (move Slide Orthogonal (to (is Enemy (who (to ))) (apply (remove (to )))) (then (if (and (not (= 1 (state (last To)))) (not (is In (last To) (sites {"C1" "E1" "D8" "F8"})))) (set State (last To) 1))))) (piece "Pawn" Each (or {(if (and (= 0 (state (last To))) (is In (from ) (sites Start (piece (what (from )))))) (move Slide Forward (between (exact 2) (is Empty (between ))) (to (is Empty (to ))))) (move Step (if (= 1 (state (from ))) Backward Forward) (to (is Empty (to )))) (move Step (if (= 1 (state (from ))) (directions {BR BL}) (directions {FR FL})) (to (is Enemy (who (to ))) (apply (remove (to )))))} (then (if (is In (last To) (union (sites Bottom) (sites Top))) (if (= 0 (state (last To))) (set State (last To) 1) (set State (last To) 2))))))}) (rules (start {(place "Pawn1" (sites Row 1)) (place "Pawn2" (sites Row 6)) (place "Rook1" {"A1" "H1"}) (place "Knight1" {"B1" "G1"}) (place "Bishop_noCross1" {"C1" "F1"}) (place "King_noCross1" "D1") (place "Queen1" "E1") (place "Rook2" {"A8" "H8"}) (place "Knight2" {"B8" "G8"}) (place "Bishop_noCross2" {"C8" "F8"}) (place "King_noCross2" "E8") (place "Queen2" "D8")}) (play (do (forEach Piece) (not (is Threatened (id "King_noCross" Mover))))) (end (if (and (is Threatened (id "King_noCross" Next)) (not (can Move (do (forEach Piece Next) (not (is Threatened (id "King_noCross" Next))))))) (result Mover Win)))))

8x8 board, not checkered. Pieces, their number, and moves are as follows: Ang/Sdaach (\"King\
(game "Ouk Chatrang" (players {(player N) (player S)}) (equipment {(board (square 8)) (hand Each 5) (piece "King_noCross" Each (or (move Step (to (not (is Friend (who (to )))) (apply (remove (to ))))) (if (= 1 (state (from ))) (move Leap {{F F R F} {F F L F}} (to (is Empty (to ))))) (then (if (= (state (last To)) 1) (set State (last To) 0))))) (piece "Boat" Each (move Slide Orthogonal (to (is Enemy (who (to ))) (apply (remove (to )))))) (piece "Ferz_noCross" Each (or (move Step Diagonal (to (not (is Friend (who (to )))) (apply (remove (to ))))) (move Step Forward (to (not (is Friend (who (to )))) (apply (remove (to ))))))) (piece "Knight" Each (move Leap {{F F R F} {F F L F}} (to (not (is Friend (who (to )))) (apply (if (is Enemy (who (to ))) (remove (to ))))))) (piece "Fish" Each (or {(move Step Forward (to (is Empty (to )))) (move Step (directions {FR FL}) (to (is Enemy (who (to ))) (apply (remove (to )))))} (then (if (is In (last To) (sites Mover "Promotion")) (promote (last To) (piece "Queen") Mover))))) (piece "Queen" Each (or (move Step Diagonal (to (not (is Friend (who (to )))) (apply (remove (to ))))) (if (= 1 (state (from ))) (move Hop Forward (between true) (to (not (is Friend (who (to )))) (apply (remove (to )))))) (then (if (= (state (last To)) 1) (set State (last To) 0))))) (regions "Promotion" P1 (sites Row 5)) (regions "Promotion" P2 (sites Row 2))}) (rules (start {(place "Fish1" (sites Row 2)) (place "Fish2" (sites Row 5)) (place "Boat1" {"A1" "H1"}) (place "Knight1" {"B1" "G1"}) (place "Ferz_noCross1" {"C1" "F1"}) (place "Queen1" "D1" 1) (place "King_noCross1" "E1" 1) (place "Boat2" {"A8" "H8"}) (place "Knight2" {"B8" "G8"}) (place "Ferz_noCross2" {"C8" "F8"}) (place "Queen2" "D8" 1) (place "King_noCross2" "E8" 1)}) (play (do (forEach Piece) (not (is Threatened (id "King_noCross" Mover))))) (end {(if (and (is Threatened (id "King_noCross" Next)) (not (can Move (do (forEach Piece Next) (not (is Threatened (id "King_noCross" Next))))))) (result Mover Win)) (if (no Moves Mover) (result Mover Draw))})))

8x8 board. The pieces move as follows, with the number per player: King (x1): moves one space orthogonally or diagonally; Counselor (x1): One square diagonally, but may move two spaces forward orthogonally on the first move, jumping over the Soldier in front of it on the first move of the game; Rook (x2): Any number of spaces orthogonally; Elephant (x2): Two squares diagonally, jumping over the first, cannot capture another Elephant; Horse (x2): Moves as a chess knight. Soldier (x8): Moves one space forward orthogonally; one space forward diagonally to capture. The Soldier in front of the Counselor may jump to the space in front of the Counselor when it has used its special move on the first turn, this must be done as the second move of the game, i.e. on the next turn after the Counselor had made its special move. No en passant. Soldiers promote to Counselor when reaching the eighth rank. No castling. Stalemate results in a win for player causing it. The player who checkmates the king wins.
        
(game "Rumi Shatranj" (players {(player N) (player S)}) (equipment {(board (square 8)) (hand Each 5) (piece "King_noCross" Each (move Step (to (not (is Friend (who (to )))) (apply (if (is Enemy (who (to ))) (remove (to ))))))) (piece "Rook" Each (move Slide Orthogonal (to (is Enemy (who (to ))) (apply (remove (to )))))) (piece "Elephant" Each (move Hop Diagonal (between true) (to (or (is Empty (to )) (and (is Enemy (who (to ))) (not (= (what (to )) (id "Elephant" Next))))) (apply (remove (to )))))) (piece "Knight" Each (move Leap {{F F R F} {F F L F}} (to (not (is Friend (who (to )))) (apply (if (is Enemy (who (to ))) (remove (to ))))))) (piece "Pawn" Each (or {(move Step Forward (to (is Empty (to )))) (move Step (directions {FR FL}) (to (is Enemy (who (to ))) (apply (remove (to )))))} (then (if (is In (last To) (sites Mover "Promotion")) (moveAgain ))))) (piece "Ferz_noCross" Each (move Step Diagonal (to (not (is Friend (who (to )))) (apply (remove (to )))))) (regions "Promotion" P1 (sites Top)) (regions "Promotion" P2 (sites Bottom))}) (rules (start {(place "Pawn1" (sites Row 1)) (place "Pawn2" (sites Row 6)) (place "Rook1" {"A1" "H1"}) (place "Knight1" {"B1" "G1"}) (place "Elephant1" {"C1" "F1"}) (place "Ferz_noCross1" "D1") (place "King_noCross1" "E1") (place "Rook2" {"A8" "H8"}) (place "Knight2" {"B8" "G8"}) (place "Elephant2" {"C8" "F8"}) (place "Ferz_noCross2" "D8") (place "King_noCross2" "E8")}) {(phase "OpeningCounselor" (play (forEach Piece "Ferz_noCross" (move Hop Forward (between true) (to (is Empty (to )) (apply (remove (to ))))))) (nextPhase Mover "OpeningSoldier")) (phase "OpeningSoldier" (play (forEach Piece "Pawn" (if (is In (from ) (sites {"D2" "D7"})) (move Hop Forward (between true) (to (is Empty (to )) (apply (remove (to )))))))) (nextPhase Mover "Playing")) (phase "Playing" (play (if (is Prev Mover) (move Promote (last To) (piece "Ferz_noCross") Mover) (do (forEach Piece) (not (is Threatened (id "King_noCross" Mover)))))))} (end {(if (and (is Threatened (id "King_noCross" Next)) (not (can Move (do (forEach Piece Next) (not (is Threatened (id "King_noCross" Next))))))) (result Mover Win)) (if (no Moves Next) (result Mover Win))})))

14x14 board. Pieces move as follows: Raja (King, x1): moves one space in any direction; Mantri (Minister, placed to the left of the Raja, x1): moves any distance orthogonally or diagonally; Queen (x1, placed to the right of the Raja); moves orthogonally one space; Prince (placed to the left of the Minister, x1), moves orthogonally or diagonally any distance; Ushtra (Camel, x2): moves diagonally any distance; Chariot (x2), moves orthogonally any distance; Flagcar (x2), moves diagonally any distance; Vaha (Horse, x2): move orthogonally one space and then diagonally another, jumping over any intervening pieces; Danti (Elephant, x2): moves orthogonally any distance. Padati (Pawn, x14): move forward orthogonally one space or one space diagonally forward to capture. When a Padati reaches the opposite edge of the board, it is promoted to a Mantri and is moved immediately to the space it last moved from. An opponent's piece is captured by moving one of the player's own pieces onto the space occupied by the opponent's piece. If the Raja can be captured on the opponent's next turn, it is in check. The Raja cannot be in check at the end of the player's turn. If this is impossible, the opponent wins. When a player is reduced to only their Raja and Padati, the opponent wins. In the case of a stalemate, the player in stalemate may remove any of the opponent's pieces (except their Raja).
        
(game "Chaturanga (Kridakausalya 14x14)" (players {(player N) (player S)}) (equipment {(board (square 14)) (piece "Pawn" Each (or {(move Step Forward (to (is Empty (to )))) (move Step (directions {FR FL}) (to (is Enemy (who (to ))) (apply (remove (to )))))} (then (if (is In (last To) (sites Mover "Promotion")) (and (promote (last To) (piece "Ferz_noCross") Mover) (fromTo (from (last To)) (to (last From)))))))) (piece "Rook" Each (move Slide Orthogonal (to (is Enemy (who (to ))) (apply (remove (to )))))) (piece "Camel" Each (move Slide Diagonal (to (is Enemy (who (to ))) (apply (remove (to )))))) (piece "King_noCross" Each (move Step (to (not (is Friend (who (to )))) (apply (if (is Enemy (who (to ))) (remove (to ))))))) (piece "Bishop_noCross" Each (move Slide Diagonal (to (is Enemy (who (to ))) (apply (remove (to )))))) (piece "Queen" Each (move Step Orthogonal (to (not (is Friend (who (to )))) (apply (remove (to )))))) (piece "Commoner" Each (move Slide (to (is Enemy (who (to ))) (apply (remove (to )))))) (piece "Elephant" Each (move Slide Orthogonal (to (is Enemy (who (to ))) (apply (remove (to )))))) (piece "Knight" Each (move Leap {{F F R F} {F F L F}} (to (not (is Friend (who (to )))) (apply (if (is Enemy (who (to ))) (remove (to ))))))) (piece "Ferz_noCross" Each (move Slide (to (is Enemy (who (to ))) (apply (remove (to )))))) (regions "Promotion" P1 (sites Top)) (regions "Promotion" P2 (sites Bottom))}) (rules (start {(place "Pawn1" (sites Row 1)) (place "Elephant1" {"A1" "N1"}) (place "Knight1" {"B1" "M1"}) (place "Bishop_noCross1" {"C1" "L1"}) (place "Rook1" {"D1" "K1"}) (place "Camel1" {"E1" "J1"}) (place "Commoner1" "F1") (place "Ferz_noCross1" "G1") (place "King_noCross1" "H1") (place "Queen1" "I1") (place "Pawn2" (sites Row 12)) (place "Elephant2" {"A14" "N14"}) (place "Knight2" {"B14" "M14"}) (place "Bishop_noCross2" {"C14" "L14"}) (place "Rook2" {"D14" "K14"}) (place "Camel2" {"E14" "J14"}) (place "Commoner2" "I14") (place "Ferz_noCross2" "H14") (place "King_noCross2" "G14") (place "Queen2" "F14")}) (play (if (no Moves Mover) (move Remove (difference (sites Occupied Next) (where "King_noCross" Next))) (do (forEach Piece) (not (is Threatened (id "King_noCross" Mover)))))) (end {(if (and (is Threatened (id "King_noCross" Next)) (not (can Move (do (forEach Piece Next) (not (is Threatened (id "King_noCross" Next))))))) (result Mover Win)) (if (and {(no Pieces Next "Ferz_noCross") (no Pieces Next "Knight") (no Pieces Next "Bishop_noCross") (no Pieces Next "Elephant") (no Pieces Next "Rook") (no Pieces Next "Camel") (no Pieces Next "Commoner") (no Pieces Next "Queen")}) (result Mover Win))})))

8x8 board. Each player begins with sixteen pieces with special moves: Khoon (x1): moves orthogonally in any direction; Met (x1): placed to the right of the Khoon, moves one square orthogonally or diagonally forward, or one square diagonally backward, may move two squares orthogonally forward on the first move; Khon (x2): moves one square forward orthogonally or diagonally, may move backward diagonally but not to capture; Maa (x2): moves as a Chess knight; Rooa (x2): moves orthogonally any distance; Bea (x8): move forward one space, but capture diagonally. When they reach the opposite edge of the board, they are promoted to Met. They begin on the third row of the board with respect to each player. When the Khoon is threatened, it is in check and the player's next move must be to remove the check. If the player cannot, it is checkmate and the player loses. If there are no legal moves, the game is a draw. If one player has only a king left, the opponent must checkmate it within a set number of turns, based on the highest ranking piece left on the board, minus the total number of pieces on the board. The values are: two Rooa: eight; one Rooa, sixteen, two Khon, 22; one Khon, 44; two Maa, 33; one Maa, 66; Met and two Bea, 88; one each of Met, Rooa, Maa, Khon, sixteen. With only a Met, the game is a draw.
(game "Mak Ruk" (players {(player N) (player S)}) (equipment {(board (square 8)) (piece "Pawn" Each (or {(move Step Forward (to (is Empty (to )))) (move Step (directions {FR FL}) (to (is Enemy (who (to ))) (apply (remove (to )))))} (then (if (is In (last To) (sites Mover "Promotion")) (promote (last To) (piece "Ferz_noCross") Mover))))) (piece "Rook" Each (move Slide Orthogonal (to (is Enemy (who (to ))) (apply (remove (to )))))) (piece "King_noCross" Each (move Step Orthogonal (to (not (is Friend (who (to )))) (apply (remove (to )))))) (piece "Bishop_noCross" Each (or (move Step (directions {FL FR Forward}) (to (not (is Friend (who (to )))) (apply (remove (to ))))) (move Step (directions {BL BR}) (to (is Empty (to )))))) (piece "Knight" Each (move Leap {{F F R F} {F F L F}} (to (not (is Friend (who (to )))) (apply (if (is Enemy (who (to ))) (remove (to ))))))) (piece "Ferz_noCross" Each (or (if (= (state (from )) 1) (move (from ) (to (ahead (ahead (from ) N) N) (is Empty (to )))) (then (set State (last To) 0))) (move Step (directions {BL BR FL FR Forward}) (to (not (is Friend (who (to )))) (apply (remove (to ))))))) (regions "Promotion" P1 (sites Top)) (regions "Promotion" P2 (sites Bottom))}) (rules (start {(place "Pawn1" (sites Row 2)) (place "Pawn2" (sites Row 5)) (place "Rook1" {"A1" "H1"}) (place "Knight1" {"B1" "G1"}) (place "Bishop_noCross1" {"C1" "F1"}) (place "Ferz_noCross1" "E1" 1) (place "King_noCross1" "D1") (place "Rook2" {"A8" "H8"}) (place "Knight2" {"B8" "G8"}) (place "Bishop_noCross2" {"C8" "F8"}) (place "Ferz_noCross2" "D8" 1) (place "King_noCross2" "E8")}) (play (do (forEach Piece) (not (is Threatened (id "King_noCross" Mover))))) (end {(if (and (is Threatened (id "King_noCross" Next)) (not (can Move (do (forEach Piece Next) (not (is Threatened (id "King_noCross" Next))))))) (result Mover Win)) (if (no Moves Next) (result Mover Draw)) (if (and {(= (count Pieces Next) 1) (= (count Pieces Mover) 2) (!= (where "Ferz_noCross" Mover) -1)}) (result Mover Draw))})))

8x8 checkered board. Pieces move according to specialized moves, as follows: Piyatha (x8): can move one space forward, and one space forward diagonally to capture. When they reach the final rank, they may be promoted to the piece belonging to that rank, as long as it has already been captured by the opponent; Rukh (castle), (x2): can move any number of spaces orthogonally; Fil (elephant), (x2): can move any number of spaces diagonally; Ghoda (horse), (2): moves in any direction, one space orthogonally with one space forward diagonally; Farthir (x1): can move any number of spaces orthogonally or diagonally; Shah (x1): can move one space orthogonally or diagonally, and can also move like the horse if it has not yet been checked. The pieces are arranged as in Chess. Players capture pieces by moving onto a space occupied by an opponent's piece.  When a player can capture the opponent's Shah on the next turn, the Shah is in Check, the opponent's next move must free the Shah from Check. If the opponent cannot, it is Checkmate and the player wins. Stalemate is allowed.
        
(game "Shatren" (players {(player N) (player S)}) (equipment {(board (square 8)) (piece "Pawn" Each (or {(move Step Forward (to (is Empty (to )))) (move Step (directions {FR FL}) (to (is Enemy (who (to ))) (apply (remove (to )))))} (then (if (is In (last To) (sites Mover "Promotion")) (if (and (is In (last To) (sites Corners)) (< (count Sites (sites Occupied Mover "Castle")) 2)) (promote (last To) (piece (id "Castle" Mover))) (if (and (or (= (column (last To)) 1) (= (column (last To)) 6)) (< (count Sites (sites Occupied Mover "Horse")) 2)) (promote (last To) (piece (id "Horse" Mover))) (if (and (or (= (column (last To)) 2) (= (column (last To)) 5)) (< (count Sites (sites Occupied Mover "Elephant")) 2)) (promote (last To) (piece (id "Elephant" Mover))) (if (and (= (column (last To)) 3) (< (count Sites (sites Occupied Mover "Queen")) 1)) (promote (last To) (piece (id "Queen" Mover))))))))))) (piece "Castle" Each (move Slide Orthogonal (to (is Enemy (who (to ))) (apply (remove (to )))))) (piece "King_noCross" Each (or (move Step (to (not (is Friend (who (to )))) (apply (remove (to ))))) (if (not (is Threatened (id "King_noCross" Mover))) (move Leap {{F F R F} {F F L F}} (to (not (is Friend (who (to )))) (apply (if (is Enemy (who (to ))) (remove (to ))))))))) (piece "Elephant" Each (move Slide Diagonal (to (is Enemy (who (to ))) (apply (remove (to )))))) (piece "Horse" Each (move Leap {{F F R F} {F F L F}} (to (not (is Friend (who (to )))) (apply (if (is Enemy (who (to ))) (remove (to ))))))) (piece "Queen" Each (move Slide (to (is Enemy (who (to ))) (apply (remove (to )))))) (regions "Promotion" P1 (sites Top)) (regions "Promotion" P2 (sites Bottom))}) (rules (start {(place "Pawn1" (sites Row 1)) (place "Pawn2" (sites Row 6)) (place "Castle1" {"A1" "H1"} 1) (place "Horse1" {"B1" "G1"}) (place "Elephant1" {"C1" "F1"}) (place "Queen1" "D1") (place "King_noCross1" "E1" 1) (place "Castle2" {"A8" "H8"} 1) (place "Horse2" {"B8" "G8"}) (place "Elephant2" {"C8" "F8"}) (place "Queen2" "D8") (place "King_noCross2" "E8" 1)}) (play (do (forEach Piece) (not (is Threatened (id "King_noCross" Mover))))) (end (if (and (is Threatened (id "King_noCross" Next)) (not (can Move (do (forEach Piece Next) (not (is Threatened (id "King_noCross" Next))))))) (result Mover Win)))))

8x8 board. The pieces move as follows, with the number per player: 1 x Shah (king): moves one space orthogonally or diagonally. 1 x Fers (counselor): One square diagonally. 2 x Rukh (rook): Any number of spaces orthogonally. 2 x Pil (elephant): Two squares diagonally, jumping over the first. Cannot capture another Pil. 2 x Asb (horse): Moves as a chess knight. 8 x Sarbaz (soldier): Moves one space forward orthogonally; one space forward diagonally to capture. No en passant. Promoted to Fers when reaching the eighth rank. No castling. Stalemate results in win for player causing it. The player who checkmates the king wins.
(game "Shatranj" (players {(player N) (player S)}) (equipment {(board (square 8)) (piece "Pawn" Each (or {(move Step Forward (to (is Empty (to )))) (move Step (directions {FR FL}) (to (is Enemy (who (to ))) (apply (remove (to )))))} (then (if (is In (last To) (sites Mover "Promotion")) (moveAgain ))))) (piece "Rook" Each (move Slide Orthogonal (to (is Enemy (who (to ))) (apply (remove (to )))))) (piece "King_noCross" Each (move Step (to (not (is Friend (who (to )))) (apply (if (is Enemy (who (to ))) (remove (to ))))))) (piece "Bishop_noCross" Each (move Hop Diagonal (between true) (to (or (is Empty (to )) (is Enemy (who (to )))) (apply (remove (to )))))) (piece "Knight" Each (move Leap {{F F R F} {F F L F}} (to (not (is Friend (who (to )))) (apply (if (is Enemy (who (to ))) (remove (to ))))))) (piece "Ferz_noCross" Each (move Step Diagonal (to (not (is Friend (who (to )))) (apply (remove (to )))))) (regions "Promotion" P1 (sites Top)) (regions "Promotion" P2 (sites Bottom))}) (rules (start {(place "Pawn1" (sites Row 1)) (place "Pawn2" (sites Row 6)) (place "Rook1" {"A1" "H1"}) (place "Knight1" {"B1" "G1"}) (place "Bishop_noCross1" {"C1" "F1"}) (place "Ferz_noCross1" "D1") (place "King_noCross1" "E1") (place "Rook2" {"A8" "H8"}) (place "Knight2" {"B8" "G8"}) (place "Bishop_noCross2" {"C8" "F8"}) (place "Ferz_noCross2" "D8") (place "King_noCross2" "E8")}) (play (if (is Prev Mover) (move Promote (last To) (piece "Ferz_noCross") Mover) (do (forEach Piece) (not (is Threatened (id "King_noCross" Mover)))))) (end {(if (and (is Threatened (id "King_noCross" Next)) (not (can Move (do (forEach Piece Next) (not (is Threatened (id "King_noCross" Next))))))) (result Mover Win)) (if (= (count Pieces Next) 1) (result Mover Win)) (if (no Moves Next) (result Mover Win))})))

8x8 board, marked as in Chaturanga. Pieces move according to specialized moves, as follows: Pawns (x8): can move one space forward and capture one space forward diagonally; Elephant (or Chariot or Boat) (x2): can move any number of spaces orthogonally; Elephant (or Camel) (x2): can move any number of spaces diagonally; Horse (2): moves in any direction, one space orthogonally with one space forward diagonally; Vizier (x1): can move any number of spaces orthogonally or diagonally; Raja (x1): can move one space orthogonally or diagonally, but can also move like the horse on its first move, if it has not yet been checked. The pieces are arranged as in Chess, except the Vizier is place to the left of the Raja on both sides. Players capture pieces by moving onto a space occupied by an opponent's piece. When a pawn reaches the opposite edge of the board from where it started, it may be promoted to the more powerful piece that begins the game in that position, but only if one of these belonging to the player has already been captured. If this has not happened, the pawn cannot move to the final row. When a player can capture the opponent's Raja on the next turn, the Raja is in Check, the opponent's next move must free the Raja from check. If the opponent cannot, it is checkmate and the player wins. If a player captures all of the opponent's pieces aside from the Raja and pawns, it is declared a half-win, or Burd. When both players are left with only a Raja, it is a draw. Players are not allowed to stalemate the opponent. If check is given 70 times in succession, the game is a draw.
(game "Hindustani Chess" (players {(player N) (player S)}) (equipment {(board (square 8)) (piece "Pawn" Each (move Step Forward (to (and (or (not (is In (to ) (sites Mover "Promotion"))) (and (is In (to ) (sites Mover "Promotion")) (if (and (is In (to ) (sites Corners)) (< (count Sites (sites Occupied Mover "Boat")) 2)) true (if (and (or (= (column (to )) 1) (= (column (to )) 6)) (< (count Sites (sites Occupied Mover "Horse")) 2)) true (if (and (or (= (column (to )) 2) (= (column (to )) 5)) (< (count Sites (sites Occupied Mover "Elephant")) 2)) true (if (and (or (= (column (to )) 3) (= (column (to )) 4)) (< (count Sites (sites Occupied Mover "Ferz_noCross")) 1)) true false)))))) (not (is Friend (who (to ))))) (apply (remove (to )))) (then (if (is In (last To) (sites Mover "Promotion")) (if (is In (last To) (sites Corners)) (promote (last To) (piece (id "Boat" Mover))) (if (or (= (column (last To)) 1) (= (column (last To)) 6)) (promote (last To) (piece (id "Horse" Mover))) (if (or (= (column (last To)) 2) (= (column (last To)) 5)) (promote (last To) (piece (id "Elephant" Mover))) (if (or (= (column (last To)) 3) (= (column (last To)) 4)) (promote (last To) (piece (id "Queen" Mover))))))))))) (piece "Boat" Each (move Slide Orthogonal (to (is Enemy (who (to ))) (apply (remove (to )))))) (piece "King_noCross" Each (or (move Step (to (not (is Friend (who (to )))) (apply (remove (to ))))) (if (and (not (is Threatened (id "King_noCross" Mover))) (= (state (from )) 1)) (move Leap {{F F R F} {F F L F}} (to (not (is Friend (who (to )))) (apply (if (is Enemy (who (to ))) (remove (to ))))))) (then (if (= (state (last To)) 1) (set State (last To) 0))))) (piece "Elephant" Each (move Slide Diagonal (to (is Enemy (who (to ))) (apply (remove (to )))))) (piece "Horse" Each (move Leap {{F F R F} {F F L F}} (to (not (is Friend (who (to )))) (apply (if (is Enemy (who (to ))) (remove (to ))))))) (piece "Ferz_noCross" Each (move Slide (to (is Enemy (who (to ))) (apply (remove (to )))))) (regions "Promotion" P1 (sites Top)) (regions "Promotion" P2 (sites Bottom))}) (rules (start {(place "Pawn1" (sites Row 1)) (place "Pawn2" (sites Row 6)) (place "Boat1" {"A1" "H1"}) (place "Horse1" {"B1" "G1"}) (place "Elephant1" {"C1" "F1"}) (place "Ferz_noCross1" "D1") (place "King_noCross1" "E1" 1) (place "Boat2" {"A8" "H8"}) (place "Horse2" {"B8" "G8"}) (place "Elephant2" {"C8" "F8"}) (place "Ferz_noCross2" "E8") (place "King_noCross2" "D8" 1)}) (play (do (forEach Piece) (and (not (no Moves Next)) (not (is Threatened (id "King_noCross" Mover)))))) (end {(if (and (is Threatened (id "King_noCross" Next)) (not (can Move (do (forEach Piece Next) (not (is Threatened (id "King_noCross" Next))))))) (result Mover Win)) (if (= (count Pieces Next) 1) (result Mover Draw)) (if (= (count Pieces Next) (+ 1 (count Sites (sites Occupied Next "Pawn")))) (result Mover Draw))})))

8x8 board. The pieces move as follows, with the number per player: 1 x Shah (king): moves one space orthogonally or diagonally. 1 x Fers (counselor): Any distance orthogonally or diagonally, or like the Asb. 2 x Rukh (rook): Any number of spaces orthogonally. No castling. 2 x Pil (elephant): Any distance diagonally, jumping over the first. Cannot capture another Pil. 2 x Asb (horse): Moves as a chess knight. 8 x Sarbaz (soldier): Moves one space forward orthogonally; one space forward diagonally to capture. No en passant. Promoted to Fers when reaching the eighth rank. An opponent's piece is captured by moving a player's own piece onto a space occupied by the opponent's piece. When a Shah can be captured on the next turn by an opponent's piece, it is in check. The Shah must not be in check at the end of the player's turn. If this is not possible, it is checkmate and the opponent wins. Stalemate results in a win for that player causing it.
        
(game "Shatranj (Iraq)" (players {(player N) (player S)}) (equipment {(board (square 8)) (piece "King_noCross" Each (move Step (to (not (is Friend (who (to )))) (apply (if (is Enemy (who (to ))) (remove (to ))))))) (piece "Ferz_noCross" (or (move Slide (to (is Enemy (who (to ))) (apply (remove (to ))))) (move Leap {{F F R F} {F F L F}} (to (not (is Friend (who (to )))) (apply (if (is Enemy (who (to ))) (remove (to )))))))) (piece "Elephant" (move Slide Diagonal (between (or (is In (between ) (sites Around (from ))) (is Empty (between )))) (to (and (not (= (what (to )) (id "Elephant" Next))) (is Enemy (who (to )))) (apply (not (is In (to ) (sites Around (from )))) (if (is Enemy (who (to ))) (remove (to ))))))) (piece "Knight" Each (move Leap {{F F R F} {F F L F}} (to (not (is Friend (who (to )))) (apply (if (is Enemy (who (to ))) (remove (to ))))))) (piece "Rook" Each (move Slide Orthogonal (to (is Enemy (who (to ))) (apply (remove (to )))))) (piece "Pawn" Each (or {(move Step Forward (to (is Empty (to )))) (move Step (directions {FR FL}) (to (is Enemy (who (to ))) (apply (remove (to )))))} (then (if (is In (last To) (sites Mover "Promotion")) (promote (last To) (piece "Ferz_noCross") Mover))))) (regions "Promotion" P1 (sites Top)) (regions "Promotion" P2 (sites Bottom))}) (rules (start {(place "Pawn1" (sites Row 1)) (place "Pawn2" (sites Row 6)) (place "Rook1" {"A1" "H1"}) (place "Knight1" {"B1" "G1"}) (place "Elephant1" {"C1" "F1"}) (place "Ferz_noCross1" "D1") (place "King_noCross1" "E1") (place "Rook2" {"A8" "H8"}) (place "Knight2" {"B8" "G8"}) (place "Elephant2" {"C8" "F8"}) (place "Ferz_noCross2" "D8") (place "King_noCross2" "E8")}) (play (do (forEach Piece) (not (is Threatened (id "King_noCross" Mover))))) (end {(if (and (is Threatened (id "King_noCross" Next)) (not (can Move (do (forEach Piece Next) (not (is Threatened (id "King_noCross" Next))))))) (result Mover Win)) (if (no Moves Mover) (result Mover Loss))})))

10x10 board. The pieces move as follows, with the number per player: 1 x Shah (king): one space orthogonally or diagonally; 1 x Fers (counselor): one square diagonally; 2 x Rukh (rook): any number of spaces orthogonally; 2x Dabbaba: one space orthogonally or diagonally; 2 x Pil (elephant): two squares diagonally, jumping over the first. Cannot capture another Pil; 2 x Asb (horse): one square orthogonally, and then one square diagonally, jumping over any intervening pieces; 10 x Sarbaz (soldier): one space forward orthogonally or one space forward diagonally to capture. No en passant. Sarbaz begins in the third rank, and is promoted to Fers when reaching the tenth rank, only if the Fers has been captured. Otherwise, the other player captures it. No castling. Stalemate results in win for player causing it. The player who checkmates the king wins.
(game "Shatranj at-Tamma" (players {(player N) (player S)}) (equipment {(piece "Pawn" Each (or {(move Step Forward (to (is Empty (to )))) (move Step (directions {FR FL}) (to (is Enemy (who (to ))) (apply (remove (to )))))} (then (if (is In (last To) (sites Mover "Promotion")) (if (= (where "Queen" Mover) -1) (promote (last To) (piece "Queen") Mover) (remove (last To))))))) (piece "King_noCross" Each (move Step (to (not (is Friend (who (to )))) (apply (if (is Enemy (who (to ))) (remove (to ))))))) (piece "Queen" Each (move Step Diagonal (to (not (is Friend (who (to )))) (apply (remove (to )))))) (piece "Knight" Each (move Leap {{F F R F} {F F L F}} (to (not (is Friend (who (to )))) (apply (if (is Enemy (who (to ))) (remove (to ))))))) (piece "Wazir" Each (move Step (to (not (is Friend (who (to )))) (apply (if (is Enemy (who (to ))) (remove (to ))))))) (piece "Rook" Each (move Slide Orthogonal (to (is Enemy (who (to ))) (apply (remove (to )))))) (piece "Elephant" Each (move Hop Diagonal (between true) (to (or (is Empty (to )) (and (is Enemy (who (to ))) (not (= (what (to )) (id "Elephant" Next))))) (apply (remove (to )))))) (regions "Promotion" P1 (sites Top)) (regions "Promotion" P2 (sites Bottom)) (board (square 10))}) (rules (start {(place "Pawn1" (sites Row 2)) (place "Pawn2" (sites Row 7)) (place "Rook1" (sites {"A1" "J1"})) (place "Rook2" (sites {"A10" "J10"})) (place "Knight1" (sites {"B1" "I1"})) (place "Knight2" (sites {"B10" "I10"})) (place "Elephant1" (sites {"C1" "H1"})) (place "Elephant2" (sites {"C10" "H10"})) (place "Wazir1" (sites {"D1" "G1"})) (place "Wazir2" (sites {"D10" "G10"})) (place "Queen1" "E1") (place "Queen2" "F10") (place "King_noCross1" "F1") (place "King_noCross2" "E10")}) (play (do (forEach Piece) (not (is Threatened (id "King_noCross" Mover))))) (end {(if (and (is Threatened (id "King_noCross" Next)) (not (can Move (do (forEach Piece Next) (not (is Threatened (id "King_noCross" Next))))))) (result Mover Win)) (if (no Moves Next) (result Mover Win))})))

8x8 board. Pieces have special moves, as follows: Rátu (king), moves one square in any direction, but on the first move, if it has not been checked, may move two spaces in any direction or like a Járan; Pateh (minister), moves orthogonally or diagonally any number of spaces; Mántri (x2); move diagonally any distance; Járan (horse) x2, moves orthogonally one space then diagonal one space from there, jumping over any intervening pieces; Práhu (vessel) x2, moves orthogonally any distance; Bídak (pawn) x8: moves one square forward or one square forward diagonally to capture. May move two spaces forward orthogonally if it is that piece's first move. Upon reaching the opposite edge of the board, the Bídak must move backward diagonally three spaces before being promoted to Pateh, unless it is in one of the corner spaces, in which case it is promoted immediately. There is no limit to the number of Patehs on the board. To castle, the Práhu moves next to the Rátu, and then at any turn in the future the Rátu may move to the space on the other side of it, provided the Rátu has not yet been checked and that the space to which it moves remains available. The Rátu cannot be in check at the end of its turn. When this is unavoidable, it is checkmate and the opponent wins. If the Rátu is the only piece belonging to the player on the board, that player wins.
(game "Chatur" (players {(player N) (player S)}) (equipment {(board (square 8)) (piece "King_noCross" (or (move Step (to (not (is Friend (who (to )))) (apply (remove (to )))) (then (if (not (= 1 (state (last To)))) (set State (last To) 1)))) (if (not (= 1 (state (from )))) (or {(move Slide (between (exact 2)) (to (is Enemy (who (to ))) (apply (remove (to ))))) (move Leap {{F F R F} {F F L F}} (to (not (is Friend (who (to )))) (apply (if (is Enemy (who (to ))) (remove (to )))))) (if (is In (from ) (sites {"E1" "D8"})) (or (if (and {(is Empty (ahead (from ) 2 W)) (= (what (ahead (from ) W)) (id "Rook" Mover)) (not (= 1 (state (ahead (from ) W))))}) (move (from ) (to (ahead (from ) 2 W)))) (if (and {(is Empty (ahead (from ) 2 E)) (= (what (ahead (from ) E)) (id "Rook" Mover)) (not (= 1 (state (ahead (from ) E))))}) (move (from ) (to (ahead (from ) 2 E))))))} (then (set State (last To) 1)))))) (piece "Rook" Each (move Slide Orthogonal (to (is Enemy (who (to ))) (apply (remove (to )))) (then (if (and (not (= 1 (state (last To)))) (not (is In (last To) (sites {"D1" "F1" "C8" "E8"})))) (set State (last To) 1))))) (piece "Bishop_noCross" Each (move Slide Diagonal (to (is Enemy (who (to ))) (apply (remove (to )))))) (piece "Knight" Each (move Leap {{F F R F} {F F L F}} (to (not (is Friend (who (to )))) (apply (if (is Enemy (who (to ))) (remove (to ))))))) (piece "Pawn" (if (is In (from ) (sites Mover "Promotion")) (move Slide (directions {BR BL}) (between (exact 3)) (to (is Enemy (who (to ))) (apply (remove (to )))) (then (promote (last To) (piece "Queen") Mover))) (or (move Step Forward (to (is Empty (to )))) (move Step (directions {FR FL}) (to (is Enemy (who (to ))) (apply (remove (to ))))) (then (if (is In (last To) (intersection (sites Corners) (sites Mover "Promotion"))) (promote (last To) (piece "Queen") Mover)))))) (piece "Queen" Each (move Slide (to (is Enemy (who (to ))) (apply (remove (to )))))) (regions "Promotion" P1 (sites Top)) (regions "Promotion" P2 (sites Bottom))}) (rules (start {(place "Pawn1" (sites Row 1)) (place "Pawn2" (sites Row 6)) (place "Rook1" {"A1" "H1"}) (place "Knight1" {"B1" "G1"}) (place "Bishop_noCross1" {"C1" "F1"}) (place "Queen1" "D1") (place "King_noCross1" "E1") (place "Rook2" {"A8" "H8"}) (place "Knight2" {"B8" "G8"}) (place "Bishop_noCross2" {"C8" "F8"}) (place "Queen2" "E8") (place "King_noCross2" "D8")}) (play (do (forEach Piece) (not (is Threatened (id "King_noCross" Mover))) (then (if (is Threatened (id "King_noCross" Next)) (if (not (= 1 (state (where "King_noCross" Next)))) (set State (where "King_noCross" Next) 1)))))) (end {(if (and (is Threatened (id "King_noCross" Next)) (not (can Move (do (forEach Piece Next) (not (is Threatened (id "King_noCross" Next))))))) (result Mover Win)) (if (= (count Pieces Next) 1) (result Mover Loss))})))

Played on an 8x8 board with pieces with specialized moves. The pieces are as follows, and placed on the outer rank in the following order, starting from the left corner and moving in, with the placement mirrored on the right side (the Mautri is placed to the right of the Rajah): Tor (2): can move any number of spaces orthogonally; Kudah (2): moves in any direction, one space orthogonally with one space forward diagonally, jumping over any intervening pieces; Gajah (2): can move any number of spaces diagonally;  Rajah (1): can move one space orthogonally or diagonally; Mautri (1): can move any number of spaces orthogonally or diagonally; Bidah (8), placed in front of the other pieces: can move one space forward, or one space diagonally to capture. The Bidah are placed on the second file.  When first checked, the Rajah may move like a Kudah, or move two spaces in any direction. Players capture pieces by moving onto a space occupied by an opponent's piece. Castling may occur in two separate moves: the Tor moves next to the Rajah, and if the Rajah is checked, it may move to the other side of the Tor. Promotion of Bidahs occur when they reach the opposite edge of the board, but only immediately if they reach the Tor's square. Pawns reaching any other square must make two further moves before they can be promoted; the first must be a lateral orthogonal move, the second may be lateral orthogonal or diagonal. If the Rajah can be captured on the opponent's next turn, it is in check. The Rajah must not be in check at the end of the player's turn. If this is impossible, it is checkmate and the opponent wins.
(game "Main Chator" (players {(player N) (player S)}) (equipment {(board (square 8)) (piece "King_noCross" (or (move Step (to (not (is Friend (who (to )))) (apply (remove (to )))) (then (if (not (= 1 (state (last To)))) (set State (last To) 1)))) (if (is Pending) (or {(move Slide (between (exact 2)) (to (is Enemy (who (to ))) (apply (remove (to ))))) (move Leap {{F F R F} {F F L F}} (to (not (is Friend (who (to )))) (apply (if (is Enemy (who (to ))) (remove (to )))))) (if (is In (from ) (sites {"E8" "D1"})) (or (if (and {(is Empty (ahead (from ) 2 W)) (= (what (ahead (from ) W)) (id "Rook" Mover)) (not (= 1 (state (ahead (from ) W))))}) (move (from ) (to (ahead (from ) 2 W)))) (if (and {(is Empty (ahead (from ) 2 E)) (= (what (ahead (from ) E)) (id "Rook" Mover)) (not (= 1 (state (ahead (from ) E))))}) (move (from ) (to (ahead (from ) 2 E))))))})))) (piece "Rook" Each (move Slide Orthogonal (to (is Enemy (who (to ))) (apply (remove (to )))) (then (if (and (not (= 1 (state (last To)))) (not (is In (last To) (sites {"C1" "E1" "D8" "F8"})))) (set State (last To) 1))))) (piece "Bishop_noCross" Each (move Slide Diagonal (to (is Enemy (who (to ))) (apply (remove (to )))))) (piece "Knight" Each (move Leap {{F F R F} {F F L F}} (to (not (is Friend (who (to )))) (apply (if (is Enemy (who (to ))) (remove (to ))))))) (piece "Pawn" (if (= 1 (state (from ))) (move Step (directions {Rightward Leftward}) (to (is Empty (to ))) (then (set State (last To) 2))) (if (= 2 (state (from ))) (move Step (directions {BR BL Rightward Leftward}) (to (is Empty (to ))) (then (promote (last To) (piece "Queen") Mover))) (or {(move Step Forward (to (is Empty (to )))) (move Step (directions {FR FL}) (to (is Enemy (who (to ))) (apply (remove (to )))))} (then (if (is In (last To) (sites Mover "Promotion")) (if (is In (last To) (sites Corners)) (promote (last To) (piece "Queen") Mover) (set State (last To) 1)))))))) (piece "Queen" Each (move Slide (to (is Enemy (who (to ))) (apply (remove (to )))))) (regions "Promotion" P1 (sites Top)) (regions "Promotion" P2 (sites Bottom))}) (rules (start {(place "Pawn1" (sites Row 1)) (place "Pawn2" (sites Row 6)) (place "Rook1" {"A1" "H1"}) (place "Knight1" {"B1" "G1"}) (place "Bishop_noCross1" {"C1" "F1"}) (place "Queen1" "E1") (place "King_noCross1" "D1") (place "Rook2" {"A8" "H8"}) (place "Knight2" {"B8" "G8"}) (place "Bishop_noCross2" {"C8" "F8"}) (place "Queen2" "D8") (place "King_noCross2" "E8")}) (play (do (forEach Piece) (not (is Threatened (id "King_noCross" Mover))) (then (if (is Threatened (id "King_noCross" Next)) (if (not (= 1 (state (where "King_noCross" Next)))) (and (set State (where "King_noCross" Next) 1) (set Pending))))))) (end (if (and (is Threatened (id "King_noCross" Next)) (not (can Move (do (forEach Piece Next) (not (is Threatened (id "King_noCross" Next))))))) (result Mover Win)))))

8x8 checkered board, with the left corner black for each player. Pieces with specialized moves, as follows: Noyion (x1): moves one space in any direction; Merzé (x1, \"dog\
(game "Shodra" (players {(player N) (player S)}) (equipment {(board (square 8)) (hand Each 5) (piece "King_noCross" Each (move Step (to (not (is Friend (who (to )))) (apply (if (is Enemy (who (to ))) (remove (to ))))))) (piece "Rook" Each (move Slide Orthogonal (to (is Enemy (who (to ))) (apply (remove (to )))))) (piece "Camel" Each (move Hop Diagonal (between true) (to (or (is Empty (to )) (is Enemy (who (to )))) (apply (remove (to )))))) (piece "Knight" Each (move Leap {{F F R F} {F F L F}} (to (not (is Friend (who (to )))) (apply (if (is Enemy (who (to ))) (remove (to ))))))) (piece "Pawn" Each (or {(move Step Forward (to (is Empty (to )))) (move Step (directions {FR FL}) (to (is Enemy (who (to ))) (apply (remove (to ))))) (if (is In (from ) (sites Start (piece (what (from ))))) (move Slide Forward (between (exact 2) (is Empty (between ))) (to (is Empty (to )))))} (then (if (is In (last To) (sites Mover "Promotion")) (promote (last To) (piece "Dog") Mover))))) (piece "Dog" Each (move Step Diagonal (to (not (is Friend (who (to )))) (apply (remove (to )))))) (regions "Promotion" P1 (sites Top)) (regions "Promotion" P2 (sites Bottom))}) (rules (start {(place "Pawn1" (sites Row 1)) (place "Pawn2" (sites Row 6)) (place "Rook1" {"A1" "H1"}) (place "Knight1" {"B1" "G1"}) (place "Camel1" {"C1" "F1"}) (place "Dog1" "D1") (place "King_noCross1" "E1") (place "Rook2" {"A8" "H8"}) (place "Knight2" {"B8" "G8"}) (place "Camel2" {"C8" "F8"}) (place "Dog2" "D8") (place "King_noCross2" "E8")}) (play (do (forEach Piece) (not (is Threatened (id "King_noCross" Mover))))) (end (if (and (is Threatened (id "King_noCross" Next)) (not (can Move (do (forEach Piece Next) (not (is Threatened (id "King_noCross" Next))))))) {(if (no Pieces Next "Pawn") (result Mover Win)) (if (!= (count Pieces Next "Pawn") 0) (result Mover Draw))}))))

12x12 board. 24 pieces per player. Pieces begin on the board in the following arrangement, and with the following movements: Outer row, from left corner: Rukh: moves orthogonally any distance; Ghora: moves orthogonally one space and then diagonally another space, jumping over the first space; Dahja: moves orthogonally any distance; Ratha: moves orthogonally any distance; Fil: moves diagonally any distance; Wazir: moves diagonally or orthogonally any distance; Padshah: moves one space in any direction;  Fil, Ratha, Dahja, Ghora, Rukh. In the second row are twelve Paidal: moves one square forward orthogonally or one diagonally to capture. Players alternate turns moving a piece to a space on the board. If one of the opponent's pieces is on the space to which a player moves their piece, the opponent's piece is captured. If the Padshah can be captured on the opponent's next turn, it is in check. The Padshah cannot remain in check at the end of the player's turn. If this is not possible, it is checkmate and the opponent wins.
        
(game "Shatranj (12x12)" (players 2) (equipment {(board (square 12)) (piece "Pawn" Each (or {(move Step Forward (to (is Empty (to )))) (move Step (directions {FR FL}) (to (is Enemy (who (to ))) (apply (remove (to )))))})) (piece "Rook" Each (move Slide Orthogonal (to (is Enemy (who (to ))) (apply (remove (to )))))) (piece "Commoner" Each (move Slide Orthogonal (to (is Enemy (who (to ))) (apply (remove (to )))))) (piece "Wazir" Each (move Slide Orthogonal (to (is Enemy (who (to ))) (apply (remove (to )))))) (piece "King_noCross" Each (move Step (to (not (is Friend (who (to )))) (apply (if (is Enemy (who (to ))) (remove (to ))))))) (piece "Bishop_noCross" Each (move Slide Diagonal (to (is Enemy (who (to ))) (apply (remove (to )))))) (piece "Knight" Each (move Leap {{F F R F} {F F L F}} (to (not (is Friend (who (to )))) (apply (if (is Enemy (who (to ))) (remove (to ))))))) (piece "Queen" Each (move Slide (to (is Enemy (who (to ))) (apply (remove (to ))))))}) (rules (start {(place "Pawn1" (sites Row 1)) (place "Pawn2" (sites Row 10)) (place "Rook1" {"A1" "L1"}) (place "Knight1" {"B1" "K1"}) (place "Commoner1" {"C1" "J1"}) (place "Wazir1" {"D1" "I1"}) (place "Bishop_noCross1" {"E1" "H1"}) (place "Queen1" "F1") (place "King_noCross1" "G1") (place "Rook2" {"A12" "L12"}) (place "Knight2" {"B12" "K12"}) (place "Commoner2" {"C12" "J12"}) (place "Wazir2" {"D12" "I12"}) (place "Bishop_noCross2" {"E12" "H12"}) (place "Queen2" "G12") (place "King_noCross2" "F12")}) (play (do (forEach Piece) (not (is Threatened (id "King_noCross" Mover))))) (end (if (and (is Threatened (id "King_noCross" Next)) (not (can Move (do (forEach Piece Next) (not (is Threatened (id "King_noCross" Next))))))) (result Mover Win)))))

8x8 board. The pieces move as follows, with the number per player: 1 x Shah (king): moves one space orthogonally or diagonally. 1 x Fers (counselor): One square diagonally or, one the first turn, may jump two squares diagonally or orthogonally, over any pieces on the first square. There can be no capture with this move. 2 x Rukh (rook): Any number of spaces orthogonally. 2 x Pil (elephant): Two squares diagonally, jumping over the first. 2 x Asb (horse): Moves as a chess knight. 8 x Sarbaz (soldier): Moves one space forward orthogonally; one space forward diagonally to capture. No en passant. Promoted to Fers when reaching the eighth rank. On its first move, this promoted piece may also use the jumping move of the Fers. No castling. An opponent's piece is captured by moving a player's own piece onto a space occupied by the opponent's piece. When a Shah can be captured on the next turn by an opponent's piece, it is in check. The Shah must not be in check at the end of the player's turn. If this is not possible, it is checkmate and the opponent wins. Stalemate results in a win for that player causing it.
        
(game "Shatranj (Turkey)" (players {(player N) (player S)}) (equipment {(board (square 8)) (piece "King_noCross" Each (move Step (to (not (is Friend (who (to )))) (apply (if (is Enemy (who (to ))) (remove (to ))))))) (piece "Ferz_noCross" (or (move Step Diagonal (to (not (is Friend (who (to )))) (apply (remove (to ))))) (if (not (= 1 (state (from )))) (move Hop (between true) (to (is Empty (to ))))) (then (if (not (= 1 (state (last To)))) (set State (last To) 1))))) (piece "Elephant" (move Hop Diagonal (between true) (to (not (is Friend (who (to )))) (apply (if (is Enemy (who (to ))) (remove (to ))))))) (piece "Knight" Each (move Leap {{F F R F} {F F L F}} (to (not (is Friend (who (to )))) (apply (if (is Enemy (who (to ))) (remove (to ))))))) (piece "Rook" Each (move Slide Orthogonal (to (is Enemy (who (to ))) (apply (remove (to )))))) (piece "Pawn" Each (or {(move Step Forward (to (is Empty (to )))) (move Step (directions {FR FL}) (to (is Enemy (who (to ))) (apply (remove (to )))))} (then (if (is In (last To) (sites Mover "Promotion")) (promote (last To) (piece "Ferz_noCross") Mover))))) (regions "Promotion" P1 (sites Top)) (regions "Promotion" P2 (sites Bottom))}) (rules (start {(place "Pawn1" (sites Row 1)) (place "Pawn2" (sites Row 6)) (place "Rook1" {"A1" "H1"}) (place "Knight1" {"B1" "G1"}) (place "Elephant1" {"C1" "F1"}) (place "Ferz_noCross1" "D1") (place "King_noCross1" "E1") (place "Rook2" {"A8" "H8"}) (place "Knight2" {"B8" "G8"}) (place "Elephant2" {"C8" "F8"}) (place "Ferz_noCross2" "D8") (place "King_noCross2" "E8")}) (play (do (forEach Piece) (not (is Threatened (id "King_noCross" Mover))))) (end {(if (and (is Threatened (id "King_noCross" Next)) (not (can Move (do (forEach Piece Next) (not (is Threatened (id "King_noCross" Next))))))) (result Mover Win)) (if (no Moves Mover) (result Mover Loss))})))

The goal is to capture the black queen with the white pieces.
(game "Capture the Queen" (players 2) (equipment {(board (square 8)) (piece "Queen" Each (move Slide (to (is Enemy (who (to ))) (apply (remove (to ))))))}) (rules (start {(place "Queen2" "D8") (place "Queen1" {"B1" "C1" "E1" "F1"})}) (play (forEach Piece)) (end {(if (no Pieces P2) (result P2 Loss)) (if (= (count Moves) 100) (result P2 Win))})))

<a href=\"https://boardgamegeek.com/image/1488366/shogun\" target=\"_blank\" class=\"style1\" style=\"color: #0000EE\" />BGG rules</a>
(game "Shogun" (players {(player N) (player S)}) (equipment {(board (square 8)) (piece "Pawn" Each (move (from (from )) (to (intersection (sites To (if (= 1 (value Piece (from ))) (step Orthogonal (to (not (is Friend (who (to )))))) (forEach Site (sites To (slide (from ) Orthogonal (between (range 1 3) (is Empty (between ))) (to (is Enemy (who (to ))) (apply (is Empty (to )))))) (slide (from (site )) Orthogonal (between (range 1 3) (is Empty (between ))) (to (is Enemy (who (to )))))))) (sites Distance Orthogonal (from ) (exact (value Piece (from ))))) (not (is Friend (who (to )))) (apply (set Value (from ) (value Random (range 1 4))))))) (piece "King" Each (move (from (from )) (to (intersection (sites To (if (= 1 (value Piece (from ))) (step Orthogonal (to (not (is Friend (who (to )))))) (forEach Site (sites To (slide (from ) Orthogonal (between (range 1 3) (is Empty (between ))) (to (is Enemy (who (to ))) (apply (is Empty (to )))))) (slide (from (site )) Orthogonal (between (range 1 3) (is Empty (between ))) (to (is Enemy (who (to )))))))) (sites Distance Orthogonal (from ) (exact (value Piece (from ))))) (not (is Friend (who (to )))) (apply (set Value (from ) (value Random (range 1 2)))))))}) (rules (start {(place "Pawn1" "A1" (value Random (range 1 4))) (place "Pawn1" "B1" (value Random (range 1 4))) (place "Pawn1" "C1" (value Random (range 1 4))) (place "Pawn1" "D1" (value Random (range 1 4))) (place "Pawn1" "F1" (value Random (range 1 4))) (place "Pawn1" "G1" (value Random (range 1 4))) (place "Pawn1" "H1" (value Random (range 1 4))) (place "King1" "E1" (value Random (range 1 2))) (place "Pawn2" "A8" (value Random (range 1 4))) (place "Pawn2" "B8" (value Random (range 1 4))) (place "Pawn2" "C8" (value Random (range 1 4))) (place "Pawn2" "E8" (value Random (range 1 4))) (place "Pawn2" "F8" (value Random (range 1 4))) (place "Pawn2" "G8" (value Random (range 1 4))) (place "Pawn2" "H8" (value Random (range 1 4))) (place "King2" "D8" (value Random (range 1 2)))}) (play (forEach Piece)) (end (if (or (no Pieces Next "King") (<= (count Pieces Next) 2)) (result Mover Win)))))

The objective of Cannon is to capture or shoot the opponent's Town.
            
            The player also wins the game if his opponent doesn't have legal moves.
            
            Players move alternately. On their first turns both players put a special piece called \"Town\" anywhere on the rows closest to them excluding corners.
            
            Once placed, Towns don't move during the entire game.
            
            A soldier may move one step forward or diagonally forward to an adjacent empty point.
            A soldier may capture an enemy piece (a soldier or the Town) standing on an adjacent point by moving one step sideways, forward or diagonally forward.
            A soldier can retreat two points backwards or diagonally backwards if it is adjacent to an enemy soldier and if the target and intermediate spots are empty.
            Cannon is a (orthogonal or diagonal) line of 3 adjacent friendly soldiers. A cannon may slide along its line in either direction if the target spot is empty.
        A cannon may make a capture without sliding, i.e. to \"shoot\" an enemy piece (either a soldier or the Town) standing on the same line as the shooting cannon if there is one or two empty points between the cannon's front soldier and the enemy piece.
(game "Cannon" (players {(player N) (player S)}) (equipment {(board (square 10) Vertex) (piece "Pawn" Each (or {(move Step (directions Forwards All) (to (is Empty (to )))) (move Step (directions {Forwards Rightward Leftward} All) (to (is Enemy (who (to ))) (apply (remove (to ))))) (if (not (all Sites (sites Around (from ) All) (not (is Enemy (who (site )))))) (move Hop (directions Backwards All) (between (is Empty (between ))) (to (is Empty (to ))))) (move Hop All (between (exact 2) (= (what (between )) (id "Pawn" Mover))) (to (is Empty (to )))) (forEach Direction All (if (and {(and (= (what (to )) (id "Pawn" Mover)) (= (what (ahead (from ) 2 (directions Vertex (from ) (to )))) (id "Pawn" Mover))) (is Empty (ahead (from ) 3 (directions Vertex (from ) (to ))))}) (if (is Enemy (who (ahead (from ) 4 (directions Vertex (from ) (to ))))) (move Remove (ahead (from ) 4 (directions Vertex (from ) (to )))) (if (and (is Empty (ahead (from ) 4 (directions Vertex (from ) (to )))) (is Enemy (who (ahead (from ) 5 (directions Vertex (from ) (to )))))) (move Remove (ahead (from ) 5 (directions Vertex (from ) (to ))))))))})) (piece "Town" Each) (hand Each) (regions "Home" P1 (sites Bottom)) (regions "Home" P2 (sites Top))}) (rules (start {(place "Town" "Hand") (place "Pawn1" (forEach (difference (expand (sites Row 2)) (sites Right)) (is Even (column (site ))))) (place "Pawn2" (forEach (difference (expand (sites Row 7)) (sites Left)) (is Odd (column (site )))))}) {(phase "Placing" (play (move (from (handSite Mover)) (to (difference (sites Mover "Home") (sites Corners))))) (nextPhase Mover "Moving")) (phase "Moving" (play (forEach Piece)) (end (if (or (= (where "Town" Next) -1) (no Moves Next)) (result Mover Win))))}))

The two players take turns moving stacks of their own color (including singletons - stacks of height one), one stack per turn.  Players will always have a move available and must make one.
            
            OBJECT OF THE GAME: Kill the enemy queen, or deprive your opponent of moves. 
            
            The pie rule is used in Monkey Queen. 
            
            Each player will always have exactly one queen monkey on the board which is a stack of two or more checkers all of the player's own color.  Additionally, each player may have one or more baby monkeys on the board which are singletons of his own color.
            
            CAPTURING QUEEN MOVES - A monkey queen captures exactly like a Chess queen.  Slide the entire stack in any direction (horizontally, vertically or diagonally) along a straight sequence of unoccupied squares terminated by an enemy occupied square, and capture the enemy queen or baby by replacement.
            
            NOTE: A queen may not give birth to its own baby and kill an enemy baby in the same move.
            
            NOTE: A queen of height two may not make a non-capturing move.
            
            NON-CAPTURING QUEEN MOVES - When not capturing, a queen moves any distance in any one direction, exactly like a Chess queen, except it leaves its bottom checker behind on the originating square, reducing the stack height by one.  The queen monkey has thus given birth to a baby monkey.
            
            CAPTURING BABY MOVES - A monkey baby, like a monkey queen, captures exactly like a Chess queen.  Slide the baby (singleton) in any direction along a straight sequence of unoccupied squares terminated by an enemy occupied square, and capture the enemy queen or baby by replacement.
            
            NON-CAPTURING BABY MOVES - When not capturing, a baby must move toward the enemy queen in the following sense:  The straight line distance between your baby and the enemy queen must be shortened by your move.
            
        NOTE: There's no requirement to make a kill in Monkey Queen. 
(game "Monkey Queen" (players 2) (equipment {(board (square 12)) (piece "Marker" (or {(move Slide (to (is Enemy (who (to ))) (apply (is Enemy (who (to ))) (remove (to ) (size Stack (to ))))) true (then (if (< 1 (size Stack (last To))) (set Value Mover (last To))))) (if (< 2 (size Stack (from ))) (move Slide true (then (and (fromTo (from (last To) 0) (to (last From))) (set Value Mover (last To)))))) (if (= 1 (size Stack (from ))) (move Slide (between (and (< (count Steps (to ) (value Player Next)) (count Steps (from ) (value Player Next))) (is Empty (between ))))))}))}) (rules (meta (swap )) (start {(place Stack "Marker1" 6 20) (place Stack "Marker2" 137 20)}) (play (forEach Piece true)) (end (if (or (all Sites (sites Occupied Next) (= 1 (size Stack (site )))) (no Moves Next)) (result Mover Win)))))

GOAL
            Get your king into the enemy home square, or kill the enemy king.
            
            MOVES
            Players make one move per turn, starting with Red. There are three possible
            types of moves, explained below. Players will always have a move available,
            and must make one. Passing is not allowed.
            
            NON-CAPTURING MOVES
            Kings and courtesans can move to an adjacent, unoccupied square in any of
            the three forward directions.
            
            CAPTURING MOVES
            Kings and courtesans can move to an adjacent, enemy occupied square in any
            of eight directions, capturing the enemy king or courtesan by replacement.
            
            EXCHANGE MOVE
            You can transfer the top checker of your king onto an adjacent, friendly
            courtesan in any of the three forward directions, thus exchanging king and
            courtesan.
            
            In the Ludii implementation, the king is controlled like this: 
            To make an exchange move you must drag or click the top piece.
        To make a step/capture move, you must drag or click the bottom piece.
(game "King And Courtesan" (players {(player N) (player S)}) (equipment {(board (rotate 45.0 (square 6))) (piece "Disc" Each (or {(move Step Forwards (to (is Empty (to ))) true) (move Step (to (is Enemy (who (to ))) (apply (and (if (= 2 (size Stack (to ))) (set Var "NextLoss" 1)) (remove (to ) (size Stack (to )))))) true) (move Step (from (= 2 (size Stack (from )))) Forwards (to (is Mover (who (to )))))}))}) (rules (start {(place "Disc1" (expand (sites Bottom) (- 6 2) Orthogonal)) (place "Disc2" (expand (sites Top) (- 6 2) Orthogonal)) (place Stack "Disc1" (sites Bottom)) (place Stack "Disc2" (sites Top))}) (play (forEach Piece true)) (end {(if (= 1 (var "NextLoss")) (result Next Loss)) (if (or (and (= (id P1) (who (- (* 6 6) 1))) (= 2 (size Stack (- (* 6 6) 1)))) (and (= (id P2) (who 0)) (= 2 (size Stack 0)))) (result Mover Win))})))

The goal is to capture the enemy Commander, or reduce the opponent army to a single Commander. Each piece has an indicator which determines at which directions the piece can move. This can be altered by rotating the piece 45 degrees= to the left or right. Rotating the piece costs a move. Each player has 3 Shields, 5 Probes, 6 Lances, and one Commander. The Shield moves one step and has only one movement freedom at any time. The Probe slides two steps and has two freedoms. The Lance slides three steps and has three freedoms. The Commander has four, but can only move one step. A player must either make a direction move or a motion move. The three Shields are the only pieces that can perform a direction move immediately after a motion move. Capture occurs by displacement.
(game "Ploy" (players 2) (equipment {(board (square 9) Vertex) (piece "Commander" Each (or (move Step (directions {FR FL BL BR} All) (to (not (is Friend (who (to )))) (apply (remove (to ))))) (move Set Rotation))) (piece "Shield" Each (or (move Step (directions Forward All) (to (not (is Friend (who (to )))) (apply (remove (to )))) (then (moveAgain ))) (move Set Rotation))) (piece "LanceW" Each (or (move Slide (directions Forwards All) (between (max 3)) (to (is Enemy (who (to ))) (apply (remove (to ))))) (move Set Rotation))) (piece "LanceY" Each (or (move Slide (directions {FR FL Backward} All) (between (max 3)) (to (is Enemy (who (to ))) (apply (remove (to ))))) (move Set Rotation))) (piece "LanceT" Each (or (move Slide (directions {Forward Rightward Leftward} All) (between (max 3)) (to (is Enemy (who (to ))) (apply (remove (to ))))) (move Set Rotation))) (piece "ProbeI" Each (or (move Slide (directions {Forward Backward} All) (between (max 2)) (to (is Enemy (who (to ))) (apply (remove (to ))))) (move Set Rotation))) (piece "ProbeMinV" Each (or (move Slide (directions {Forward FR} All) (between (max 2)) (to (is Enemy (who (to ))) (apply (remove (to ))))) (move Set Rotation))) (piece "ProbeBigV" Each (or (move Slide (directions {FR FL} All) (between (max 2)) (to (is Enemy (who (to ))) (apply (remove (to ))))) (move Set Rotation)))}) (rules (start {(place "Commander1" "E1" 0) (place "Shield1" {"D3" "E3" "F3"} 0) (place "ProbeI1" "E2" 0) (place "ProbeBigV1" {"D2" "F2"} 0) (place "ProbeMinV1" "C2" 0) (place "ProbeMinV1" "G2" 7) (place "LanceW1" {"D1" "F1"} 0) (place "LanceY1" {"C1" "G1"} 0) (place "LanceT1" {"B1" "H1"} 0) (place "Commander2" "E9" 4) (place "Shield2" {"D7" "E7" "F7"} 4) (place "ProbeI2" "E8" 4) (place "ProbeBigV2" {"D8" "F8"} 4) (place "ProbeMinV2" "C8" 3) (place "ProbeMinV2" "G8" 4) (place "LanceW2" {"D9" "F9"} 4) (place "LanceY2" {"C9" "G9"} 4) (place "LanceT2" {"B9" "H9"} 4)}) (play (if (is Prev Mover) (or (move Set Rotation (to (last To))) (move Pass)) (forEach Piece))) (end (if (or (= (where "Commander" Next) -1) (= (count Pieces Next) 1)) (result Mover Win)))))

Each player starts the game with four pieces:
            
            - a Lion (king) in the center of the home row
            - a Giraffe (rook) to the right of the king
            - an Elephant (bishop) to the left of the king
            - a Chick (pawn) in front of the king
            
            Each piece moves as in standard shogi, but is limited to moving one square per turn. If the Chick advances to reach the final rank, it promotes to a Hen, which can move one square any way except diagonally backwards (like the gold general in shogi).
            
            As in shogi, if a Hen is captured, it may only be dropped back into play as a Chick. However, standard restrictions on where one may drop a Chick, such as not being allowed to give immediate checkmate, have two Chicks on a file, or drop the Chick on the final rank, do not apply. A chick dropped on the final rank, however, does not promote (and may make no further moves until it is recaptured).
            
        If the players play the same position three turns in a row, the game is a draw.
(game "Let's Catch the Lion" (players {(player N) (player S)}) (equipment {(board (rectangle 4 3)) (tile "Giraffe" Each (move Step Orthogonal (to (not (is Friend (who (to )))) (apply (if (is Enemy (who (to ))) (if (= (what (to )) (id "Lion" Next)) (remove (to )) (add (piece (mapEntry "Captured" (what (to )))) (to (mapEntry "Where" (what (to ))))))))))) (tile "Elephant" Each (move Step Diagonal (to (not (is Friend (who (to )))) (apply (if (is Enemy (who (to ))) (if (= (what (to )) (id "Lion" Next)) (remove (to )) (add (piece (mapEntry "Captured" (what (to )))) (to (mapEntry "Where" (what (to ))))))))))) (tile "Chick" Each (move Step Forward (to (not (is Friend (who (to )))) (apply (if (is Enemy (who (to ))) (if (= (what (to )) (id "Lion" Next)) (remove (to )) (add (piece (mapEntry "Captured" (what (to )))) (to (mapEntry "Where" (what (to ))))))))) (then (if (is In (last To) (sites Mover "LastRank")) (move Promote (last To) (piece (id "Chicken" Mover))))))) (tile "Chicken" Each (move Step (directions {Forward Backward Rightward Leftward FL FR}) (to (not (is Friend (who (to )))) (apply (if (is Enemy (who (to ))) (if (= (what (to )) (id "Lion" Next)) (remove (to )) (add (piece (mapEntry "Captured" (what (to )))) (to (mapEntry "Where" (what (to ))))))))))) (tile "Lion" Each (move Step Adjacent (to (not (is Friend (who (to )))) (apply (if (is Enemy (who (to ))) (if (= (what (to )) (id "Lion" Next)) (remove (to )) (add (piece (mapEntry "Captured" (what (to )))) (to (mapEntry "Where" (what (to ))))))))))) (map "Captured" {(pair (id "Giraffe" P1) (id "Giraffe" P2)) (pair (id "Giraffe" P2) (id "Giraffe" P1)) (pair (id "Elephant" P1) (id "Elephant" P2)) (pair (id "Elephant" P2) (id "Elephant" P1)) (pair (id "Chick" P1) (id "Chick" P2)) (pair (id "Chick" P2) (id "Chick" P1)) (pair (id "Chicken" P1) (id "Chick" P2)) (pair (id "Chicken" P2) (id "Chick" P1))}) (map "Where" {(pair (id "Giraffe" P1) (handSite P2)) (pair (id "Giraffe" P2) (handSite P1)) (pair (id "Elephant" P1) (handSite P2 1)) (pair (id "Elephant" P2) (handSite P1 1)) (pair (id "Chick" P1) (handSite P2 2)) (pair (id "Chick" P2) (handSite P1 2)) (pair (id "Chicken" P1) (handSite P2 2)) (pair (id "Chicken" P2) (handSite P1 2))}) (regions "LastRank" P1 (sites Top)) (regions "LastRank" P2 (sites Bottom)) (hand Each 3)}) (rules (start {(place "Giraffe1" "C1") (place "Giraffe2" "A4") (place "Chick1" "B2") (place "Chick2" "B3") (place "Lion1" "B1") (place "Lion2" "B4") (place "Elephant1" "A1") (place "Elephant2" "C4")}) (play (or (move (from (sites Occupied Mover "Hand" {"Giraffe" "Chick" "Elephant"})) (to (sites Empty))) (forEach Piece))) (end {(if (is Cycle) (result Mover Draw)) (if (or (= (where "Lion" Next) -1) (is In (where "Lion" Mover) (sites Mover "LastRank"))) (result Mover Win))})))

Each turn you must move one of your stacks, in a straight line orthogonally or diagonally, a distance exactly equal to the size of that stack.
            If it lands on an empty space, the stack grows by 1.
            If it lands on an enemy, the enemy is removed and your stack shrinks down to size 1.
            It is not legal to land on a friendly stack.
            Jumping over stacks is allowed.
            Stacks may also jump off the board, removing themselves from the game. 
            Passing is not allowed.
            
            Definitions for crown and king: In this implementation, the king-stack will have a red stroke color. This red ring is the crown. Which stack has the crown is determined like this: After your move, if there is, among your stacks, a unique stack of the biggest size, the crown will be on that stack. There is no other way the crown can change heads. The piece with a crown on it is the king.
            
            Goal: If the enemy king is removed from the game, you win.
            
        Note: In this implementation, jumping off the board is only possible if the stack can reach exactly 1 row or column beyond the perimeter. But it seems to always be the case that it is possible to jump off the board when a stack is big enough. Please let Michael know if you encounter a scenario where a piece is stuck. This should not be allowed according to the rules of the game.
(game "Lielow" (players 2) (equipment {(board (square 10)) (piece "Disc" Each)}) (rules (start {(place "Disc1" (difference (difference (expand (sites Bottom) 2) (expand (sites Bottom) 1)) (sites Outer))) (place "Disc2" (difference (difference (expand (sites Top) 2) (expand (sites Top) 1)) (sites Outer)))}) (play (forEach Piece (or (move (from ) (to (sites Around (from ) Empty (size Stack (from ))) (apply (if (and {(= 1 (state (from ))) (is In (to ) (sites Outer))}) (set Var "MoverHasLost" 1)))) (size Stack (from )) true (then (add (to (last To) 0) true))) (move (from ) (to (sites Around (from ) Enemy (size Stack (from ))) (apply (and {(if (= 1 (state (to ))) (set Var "MoverHasWon" 1)) (set Var (state (from ))) (remove (to ) (size Stack (to )))}))) (size Stack (from )) true (then (if (< 1 (size Stack (last To))) (and (remove (last To) (- (size Stack (last To)) 1)) (set State (last To) (var ))))))) Mover true (then (do (remove (sites Outer) (size Stack (last To))) (if (= 1 (count Sites (forEach (sites Occupied Mover) (= (size Stack (site )) (max (results (sites Occupied Mover) 0 (size Stack (from )))))))) (forEach Piece (if (= (size Stack (from )) (max (results (sites Occupied Mover) 0 (size Stack (from ))))) (set State (from ) 1) (set State (from ) 0)) Mover true)))))) (end {(if (= 1 (var "MoverHasLost")) (result Mover Loss)) (if (= 1 (var "MoverHasWon")) (result Mover Win))})))

Rectangular board, divided into three sections lengthwise. Ten lines divide the outer two sections widthwide. Twelve pieces per player, which begin on the outer intersections closest to the player. Four stick dice, with front and back sides distinguished one from the other. Throws are as follows: Four backs up = kiust. Three backs up = 6; two backs up = 3; one back up = 2; four fronts up = four throws of 6.  A throw of kiust is required to enter the opponent's inner row. The pieces of the left hand player move from left to right and then right to left in the next row, then left to right in the following row, then proceeding to circulate in the central two rows in a clockwise direction. The right hand player's pieces move from right to left in their home row, then left to  right in  the next row, then right to left in the third row, circulating in an anti-clockwise direction. Pieces landing on an opponent's piece with a throw of 2 in the central rows capture the opponent's piece. A player may only pass an opponent's piece without capture with a throw of 3. The player who captures all of the opponent's pieces wins.
(game "Kiust Oyun" (players 2) (equipment {(board (merge {(scale 2.0 1.0 (rectangle 12 2)) (shift 2.0 0.0 (scale 4.0 1.0 (rectangle 12 2))) (shift 6.0 0.0 (scale 2.0 1.0 (rectangle 12 2)))}) {(track "Track1" "22,S,E1,N,E1,S" P1 true) (track "Track2" "47,S,W1,N,W1,S" P2 true) (track "LoopTrack1" "1,N,E1,S" true P1) (track "LoopTrack2" "24,N,W1,S" true P2)} Vertex) (dice 2 0 4) (piece "Marker" Each (if (is In (from ) (difference (sites Board) (union (sites Left) (sites Right)))) (move (from (from )) (to (trackSite Move "LoopTrack" (mapEntry "Throw" (count Pips))) (and {(if (is Enemy (who (to ))) (= 2 (mapEntry "Throw" (count Pips))) (is Empty (to ))) (if (is In (to ) (sites Next "Home")) (= 1 (var "Kiust")) true) (if (or (and (= 2 (mapEntry "Throw" (count Pips))) (is Enemy (who (to )))) (= 3 (mapEntry "Throw" (count Pips)))) true (all Sites (sites Track (trackSite Move (from ) "LoopTrack" 1) (trackSite Move (from ) "LoopTrack" (- (mapEntry "Throw" (count Pips)) 1))) (not (is Enemy (who (site ))))))}) (apply (if (is Enemy (who (to ))) (remove (to )))))) (move (from (from )) (to (trackSite Move "Track" (mapEntry "Throw" (count Pips))) (and {(if (is In (to ) (difference (sites Board) (union (sites Left) (sites Right)))) (if (is Enemy (who (to ))) (= 2 (mapEntry "Throw" (count Pips))) (is Empty (to ))) (is Empty (to ))) (if (is In (to ) (sites Next "Home")) (= 1 (var "Kiust")) true) (if (or (and (= 2 (mapEntry "Throw" (count Pips))) (is Enemy (who (to )))) (= 3 (mapEntry "Throw" (count Pips)))) true (all Sites (sites Track (trackSite Move (from ) "Track" 1) (trackSite Move (from ) "Track" (- (mapEntry "Throw" (count Pips)) 1))) (not (is Enemy (who (site ))))))}) (apply (if (is Enemy (who (to ))) (remove (to )))))) (then (and (if (= (count Pips) 4) (and (if (!= 1 (value Player Mover)) (moveAgain )) (if (<= (value Player Mover) 0) (set Value Mover 3) (set Value Mover (- (value Player Mover) 1))))) (set Var "Kiust" 0))))) (map "Throw" {(pair 0 0) (pair 3 6) (pair 2 3) (pair 1 2) (pair 4 6)}) (regions "Home" P1 (expand (sites Left))) (regions "Home" P2 (expand (sites Right)))}) (rules (start {(place "Marker1" (sites Left)) (place "Marker2" (sites Right))}) (play (do (if (or (= (var "Kiust") 1) (not (is Prev Mover))) (roll )) (if (= 0 (mapEntry "Throw" (count Pips))) (move Pass (then (and (moveAgain ) (set Var "Kiust" 1)))) (forEach Piece)))) (end (if (no Pieces Next) (result Next Loss)))))

4x13 board. Thirteen pieces per player, arranged on the outer rows of the board. Played with six sticks which function as dice. Pieces move according to the throws of the dice. Play progresses from left to right in the player's home row, and then from right to left in the second row, left to right in the third row, and then right to left in the opponent's row. A throw of 1 is required for each piece to being moving it. When a player's piece lands on a space occupied by a piece belonging to the opponent, the opponent's piece is captured. The player who captures all of the opponent's pieces wins. 
(game "Sig (Tozeur)" (players 2) (equipment {(board (rectangle 4 13) {(track "Track1" "0,E,N1,W,N1,E,N1,W" P1 true) (track "Track2" "51,W,S1,E,S1,W,S1,E" P2 true)} Vertex) (piece "Stick" Each (if (or (= (state (from )) 0) (and (= (count Pips) 1) (= (state (from )) 1))) (if (!= (trackSite Move (count Pips)) -1) (if (or (is In (trackSite Move (count Pips)) (sites Empty)) (is Enemy (who (trackSite Move (count Pips))))) (move (from ) (to (trackSite Move (count Pips)) (apply (is Enemy (who (to ))) (remove (to )))))) (then (if (= (state (last To)) 1) (set State (last To) 0)))))) (regions "AllSites" (sites Board)) (dice 2 0 6) (regions P1 (sites Bottom)) (regions P2 (sites Top))}) (rules (start {(place "Stick1" (sites Bottom) 1) (place "Stick2" (sites Top) 1)}) (play (do (roll ) (forEach Piece))) (end {(if (no Pieces Next) (result Next Loss)) (if (and (= (count Sites (difference (sites Occupied P1) (sites P2))) 0) (= (count Sites (difference (sites Occupied P2) (sites P1))) 0)) (result Mover Draw))})))

3x12 board, with the outer rows of holes slightly curved to form the appearance of an arc. Twelve pieces per player, which start on the board in each of the holes in the outer row belonging to a player. Two four-sided dice, marked 2-4 and \"X\" for 1. The throw of double 1s gives the player an extra throw. Players move their pieces according to the throws of the dice, moving one piece the value of one of the dice and another the value of the other die, or one piece the value of both dice. A piece cannot be moved until it is \"activated\" with a throw of 1. When a piece is activated, it is rotated 90 degrees and moved one space. One player moves from left to right in their row into the central row, moving right to left down it and when reaching the end of the central row, proceed into the opponent's row, and move from left to right in it, returning to the central row upon reaching the end. The opponent follows the same track, except moving from right to left in their row. Opponent's pieces are taken when a player's piece lands in the same spot as the opponent's piece. When in the opponent's row, the player may capture as many pieces of the opponent as hypothetically allowed by the dice. Players may not move one of their pieces past one of their other pieces. The player who captures all of the opponent's pieces wins.
            
        
(game "Daldosa" (players 2) (equipment {(board (add (merge {(rectangle 1 8) (shift -4.0 1.5 (rectangle 1 12)) (shift 0.0 3.0 (rectangle 1 8))}) {{-1.0 0.1} {-2.0 0.3} {-2.9 0.5} {-3.6 0.8} {-1.0 2.9} {-2.0 2.7} {-2.9 2.5} {-3.6 2.2}}) {(track "Track1" {31 30 29 28 0 1 2 3 4 5 6 7 19 18 17 16 15 14 13 12 11 10 9 8 35 34 33 32 20 21 22 23 24 25 26 27 19 18 17 16 15 14 13 12 11 10 9 8} true P1) (track "Track2" {35 34 33 32 20 21 22 23 24 25 26 27 19 18 17 16 15 14 13 12 11 10 9 8 31 30 29 28 0 1 2 3 4 5 6 7 19 18 17 16 15 14 13 12 11 10 9 8} true P2)} Vertex) (regions "AllSites" (sites Board)) (dice 4 2) (piece "Minus" P1 (if (or (= (state (from )) 1) (and (= (state (from )) 0) (= 1 (pips )))) (move Slide "Track1" (between (exact (pips )) (is Empty (between ))) (to (is Enemy (who (to ))) (apply (not (is Friend (who (to )))) (remove (to )))) (then (if (= (state (last To)) 0) (set State (last To) 1)))))) (piece "Minus" P2 (if (or (= (state (from )) 1) (and (= (state (from )) 0) (= 1 (pips )))) (move Slide "Track2" (between (exact (pips )) (is Empty (between ))) (to (is Enemy (who (to ))) (apply (not (is Friend (who (to )))) (remove (to )))) (then (if (= (state (last To)) 0) (set State (last To) 1))))))}) (rules (start {(place "Minus1" (sites {0 1 2 3 4 5 6 7 28 29 30 31})) (place "Minus2" (sites {20 21 22 23 24 25 26 27 32 33 34 35}))}) (play (do (if (not (is Prev Mover)) (roll )) (forEach Die (and (= (face 36) 1) (= (face 37) 1)) (forEach Piece (then (if (not (all DiceUsed)) (if (can Move (forEach Die (forEach Piece))) (moveAgain )))))))) (end (if (no Pieces Next) (result Next Loss)))))

Each turn the current player must move, capture and drop.
            
            The current player must move one of their pieces in a straight line in any of the six hexagonal directions to land on a vacant foreign cell; any intervening cells must also be empty. The opponent who owns the landing cell becomes the candidate and the other opponent becomes the bunny.
            All opponents' pieces immediately adjacent to the landing cell are captured and removed from the board. The current player must make the move that captures the most pieces each turn, but may choose amongst equals. This is called the max capture rule.
            The moving player must then drop a bunny piece on any empty cell, unless a player has just been eliminated.
            The candidate becomes the next player to move.
            
        Goal: Play stops the moment any player is eliminated. The game is won by the player with the most pieces left, else is a tie between the two remaining players if they are both left with the same number of pieces.
(game "Triad" (players 3) (equipment {(board (hex 5)) (piece "Marker" Each (move Slide Orthogonal (to (apply (!= (mover ) (mapEntry "PlayerPhase" (phase (to )))))) (then (and {(forEach Site (sites Around (last To) Orthogonal) (if (is Enemy (what (site ))) (remove (site )))) (set Var (mapEntry "PlayerPhase" (phase (last To)))) (moveAgain )})))) (map "PlayerPhase" {(pair 1 1) (pair 0 2) (pair 2 3)})}) (rules (start {(place "Marker1" (expand (coord "A5") 2)) (place "Marker2" (expand (coord "I9") 2)) (place "Marker3" (expand (coord "E1") 2))}) (play (if (is Prev Mover) (move Add (piece (if (= (mover ) 1) (if (= (var ) 2) 3 2) (if (= (mover ) 2) (if (= (var ) 1) 3 1) (if (= (var ) 1) 2 1)))) (to (sites Empty)) (then (set NextPlayer (player (var ))))) (max Captures (forEach Piece)))) (end (if (or {(no Pieces P1) (no Pieces P2) (no Pieces P3)}) (byScore {(score P1 (count Pieces P1)) (score P2 (count Pieces P2)) (score P3 (count Pieces P3))})))))

Played on a 6x6 board with corner loops. Each player has 12 pieces. Play is made on the intersections of the lines. pieces are captured by moving via the outer loops and occupying a space held by another player. The goal is to capture all of the opponent's pieces. If no further captures are possible, the player with the most remaining pieces wins.
(game "Surakarta" (players 2) (equipment {(surakartaBoard (square 6)) (piece "Marker" Each (or {(move Step All (to (is Empty (to )))) (move Slide "AllTracks" (between (or (= (between ) (from )) (is Empty (between )))) (to (is Enemy (who (to ))) (apply false (remove (to )))) (then (set Counter)))}))}) (rules (start {(place "Marker1" (expand (sites Bottom))) (place "Marker2" (expand (sites Top)))}) (play (if (is Proposed "End") (or (move Vote "End") (move Vote "No" (then (set Counter)))) (or (if (>= (counter ) 101) (move Propose "End" (then (vote "End")))) (forEach Piece)))) (end {(if (is Decided "End") (byScore {(score P1 (count Pieces P1)) (score P2 (count Pieces P2))})) (if (no Pieces Next) (result Next Loss))})))

Players take turns moving a piece of their colour as follows:
            
            1. A piece on a vertex can move either:
            
            1a. To an adjacent empty vertex. The edge it travels over may be empty or occupied (if occupied by an enemy piece, that piece is captured and removed).
            
            1b. To an empty cell that vertex is part of.
            
            2. A piece on an edge can move either:
            
            2a. To a connected empty edge. The vertex it travels over may be empty or occupied (if occupied by an enemy piece, that piece is captured and removed).
            
            2b. To an empty cell that edge is part of.
            
            3. A piece in a cell can move either:
            
            3a. To a neighbouring empty cell which may be connected by an edge or a vertex. The connecting edge or vertex that the piece travels over may be empty or occupied (if occupied by an enemy piece, that piece is captured and removed).
            
            3b. To step over one of its empty edges into an adjacent cell containing an enemy piece (which is captured), then step out over a different empty edge to another empty cell.
            
            3c. To an empty vertex or edge belonging to that cell.
            
            Aim: A player wins if their opponent is reduced to a single piece. An empty edge has no piece on its midpoint. An empty cell has no piece on its centroid.
            
            Three Player Version:
        In the three player version, any player reduced to a single piece is removed from the game (along with their piece). Last remaining player wins.
(game "Triple Tangle" (players 2) (equipment {(board (tiling T3464 1) Vertex) (piece "Disc" Each)}) (rules (start {(place "Disc1" (sites {4 5 0 1})) (place "Disc1" Cell 1) (place "Disc1" Edge (sites {0 3 4 9})) (place "Disc2" (sites {16 17 12 13})) (place "Disc2" Cell 11) (place "Disc2" Edge (sites {25 29 26 20}))}) (play (if (is Prev Mover) (move (from Cell (last To)) (to Cell (intersection (sites Empty Cell) (sites Incident Cell Cell (from ))) (and (= 1 (count Sites (intersection {(sites Empty Edge) (sites Incident Edge Cell (from )) (sites Incident Edge Cell (to ))}))) (!= (last From) (to ))))) (or {(forEach Piece Vertex (or (move Step (from Vertex) (to (is Empty Vertex (to ))) (then (forEach Site (intersection (sites Incident Edge Vertex (last From)) (sites Incident Edge Vertex (last To))) (if (is Enemy (who Edge (site ))) (remove Edge (site )))))) (move (from Vertex) (to Cell (intersection (sites Empty Cell) (sites Incident Cell Vertex (from ))))))) (forEach Piece Edge (or (move Step (from Edge) (to (is Empty Edge (to ))) (then (forEach Site (intersection (sites Incident Vertex Edge (last From)) (sites Incident Vertex Edge (last To))) (if (is Enemy (who Vertex (site ))) (remove Vertex (site )))))) (move (from Edge) (to Cell (intersection (sites Empty Cell) (sites Incident Cell Edge (from ))))))) (forEach Piece Cell (or {(move (from Cell) (to Cell (intersection (sites Empty Cell) (sites Incident Cell Cell (from )))) (then (forEach Site (intersection (sites Incident Edge Cell (last From)) (sites Incident Edge Cell (last To))) (if (is Enemy (who Edge (site ))) (remove Edge (site )))))) (move (from Cell) (to Cell (sites Incident Cell Cell (from )) (and (is Enemy (who Cell (to ))) (= 1 (count Sites (intersection {(sites Empty Edge) (sites Incident Edge Cell (from )) (sites Incident Edge Cell (to ))})))) (apply (remove Cell (to )))) (then (moveAgain ))) (move (from Cell) (to Cell (forEach (sites Empty Cell) (= 1 (count Sites (intersection (sites Incident Vertex Cell (from )) (sites Incident Vertex Cell (site ))))))) (then (forEach Site (intersection (sites Incident Vertex Cell (last From)) (sites Incident Vertex Cell (last To))) (if (is Enemy (who Vertex (site ))) (remove Vertex (site )))))) (move (from Cell) (to Edge (intersection (sites Empty Edge) (sites Incident Edge Cell (from ))))) (move (from Cell) (to Vertex (intersection (sites Empty Vertex) (sites Incident Vertex Cell (from )))))}))}))) (end (if (>= 1 (+ {(count Pieces Vertex Next) (count Pieces Edge Next) (count Pieces Cell Next)})) (result Mover Win)))))

Play starts with black. On his turn a player may either drop a stone of his color or remove a dead enemy group. Players may only legally drop stones adjacent to at least one of their stones already on the board. For boards sized 11x11 and smaller a group is considered dead if any stone within it meets the following criteria.
            
        a)The stone has no empty points orthogonally adjacent
    b)The stone has at least one enemy stone adjacent
    
For boards larger than 11x11 only the first criterion applies when determining if a group is dead. You may never remove your own dead groups. If a player has no legal move on his turn he must pass. Passing is otherwise not permitted. The player to remove all opposing groups from the board wins.
(game "Rampart" (players 2) (equipment {(board (square 13) Vertex) (piece "Disc" Each)}) (rules (start {(place "Disc1" (forEach (sites Phase 0) (and {(is Even (row (site ))) (!= 0 (% (site ) 4)) (= 0 (% (row (site )) 4))}))) (place "Disc2" (forEach (sites Phase 0) (and {(is Even (row (site ))) (!= 0 (% (site ) 4)) (= 2 (% (row (site )) 4))})))}) (play (or (move Add (to (sites Around (sites Occupied Mover) Empty Orthogonal))) (move Select (from (sites Occupied Enemy) (not (all Sites (sites Group (from )) (not (and (= 0 (count Sites (sites Around (site ) Empty Orthogonal))) (if (>= 11 13) (< 0 (count Sites (sites Around (site ) Own Orthogonal))) true)))))) (then (forEach Site (sites Group (last From) Orthogonal) (remove (site ))))))) (end (if (no Pieces Next) (result Next Loss)))))

Three rows of holes, arranged vertically, the outer two have twelve holes and the central one has thirteen. Twelve pieces per player, which begin in the outer rows. Four sticks, black on one side and white on the other, the number of white faces up is the value of the throw; all black faces up = 6. A player must throw a 1 (sig) to unlock a piece, which moves from the top hole in the player's row to the top hole of the central row. When a piece reaches the thirteenth space in the central row, they must throw a sig to enter the opponent's home row, at the bottom hole in that row, and proceed up that row to the top and then back into the central row. When entering the opponent's row, the opponent's piece in their bottom hole is sent to the next available hole in their row. In the central row, when a piece lands on a hole with an opponent's piece, the opponent's piece is sent back to start in their home row. A player landing on a hole occupied by an opponent in the home row captures the opponent's piece. The player who captures all of the opponent's pieces wins.
(game "Sig (Tidikelt)" (players 2) (equipment {(board (merge {(rectangle 12 3) (shift 1.0 -1.0 (rectangle 13 1))}) {(track "HomeTrack1" "0,N,E1,S" P1 true) (track "HomeTrack2" "2,N,W1,S" P2 true) (track "EnemyTrack1" "2,N,W1,S" P1 true) (track "EnemyTrack2" "0,N,E1,S" P2 true)} Vertex) (piece "Stick" Each) (regions "AllSites" (sites Board)) (dice 2 0 4) (map "Throw" {(pair 0 6) (pair 1 1) (pair 2 2) (pair 3 3) (pair 4 4)}) (map "FirstEnemySite" {(pair P1 2) (pair P2 0)}) (regions "Home" P1 (sites Left)) (regions "Home" P2 (sites Right))}) (rules (start {(place "Stick1" (sites Left)) (place "Stick2" (sites Right))}) (play (do (roll ) (or (if (and (= 1 (mapEntry "Throw" (count Pips))) (= (mover ) (who 36))) (move (from 36) (to (mapEntry "FirstEnemySite" (mover )) (not (is Friend (mapEntry "FirstEnemySite" (mover )))) (apply (is Enemy (who (to ))) (if (= (min (array (intersection (sites Empty) (sites Next "Home")))) -1) (remove (to )) (fromTo (from (to )) (to (min (array (intersection (sites Empty) (sites Next "Home"))))))))))) (forEach Piece (or (if (is In (from ) (sites Track Mover "HomeTrack")) (if (if (!= 0 (state (from ))) true (= 1 (mapEntry "Throw" (count Pips)))) (if (not (is Friend (who (trackSite Move "HomeTrack" (mapEntry "Throw" (count Pips)))))) (move (from ) (to (trackSite Move "HomeTrack" (mapEntry "Throw" (count Pips))) (apply (is Enemy (who (to ))) (if (is In (to ) (sites Next "Home")) (remove (to )) (if (= (min (array (intersection (sites Empty) (sites Next "Home")))) -1) (remove (to )) (fromTo (from (to )) (to (min (array (intersection (sites Empty) (sites Next "Home")))))))))) (then (if (and (not (!= 0 (state (last To)))) (= 1 (mapEntry "Throw" (count Pips)))) (set State (last To) 1))))))) (if (is In (from ) (sites Track Mover "EnemyTrack")) (if (not (is Friend (who (trackSite Move "EnemyTrack" (mapEntry "Throw" (count Pips)))))) (move (from ) (to (trackSite Move "EnemyTrack" (mapEntry "Throw" (count Pips))) (apply (is Enemy (who (to ))) (if (is In (to ) (sites Next "Home")) (remove (to )) (if (= (min (array (intersection (sites Empty) (sites Next "Home")))) -1) (remove (to )) (fromTo (from (to )) (to (min (array (intersection (sites Empty) (sites Next "Home")))))))))))))))))) (end (if (no Pieces Next) (result Next Loss)))))

21 holes, arranged in an arc, the central hole larger than the others. Ten pieces per player, each player's pieces beginning on one side of the board, one in each hole. Four beans used as dice, with a black side and a white side. The throws are as follows: Four white sides up = 4; four black sides up = 3; two white/two black up = 2; three white or three black = player loses their turn. Players continue to throw until they lose their turn. If a piece lands in the central hole, and it cannot move from it on its next opportunity, it is removed from the game. Pieces moving into the opponent's side of the board capture any of the opponent's pieces which occupy a space on which they land. When a piece reaches the end of the track, they proceed back in the other direction. The player who captures all ten of the opponent's pieces wins.
(game "Mapuche Game" (players 2) (equipment {(board (remove (concentric {26}) {0 1 2 3 4}) {(track "TrackCW1" {0 2 4 6 8 10 12 14 16 18 20 19 17 15 13 11 9 7 5 3 1} P1 true) (track "TrackCCW1" {1 3 5 7 9 11 13 15 17 19 20 18 16 14 12 10 8 6 4 2 0} P1 true) (track "TrackCW2" {0 2 4 6 8 10 12 14 16 18 20 19 17 15 13 11 9 7 5 3 1} P2 true) (track "TrackCCW2" {1 3 5 7 9 11 13 15 17 19 20 18 16 14 12 10 8 6 4 2 0} P2 true)} Vertex) (regions "AllSitesExceptTop" (difference (sites Board) 20)) (piece "Marker" Each (if (!= (if (= 0 (state (from ))) (trackSite Move "TrackCW" (mapEntry "ThrowDiceValue" (count Pips))) (trackSite Move "TrackCCW" (mapEntry "ThrowDiceValue" (count Pips)))) -1) (if (or (is In (if (= 0 (state (from ))) (trackSite Move "TrackCW" (mapEntry "ThrowDiceValue" (count Pips))) (trackSite Move "TrackCCW" (mapEntry "ThrowDiceValue" (count Pips)))) (sites Empty)) (is Enemy (who (if (= 0 (state (from ))) (trackSite Move "TrackCW" (mapEntry "ThrowDiceValue" (count Pips))) (trackSite Move "TrackCCW" (mapEntry "ThrowDiceValue" (count Pips))))))) (move (from ) (to (if (= 0 (state (from ))) (trackSite Move "TrackCW" (mapEntry "ThrowDiceValue" (count Pips))) (trackSite Move "TrackCCW" (mapEntry "ThrowDiceValue" (count Pips)))) (apply (is Enemy (who (to ))) (remove (to )))))))) (dice 2 0 4) (map "ThrowDiceValue" {(pair 0 4) (pair 1 0) (pair 2 2) (pair 3 0) (pair 4 3)}) (hand Each)}) (rules (start {(place "Marker1" (sites {0 2 4 6 8 10 12 14 16 18})) (place "Marker2" (sites {1 3 5 7 9 11 13 15 17 19}) 1)}) (play (do (roll ) (if (can Move (if (!= (mapEntry "ThrowDiceValue" (count Pips)) 0) (forEach Piece))) (forEach Piece (then (if (!= (mapEntry "ThrowDiceValue" (count Pips)) 0) (moveAgain )))) (move Pass (then (if (!= (mapEntry "ThrowDiceValue" (count Pips)) 0) (moveAgain ))))) (then (and (if (and (is Occupied 20) (!= 20 (last To))) (remove 20)) (if (= (last To) (if (= 0 (state (last To))) (trackSite EndSite Mover "TrackCW") (trackSite EndSite Mover "TrackCCW"))) (if (= 0 (state (last To))) (set State (last To) 1) (set State (last To) 0))))))) (end {(if (no Pieces P1) (result P1 Loss)) (if (no Pieces P2) (result P2 Loss))})))

Oust is a game for two players, played on a hexagonally patterned board which is initially empty. The two players, Black and White, take turns placing stones of their color onto unoccupied cells on the board. A group is a set of interconnected, like-colored stones. A group can be a singleton, a single stone which is not connected to any other stones of its color. A group includes all the stones of its own color connected to it. There are two types of moves - non-capturing placements and capturing placements. Non-capturing placements either forms no connections (adjacencies) with any stones, or forms one or more connections with only enemy stones. A non-capturing placement does not form any connection with stones of its own color. Making a non-capturing placement concludes your turn. When you place a stone which forms one or more connections with your own groups, you will create a new, larger group of your own stones. You can only make such a placement if said new group will have one or more connections with enemy groups upon its creation and if all said enemy groups are smaller than said new group. Upon making such a placement, all said enemy groups are removed from the board. After capturing one or more enemy groups and while it is still your turn, you must continue to add stones until you make a non-capturing placement, at which time your turn is concluded. If you have a placement available on your turn you must make one. If you don't have any placements available, you must pass your turn. There will always be a placement available for at least one player. You win by making a placement which captures all of the enemy stones on the board.
(game "Oust" (players 2) (equipment {(board (hex 7)) (piece "Disc" Each)}) (rules (play (or (move Add (to (sites Empty) (= 0 (count Sites (sites Around (to ) Own))))) (do (move Add (to (sites Empty) (< 0 (count Sites (sites Around (to ) Own))))) (and (all Sites (sites Around (sites Group (last To)) Enemy) (> (size Group (last To)) (size Group (site )))) (< 0 (count Sites (sites Around (sites Group (last To)) Enemy)))) (then (and (forEach Site (sites Around (sites Group (last To)) Enemy) (remove (sites Group (site )))) (moveAgain )))))) (end (if (and (< 2 (count Moves)) (= 0 (count Sites (sites Occupied Enemy)))) (result Mover Win)))))

The rules are the same as in Chess, without checkmate. The game is won either after 100 turns or when one player can no longer move, by the player with the most pieces.
(game "Skirmish (GDL)" (players {(player N) (player S)}) (equipment {(board (square 8)) (piece "Pawn" Each (or {(move Step Forward (to (is Empty (to )))) (move Step (directions {FR FL}) (to (is Enemy (who (to ))) (apply (remove (to ))))) (or (if (is In (from ) (sites Start (piece (what (from ))))) (move Slide Forward (between (exact 2) (is Empty (between ))) (to (is Empty (to ))) (then (set Pending (ahead (last To) Backward))))) (move Step (directions {FR FL}) (to (and (is Pending) (= (to ) (value Pending)))) (then (remove (ahead (last To) Backward)))))} (then (if (is In (last To) (sites Mover "Promotion")) (moveAgain ))))) (piece "Rook" Each (move Slide Orthogonal (to (is Enemy (who (to ))) (apply (remove (to )))) (then (if (= (state (last To)) 1) (set State (last To) 0))))) (piece "King" Each (move Step (to (not (is Friend (who (to )))) (apply (if (is Enemy (who (to ))) (remove (to ))))) (then (if (= (state (last To)) 1) (set State (last To) 0))))) (piece "Bishop" Each (move Slide Diagonal (to (is Enemy (who (to ))) (apply (remove (to )))))) (piece "Knight" Each (move Leap {{F F R F} {F F L F}} (to (not (is Friend (who (to )))) (apply (if (is Enemy (who (to ))) (remove (to ))))))) (piece "Queen" Each (move Slide (to (is Enemy (who (to ))) (apply (remove (to )))))) (map "King" {(pair 1 "E1") (pair 2 "E8")}) (map "RookLeft" {(pair 1 "A1") (pair 2 "A8")}) (map "RookRight" {(pair 1 "H1") (pair 2 "H8")}) (regions "Promotion" P1 (sites Top)) (regions "Promotion" P2 (sites Bottom))}) (rules (start {(place "Pawn1" (sites Row 1)) (place "Pawn2" (sites Row 6)) (place "Rook1" {"A1" "H1"} 1) (place "Knight1" {"B1" "G1"}) (place "Bishop1" {"C1" "F1"}) (place "Queen1" "D1") (place "King1" "E1" 1) (place "Rook2" {"A8" "H8"} 1) (place "Knight2" {"B8" "G8"}) (place "Bishop2" {"C8" "F8"}) (place "Queen2" "D8") (place "King2" "E8" 1)}) (play (if (is Prev Mover) (move Promote (last To) (piece {"Queen" "Knight" "Bishop" "Rook"}) Mover) (or (forEach Piece) (if (and {(= (what (mapEntry "King" (mover ))) (id "King" Mover)) (= (state (mapEntry "King" (mover ))) 1)}) (or (if (and (= (state (mapEntry "RookLeft" (mover ))) 1) (can Move (move Slide (from (mapEntry "RookLeft" (mover ))) E (between (exact 3) (is Empty (to )))))) (move Slide (from (mapEntry "King" (mover ))) W (between (exact 2) (is Empty (to ))) (then (and (set State (last To) 0) (move Slide (from (mapEntry "RookLeft" (mover ))) E (between (exact 3) true)))))) (if (and (= (state (mapEntry "RookRight" (mover ))) 1) (can Move (move Slide (from (mapEntry "RookRight" (mover ))) W (between (exact 2) (is Empty (to )))))) (move Slide (from (mapEntry "King" (mover ))) E (between (exact 2) (is Empty (to ))) (then (and (set State (last To) 0) (move Slide (from (mapEntry "RookRight" (mover ))) W (between (exact 2) true))))))))))) (end (if (or (no Moves Next) (= (count Moves) 100)) (byScore {(score P1 (count Pieces P1)) (score P2 (count Pieces P2))})))))

6 spherical pieces and 6 lion or lioness pieces per player. Up to six players. 
                Four throwing sticks as dice. 
                Players enter their spherical pieces on the board with a throw of one. They then race to the center 
                of the spiral. The central space must be reached with an exact throw. To leave the central space,
                the player must throw two ones. The player then races in the opposite direction to leave the 
                board. 
                When a piece leaves the board, that player introduces a lion piece, that player being the only one 
                to introduce lion pieces. The player introduces more lions with each piece this player moves off the board. 
        The lion races to the central spot, doubling the number of the throws. The lion attempts to capture the other player's pieces by landing on them.
(game "Mehen" (players 2) (equipment {(board (spiral 5 88) {(track "NormalTrack" {87 86 85 84 83 82 81 80 79 78 77 76 75 74 73 72 71 70 69 68 67 66 65 64 63 62 61 60 59 58 57 56 55 54 53 52 51 50 49 48 47 46 45 44 43 42 41 40 39 38 37 36 35 34 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 -2} true) (track "OppositeTrack" {0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 -2} true)} Vertex) (dice 2 0 4) (hand Each 2) (piece "Disc" Each (if (and (= (trackSite Move (count Pips)) -2) (is Empty 0)) (move Select (from ) (then (and (remove (last To)) (add (piece (id "Marker" Mover)) (to 0))))) (if (!= (trackSite Move "NormalTrack" (count Pips)) -1) (if (is In (trackSite Move "NormalTrack" (count Pips)) (sites Empty)) (move (from ) (to (trackSite Move "NormalTrack" (count Pips)))))))) (piece "Marker" Each (if (= (trackSite Move "OppositeTrack" (count Pips)) -2) (move Select (from ) (then (and (remove (last To)) (add (piece (id "Lion" Mover)) (to (handSite Mover 1)))))) (if (!= (trackSite Move "OppositeTrack" (count Pips)) -1) (if (is In (trackSite Move "OppositeTrack" (count Pips)) (sites Empty)) (move (from ) (to (trackSite Move "OppositeTrack" (count Pips)))))))) (piece "Lion" Each (or (if (and (!= (trackSite Move "OppositeTrack" (* (count Pips) 2)) -1) (!= (trackSite Move "OppositeTrack" (* (count Pips) 2)) -2)) (if (not (is Friend (who (trackSite Move "OppositeTrack" (* (count Pips) 2))))) (move (from ) (to (trackSite Move "OppositeTrack" (* (count Pips) 2)))))) (if (and (!= (trackSite Move "NormalTrack" (* (count Pips) 2)) -1) (!= (trackSite Move "NormalTrack" (* (count Pips) 2)) -2)) (if (not (is Friend (who (trackSite Move "NormalTrack" (* (count Pips) 2))))) (move (from ) (to (trackSite Move "NormalTrack" (* (count Pips) 2))))))))}) (rules (start {(place "Disc1" (handSite P1) 6) (place "Disc2" (handSite P2) 6)}) (play (do (roll ) (or {(if (and {(= (count Pips) 1) (is Empty 87) (is Occupied (handSite Mover))}) (move (from (handSite Mover)) (to 87))) (if (and {(= (count Pips) 1) (not (is Friend (who 87))) (is Occupied (handSite Mover 1))}) (move (from (handSite Mover 1)) (to 87))) (forEach Piece)}))) (end (if (no Pieces Next) (result Next Loss)))))

MOVES - A move consists of either:
            - A growth, i.e., a drop of a stone on an empty adjacent (orthogonal or diagonal) to friendly cell;
            - An orthogonal or diagonal slide of a stone already on board (like a chess Queen) to an empty cell;
            - A drop of a stone on any empty cell.
            - Any opponent adjacent stones to the new piece (either through growth or slide) are flipped to the moving player's colour. Notice that the third option (simple drop) do not flip the colour of adjacent stones.
            
        GOAL - Wins the player with most stones when the board is filled.
(game "Quad Wrangle" (players 2) (equipment {(board (square 8)) (piece "Ball" Each (move Slide (then (forEach Site (sites Around (last To)) (if (is Enemy (who (site ))) (and (remove (site )) (add (piece (id "Ball" Mover)) (to (site )))))))))}) (rules (start {(place "Ball1" (difference (union (sites Top) (sites Right)) (union {(sites Left) (sites Bottom) (intersection (sites Top) (sites Right))}))) (place "Ball2" (difference (union (sites Bottom) (sites Left)) (union {(sites Right) (sites Top) (intersection (sites Bottom) (sites Left))})))}) (play (or {(move Add (to (sites Around (sites Occupied Mover) Empty)) (then (forEach Site (sites Around (last To)) (if (is Enemy (who (site ))) (and (remove (site )) (add (piece (id "Ball" Mover)) (to (site )))))))) (forEach Piece) (move Add (to (difference (sites Empty) (sites Around (sites Occupied Mover) Empty))))})) (end (if (is Full) (byScore {(score P1 (count Pieces P1)) (score P2 (count Pieces P2))})))))

3x8 board. Eight pieces per player, which start in the spaces of the outer rows of the board. Four cowrie shells used as dice, the number of mouths face up being the value of the throw. A throw of 1 grants the player another throw. A player must throw 1 for the first move of each of their pieces. Players may only play with one piece out of the home row at a time and cannot move the next of their pieces until the piece being played has been captured. Throws of 1 must be used to move a piece in the home row, if possible. Pieces move from left to right in the player's home row, then from right to left in the central row, left to right in the opponent's home row, and right to left in the central row. When a piece lands on a space occupied by an opponent's piece, the opponent's piece is captured. The player who captures all of the opponent's pieces wins.
(game "Bheri Bakhri" (players 2) (equipment {(board (rectangle 3 8) {(track "Track1" "0,E,N1,W,N1,E,S1,W" true P1) (track "Track2" "23,W,S1,E,S1,W,N1,E" true P2)}) (dice 2 0 4) (piece "Marker" Each (if (and {(if (!= 0 (state (from ))) true (= 1 (count Pips)))}) (if (and (not (is Friend (who (trackSite Move (count Pips))))) (if (not (is In (from ) (sites Mover "Home"))) true (if (is In (trackSite Move (count Pips)) (sites Mover "Home")) true (= (count Pieces Mover (difference (sites Board) (sites Mover "Home"))) 0)))) (move (from ) (to (trackSite Move (count Pips)) (apply (is Enemy (who (to ))) (remove (to )))) (then (if (and (not (!= 0 (state (last To)))) (= 1 (count Pips))) (set State (last To) 1))))))) (regions "Home" P1 (sites Bottom)) (regions "Home" P2 (sites Top))}) (rules (start {(place "Marker1" (sites Bottom)) (place "Marker2" (sites Top))}) (play (do (roll ) (if (= 1 (count Pips)) (priority {(forEach Piece (if (and {(if (!= 0 (state (from ))) true (= 1 (count Pips))) (is In (from ) (sites Mover "Home"))}) (if (and (not (is Friend (who (trackSite Move (count Pips))))) (if (not (is In (from ) (sites Mover "Home"))) true (if (is In (trackSite Move (count Pips)) (sites Mover "Home")) true (= (count Pieces Mover (difference (sites Board) (sites Mover "Home"))) 0)))) (move (from ) (to (trackSite Move (count Pips)) (apply (is Enemy (who (to ))) (remove (to )))) (then (if (and (not (!= 0 (state (last To)))) (= 1 (count Pips))) (set State (last To) 1))))))) (forEach Piece)}) (forEach Piece)) (then (if (= 1 (count Pips)) (moveAgain ))))) (end (if (no Pieces Next) (result Next Loss)))))

Three-row board, outer rows with sixteen holes and the central with seventeen. Sixteen pieces per player, which start the board in each of the holes in the outer row belonging to a player. Two four-sided dice, marked 2-4 and \"A\" for 1. The throw of double 1s gives the player an extra throw. Players move their pieces according to the throws of the dice, moving one piece the value of one of the dice and another the value of the other die, or one piece the value of both dice. A piece cannot be moved until it is \"activated\" with a throw of 1. When a piece is activated, it is rotated 90 degrees and moved one space. One player moves from left to right in their row into the central row, moving right to left down it and when reaching the end of the central row, proceed into the opponent's row, and move from left to right in it, returning to the central row upon reaching the end. The opponent follows the same track, except moving from right to left in their row. Opponent's pieces are taken when a player's piece lands in the same spot as the opponent's piece. When in the opponent's row, the player my captured as many pieces of the opponent as hypothetically allowed by the dice. Players may not move one of their pieces past one of their other pieces. The player who captures all of the opponent's pieces wins.
(game "Daldos" (players 2) (equipment {(board (merge {(rectangle 1 16) (shift -1.0 1.0 (rectangle 1 17)) (shift 0.0 2.0 (rectangle 1 16))}) {(track "Track1" {0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16} true P1) (track "Track2" {33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16} true P2)} Vertex) (regions "AllSites" (sites Board)) (dice 4 2) (piece "Minus" P1 (if (or (= (state (from )) 1) (and (= (state (from )) 0) (= 1 (pips )))) (move Slide "Track1" (between (exact (pips )) (is Empty (between ))) (to (is Enemy (who (to ))) (apply (not (is Friend (who (to )))) (remove (to )))) (then (if (= (state (last To)) 0) (set State (last To) 1)))))) (piece "Minus" P2 (if (or (= (state (from )) 1) (and (= (state (from )) 0) (= 1 (pips )))) (move Slide "Track2" (between (exact (pips )) (is Empty (between ))) (to (is Enemy (who (to ))) (apply (not (is Friend (who (to )))) (remove (to )))) (then (if (= (state (last To)) 0) (set State (last To) 1))))))}) (rules (start {(place "Minus1" (sites Bottom)) (place "Minus2" (sites Top))}) (play (do (if (not (is Prev Mover)) (roll )) (forEach Die (and (= (face 36) 1) (= (face 37) 1)) (forEach Piece (then (if (not (all DiceUsed)) (if (can Move (forEach Die (forEach Piece))) (moveAgain )))))))) (end (if (no Pieces Next) (result Next Loss)))))

Ten corn kernels are placed in a line; the spaces between the kernels are the playing spaces. Four kernels of corn are used as dice, blackened on one side. The throws are as follows: Two of the same side up = 2, three of the same side up = 3; four black sides up = 4; four unblackened sides up = 5. Five pieces per player. Players take turns moving pieces according to the throws of the corn, with two throws per turn. When a player reaches the opposite end of the board, they move to the start and continue moving in the same direction. If a piece lands on a space occupied by an opponent's piece, the player then moves in the reverse direction, carrying the opponent's piece with it in an attempt to move past the starting points and off the board. Upon moving off the board, the opponent's piece is captured. The player then enters their piece again on their next turn. However, if the opponent lands on a piece carrying one of their pieces away, they then start carrying both of those pieces back to their starting point, freeing the captured piece and capturing the other player's piece. The player who captures all of the opponent's pieces wins.
(game "Puluc" (players 2) (equipment {(board (rectangle 1 10) {(track "Track1" {0 1 2 3 4 5 6 7 8} true P1) (track "Track2" {8 7 6 5 4 3 2 1 0} true P2) (track "CaptureTrack1" {8 7 6 5 4 3 2 1 0} P1 true) (track "CaptureTrack2" {0 1 2 3 4 5 6 7 8} P2 true)} Edge) (piece "Marker" Each (or (if (= 0 (state (from ) (level ))) (move (from (from ) (level )) (to (trackSite Move (from ) "Track" (mapEntry "Throw" (count Pips)))) (then (if (is In (last To) (sites Occupied Enemy false)) (forEach Level (last To) FromTop (and (if (is Enemy (who (last To) (level ))) (set State (last To) (level ) 2)) (if (is Friend (who (last To) (level ))) (set State (last To) (level ) 1)))))))) (if (= 1 (state (from ) (level ))) (if (!= (trackSite Move (from ) "CaptureTrack" (mapEntry "Throw" (count Pips))) -1) (move (from (from ) (level )) (to (trackSite Move (from ) "CaptureTrack" (mapEntry "Throw" (count Pips)))) (then (and (forEach Level (last From) FromTop (if (= 2 (state (last From) (level ))) (fromTo (from (last From) (level )) (to (last To))))) (forEach Level (last From) FromTop (if (is Friend (who (last From) (level ))) (set State (last From) (level ) 0)))))) (move Remove (from ) (level ) (then (and {(forEach Level (last From) FromTop (if (is Friend (who (last From) (level ))) (set State (last From) (level ) 0))) (forEach Level (last From) FromTop (if (= 2 (state (last From) (level ))) (remove (last From) (level )))) (add (piece (id "Marker" Mover)) (to (handSite Mover)))}))))))) (regions "AllSites" (sites Board Vertex)) (map "Throw" {(pair 0 5) (pair 1 3) (pair 2 2) (pair 3 3) (pair 4 4)}) (map "Entry" {(pair 1 0) (pair 2 8)}) (dice 2 0 4) (hand Each)}) (rules (start {(place Stack "Marker1" (handSite P1) 5) (place Stack "Marker2" (handSite P2) 5)}) (play (do (roll ) (or {(if (is Occupied (handSite Mover)) (move (from (handSite Mover)) (to (trackSite Move (mapEntry "Entry" (mover )) "Track" (- (mapEntry "Throw" (count Pips)) 1))))) (forEach Piece)}) (then (if (not (is Prev Mover)) (moveAgain ))))) (end {(if (no Pieces P2) (result P2 Loss)) (if (no Pieces P1) (result P1 Loss))})))

Each stone must move to any adjacent(orthogonal or diagonal) cell, which is occupied by an enemy stone. This stone is captured by replacement. After that, all adjacent enemy stones (orthogonal or diagonal) are converted to friendly ones. There are fewer and fewer stones on the board as the game proceeds, which is a major difference with Othello and Ataxx.
            
        The player which has more stones, after there is no valid move left, wins the game.
(game "Crusade" (players 2) (equipment {(board (square 8)) (piece "Ball" Each (move Step (to (is Enemy (who (to ))) (apply (remove (to )))) (then (forEach Site (sites Around (last To)) (if (is Enemy (who (site ))) (and (remove (site )) (add (piece (id "Ball" Mover)) (to (site )))))))))}) (rules (start {(place "Ball1" (sites Phase 1)) (place "Ball2" (sites Phase 0))}) (play (forEach Piece)) (end (if (no Moves Next) (byScore {(score P1 (count Pieces P1)) (score P2 (count Pieces P2))})))))

Six or more players, even number of players, played on two teams. The board consists of twenty kernels of corn, spaced evenly in a line. If there are ten to fourteen players, the board is expanded to 25 kernels. If there are more than sixteen players, it is expanded to 30. Sticks are used to play, (five per player), and are played in the spaces between corn kernels. Dice are also corn kernels, with one side marked with a black dot. Four dice are used, the value of a move determined by the number of black dots that land face up. Each player has two throws on their turn, and moves after the second throw. The throws both must be used, and can be used in any order. Each team's home is the side of the board to their left. Each team moves toward the opposite end of the track, exiting at the opposing team's home. All of the players on one team play in succession, and then the players on the other team play next. Players enter the men on their throws and move along the track. Each player may have only one piece on the board at a time. When a player reaches the opposing team's home field, the piece may be re-entered on that player's team's own home field. Reaching the home field does not require an exact throw, and if one throw brings a player home, they may use the second throw to enter it again. If a piece lands on that of an opponent, it is captured. The captured piece is placed on top of the piece that captured it, and the stack continues toward the opposing team's home space. If the player successfully carries the captured piece to the opposing team's home space, the piece is permanently captured and removed from play. If the opposing side lands on the same space as the stack, they are stacked with the opponent's piece, and the opponent begins carrying the stack to the their opposing team's side. Any pieces captured belonging to the team which brings them off the board are returned to their players. Pieces belonging to the same team may occupy the same space with no consequence for the game. When one team has no more counters left to enter, the winner is the team that captured most of the opposing team's pieces.
        
(game "Aj Sakakil" (players 6) (equipment {(board (rectangle 1 20) {(track "Track1" {19 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18} P1 true) (track "Track2" {20 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18} P2 true) (track "Track3" {21 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18} P3 true) (track "Track4" {22 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0} P4 true) (track "Track5" {23 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0} P5 true) (track "Track6" {24 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0} P6 true)} Edge) (regions "AllSites" (sites Board Vertex)) (piece "Stick" Each (forEach Value (values Remembered "Throws") (or (if (= 0 (state (from ) (level ))) (if (= (trackSite Move (from ) (value )) -1) (move (from (from ) (level )) (to (handSite Mover) (apply (forget Value "Throws" (value ))))) (move (from (from ) (level ) (if (is In (from ) (sites Hand Mover)) (< (count Pieces Mover (sites Board)) 1) true)) (to (trackSite Move (from ) (value )) (apply (forget Value "Throws" (value )))) (then (if (is In (last To) (sites Occupied Enemy false)) (forEach Level (last To) FromTop (and (if (is Enemy (who (last To) (level ))) (set State (last To) (level ) 2)) (if (is Friend (who (last To) (level ))) (set State (last To) (level ) 1))))))))) (if (= 1 (state (from ) (level ))) (if (= (trackSite Move (from ) (value )) -1) (do (forget Value "Throws" (value )) (move Remove (from ) (level ) (then (and {(forEach Level (last From) FromTop (if (is Friend (who (last From) (level ))) (set State (last From) (level ) 0))) (forEach Level (last From) FromTop (if (= 2 (state (last From) (level ))) (remove (last From) (level )))) (add (piece (id "Stick" Mover)) (to (handSite Mover)))})))) (move (from (from ) (level )) (to (trackSite Move (from ) (value )) (apply (forget Value "Throws" (value )))) (then (and (forEach Level (last From) FromTop (if (= 2 (state (last From) (level ))) (fromTo (from (last From) (level )) (to (last To))))) (forEach Level (last From) FromTop (if (is Friend (who (last From) (level ))) (set State (last From) (level ) 0))))))))))) (dice 2 0 4) (hand Each)}) (rules (start {(set Team 1 {P1 P2 P3}) (set Team 2 {P4 P5 P6}) (place Stack "Stick1" (handSite P1) 5) (place Stack "Stick2" (handSite P2) 5) (place Stack "Stick3" (handSite P3) 5) (place Stack "Stick4" (handSite P4) 5) (place Stack "Stick5" (handSite P5) 5) (place Stack "Stick6" (handSite P6) 5)}) {(phase "ThrowPhase" (play (do (roll ) (move Pass (then (if (not (no Pieces Mover)) (and {(if (!= 0 (count Pips)) (do (remember Value "Throws" (count Pips)) (can Move (or (forEach Piece (mover )) (forEach Piece))))) (moveAgain ) (if (is Prev Mover) (set Pending))})))))) (nextPhase (is Pending) "MovePhase")) (phase "MovePhase" (play (or (forEach Piece) (forEach Piece (mover )) (then (if (< 0 (size Array (values Remembered "Throws"))) (moveAgain ))))) (nextPhase (= 0 (size Array (values Remembered "Throws"))) "ThrowPhase"))} (end (if (no Pieces Enemy) (result TeamMover Win)))))

4x22 board. 22 pieces per player, four kings and eighteen regular pieces. Kings have no difference in movement or power than regular pieces. Moves are determined by four two-sided sticks, black on one side and white on the other. The moves are determined by the number of white sides that land face up: 1= a move of 1. A throw of 1 is known as \"tab.\" 2= a move of 2, 3=2, 4=6, 0=4. Throws of 1, 4, and 6 grant the player an additional throw. To begin, a player must roll tab to move their first piece, and every tab after that must be used to move a piece which has not moved yet. Pieces move from left to right in the home row, then circulate in a clockwise direction in the central two rows. Multiple pieces cannot occupy the same space. When a player's piece lands on a space occupied by an opponent's piece, that piece is captured. The player to capture all of the opponent's pieces wins.
(game "Kioz" (players 2) (equipment {(board (rectangle 4 22) {(track "Track1" "0,E,N1,W," P1 true) (track "Track2" "87,W,S1,E" P2 true) (track "MiddleTrack" "44,E,S1,W" true)}) (dice 2 0 4) (piece "Marker" Each) (piece "King" Each) (map "Throw" {(pair 0 4) (pair 1 1) (pair 2 2) (pair 3 2) (pair 4 6)}) (regions "Home" P1 (sites Bottom)) (regions "Home" P2 (sites Top))}) (rules (start {(place "Marker1" (intersection (sites Bottom) (expand (sites Left) 17))) (place "King1" (intersection (sites Bottom) (expand (sites Right) 3))) (place "Marker2" (intersection (sites Top) (expand (sites Right) 17))) (place "King2" (intersection (sites Top) (expand (sites Left) 3)))}) (play (do (roll ) (if (= 1 (mapEntry "Throw" (count Pips))) (priority {(forEach Piece (if (and {(if (!= 0 (state (from ))) true (= 1 (mapEntry "Throw" (count Pips)))) (not (!= 0 (state (from ))))}) (if (is In (from ) (sites Mover "Home")) (if (not (is Friend (who (trackSite Move "Track" (mapEntry "Throw" (count Pips)))))) (move (from ) (to (trackSite Move "Track" (mapEntry "Throw" (count Pips))) (apply (is Enemy (who (to ))) (remove (to )))) (then (if (and (not (!= 0 (state (last To)))) (= 1 (mapEntry "Throw" (count Pips)))) (set State (last To) 1))))) (if (not (is Friend (who (trackSite Move "MiddleTrack" (mapEntry "Throw" (count Pips)))))) (move (from ) (to (trackSite Move "MiddleTrack" (mapEntry "Throw" (count Pips))) (apply (is Enemy (who (to ))) (remove (to ))))))))) (forEach Piece (if (and {(if (!= 0 (state (from ))) true (= 1 (mapEntry "Throw" (count Pips))))}) (if (is In (from ) (sites Mover "Home")) (if (not (is Friend (who (trackSite Move "Track" (mapEntry "Throw" (count Pips)))))) (move (from ) (to (trackSite Move "Track" (mapEntry "Throw" (count Pips))) (apply (is Enemy (who (to ))) (remove (to )))) (then (if (and (not (!= 0 (state (last To)))) (= 1 (mapEntry "Throw" (count Pips)))) (set State (last To) 1))))) (if (not (is Friend (who (trackSite Move "MiddleTrack" (mapEntry "Throw" (count Pips)))))) (move (from ) (to (trackSite Move "MiddleTrack" (mapEntry "Throw" (count Pips))) (apply (is Enemy (who (to ))) (remove (to )))))))))}) (forEach Piece (if (and {(if (!= 0 (state (from ))) true (= 1 (mapEntry "Throw" (count Pips))))}) (if (is In (from ) (sites Mover "Home")) (if (not (is Friend (who (trackSite Move "Track" (mapEntry "Throw" (count Pips)))))) (move (from ) (to (trackSite Move "Track" (mapEntry "Throw" (count Pips))) (apply (is Enemy (who (to ))) (remove (to )))) (then (if (and (not (!= 0 (state (last To)))) (= 1 (mapEntry "Throw" (count Pips)))) (set State (last To) 1))))) (if (not (is Friend (who (trackSite Move "MiddleTrack" (mapEntry "Throw" (count Pips)))))) (move (from ) (to (trackSite Move "MiddleTrack" (mapEntry "Throw" (count Pips))) (apply (is Enemy (who (to ))) (remove (to )))))))))) (then (if (is In (mapEntry "Throw" (count Pips)) (sites {1 4 6})) (moveAgain ))))) (end (if (no Pieces Next) (result Next Loss)))))

3x6 board. Six pieces per player, which begin one in each space in the row closest to the player. Six sticks, used as dice. One side is polished, and the other is rough. The value of a throw is equal to the number of polished sides which land face up. A throw of sig (five polished or five rough sides up) must be made to move a piece that has not yet been moved; a throw of sig moves it 1 and grants the player another throw. If six polished sides up are thrown, the player gets another throw. If this throw is a sig, the player's throw = 7 and the player may either free the first piece and move it seven spaces or free all six pieces, moving them each one, and moving the first piece the remaining one space. Also, if the player throws six rough sides on their first turn, they get three extra throws. If any of these three throws is a sig, the value of the throw = 13, and the player may free the first piece and move it thirteen spaces, or free all of the player's pieces, moving them each one space, and then moving the first piece the remainder of the spaces. Pieces move from left to right in the player's home row, right to left in the central row, left to right in the opponent's home row, right to left in the central row, and then left to right in the player's home row. When a player's piece lands on a space occupied by an opponent's piece, the opponent's piece is captured. The player who captures all of their opponent's pieces wins.
(game "Sig (El Oued Capture)" (players 2) (equipment {(board (rectangle 3 6) {(track "Track1" "0,E,N1,W,N1,E,S1,W" true P1) (track "Track2" "17,W,S1,E,S1,W,N1,E" P2 true)}) (piece "Marker" Each) (hand Each) (dice 2 0 6) (map "ExtraThrow" {(pair 0 3) (pair 1 1) (pair 2 0) (pair 3 0) (pair 4 0) (pair 5 1) (pair 6 1)})}) (rules (start {(place "Marker1" (sites Bottom)) (place "Marker2" (sites Top))}) (play (do (roll ) (priority (forEach Piece (move (from (from ) (and (not (= (state (from )) 1)) (or (or (= 1 (count Pips)) (= 5 (count Pips))) (= 1 (var "SpecialSig"))))) (to (trackSite Move 1) (not (is Friend (who (to )))) (apply (if (is Enemy (who (to ))) (remove (to ))))) (then (and (set State (last To) 1) (if (= 1 (var "SpecialSig")) (and {(moveAgain ) (set Var (+ (var ) 1))})))))) (forEach Piece (move (from (from ) (= (state (from )) 1)) (to (trackSite Move (if (= 1 (var "SpecialSig")) (+ 1 (count Pips)) (count Pips))) (not (is Friend (who (to )))) (apply (if (is Enemy (who (to ))) (remove (to )))))))) (then (if (!= 0 (mapEntry "ExtraThrow" (count Pips))) (and (if (= 3 (mapEntry "ExtraThrow" (count Pips))) (if (<= (var ) 0) (set Var 2))) (if (!= (mover ) (prev )) (and (moveAgain ) (if (!= 1 (count Pips)) (set Var "SpecialSig" 1))))) (if (> (var ) 0) (and {(set Var (- (var ) 1)) (moveAgain )}) (set Var "SpecialSig" 0)))))) (end (if (no Pieces Next) (result Next Loss)))))

4x13, 19, 21, or 29 board. The number of pieces per player equals the number of spaces in a row, which begin the game arrayed in the outer rows of the board. Four sticks, each with a white side and a yellow side. Throws equal the number of white sides which fall up; when only yellow sides are up the throw equals 6. A throw of 1, 4, or 6 grants another throw to the player. Players  perform all of their throws first, and then move pieces according to the values of the throws without subdividing the value of a single throw. Players cannot move their pieces until the throw a 1. Pieces cannot move past one another in the home row. Each piece in the home row must individually be unlocked with a throw of 1 before it can move. In the central rows, when two of a player's pieces land on the same spot, they become a king and can be moved as one piece. There is no limit to the number of pieces in the king. They may be uncoupled with a throw of 1, or another throw which removes that number of pieces from the king. When a player's piece lands in a space occupied by an opponent's piece, the opponent's piece is removed from the board. Play progresses from left to right in the player's home row, and then from right to left in the second row, left to right in the third row, and then right to left in the opponent's row. When a piece enters the opponent's row, it cannot move if there are other pieces which can be moved. The player to capture the most of the opponent's pieces wins.
(game "At-Tab wa-d-Dukk" (players 2) (equipment {(board (rectangle 4 13) {(track "Track1" "0,E,N1,W,N1,E,N1,W" P1 true) (track "Track2" "51,W,S1,E,S1,W,S1,E" P2 true)}) (dice 2 0 4) (map {(pair 0 6) (pair 1 1) (pair 2 2) (pair 3 3) (pair 4 4)}) (piece "Marker" Each (if (or (= (state (from )) 0) (and (= 1 (mapEntry (count Pips))) (= (state (from )) 1))) (if (!= (trackSite Move (mapEntry (count Pips))) -1) (if (or (not (is In (from ) (sites Next))) (and (is In (from ) (sites Next)) (= (count Sites (intersection (sites Occupied Next) (sites Next))) 0))) (if (or (is In (trackSite Move (mapEntry (count Pips))) (sites Empty)) (is Enemy (who (trackSite Move (mapEntry (count Pips)))))) (or (if (= (+ (mapEntry (count Pips)) 1) (count (from ))) (move (from ) (to (trackSite Move (mapEntry (count Pips))) (apply (is Enemy (who (to ))) (remove (to ) (then (addScore Mover 1))))) (mapEntry (count Pips)))) (move (from ) (to (trackSite Move (mapEntry (count Pips))) (apply (is Enemy (who (to ))) (remove (to ) (then (addScore Mover 1))))) (count (from )))) (if (and (is In (trackSite Move (mapEntry (count Pips))) (sites "CentralRows")) (is Friend (who (trackSite Move (mapEntry (count Pips)))))) (move (from ) (to (trackSite Move (mapEntry (count Pips)))))))) (then (set State (last To) 0))))) (regions "AnotherThrow" (sites {1 4 6})) (regions "CentralRows" (union (sites Row 1) (sites Row 2))) (regions P1 (sites Bottom)) (regions P2 (sites Top))}) (rules (start {(place "Marker1" (sites Bottom) 1) (place "Marker2" (sites Top) 1)}) (play (do (roll ) (if (can Move (forEach Piece)) (forEach Piece (then (if (is In (mapEntry (count Pips)) (sites "AnotherThrow")) (moveAgain )))) (move Pass (then (if (is In (mapEntry (count Pips)) (sites "AnotherThrow")) (moveAgain ))))))) (end (if (or (and (= (count Sites (difference (sites Occupied P1) (sites P2))) 0) (= (count Sites (difference (sites Occupied P2) (sites P1))) 0)) (no Pieces Mover)) (byScore )))))

There are three red ships and three black ships. The remainder
            of the cells contain white icebergs. The two players, Red and Black, take turns
            moving one of their own ships, one move per turn, starting with Red. Players are
            not allowed to pass.
            
            MOVES:
            You must move one of your ships to an adjacent cell which doesn't contain
            another ship. By moving to a cell containing an iceberg, you capture the iceberg,
            and your score increases by 1.
            
            MOVE DIRECTION:
            You must select one of your ships to move, and move it closer to its closest
            iceberg. Distance is measured by the number of cells between ship and iceberg
            along the shortest path of cells that connects them, going around other ships. If
            the ship you've chosen to move has icebergs adjacent to it, you must capture one
            of them.
            
            OBJECT OF THE GAME:
            The goal is to capture the majority of the icebergs. On the default size 5 board, there are 55 icebergs starting out. If you capture 28 of them, you
        win.
(game "Icebreaker" (players 2) (equipment {(board (hex 5)) (piece "Disc" Each (move Step (to (and (or (= (id Neutral) (who (to ))) (is Empty (to ))) (= 1 (- (count Steps (step (to (or (= (id Neutral) (who (to ))) (is Empty (to ))))) (from ) (intersection (sites Occupied Neutral) (sites Distance (step (to (or (= (id Neutral) (who (to ))) (is Empty (to ))))) (from ) (exact (count Steps (step (to (or (= (id Neutral) (who (to ))) (is Empty (to ))))) (from ) (sites Occupied Neutral)))))) (count Steps (step (to (or (= (id Neutral) (who (to ))) (is Empty (to ))))) (to ) (intersection (sites Occupied Neutral) (sites Distance (step (to (or (= (id Neutral) (who (to ))) (is Empty (to ))))) (from ) (exact (count Steps (step (to (or (= (id Neutral) (who (to ))) (is Empty (to ))))) (from ) (sites Occupied Neutral))))))))) (apply (if (is Occupied (to )) (and (remove (to )) (addScore Mover 1))))))) (piece "Disc" Neutral)}) (rules (start {(place "Disc0" (difference (sites Board) (sites Corners))) (place "Disc1" (sites Around (centrePoint ) (- 5 1) NNW)) (place "Disc1" (sites Around (centrePoint ) (- 5 1) E)) (place "Disc1" (sites Around (centrePoint ) (- 5 1) SSW)) (place "Disc2" (sites Around (centrePoint ) (- 5 1) NNE)) (place "Disc2" (sites Around (centrePoint ) (- 5 1) W)) (place "Disc2" (sites Around (centrePoint ) (- 5 1) SSE))}) (play (forEach Piece Mover)) (end (if (or (< (/ (- (count Sites (sites Board)) 6) 2) (score P1)) (< (/ (- (count Sites (sites Board)) 6) 2) (score P2))) (byScore )))))

Six or more players, even number of players, played on two teams. The board consists of twenty kernels of corn, spaced evenly in a line. If there are ten to fourteen players, the board is expanded to 25 kernels. If there are more than sixteen players, it is expanded to 30. Sticks are used to play, (five per player), and are played in the spaces between corn kernels. Dice are also corn kernels, with one side marked with a black dot. Four dice are used, the value of a move determined by the number of black dots that land face up. Each player has two throws on their turn, and moves after the second throw. The throws both must be used, and can be used in any order. Each team's home is the side of the board to their left. Each team moves toward the opposite end of the track, and then back to home. All of the players on one team play in succession, and then the players on the other team play next. Players enter the men on their throws and move along the track. Each player may have only one piece on the board at a time. When a player reaches the team's home field, the piece may be re-entered. Reaching the home field does not require an exact throw, and if one throw brings a player home, they may use the second throw to enter it again. If a piece lands on that of an opponent, it is captured and immediately leaved the board with the capture. Neither piece is reentered. Pieces belonging to the same team may occupy the same space with no consequence for the game. When one team has no more counters left to enter, the winner is the team that captured most of the opposing team's pieces.
        
(game "Aj T'iwil" (players 6) (equipment {(board (rectangle 1 20) {(track "Track1" {19 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18} P1 true) (track "Track2" {20 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18} P2 true) (track "Track3" {21 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18} P3 true) (track "Track4" {22 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0} P4 true) (track "Track5" {23 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0} P5 true) (track "Track6" {24 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0} P6 true)} Edge) (regions "AllSites" (sites Board Vertex)) (piece "Stick" Each (forEach Value (values Remembered "Throws") (if (= (trackSite Move (from ) "Track" (value )) -1) (move (from (from ) (level )) (to (handSite Mover) (apply (forget Value "Throws" (value ))))) (move (from (from ) (level ) (if (is In (from ) (sites Hand Mover)) (< (count Pieces Mover (sites Board)) 1) true)) (to (trackSite Move (from ) "Track" (value )) (apply (and (forEach Level (to ) FromTop (if (is Enemy (who (to ) (level ))) (remove (to ) (level )))) (forget Value "Throws" (value ))))))))) (dice 2 0 4) (hand Each)}) (rules (start {(set Team 1 {P1 P2 P3}) (set Team 2 {P4 P5 P6}) (place Stack "Stick1" (handSite P1) 5) (place Stack "Stick2" (handSite P2) 5) (place Stack "Stick3" (handSite P3) 5) (place Stack "Stick4" (handSite P4) 5) (place Stack "Stick5" (handSite P5) 5) (place Stack "Stick6" (handSite P6) 5)}) {(phase "ThrowPhase" (play (do (roll ) (move Pass (then (if (not (no Pieces Mover)) (and {(if (!= 0 (count Pips)) (do (remember Value "Throws" (count Pips)) (can Move (or (forEach Piece (mover )) (forEach Piece))))) (moveAgain ) (if (is Prev Mover) (set Pending))})))))) (nextPhase (is Pending) "MovePhase")) (phase "MovePhase" (play (or (forEach Piece) (forEach Piece (mover )) (then (if (< 0 (size Array (values Remembered "Throws"))) (moveAgain ))))) (nextPhase (= 0 (size Array (values Remembered "Throws"))) "ThrowPhase"))} (end (if (no Pieces Enemy) (result TeamMover Win)))))

4x12 board. Twelve pieces per player, one playing as sticks and the other as stones. Pieces begin on the board, one each in every space of the outer rows. Six sticks, with one black side and one white side, used as dice. Players choose who will play as black and who will play as white, and the throws are as follows: six black or white up = 6, five black or white up (called sir)= 5 plus another throw; four black or white up = 0, three black and three white up = 3. A player must throw sir in their colour to unlock a piece before moving it. Pieces move from left to right in their home row, right to left in the next row, left to right in the row following that, and then return to the second row. When a player's piece lands on a spot occupied by an opponent's piece, the opponent's piece is captured. The player who captures all of the opponent's pieces wins.
(game "Siryu (War)" (players 2) (equipment {(board (rectangle 4 12) {(track "Track1" "0,E,N1,W,N1,E,23,E,W,N1,E,23,W,N1,E,23,W,N1,E,23,W,N1,E,23,W,N1,E,23,W,N1,E,23" true P1) (track "Track2" "47,W,S1,E,S1,W,24,E,N1,W,24,E,N1,W,24,E,N1,W,24,E,N1,W,24,E,N1,W,24,E,N1,W,24" true P2)} Vertex) (piece "Stick" P1 (if (or (= (state (from )) 0) (and (= (count Pips) (mapEntry "Sir" (mover ))) (= (state (from )) 1))) (if (!= (trackSite Move (mapEntry "ThrowDiceValue" (count Pips))) -1) (if (or (is In (trackSite Move (mapEntry "ThrowDiceValue" (count Pips))) (sites Empty)) (is Enemy (who (trackSite Move (mapEntry "ThrowDiceValue" (count Pips)))))) (move (from ) (to (trackSite Move (mapEntry "ThrowDiceValue" (count Pips))) (apply (is Enemy (who (to ))) (remove (to )))))) (then (if (= (state (last To)) 1) (set State (last To) 0)))))) (piece "Marker" P2 (if (or (= (state (from )) 0) (and (= (count Pips) (mapEntry "Sir" (mover ))) (= (state (from )) 1))) (if (!= (trackSite Move (mapEntry "ThrowDiceValue" (count Pips))) -1) (if (or (is In (trackSite Move (mapEntry "ThrowDiceValue" (count Pips))) (sites Empty)) (is Enemy (who (trackSite Move (mapEntry "ThrowDiceValue" (count Pips)))))) (move (from ) (to (trackSite Move (mapEntry "ThrowDiceValue" (count Pips))) (apply (is Enemy (who (to ))) (remove (to )))))) (then (if (= (state (last To)) 1) (set State (last To) 0)))))) (regions "AllSites" (sites Board)) (dice 2 0 6) (map "ThrowDiceValue" {(pair 0 6) (pair 1 5) (pair 2 0) (pair 3 3) (pair 4 0) (pair 5 5) (pair 6 6)}) (map "Sir" {(pair 1 1) (pair 2 5)})}) (rules (start {(place "Stick1" (sites Bottom) 1) (place "Marker2" (sites Top) 1)}) (play (do (roll ) (if (can Move (forEach Piece)) (forEach Piece (then (if (= (mapEntry "ThrowDiceValue" (count Pips)) 5) (moveAgain )))) (move Pass (then (if (= (mapEntry "ThrowDiceValue" (count Pips)) 5) (moveAgain ))))))) (end (if (no Pieces Next) (result Next Loss)))))

Seven players. Heptagonal board, with seven semi-circular socket as spaces on each side. Seven pieces per player, which begin on the leftmost spot on their side. Players are as follows: Saturn = black; Jupiter = green; Mars = red; the sun = yellow; Venus = purple; Mercury = multi-colored; the moon is white. Pieces move in an anti-clockwise direction around the board. Three seven-sided die. Players move according to the number on each die by moving one piece the value on one die then another piece the value on the other die, or by moving one piece the value of one die and then the value of the other. When a piece lands on a space with a single piece belonging to an opponent, the opponent's piece is removed from the board. Play continues until one player remains, who becomes the winner.
(game "Tablas Astronomias" (players 7) (equipment {(board (concentric {49}) {(track "Track" {48 46 44 42 40 38 36 34 32 30 28 26 24 22 20 18 16 14 12 10 8 6 4 2 0 1 3 5 7 9 13 15 17 19 21 23 25 27 29 31 33 35 37 39 41 43 45 47} true)} Vertex) (dice 7 3) (piece "Disc" Each)}) (rules (start {(place Stack "Disc1" 14 7) (place Stack "Disc2" 0 7) (place Stack "Disc3" 13 7) (place Stack "Disc4" 27 7) (place Stack "Disc5" 41 7) (place Stack "Disc6" 42 7) (place Stack "Disc7" 28 7)}) (play (do (if (not (is Prev Mover)) (roll )) (forEach Die (!= (pips ) 0) (forEach Site (sites Occupied Mover) (move (from (site )) (to (trackSite Move (site ) (pips )) (or (and (is Enemy (who (to ))) (= (topLevel (to )) 0)) (not (is Enemy (who (to ))))) (apply (is Enemy (who (to ))) (remove (to )))))) (then (if (not (all DiceUsed)) (moveAgain )))))) (end (forEach NonMover (no Pieces Player) (result Player Loss)))))

Four rows of holes, of any number. Each player has as many pieces as are in one row. The pieces start in the outer row of the board for each player. Six sticks used as dice, with a green side and a white side. The throws are as follows: one white up = 0; two white up = 2; three white up = 1; four white up = 4; five white up = 0; zero white or six white up = 6. Each piece's first move must be with a throw of 1 or 6. This first throw moves the piece one space only. Play moves from left to right in the player's home row, from right to left in the second row, left to right in the third row, and right to left in the opponent's home row. When a player's piece lands on a space occupied by an opponent's piece, the opponent's piece is removed from the board. The player who captures all of the opponent's pieces wins.
(game "Sig (Mzab)" (players 2) (equipment {(board (rectangle 4 20) {(track "Track1" "0,E,N1,W,N1,E,N1,W" P1 true) (track "Track2" "79,W,S1,E,S1,W,S1,E" P2 true)} Vertex) (piece "Stick" Each (if (or (= (state (from )) 0) (and (or (= 1 (mapEntry (count Pips))) (= 6 (mapEntry (count Pips)))) (= (state (from )) 1))) (if (!= (trackSite Move (if (= (state (from )) 1) 1 (mapEntry (count Pips)))) -1) (if (or (is In (trackSite Move (if (= (state (from )) 1) 1 (mapEntry (count Pips)))) (sites Empty)) (is Enemy (who (trackSite Move (if (= (state (from )) 1) 1 (mapEntry (count Pips))))))) (move (from ) (to (trackSite Move (if (= (state (from )) 1) 1 (mapEntry (count Pips)))) (apply (is Enemy (who (to ))) (remove (to )))))) (then (if (= (state (last To)) 1) (set State (last To) 0)))))) (regions "AllSites" (sites Board)) (dice 2 0 6) (map {(pair 0 6) (pair 1 0) (pair 2 2) (pair 3 1) (pair 4 1) (pair 5 0) (pair 6 6)}) (regions P1 (sites Bottom)) (regions P2 (sites Top))}) (rules (start {(place "Stick1" (sites Bottom) 1) (place "Stick2" (sites Top) 1)}) (play (do (roll ) (forEach Piece))) (end {(if (no Pieces Next) (result Next Loss)) (if (and (= (count Sites (difference (sites Occupied P1) (sites P2))) 0) (= (count Sites (difference (sites Occupied P2) (sites P1))) 0)) (result Mover Draw))})))

4 or 6x10 board. Six pieces per player, with one piece placed on each of the three spaces on either end of the long row closest to the player. Three casting sticks, each with a round and a flat side, are used as dice. The throws are as follows: One flat side up = 1; two flat sides up = 2; three flat sides up = 4, zero flat sides up = 6. A player must throw a 1 to move each piece for the first time. Players move according to the throws, except on throws of 1, which are tabulated for use later. Players continue to throw until they throw 2. Pieces move along a boustrophedon path, beginning from left to right in the row closest to them. Pieces are captured when an player's piece lands on a spot occupied by an opponent's piece. Players may used tabulated throws to supplement a throw in order to make a capture. The player who captured the most pieces wins.
(game "Sijat El Taba" (players 2) (equipment {(board (rectangle 6 10) {(track "Track1" "0,E,N1,W,N1,E,N1,W,N1,E,N1,W" P1 true) (track "Track2" "59,W,S1,E,S1,W,S1,E,S1,W,S1,E" P2 true)}) (piece "Marker" Each (if (= (state (from )) 1) (or (if (!= (trackSite Move (mapEntry (count Pips))) -1) (if (or (is In (trackSite Move (mapEntry (count Pips))) (sites Empty)) (is Enemy (who (trackSite Move (mapEntry (count Pips)))))) (move (from ) (to (trackSite Move (mapEntry (count Pips))) (apply (is Enemy (who (to ))) (remove (to ) (then (addScore Mover 1)))))))) (if (!= (trackSite Move (+ (value Player Mover) (mapEntry (count Pips)))) -1) (if (is Enemy (who (trackSite Move (+ (value Player Mover) (mapEntry (count Pips)))))) (move (from ) (to (trackSite Move (+ (value Player Mover) (mapEntry (count Pips)))) (apply (is Enemy (who (to ))) (remove (to ) (then (addScore Mover 1))))) (then (set Value Mover 0)))))))) (dice 2 0 3) (map {(pair 1 1) (pair 2 2) (pair 3 4) (pair 0 6)})}) (rules (start {(place "Marker1" (union (intersection (sites Bottom) (expand (sites Left) 2)) (intersection (sites Bottom) (expand (sites Right) 2)))) (place "Marker2" (union (intersection (sites Top) (expand (sites Left) 2)) (intersection (sites Top) (expand (sites Right) 2))))}) (play (do (roll ) (if (= (mapEntry (count Pips)) 1) (or (move Pass (then (and (if (> (value Player Mover) 0) (set Value Mover (+ 1 (value Player Mover))) (set Value Mover 1)) (moveAgain )))) (move Select (from (sites Occupied Mover) (= (state (from )) 0)) (then (and (set State (last From) 1) (moveAgain ))))) (if (= (mapEntry (count Pips)) 2) (forEach Piece) (forEach Piece (then (moveAgain ))))))) (end (if (and (= (count Sites (difference (sites Occupied P1) (sites Top))) 0) (= (count Sites (difference (sites Occupied P2) (sites Bottom))) 0)) (byScore )))))

Four squares, arranged in a cross shape. The game is played along the lines. Four pieces per player, which begin on the corners of a square, opposite the square where the opponent's pieces are arranged. Players alternate turns moving their pieces. Pieces move three spaces along the lines on the board, capturing any piece on the third. The first two spaces in the move must be empty. Pieces may change direction in a turn, as long as the lines are followed and there is no backtracking. The player who captures all of the opponent's pieces wins.
(game "Boxijn Barildaan" (players 2) (equipment {(board (merge {(shift 1.0 0.0 (rectangle 4 2)) (shift 0.0 1.0 (rectangle 2 4))}) Vertex) (piece "Marker" Each (move Step (to (and (= 0 (state (to ))) (if (< (count MovesThisTurn) 2) (is Empty (to )) (is In (to ) (union (sites Occupied Next) (sites Empty))))) (apply (if (is Enemy (who (to ))) (remove (to ))))) (then (if (= 2 (count Sites (forEach (sites Board) (= 1 (state (site )))))) (forEach Site (sites Board) (if (= 1 (state (site ))) (set State (site ) 0))) (and (set State (last From) 1) (moveAgain ))))))}) (rules (start {(place "Marker1" (expand (sites Bottom))) (place "Marker2" (expand (sites Top)))}) (play (if (is Prev Mover) (move Step (from (last To)) (to (and (= 0 (state (to ))) (if (< (count MovesThisTurn) 2) (is Empty (to )) (is In (to ) (union (sites Occupied Next) (sites Empty))))) (apply (if (is Enemy (who (to ))) (remove (to ))))) (then (if (= 2 (count Sites (forEach (sites Board) (= 1 (state (site )))))) (forEach Site (sites Board) (if (= 1 (state (site ))) (set State (site ) 0))) (and (set State (last From) 1) (moveAgain ))))) (forEach Piece))) (end (if (no Pieces Next) (result Next Loss)))))

4x12 board. Twelve pieces per player, which begin one in each space in the row closest to the player. Six stick dice, green on one side and white on the other. The value of the throws equals the number of green faces, with the following exceptions: four green faces up allows a piece to be moved for the first time and a move of 1, plus another throw is granted; six white faces = 4 plus another throw; six green = 6 plus another throw; five white faces = move 5 plus another throw. Pieces move from right to left in the player's home row, then into the second row, moving left to right, then into the third row moving right to left, and then into the opponent's home row moving left to right, then back into the third row moving right to left, to the second row moving left to right, and then back into the player's home row moving right to left. If a player's piece lands on a space occupied by one of the opponent's pieces, the opponent's piece is captured. The player who captures all of the opponent's pieces wins.
(game "Issiren" (players 2) (equipment {(board (rectangle 4 12) {(track "Track1" "11,W,N1,E,N1,W,N1,E,S1,W,S1,E" true P1) (track "Track2" "36,E,S1,W,S1,E,S1,W,N1,E,N1,W" true P2)}) (dice 2 0 6) (piece "Marker" Each (move (from (from ) (if (= (state (from )) 0) true (= (mapEntry (count Pips)) 1))) (to (trackSite Move (mapEntry (count Pips))) (not (is Friend (who (to )))) (apply (if (is Enemy (who (to ))) (remove (to ))))) (then (if (= 1 (state (last To))) (set State (last To) 0))))) (map {(pair 0 4) (pair 1 5) (pair 2 2) (pair 3 3) (pair 4 1) (pair 5 5) (pair 6 6)})}) (rules (start {(place "Marker1" (sites Bottom) 1) (place "Marker2" (sites Top) 1)}) (play (do (roll ) (forEach Piece) (then (if (and (is In (mapEntry (count Pips)) (sites {1 4 6 5})) (!= 5 (count Pips))) (moveAgain ))))) (end (if (no Pieces Next) (result Next Loss)))))

TURN - On each turn, each player slides (orthogonally or diagonally) a stone until it hits another stone or a wall.
            
            If it stops because of a stone, the moving stone and all adjacent stones (of either color) are removed.
            
            GOAL - The player with no stones onboard loses.
            
        The game is a draw if (i) the board becomes empty, or (ii) each player has just one stone, or (iii) the moving player has no valid moves.
(game "Fission" (players 2) (equipment {(board (square 8)) (piece "Ball" Each (move (from (from )) (to (sites LineOfSight Farthest (from )) (not (is In (to ) (sites Around (from ))))) (then (if (!= (ahead (last To) (directions Cell (last From) (last To))) (last To)) (remove (sites Around (last To) true))))))}) (rules (start {(place "Ball1" (intersection (sites Phase 1) (expand (sites Centre) 2 Orthogonal))) (place "Ball2" (intersection (sites Phase 0) (expand (sites Centre) 2 Orthogonal)))}) (play (forEach Piece)) (end {(if (and (not (no Pieces Mover)) (no Pieces Next)) (result Mover Win)) (if (or (no Moves Next) (and (= 1 (count Pieces P1)) (= 1 (count Pieces P2)))) (result Mover Draw))})))

On your turn you have to options:
            • Noncapturing move: Step kingwise away from the center of the line you are stepping along.
            • Capturing move: Capture queenwise any enemy not farther away from the center of the line you are moving along.
            
        Only if you have no moves may you pass. The game is over when only one player has pieces left. That player is the winner.
(game "Zola" (players 2) (equipment {(board (square 6)) (piece "Disc" Each)}) (rules (start {(place "Disc1" (sites Phase 0)) (place "Disc2" (sites Phase 1))}) (play (forEach Piece (or {(move (from ) (to (intersection (sites Occupied Next) (sites Direction (from ) (directions {N S}) (is Occupied (to )) true)) (not (> (min (count Sites (sites Direction (from ) N)) (count Sites (sites Direction (from ) S))) (min (count Sites (sites Direction (to ) N)) (count Sites (sites Direction (to ) S))))) (apply (remove (to ))))) (move (from ) (to (intersection (sites Occupied Next) (sites Direction (from ) (directions {NE SW}) (is Occupied (to )) true)) (not (> (min (count Sites (sites Direction (from ) NE)) (count Sites (sites Direction (from ) SW))) (min (count Sites (sites Direction (to ) NE)) (count Sites (sites Direction (to ) SW))))) (apply (remove (to ))))) (move (from ) (to (intersection (sites Occupied Next) (sites Direction (from ) (directions {E W}) (is Occupied (to )) true)) (not (> (min (count Sites (sites Direction (from ) E)) (count Sites (sites Direction (from ) W))) (min (count Sites (sites Direction (to ) E)) (count Sites (sites Direction (to ) W))))) (apply (remove (to ))))) (move (from ) (to (intersection (sites Occupied Next) (sites Direction (from ) (directions {SE NW}) (is Occupied (to )) true)) (not (> (min (count Sites (sites Direction (from ) SE)) (count Sites (sites Direction (from ) NW))) (min (count Sites (sites Direction (to ) SE)) (count Sites (sites Direction (to ) NW))))) (apply (remove (to ))))) (move Step (from ) (to (and {(is Empty (to )) (or {(and (or (= (from ) (+ (to ) 6)) (= (from ) (- (to ) 6))) (< (max (count Sites (sites Direction (from ) N)) (count Sites (sites Direction (from ) S))) (max (count Sites (sites Direction (to ) N)) (count Sites (sites Direction (to ) S))))) (and (or (= (from ) (+ (to ) 1)) (= (from ) (- (to ) 1))) (< (max (count Sites (sites Direction (from ) E)) (count Sites (sites Direction (from ) W))) (max (count Sites (sites Direction (to ) E)) (count Sites (sites Direction (to ) W))))) (and (or (= (from ) (+ (to ) (+ 6 1))) (= (from ) (- (to ) (+ 6 1)))) (< (max (count Sites (sites Direction (from ) SW)) (count Sites (sites Direction (from ) NE))) (max (count Sites (sites Direction (to ) SW)) (count Sites (sites Direction (to ) NE))))) (and (or (= (from ) (+ (to ) (- 6 1))) (= (from ) (- (to ) (- 6 1)))) (< (max (count Sites (sites Direction (from ) SE)) (count Sites (sites Direction (from ) NW))) (max (count Sites (sites Direction (to ) SE)) (count Sites (sites Direction (to ) NW)))))})})))}))) (end (if (or (no Pieces P1) (no Pieces P2)) (result Mover Win)))))

MOVE - A stone can move up to N spaces in any combination of directions (it may even move over intervening stones), where N varies depending on the number of stones he has remaining:
            - Six pieces: one space per turn
            - Five pieces: two spaces per turn
            - Four pieces: three spaces per turn
            - Three pieces: four spaces per turn
            - Two pieces: five spaces per turn
            - One piece: six spaces per turn.
            
            CAPTURE - A stone captures an opposing piece by moving onto it. If a stone makes a capture before it has used all of the spaces available to it that move, it may continue to make additional captures until it has moved its limit.
            
        GOAL - Wins the player who captures all of his opponent's stones, or, if he reduces his opponent to a single stone without losing any of his own.
(game "Annuvin" (players 2) (equipment {(board (rotate 30.0 (hex 4))) (piece "Ball" Each (move Slide (between (max (if (= -1 (value Player Mover)) 1 (value Player Mover))) (not (is Enemy (who (between ))))) (to (is Enemy (who (to ))) (apply (not (is Friend (who (to )))) (if (is Enemy (who (to ))) (remove (to ) (then (set Value Next (+ (value Player Next) 1))))))) (then (if (<= (- (if (= -1 (value Player Mover)) 1 (value Player Mover)) (count Steps (last From) (last To))) 0) (set Value Mover (- 7 (count Pieces Mover))) (and (set Value Mover (- (if (= -1 (value Player Mover)) 1 (value Player Mover)) (count Steps (last From) (last To)))) (moveAgain )))))) (hand Each)}) (rules (start {(place "Ball1" (difference (union {(sites Side NW) (sites Side NE) (expand (sites Side N))}) (union (sites Left) (sites Right)))) (place "Ball2" (difference (union {(sites Side SW) (sites Side SE) (expand (sites Side S))}) (union (sites Left) (sites Right))))}) (play (if (is Prev Mover) (move Slide (from (last To)) (between (max (if (= -1 (value Player Mover)) 1 (value Player Mover))) (not (is Enemy (who (between ))))) (to (is Enemy (who (to ))) (apply (not (is Friend (who (to )))) (if (is Enemy (who (to ))) (remove (to ) (then (set Value Next (+ (value Player Next) 1))))))) (then (if (<= (- (if (= -1 (value Player Mover)) 1 (value Player Mover)) (count Steps (last From) (last To))) 0) (set Value Mover (- 7 (count Pieces Mover))) (and (set Value Mover (- (if (= -1 (value Player Mover)) 1 (value Player Mover)) (count Steps (last From) (last To)))) (moveAgain ))))) (forEach Piece))) (end (if (or (and (= 1 (count Pieces Next)) (= 6 (count Pieces Mover))) (no Pieces Next)) (result Mover Win)))))

Played on a board similar to Surakarta, but smaller. Players begin with four pieces, arranged in the square of spaces in their bottom right corner. Players take turns moving a piece to one adjacent spot. To capture an opponent's piece, you must move along the curved loops. The spot at the immediate end of the loop must be empty, but the piece may continue as far as the player wishes, including moving along successive loops, or until they make a capture or are stopped by their own piece.
(game "Ja-Jeon-Geo-Gonu" (players 2) (equipment {(board (square 4) {(track "Track1" {14 14 11 10 9 8 8 13 9 5 1 1 4 5 6 7 7 2 6 10} true true) (track "Track2" {11 11 14 10 6 2 2 7 6 5 4 4 1 5 9 13 13 8 9 10} true true)} Vertex) (piece "Disc" Each (or {(move Step Orthogonal (to (is Empty (to )))) (move Slide "AllTracks" (between (or (= (between ) (from )) (is Empty (between )))) (to (is Enemy (who (to ))) (apply false (remove (to )))))}))}) (rules (start {(place "Disc1" {"A3" "B3" "A4" "B4"}) (place "Disc2" {"C1" "D1" "C2" "D2"})}) (play (forEach Piece)) (end (if (no Pieces Next) (result Next Loss)))))

7x7 board, with diagonals in the square formed by the central 3x3 lines. 24 pieces per player. Black plays first. Players alternate turns placing a piece on one of the empty spots on the board. The first stone must be placed in the central spot. They attempt to orthogonally surround an empty point with four of their pieces, making a square. When all of the pieces are placed, players alternate turns removing one of their opponent's pieces from the board. They then move one of their pieces along the lines of the board to the place left vacant by the piece they removed. When a player makes a new square, they may remove another of the opponent's pieces from the board. Pieces that are in a square around an empty point may not be captured, and captures are not made in the placement phase. The player who captures all of the opponent's pieces wins.
(game "Fang" (players 2) (equipment {(board (add (square 7) {{16 24} {24 32} {30 24} {24 18}}) Vertex) (piece "Marker" Each (move Step (to (is Empty (to ))) (then (if (> (count Sites (forEach (sites Around (last To)) (if (is Empty (site )) (or (and {(is In (last To) (sites {(ahead (site ) N) (ahead (site ) S) (ahead (site ) W) (ahead (site ) E)})) (is Mover (who (ahead (site ) N))) (is Mover (who (ahead (site ) S))) (is Mover (who (ahead (site ) W))) (is Mover (who (ahead (site ) E)))}) (and {(is In (last To) (sites {(ahead (site ) NE) (ahead (site ) SE) (ahead (site ) SW) (ahead (site ) NW)})) (is Mover (who (ahead (site ) NE))) (is Mover (who (ahead (site ) SE))) (is Mover (who (ahead (site ) SW))) (is Mover (who (ahead (site ) NW)))}))))) 0) (and (set Value Mover (count Sites (forEach (sites Around (last To)) (if (is Empty (site )) (or (and {(is In (last To) (sites {(ahead (site ) N) (ahead (site ) S) (ahead (site ) W) (ahead (site ) E)})) (is Mover (who (ahead (site ) N))) (is Mover (who (ahead (site ) S))) (is Mover (who (ahead (site ) W))) (is Mover (who (ahead (site ) E)))}) (and {(is In (last To) (sites {(ahead (site ) NE) (ahead (site ) SE) (ahead (site ) SW) (ahead (site ) NW)})) (is Mover (who (ahead (site ) NE))) (is Mover (who (ahead (site ) SE))) (is Mover (who (ahead (site ) SW))) (is Mover (who (ahead (site ) NW)))})))))) (moveAgain )))))) (hand Each)}) (rules (start (place "Marker" "Hand" 24)) {(phase "FirstPlacement" P1 (play (move (from (handSite Mover)) (to (sites Centre)))) (nextPhase "Placement")) (phase "Placement" (play (move (from (handSite Mover)) (to (sites Empty)))) (nextPhase Mover (all Sites (sites Hand Mover) (= 0 (count Cell (site )))) "Playing")) (phase "Playing" (play (if (is Prev Mover) (move Remove (sites Occupied Next) (then (if (> (value Player Mover) 1) (and (moveAgain ) (set Value Mover (- (value Player Mover) 1))) (set Value Mover 0)))) (forEach Piece))))} (end (if (no Pieces Next) (result Next Loss)))))

4x20-25 board. Player on two teams of two players. Each team has a number of pieces which are equal to the number of holes in one of the rows. Pieces baring in the outer rows of the board. Eight sticks used as dice, painted red on one side. The throws are as follows: All sides of one color = 8; seven of one color = 1; six of one color = 6; five of one color = 5; four of one color= 4. Throws of 4 and 1 allow the player another throw. Pieces are moved after the throws are made. Each throw must be used to move a piece; the value of a throw cannot be subdivided between pieces. Pieces move from left to right in the team's home row, the right to left in the second row, left to right in the third row, and then right to left in the opposing team's home row. Pieces may not move past other pieces belonging to the team, but may move past the opponent's pieces. Then a piece lands in a spot occupied by a piece belonging to the opposing team, the opposing team's piece is captured. Once a player places their pieces in the opponent's home row, they cannot be taken. The team continue until all of the pieces are in the opponents' home rows, and the team with the most remaining pieces wins.
(game "Sig (Western Sahara)" (players 4) (equipment {(board (rectangle 4 20) {(track "Track1" "0,E,N1,W,N1,E,N1,W" P1 true) (track "Track2" "79,W,S1,E,S1,W,S1,E" P2 true) (track "Track3" "0,E,N1,W,N1,E,N1,W" P3 true) (track "Track4" "79,W,S1,E,S1,W,S1,E" P4 true)} Vertex) (piece "Stick" Each) (regions "AllSites" (sites Board)) (dice 2 0 8) (map "Throw" {(pair 0 8) (pair 1 1) (pair 2 6) (pair 3 5) (pair 4 4) (pair 5 5) (pair 6 6) (pair 7 1) (pair 8 8)}) (regions "Home" P1 (sites Bottom)) (regions "Home" P2 (sites Top)) (regions "Home" P3 (sites Bottom)) (regions "Home" P4 (sites Top))}) (rules (start {(set Team 1 {P1 P3}) (set Team 2 {P2 P4}) (place "Stick1" (sites Bottom)) (place "Stick2" (sites Top))}) (play (do (roll ) (if (or (is Mover P1) (is Mover P3)) (forEach Site (sites Occupied Team1) (move (from (site )) (to (trackSite Move (mapEntry (count Pips))) (and (or (is Empty (to )) (and (not (is In (to ) (sites Next "Home"))) (is Enemy (who (to ))))) (= 1 (count Sites (intersection (sites Occupied Team1) (sites Track Mover "Track" (from ) (trackSite Move (mapEntry (count Pips)))))))) (apply (is Enemy (who (to ))) (remove (to )))))) (forEach Site (sites Occupied Team2) (move (from (site )) (to (trackSite Move (mapEntry (count Pips))) (and (or (is Empty (to )) (and (not (is In (to ) (sites Next "Home"))) (is Enemy (who (to ))))) (= 1 (count Sites (intersection (sites Occupied Team2) (sites Track Mover "Track" (from ) (trackSite Move (mapEntry (count Pips)))))))) (apply (is Enemy (who (to ))) (remove (to ))))))) (then (if (is In (mapEntry (count Pips)) (sites {1 4})) (moveAgain ))))) (end (if (and (= 0 (count Sites (difference (sites Occupied Team1) (sites P2 "Home")))) (= 0 (count Sites (difference (sites Occupied Team2) (sites P1 "Home"))))) {(if (= (count Sites (sites Occupied Team1)) (count Sites (sites Occupied Team2))) (result Mover Draw)) (if (< (count Sites (sites Occupied Team1)) (count Sites (sites Occupied Team2))) (result Team2 Win)) (if (> (count Sites (sites Occupied Team1)) (count Sites (sites Occupied Team2))) (result Team1 Win))}))))

Played on a Chaupar board. Two players. Four pieces per player. Seven cowries, used as dice. The throws are as follows: one face up = 10; two faces up = 2; three faces up = 3; four faces up = 4; five faces up = 25; six faces up = 36; seven faces up = 14; all faces down = 7. Players start from opposite ends of the board. In this game, the divisions of the arms of the board are ignored; each arm is considered one space, and the spaces between the arms are also considered a space, making eight total spaces. Players sit opposite each other, and the point in front of them is the starting point for that player. Play proceeds in an anti-clockwise direction. When one player's piece lands on a space occupied by an opponent's piece, the opponent's piece is captured. A player wins by capturing all of the opponent's pieces.
(game "Udat Pagada" (players 2) (equipment {(board (add (add (hole (merge (shift 0.0 8.0 (rectangle 4 20)) (shift 8.0 0.0 (rectangle 20 4))) (poly {{8.0 8.0} {8.0 11.0} {11.0 11.0} {11.0 8.0}})) {{8 28 48 68 69 70 71 51 31 11 10 9}}) {{9.5 4.0} {15.0 4.0} {15.0 9.5} {15.0 15.0} {9.5 15.0} {4.0 15.0} {4.0 9.5} {4.0 4.0}}) {(track "Track" {144 145 146 147 148 149 150 151} true)} Vertex) (dice 2 0 7) (piece "Pawn" Each (move (from (from ) (level )) (to (trackSite Move (from ) "Track" (mapEntry "ThrowDiceValue" (count Pips))) (apply (if (is Enemy (who (to ))) (forEach Level (to ) FromTop (remove (to ) (level )))))))) (hand Each) (map "Throw" {(pair 0 7) (pair 1 10) (pair 2 2) (pair 3 3) (pair 4 4) (pair 5 25) (pair 6 36) (pair 7 14)}) (map "Entry" {(pair P1 144) (pair P2 148)})}) (rules (start {(place Stack "Pawn1" (handSite P1) 4) (place Stack "Pawn2" (handSite P2) 4)}) (play (do (roll ) (or (if (is Occupied (handSite Mover)) (move (from (handSite Mover)) (to (trackSite Move (mapEntry "Entry" Mover) "Track" (- (mapEntry "ThrowDiceValue" (count Pips)) 1)) (apply (if (is Enemy (who (to ))) (forEach Level (to ) FromTop (remove (to ) (level )))))))) (forEach Piece)))) (end (if (no Pieces Next) (result Next Loss)))))

MOVE - On each turn, a player may do one of the following actions:
            - Drop a friendly stone at an empty cell, which is in a diagonal line of sight with another friendly stone, i.e., both stones must be separated by a diagonal line of empty cells. 
            - Transform an enemy stone, at a diagonal line of sight of a friendly stone, into a wall (which is a neutral stone).
            
        GOAL - When there are no valid moves, wins the player with more friendly stones.
(game "Diagonals (2002)" (players 2) (equipment {(board (rectangle 5 10) Vertex) (piece "Ball" Each) (piece "Ball" Neutral)}) (rules (start {(place "Ball1" (intersection (expand (sites Bottom)) (sites Right))) (place "Ball2" (intersection (expand (sites Top)) (sites Left)))}) (play (or (move Add (to (intersection (sites Direction (sites Occupied Mover) Diagonal (is Occupied (to ))) (sites Empty)))) (move Select (from (forEach (sites Occupied Next) (!= 0 (count Sites (intersection (sites LineOfSight (site ) Diagonal) (sites Occupied Mover)))))) (then (and (remove (last To)) (add (piece (id "Ball" Neutral)) (to (last To)))))))) (end (if (and (no Moves P1) (no Moves P2)) (byScore {(score P1 (count Pieces P1)) (score P2 (count Pieces P2))})))))

Each player controls a tank with three health and an initial shooting range of two spaces. 
            Each player gains one action point at the start of their turn. 
            Players may use an action point during their turn to perform one of four actions:
            - Move their tank to an adjacent space.
            - Shoot at another tank within shooting range, deducting one point of health.
            - Trade with another tank within shooting range, increasing the owning players action points by one.
            - Increase the shooting range of their tank by one space.
            Players can pass to conserve action points between turns.
        A player loses if their tank reaches zero health.
(game "Tank Tactics" (players 2) (equipment {(board (rectangle 5 10)) (hand Each) (piece "Tank" Each (or {(move Step (to (is Empty (to ))) (then (if (> (score Mover) 1) (and (addScore Mover -1) (moveAgain ))))) (move Select (from ) (to (intersection (sites Occupied Enemy "Board") (sites Distance (from ) (range 1 (state (from )))))) (then (and (if (= (value Piece (last To)) 1) (remove (last To)) (set Value (last To) (- (value Piece (last To)) 1))) (if (> (score Mover) 1) (and (addScore Mover -1) (moveAgain )))))) (move Select (from ) (to (intersection (sites Occupied Enemy "Board") (sites Distance (from ) (range 1 (state (from )))))) (then (and (addScore (player (who (last To))) 1) (if (> (score Mover) 1) (and (addScore Mover -1) (moveAgain )))))) (move Select (from ) (to ) (then (and (if (< (state (last To)) 100) (set State (last To) (+ 1 (state (last To))))) (if (> (score Mover) 1) (and (addScore Mover -1) (moveAgain ))))))}) 100)}) (rules (meta (passEnd NoEnd)) (start {(set Score Each 1) (place "Tank1" (handSite P1) 2 3) (place "Tank2" (handSite P2) 2 3)}) {(phase "Placement" (play (move (from (handSite Mover)) (to (sites Empty)))) (nextPhase Mover (all Sites (sites Hand Mover) (= 0 (count Cell (site )))) "Movement")) (phase "Movement" (play (or (forEach Piece) (move Pass (then (addScore Mover 1))))))} (end (forEach NonMover (no Pieces Player) (result Player Loss)))))

The main track of the board is a row of eleven squares, with both end squares and the central square marked with an X. On the left side, a row of four squares runs under and adjacent to the first four squares of the central row. Perpendicular to the left end square of the central row, there is a square and then three triangles. On the opposite end, below and perpendicular to the right end of the central track is a row of four squares, curving slightly to the right. Above the end square of the central row, a triangular space, adjacent to an oval divided into three. Two teams with two players on each team. Players each start from a different point: one from the right square in the bottom left row, one from one of the triangle spaces on the left, one from the end of the curving track on the right, and the other from one of the spaces in the oval. Three pieces per player. Five sticks, with a flat side and a curved sides, used as dice. The value of a throw is equal to the number of flat sides that land face up; five curved sides up = 5. Players move their pieces from their entry points onto the central track of the board and progressing to the opposite end of the board from where they started. Pieces must move backward when they reach the end of the central track. When a player's piece lands on a space occupied by an opponent's piece, the opponent's piece is taken. A piece resting on a space marked with an X is safe from capture. The team to successfully capture all of their opponent's pieces wins.
(game "Los Palos" (players 4) (equipment {(board (merge {(shift 11.3 -3.7 (graph {{0.0 0.0} {1.3 -1.0} {2.0 0.0} {1.1 0.6}} {{0 1} {1 2} {2 3} {3 0}})) (shift 10.4 -2.4 (graph {{0.0 0.0} {0.9 -1.3} {2.0 -0.7} {1.0 0.4}} {{0 1} {1 2} {2 3} {3 0}})) (shift 10.1 -1.1 (graph {{0.0 0.0} {0.3 -1.3} {1.3 -0.9} {1.0 0.2}} {{0 1} {1 2} {2 3} {3 0}})) (shift 10.0 0.0 (graph {{0.0 0.0} {0.1 -1.1} {1.1 -0.9} {1.0 0.0}} {{0 1} {1 2} {2 3} {3 0}})) (shift 11.0 1.87 (graph {{0.0 0.0} {0.5 0.5} {0.0 1.0}} {{0 1} {1 2} {2 0}})) (shift 10.0 1.87 (graph {{0.0 0.0} {-0.5 0.5} {0.0 1.0}} {{0 1} {1 2} {2 0}})) (shift 10.0 1.87 (square 1)) (shift 10.0 1.0 (tri 1)) (shift 1.0 2.0 (graph {{1.0 0.0} {-0.5 0.87} {0.0 0.0}} {{0 1} {1 2} {2 0}})) (shift 0.0 2.0 (graph {{-1.0 0.0} {0.5 0.87} {0.0 0.0}} {{0 1} {1 2} {2 0}})) (shift 0.0 2.0 (tri 1)) (shift 0.0 1.0 (square 1)) (rectangle 1 11) (shift 0.0 -1.0 (rectangle 1 4))}) {(track "Track1" "20,W,N1,E" P1 true) (track "Track2" "11,12,S2,E" P2 true) (track "Track3" "6,E1,9,S1,W" P3 true) (track "Track4" "0,1,2,3,4,W" P4 true) (track "TrackRight" "14,E,W" true) (track "TrackLeft" "4,W,E" true)}) (dice 2 0 5) (piece "Marker" Each (move (from (from )) (to (if (= (state (from )) 0) (trackSite Move "Track" (mapEntry "Throw" (count Pips))) (if (= (state (from )) 1) (trackSite Move "TrackLeft" (mapEntry "Throw" (count Pips))) (trackSite Move "TrackRight" (mapEntry "Throw" (count Pips))))) (or (and (not (is In (to ) (sites "SafeSites"))) (is Enemy (who (to )))) (is Empty (to ))) (apply (if (is Enemy (who (to ))) (remove (to ))))) (then (if (and (= (state (last To)) 0) (is In (last To) (sites "CentralTrack"))) (if (or (is Mover P1) (is Mover P2)) (set State (last To) 2) (set State (last To) 1)))))) (map "Throw" {(pair 0 5) (pair 1 1) (pair 2 2) (pair 3 3) (pair 4 4) (pair 5 5)}) (map "EntryPoint" {(pair 1 20) (pair 2 11) (pair 3 6) (pair 4 0)}) (regions "SafeSites" (sites {4 14 23})) (regions "CentralTrack" (sites {4 5 14 15 19 21 22 23 24 25 26}))}) (rules (start {(place "Marker1" (mapEntry "EntryPoint" P1) 3) (place "Marker2" (mapEntry "EntryPoint" P2) 3) (place "Marker3" (mapEntry "EntryPoint" P3) 3) (place "Marker4" (mapEntry "EntryPoint" P4) 3) (set Team 1 {P1 P3}) (set Team 2 {P2 P4})}) (play (do (roll ) (forEach Piece))) (end (if (no Pieces Enemy) (result TeamMover Win)))))

7x7 board. 21 pieces per player, which begin in the three rows closest to each player. The central row of the board remains empty. Players alternate turns moving one of their pieces forward, diagonally, or horizontally on the board. When a player's piece is next to an opponent's piece with an empty space immediately on the opposite side of it, the player's piece may hop over the opponent's piece to capture it. The player who captures all of the opponent's pieces wins.
(game "Addi Kul" (players {(player N) (player S)}) (equipment {(board (square 7)) (piece "Marker" Each (or (move Step (directions {Rightward Leftward Forwards}) (to (is Empty (to )))) (move Hop (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to ))))))}) (rules (start {(place "Marker1" (expand (sites Bottom) 2)) (place "Marker2" (expand (sites Top) 2))}) (play (forEach Piece)) (end (if (no Pieces Next) (result Next Loss)))))

5x12 board, played on the intersections of lines. Twelve pieces per player, arranged along the side of twelve closest to the player. Pieces move along a boustrophedon track, one player starting from left to right in their starting row and the other from right to left in their starting row. Moves are determined by the throw of six cowries: one mouth up = 1, two mouth up = 2, three mouths up = 3, four mouths up = 4, five mouths up = 1 (0 and 6 mouths up are not specified, but are between 10 and 20 and the move can be split to make captures). A player must roll 1 or (0 or 6) to begin. When a piece moves to a spot occupied by an opponent's piece, it is captured. The goal of the game is to reduce the other player to one or two pieces.
(game "Awangdu" (players 2) (equipment {(board (rectangle 5 12) {(track "Track1" "0,E,N1,W,N1,E,N1,W,N1,E" P1 true) (track "Track2" "59,W,S1,E,S1,W,S1,E,S1,W" P2 true)} Vertex) (dice 2 0 6) (piece "Disc" Each (if (not (is Friend (who (trackSite Move (mapEntry (var )))))) (move (from ) (to (trackSite Move (mapEntry (var ))) (apply (if (is Enemy (who (to ))) (remove (to )))))))) (map {(pair 0 10) (pair 1 1) (pair 2 2) (pair 3 3) (pair 4 4) (pair 5 1) (pair 6 10)})}) (rules (start {(place "Disc1" (sites Bottom)) (place "Disc2" (sites Top))}) (play (do (roll ) (if (or (= (value Player Mover) 1) (is In (count Pips) (sites {0 1 5 6}))) (do (set Var (count Pips)) (forEach Piece (then (if (not (= (value Player Mover) 1)) (set Value Mover 1)))))))) (end (if (<= (count Pieces Next) 2) (result Next Loss)))))

Played on a standard Backgammon board. Six pieces per player. Pieces begin the game, one on each point on the left half of the player's side of the board. Pieces move in an anti-clockwise direction for both players. Two six-sided dice are rolled. When a 6 is rolled, the player moves two pieces six places. If this is on the player's first turn it must be the two pieces furthest to the left. If a 1 is rolled, the player moves one piece one spot. If doubles are rolled, the player moves twice the normal roll, and plays again. When one player is reduced to a single piece, it moves only to a consecutive corner space with the roll of each 1, or two corner spaces with the roll of each 6, doubling still applies. The first player to capture all of the opponent's pieces wins.
(game "Ad elta stelpur" (players 2) (equipment {(board (rectangle 2 13) {(track "NormalTrack" {0 1 2 3 4 5 7 8 9 10 11 12 25 24 23 22 21 20 18 17 16 15 14 13} true) (track "CornerTrack" {0 5 7 12 25 20 18 13} true)} Vertex) (regions "LeftMost" P1 {0 1}) (regions "LeftMost" P2 {24 25}) (dice 2) (piece "Disc" Each)}) (rules (start {(place "Disc1" {0 1 2 3 4 5}) (place "Disc2" {20 21 22 23 24 25})}) (play (do (if (not (is Prev Mover)) (roll ) (if (and (not (is Pending)) (not (or (is AnyDie 6) (is AnyDie 1)))) (roll ))) (if (is Pending) (forEach Piece (or (move (from ) (to (trackSite Move (value Pending)) (and (not (is Friend (who (to )))) (if (>= (count Turns) 2) true (if (and (or (= 6 (value Pending)) (= 12 (value Pending))) (!= 0 (count (sites Mover)))) (is In (from ) (sites Mover)) true))) (apply (is Enemy (who (to ))) (remove (to ))))) (if (= 1 (count Pieces Mover)) (move (from ) (to (trackSite Move "CornerTrack" (if (= (value Pending) 12) 4 (if (= (value Pending) 6) 2 (value Pending)))) (not (is Friend (who (to )))) (apply (is Enemy (who (to ))) (remove (to )))))))) (forEach Die (or (= 6 (pips )) (= 1 (pips ))) (if (= 1 (pips )) (forEach Piece (or (move (from ) (to (trackSite Move (if (all DiceEqual) 2 1)) (and (not (is Friend (who (to )))) (if (>= (count Turns) 2) true (if (and (or (= 6 (if (all DiceEqual) 2 1)) (= 12 (if (all DiceEqual) 2 1))) (!= 0 (count (sites Mover)))) (is In (from ) (sites Mover)) true))) (apply (is Enemy (who (to ))) (remove (to ))))) (if (= 1 (count Pieces Mover)) (move (from ) (to (trackSite Move "CornerTrack" (if (= (if (all DiceEqual) 2 1) 12) 4 (if (= (if (all DiceEqual) 2 1) 6) 2 (if (all DiceEqual) 2 1)))) (not (is Friend (who (to )))) (apply (is Enemy (who (to ))) (remove (to )))))))) (forEach Piece (or (move (from ) (to (trackSite Move (if (all DiceEqual) 12 6)) (and (not (is Friend (who (to )))) (if (>= (count Turns) 2) true (if (and (or (= 6 (if (all DiceEqual) 12 6)) (= 12 (if (all DiceEqual) 12 6))) (!= 0 (count (sites Mover)))) (is In (from ) (sites Mover)) true))) (apply (is Enemy (who (to ))) (remove (to ))))) (if (= 1 (count Pieces Mover)) (move (from ) (to (trackSite Move "CornerTrack" (if (= (if (all DiceEqual) 12 6) 12) 4 (if (= (if (all DiceEqual) 12 6) 6) 2 (if (all DiceEqual) 12 6)))) (not (is Friend (who (to )))) (apply (is Enemy (who (to ))) (remove (to ))))))) (then (and (set Pending (if (all DiceEqual) 12 6)) (moveAgain )))))) (then (if (or (or (is AnyDie 6) (is AnyDie 1)) (all DiceEqual)) (moveAgain )))))) (end (if (no Pieces Next) (result Next Loss)))))

4x7-15 (odd number only) board. One piece in each hole in the outer row. Four palm branches used as dice, with one side white and the other side yellow. The throws are equal to the number of white sides that fall up; when only yellow sides are up, the score is 6. When a player throws 1, 4, or 6, the player throws again. Players take turns throwing, until one throws 1, and that player begins to play. Each player moves in a boustrophedon path, from left to right in the row closest to them, right to left in the second row, and left to right in the third row. From there, the player may move again into the second row and continue as before, or move into the fourth row, proceeding from right to left, as long as at least one of the opponent's pieces remains there. The piece may enter the third row again upon reaching the end of the fourth row, but only when the player has either no pieces in their first row, or one group of pieces in the same spot (see below). When a piece has moved out of the fourth row, it may not enter it again during the game. When a player's piece lands in the same spot as another piece belonging to the player, the pieces may move as one piece. When a player's piece lands on a space occupied by an opponent's, piece, the opponent's piece is captured. The player who captures all of the opponent's pieces wins.
(game "Tab" (players 2) (equipment {(board (rectangle 4 7) {(track "HomeTrack1" "0,E,N1,W" P1 true) (track "HomeTrack2" "27,W,S1,E" P2 true) (track "MiddleTrack" "13,W,N1,E" true) (track "EnemyTrack1" "14,E,N1,W,S1,E" P1 true) (track "EnemyTrack2" "13,W,S1,E,N1,W" P2 true)} Vertex) (piece "Stick" Each) (regions "AllSites" (sites Board)) (dice 2 0 4) (map "Throw" {(pair 0 6) (pair 1 1) (pair 2 2) (pair 3 3) (pair 4 4)}) (regions "Home" P1 (sites Bottom)) (regions "Home" P2 (sites Top))}) (rules (start {(place "Stick1" (sites Bottom)) (place "Stick2" (sites Top))}) {(phase "InitGame" (play (do (roll ) (move Pass) (then (if (= 1 (mapEntry (count Pips))) (moveAgain ))))) (nextPhase (= 1 (mapEntry (count Pips))) "Play")) (phase "Play" (play (do (roll ) (forEach Site (sites Occupied Mover) (or {(if (is In (site ) (sites Track Mover "HomeTrack")) (move (from (site )) (to (trackSite Move (site ) "HomeTrack" (mapEntry (count Pips))) (apply (is Enemy (who (to ))) (remove (to ) (count (to ))))) (count (site )))) (if (is In (site ) (sites Track Mover "MiddleTrack")) (move (from (site )) (to (trackSite Move (site ) "MiddleTrack" (mapEntry (count Pips))) (apply (is Enemy (who (to ))) (remove (to ) (count (to ))))) (count (site )))) (if (is In (site ) (sites Track Mover "EnemyTrack")) (if (if (is In (site ) (sites Next "Home")) true (and (!= 0 (count Pieces Next (sites Next "Home"))) (= 0 (state (site ))))) (move (from (site )) (to (trackSite Move (site ) "EnemyTrack" (mapEntry (count Pips))) (apply (is Enemy (who (to ))) (remove (to ) (count (to ))))) (count (site )) (then (if (and (is In (last To) (sites Next "Home")) (= 0 (state (last To)))) (set State (last To) 1))))))})) (then (if (is In (mapEntry (count Pips)) (sites {1 4 6})) (moveAgain ))))))} (end (if (no Pieces Next) (result Next Loss)))))

Two concentric circles, with two perpendicular diameters intersecting both circles, and four other lines, positioned diagonally, connecting the circumferences of the two circles. Six pieces per player. which begin on opposite sides of the circle from the other player, three on each circle. Players alternate turns moving their pieces. Pieces move three spaces along the lines on the board, regardless of whether they are occupied, capturing any piece on the third. Pieces may change direction in a turn, as long as the lines are followed and there is no backtracking. The player who captures all of the opponent's pieces wins.
(game "Toono" (players 2) (equipment {(board (add (concentric {1 0 8 8}) {{0 2} {0 4} {0 6} {0 8}}) Vertex) (piece "Marker" Each (move (from ) (to (sites Distance (from ) (exact 3)) (not (is Friend (who (to )))) (apply (if (is Enemy (who (to ))) (remove (to )))))))}) (rules (start {(place "Marker1" (difference (expand (sites Bottom) 2) (expand (sites Top) 2))) (place "Marker2" (difference (expand (sites Top) 2) (expand (sites Bottom) 2)))}) (play (forEach Piece)) (end (if (no Pieces Next) (result Next Loss)))))

Pieces move one step forward. Otherwise, the rules are the same as International Draughts: Pieces can jump an opponent's adjacent player to capture it. Pieces can move forward or backwards. When a piece reaches the opposite edge of the board from its starting position, it becomes a king and can may move and jump over any number of spaces diagonally. Captures are compulsory and the maximum number of jumps must be made. Winning is achieved by capturing all the opponent's pieces or by blocking them from moving.
(game "HexDame" (players 2) (equipment {(board (rotate 90.0 (hex 5))) (piece "Counter" P1 N) (piece "Counter" P2 S) (piece "DoubleCounter" Each) (regions P1 (union (sites Side SW) (sites Side SE))) (regions P2 (union (sites Side NW) (sites Side NE)))}) (rules (start {(place "Counter1" (expand (sites Bottom) 3)) (place "Counter2" (expand (sites Top) 3))}) (play (if (is Prev Mover) (if (= (what (last To)) (id "Counter" Mover)) (max Moves (move Hop (from (last To)) (between (and (not (is In (between ) (sites ToClear))) (is Enemy (who (between )))) (apply (remove (between ) EndOfTurn))) (to (is Empty (to ))) (then (if (can Move (move Hop (from (last To)) (between (and (not (is In (between ) (sites ToClear))) (is Enemy (who (between )))) (apply (remove (between ) EndOfTurn))) (to (is Empty (to ))))) (moveAgain ) (if (is In (last To) (sites Next)) (promote (last To) (piece "DoubleCounter") Mover)))))) (max Moves (move Hop (from (last To)) (between 10 10 (and (not (is In (between ) (sites ToClear))) (is Enemy (who (between )))) (apply (remove (between ) EndOfTurn))) (to (is Empty (to ))) (then (if (can Move (hop (from (last To)) (between 10 10 (and (not (is In (between ) (sites ToClear))) (is Enemy (who (between ))))) (to (is Empty (to ))))) (moveAgain )))))) (priority {(max Moves (or (forEach Piece "Counter" (move Hop (from (from )) (between (and (not (is In (between ) (sites ToClear))) (is Enemy (who (between )))) (apply (remove (between ) EndOfTurn))) (to (is Empty (to ))) (then (if (can Move (move Hop (from (last To)) (between (and (not (is In (between ) (sites ToClear))) (is Enemy (who (between )))) (apply (remove (between ) EndOfTurn))) (to (is Empty (to ))))) (moveAgain ) (if (is In (last To) (sites Next)) (promote (last To) (piece "DoubleCounter") Mover)))))) (forEach Piece "DoubleCounter" (move Hop (between 10 10 (is Enemy (who (between ))) (apply (remove (between ) EndOfTurn))) (to (is Empty (to ))) (then (if (can Move (hop (from (last To)) (between 10 10 (and (not (is In (between ) (sites ToClear))) (is Enemy (who (between ))))) (to (is Empty (to ))))) (moveAgain ))))))) (or (forEach Piece "Counter" (move Step (directions {Forward FL FR}) (to (is Empty (to )))) (then (if (is In (last To) (sites Next)) (promote (last To) (piece "DoubleCounter") Mover)))) (forEach Piece "DoubleCounter" (move Slide)))}))) (end (if (no Moves Next) (result Mover Win)))))

TURNS - At each turn, each player must move one of his stones (called Kangaroos):
            - A stone must jump over one (orthogonal or diagonal) adjacent stone landing on the immediate next empty cell.
            - If the jumped enemy stones are captured and removed from the board.
            - Jumps can be multiple but are not mandatory.
            
        GOAL - The game ends when one player cannot move. The winner is the one with more stones.
(game "Kanguruh" (players 2) (equipment {(board (square 8)) (piece "Kangaroo" Each (move Hop (between (is Occupied (between ))) (to (is Empty (to )) (apply (and {(if (is Enemy (who (between ))) (remove (between ))) (remember Value (from )) (remember Value (to ))}))) (then (if (can Move (hop (from (last To)) (between (is Occupied (between ))) (to (and (is Empty (to )) (not (is In (to ) (values Remembered))))))) (moveAgain ) (forget Value All)))))}) (rules (start {(place "Kangaroo1" (expand (sites Bottom))) (place "Kangaroo2" (expand (sites Top)))}) (play (if (is Prev Mover) (or (move Pass (then (forget Value All))) (move Hop (from (last To)) (between (is Occupied (between ))) (to (and (is Empty (to )) (not (is In (to ) (values Remembered)))) (apply (and (if (is Enemy (who (between ))) (remove (between ))) (remember Value (to ))))) (then (if (can Move (hop (from (last To)) (between (is Occupied (between ))) (to (and (is Empty (to )) (not (is In (to ) (values Remembered))))))) (moveAgain ) (forget Value All))))) (forEach Piece))) (end (if (no Moves Next) (byScore {(score P1 (count Pieces P1)) (score P2 (count Pieces P2))})))))

3x5 intersecting lines. Six pieces per player, arranged on the two short rows on opposite sides of the board. Players alternate turns moving a piece to an empty adjacent spot. Pieces move orthogonally in a horizontal or forward direction only. To capture, a piece may jump over an adjacent opponent's piece to an empty spot immediately on the opposite side of the piece along the lines of the board. Pieces may capture in a backwards direction. The player who captures all of the opponent's pieces wins.
(game "Xarajlt" (players {(player N) (player S)}) (equipment {(board (rectangle 5 3) Vertex) (piece "Marker" Each (or (move Step (directions {Forward FR FL}) (to (is Empty (to )))) (move Hop Orthogonal (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to ))))))}) (rules (start {(place "Marker1" (expand (sites Bottom))) (place "Marker2" (expand (sites Top)))}) (play (forEach Piece)) (end (if (no Pieces Next) (result Next Loss)))))

5x5 board. Twelve pieces per player. Players alternate turns placing a piece on the board or moving a piece already on the board. Pieces move one space in any orthogonal direction. A player may capture an opponent's piece by hopping over it to an empty space on the other side of it. When a capture is made in this fashion, the player chooses another piece belonging to the opponent to capture in addition. The player who captures all of the opponent's pieces wins.
(game "Yote" (players 2) (equipment {(board (square 5)) (piece "Marker" Each (or (move Step Orthogonal (to (is Empty (to )))) (move Hop (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to ))) (then (moveAgain ))))) (hand Each)}) (rules (start (place "Marker" "Hand" 12)) (play (if (is Prev Mover) (move Remove (sites Occupied Next "Board")) (or (if (not (all Sites (sites Hand Mover) (= 0 (count Cell (site ))))) (move (from (handSite Mover)) (to (sites Empty)))) (forEach Piece)))) (end (if (no Pieces Next) (result Next Loss)))))

Played on an 8x8 board. 16 pieces per player, lined up in the second and third rows (first row on each side is empty). Pieces move forward or horizontally one space, and capture opponents' pieces by jumping in these directions. When they reach the opposite side, they become a king and can jump opponents' pieces from any distance orthogonally. Captures must be taken if possible, and the maximum number of jumps must be made. Multiple captures cannot be made by moving 180 degrees from the previous jump. Pieces can be promoted to king mid-jump. Winning is achieved by capturing all of the other player's pieces or by blocking them so they cannot move.
(game "Dama" (players 2) (equipment {(board (square 8)) (piece "Counter" P1 N) (piece "Counter" P2 S) (piece "DoubleCounter" Each) (regions P1 (sites Bottom)) (regions P2 (sites Top))}) (rules (start {(place "Counter1" (union (sites Row 1) (sites Row 2))) (place "Counter2" (union (sites Row 5) (sites Row 6)))}) (play (if (is Prev Mover) (if (= (what (last To)) (id "Counter" Mover)) (max Moves (move Hop (from (last To)) (directions {Forward Rightward Leftward}) (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to ))) (then (if (can Move (move Hop (from (last To)) (directions {Forward Rightward Leftward}) (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to ))))) (moveAgain ) (if (is In (last To) (sites Next)) (promote (last To) (piece "DoubleCounter") Mover)))))) (max Moves (move Hop (from (last To)) (difference Orthogonal OppositeDirection) (between (count Rows) (count Rows) (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to ))) (then (if (can Move (move Hop (from (last To)) (difference Orthogonal OppositeDirection) (between (count Rows) (count Rows) (and (not (is In (between ) (sites ToClear))) (is Enemy (who (between )))) (apply (remove (between )))) (to (is Empty (to ))))) (moveAgain )))))) (priority {(max Moves (or (forEach Piece "Counter" (move Hop (from (from )) (directions {Forward Rightward Leftward}) (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to ))) (then (if (can Move (move Hop (from (last To)) (directions {Forward Rightward Leftward}) (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to ))))) (moveAgain ) (if (is In (last To) (sites Next)) (promote (last To) (piece "DoubleCounter") Mover)))))) (forEach Piece "DoubleCounter" (move Hop (from ) Orthogonal (between (count Rows) (count Rows) (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to ))) (then (if (can Move (move Hop (from (last To)) (difference Orthogonal OppositeDirection) (between (count Rows) (count Rows) (and (not (is In (between ) (sites ToClear))) (is Enemy (who (between )))) (apply (remove (between )))) (to (is Empty (to ))))) (moveAgain ))))))) (or (forEach Piece "Counter" (move Step (directions {Forward Rightward Leftward}) (to (is Empty (to )))) (then (if (is In (last To) (sites Next)) (promote (last To) (piece "DoubleCounter") Mover)))) (forEach Piece "DoubleCounter" (move Slide Orthogonal)))}))) (end (if (no Moves Next) (result Mover Win)))))

9x9 intersecting lines forming a square. Forty pieces per player, lined up on the intersections on the rows closest to them, and the right half of the central line. Players alternate turns moving pieces to an empty adjacent spot along the lines. A piece may capture an opponent's piece by hopping over it to the empty spot immediately on the opposite side of it, following the lines of the board. Multiple captures are allowed. The player who captures all of the opponent's pieces wins.
(game "Challis Ghutia" (players 2) (equipment {(board (square 9) Vertex) (piece "Marker" Each (or (move Hop (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to ))) (then (if (can Move (hop (from (last To)) (between (and (not (is In (between ) (sites ToClear))) (is Enemy (who (between ))))) (to (is Empty (to ))))) (moveAgain )))) (move Step (to (is Empty (to ))))))}) (rules (start {(place "Marker1" (union (expand (sites Bottom) 3) (sites {"F5" "G5" "H5" "I5"}))) (place "Marker2" (union (expand (sites Top) 3) (sites {"A5" "B5" "C5" "D5"})))}) (play (if (is Prev Mover) (or (move Hop (from (last To)) (between (and (not (is In (between ) (sites ToClear))) (is Enemy (who (between )))) (apply (remove (between )))) (to (is Empty (to ))) (then (if (can Move (hop (from (last To)) (between (and (not (is In (between ) (sites ToClear))) (is Enemy (who (between ))))) (to (is Empty (to ))))) (moveAgain )))) (move Pass)) (forEach Piece))) (end (if (no Pieces Next) (result Next Loss)))))

5x5 board. Twelve pieces per player. Players alternate turns placing two pieces on the board, leaving the central space empty. Once all the pieces have been placed, players alternate turns moving one space orthogonally to an empty space. An opponent's piece may be captured by hopping over it to an empty space immediately on the opposite side of it in an orthogonal direction. Multiple captures are allowed, and a player is allowed to land on a space already landed on during the chain of captures. Captures are not compulsory. A player wins when they capture all of their opponent's pieces or the opponent cannot move.
(game "Mraha wa Bwe" (players 2) (equipment {(board (square 5)) (piece "Counter" Each) (hand Each)}) (rules (start (place "Counter" "Hand" 12)) {(phase "Placement" (play (move (from (handSite Mover)) (to (difference (sites Empty) (sites Centre))) (then (if (not (is Prev Mover)) (moveAgain ))))) (nextPhase Mover (is Empty (handSite Mover)) "Play")) (phase "Play" (play (if (is Prev Mover) (or (move Hop (from (last To)) Orthogonal (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to ))) (then (if (can Move (move Hop (from (last To)) Orthogonal (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to ))))) (moveAgain )))) (move Pass)) (or (forEach Piece "Counter" (move Hop (from (from )) Orthogonal (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to ))) (then (if (can Move (move Hop (from (last To)) Orthogonal (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to ))))) (moveAgain ))))) (forEach Piece "Counter" (move Step Orthogonal (to (is Empty (to )))))))))} (end (if (no Moves Mover) (result Mover Loss)))))

8x8 checkered board, with a black space on the bottom left corner. Sixteen pieces per player. Pieces begin on the second and third rows. Pieces move orthogonally or diagonally forwards or sideways. Pieces may capture only in an orthogonal direction, but not backwards, by hopping over an adjacent piece belonging  to the opponent to an empty space on the opposite adjacent side of the opponent's piece. Multiple captures are allowed, and the maximum number of possible  captures must be  taken. When a piece lands on the last row  opposite from the one where they began the game, it is promoted and may move in any direction and capture in any orthogonal direction. A piece may be promoted in the middle of its turn if further captures are possible. The player who captures all of the opponent's pieces wins. 
(game "Tama" (players 2) (equipment {(board (square 8)) (piece "Counter" P1 N) (piece "Counter" P2 S) (piece "DoubleCounter" Each) (regions P1 (sites Bottom)) (regions P2 (sites Top))}) (rules (start {(place "Counter1" (union (sites Row 1) (sites Row 2))) (place "Counter2" (union (sites Row 5) (sites Row 6)))}) (play (if (is Prev Mover) (if (= (what (last To)) (id "Counter" Mover)) (max Moves (move Hop (from (last To)) (directions {Forward Rightward Leftward}) (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to ))) (then (if (can Move (move Hop (from (last To)) (directions {Forward Rightward Leftward}) (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to ))))) (moveAgain ) (if (is In (last To) (sites Next)) (promote (last To) (piece "DoubleCounter") Mover)))))) (max Moves (move Hop (from (last To)) (difference Orthogonal OppositeDirection) (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to ))) (then (if (can Move (move Hop (from (last To)) (difference Orthogonal OppositeDirection) (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to ))))) (moveAgain )))))) (priority {(max Moves (or {(forEach Piece "Counter" (move Hop (from (from )) (directions {Forward Rightward Leftward}) (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to ))) (then (if (can Move (move Hop (from (last To)) (directions {Forward Rightward Leftward}) (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to ))))) (moveAgain ) (if (is In (last To) (sites Next)) (promote (last To) (piece "DoubleCounter") Mover)))))) (forEach Piece "DoubleCounter" (move Hop (from ) Orthogonal (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to ))) (then (if (can Move (move Hop (from (last To)) Orthogonal (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to ))))) (moveAgain )))))})) (or (forEach Piece "Counter" (move Step (directions {Forwards Rightward Leftward}) (to (is Empty (to )))) (then (if (is In (last To) (sites Next)) (promote (last To) (piece "DoubleCounter") Mover)))) (forEach Piece "DoubleCounter" (move Step (to (is Empty (to ))))))}))) (end (if (no Pieces Next) (result Next Loss)))))

10x10 board. The black player starts by removing one black piece either from one of the central four spaces of the board or from one of the four corners. The white player then must remove a white piece that is orthogonally adjacent to the empty space. Play proceeds by orthogonally jumping an opposing piece and capturing it. All moves must be capturing moves. Multiple captures can be made only by continuing in the same direction. The first player unable to move loses.
(game "Konane" (players 2) (equipment {(board (square 10)) (piece "Marker" Each)}) (rules (start {(place "Marker1" (sites Phase 1)) (place "Marker2" (sites Phase 0))}) {(phase "OpeningP1" P1 (play (move Remove (intersection (union (sites Corners) (sites Centre)) (sites Phase 1)))) (nextPhase Mover "Movement")) (phase "OpeningP2" P2 (play (move Remove (sites Around (last To) Own))) (nextPhase Mover "Movement")) (phase "Movement" (play (if (is Prev Mover) (or (move Hop (from (last To)) SameDirection (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to ))) (then (if (can Move (move Hop (from (last To)) SameDirection (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to ))))) (moveAgain )))) (move Pass)) (forEach Piece "Marker" (move Hop (from (from )) Orthogonal (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to ))) (then (if (can Move (move Hop (from (last To)) SameDirection (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to ))))) (moveAgain ))))))))} (end (if (no Moves Next) (result Next Loss)))))

Played on a board with two rows of five spaces forming an \"X,\" with an extra space diagonally adjacent to the central space. Ten sticks per player. Each player begins with one stick in each of the rightmost four spaces on the edge of the board closest to them. Players alternate turns moving a stick to an adjacent space. A player may capture one of the opponent's sticks by jumping over it to an empty space beyond it. The opponent replaces the captured stick with one of those remaining in their reserve, until there are no sticks remaining. The player who captures all of the opponent's sticks wins. 
(game "Queah Game" (players 2) (equipment {(board (rotate 45.0 (merge (shift 1.0 -1.0 (rectangle 5 1)) (merge (shift -1.0 1.0 (rectangle 1 5)) (square 3))))) (piece "Stick" Each (or (move Step Orthogonal (to (is Empty (to )))) (move Hop Orthogonal (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to )))))) (hand Each)}) (rules (start {(place "Stick1" {"A1" "B2" "A3" "B4"}) (place "Stick2" {"E5" "D4" "E3" "D2"}) (place "Stick" "Hand" 6)}) (play (if (and (not (all Sites (sites Hand Mover) (= 0 (count Cell (site ))))) (< (count Sites (sites Occupied Mover "Board")) 4)) (move (from (handSite Mover)) (to (sites Empty)) (then (moveAgain ))) (forEach Piece))) (end (if (no Pieces Next) (result Next Loss)))))

7x7 board. 24 pieces per player. Pieces begin in the rows closest to the player, and the three spaces to the right of the central space. Players alternate turns moving a piece orthogonally any distance. A player may capture an opponent's adjacent piece by hopping over it in an orthogonal direction to an empty space immediately on the opposite side of the opponent's piece. Multiple captures are allowed. The player who captures all of the opponent's pieces wins.
(game "Zuz Mel (7x7)" (players 2) (equipment {(board (square 7)) (piece "Marker" Each (or (move Hop Orthogonal (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to ))) (then (if (can Move (hop (from (last To)) Orthogonal (between (and (not (is In (between ) (sites ToClear))) (is Enemy (who (between ))))) (to (is Empty (to ))))) (moveAgain )))) (move Slide Orthogonal)))}) (rules (start {(place "Marker1" (union (expand (sites Bottom) 2) (sites {"F4" "G4" "E4"}))) (place "Marker2" (union (expand (sites Top) 2) (sites {"A4" "B4" "C4"})))}) (play (if (is Prev Mover) (or (move Hop (from (last To)) (between (and (not (is In (between ) (sites ToClear))) (is Enemy (who (between )))) (apply (remove (between )))) (to (is Empty (to ))) (then (if (can Move (hop (from (last To)) (between (and (not (is In (between ) (sites ToClear))) (is Enemy (who (between ))))) (to (is Empty (to ))))) (moveAgain )))) (move Pass)) (forEach Piece))) (end (if (no Pieces Next) (result Next Loss)))))

5x5 board. Twenty pieces per player. Players alternate turns placing pieces on the board, two at a time into the same square. At any time, a player may move one piece from a square one spot in an orthogonal direction. Pieces may capture opponent's pieces when either a single square or an unbroken line of squares with opponent's pieces has an empty space beyond it; the player's piece hops over the opponent's pieces and captures them all. When the unbroken line ends at the edge of the board, it is treated as though there were an empty square beyond the edge of the board, and the capturing piece is placed on the last space on the board in that line. Players may enter any reserved pieces on any turn as they see fit. The player to capture all of the opponent's pieces wins.
(game "T'oki" (players 2) (equipment {(board (square 5)) (piece "Marker" Each (or (move Step Orthogonal (to (is Empty (to )))) (move Hop Orthogonal (between (range 1 (count Rows)) (is Enemy (who (between ))) (apply (remove (between )))) (to (or (and (is In (to ) (sites Outer)) (is Enemy (who (to )))) (is Empty (to ))))))) (hand Each)}) (rules (start (place "Marker" "Hand" 20)) (play (or (move (from (handSite Mover)) (to (sites Empty)) 2) (forEach Piece))) (end (if (and (all Sites (sites Hand Next) (= 0 (count Cell (site )))) (no Pieces Next)) (result Mover Win)))))

Men can move one step forwards orthogonally or diagonally, or can jump an opponent's adjacent piece to capture it, in any direction. When a man ends its turn on the opposite edge of the board from its starting position, it becomes a king and may move or jump over any number of spaces in any direction. Captures are compulsory and the maximum number of jumps must be made. The first player unable to move, loses.
(game "Omnidirectional Draughts" (players 2) (equipment {(board (square 8)) (piece "Counter" P1 N) (piece "Counter" P2 S) (piece "DoubleCounter" Each) (regions P1 (sites Bottom)) (regions P2 (sites Top))}) (rules (start {(place "Counter1" (expand (sites Bottom) (- (/ 8 2) 2))) (place "Counter2" (expand (sites Top) (- (/ 8 2) 2)))}) (play (if (is Prev Mover) (if (= (what (last To)) (id "Counter" Mover)) (max Moves (move Hop (from (last To)) All (between (and (not (is In (between ) (sites ToClear))) (is Enemy (who (between )))) (apply (remove (between ) EndOfTurn))) (to (is Empty (to ))) (then (if (can Move (move Hop (from (last To)) All (between (and (not (is In (between ) (sites ToClear))) (is Enemy (who (between )))) (apply (remove (between ) EndOfTurn))) (to (is Empty (to ))))) (moveAgain ) (if (is In (last To) (sites Next)) (promote (last To) (piece "DoubleCounter") Mover)))))) (max Moves (move Hop (from (last To)) (between (count Rows) (count Rows) (and (not (is In (between ) (sites ToClear))) (is Enemy (who (between )))) (apply (remove (between ) EndOfTurn))) (to (is Empty (to ))) (then (if (can Move (hop (from (last To)) (between (count Rows) (count Rows) (and (not (is In (between ) (sites ToClear))) (is Enemy (who (between ))))) (to (is Empty (to ))))) (moveAgain )))))) (priority {(max Moves (or (forEach Piece "Counter" (move Hop (from (from )) All (between (and (not (is In (between ) (sites ToClear))) (is Enemy (who (between )))) (apply (remove (between ) EndOfTurn))) (to (is Empty (to ))) (then (if (can Move (move Hop (from (last To)) All (between (and (not (is In (between ) (sites ToClear))) (is Enemy (who (between )))) (apply (remove (between ) EndOfTurn))) (to (is Empty (to ))))) (moveAgain ) (if (is In (last To) (sites Next)) (promote (last To) (piece "DoubleCounter") Mover)))))) (forEach Piece "DoubleCounter" (move Hop (between (count Rows) (count Rows) (is Enemy (who (between ))) (apply (remove (between ) EndOfTurn))) (to (is Empty (to ))) (then (if (can Move (hop (from (last To)) (between (count Rows) (count Rows) (and (not (is In (between ) (sites ToClear))) (is Enemy (who (between ))))) (to (is Empty (to ))))) (moveAgain ))))))) (or (forEach Piece "Counter" (move Step (directions Forwards) (to (is Empty (to )))) (then (if (is In (last To) (sites Next)) (promote (last To) (piece "DoubleCounter") Mover)))) (forEach Piece "DoubleCounter" (move Slide)))}))) (end (if (no Moves Next) (result Mover Win)))))

5x5 board, the central square marked with an X. Twelve pieces per player. Pieces begin the game on the first two rows in front of the player, and in the two squares to the player's right in the central row. Players alternate turns moving a piece orthogonally to an adjacent empty space. Players may capture an opponent's piece by hopping over it. The player who captures all of the opponent's pieces wins.
(game "Natt Klab ash-Shawk" (players 2) (equipment {(board (square 5)) (piece "Marker" Each (or (move Step Orthogonal (to (is Empty (to )))) (move Hop Orthogonal (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to ))))))}) (rules (start {(place "Marker1" (union {(expand (sites Bottom)) (sites {"D3" "E3"})})) (place "Marker2" (union {(sites {"A3" "B3"}) (expand (sites Top))}))}) (play (forEach Piece)) (end (if (no Pieces Next) (result Next Loss)))))

5x5 board. Twelve pieces per player. Players alternate turns placing a piece on the board, leaving the central space empty. Once all of the pieces have been placed, players alternate turns moving a piece to an empty adjacent space in an orthogonal or diagonal direction. A player may capture an opponent's piece adjacent to one of their own by hopping over it to an empty space immediately on the opposite side of the opponent's piece. Multiple captures are allowed. The player who captures all of their opponent's pieces wins.
(game "Tides" (players 2) (equipment {(board (square 5)) (piece "Marker" Each (or (move Hop (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to ))) (then (if (can Move (hop (from (last To)) (between (and (not (is In (between ) (sites ToClear))) (is Enemy (who (between ))))) (to (is Empty (to ))))) (moveAgain )))) (move Step (to (is Empty (to )))))) (hand Each)}) (rules (start (place "Marker" "Hand" 12)) {(phase "Placement" (play (move (from (handSite Mover)) (to (difference (sites Board) (centrePoint )) (is Empty (to ))))) (nextPhase Mover (is Empty (handSite Mover)) "Move")) (phase "Move" (play (if (is Prev Mover) (or (move Hop (from (last To)) (between (and (not (is In (between ) (sites ToClear))) (is Enemy (who (between )))) (apply (remove (between )))) (to (is Empty (to ))) (then (if (can Move (hop (from (last To)) (between (and (not (is In (between ) (sites ToClear))) (is Enemy (who (between ))))) (to (is Empty (to ))))) (moveAgain )))) (move Pass)) (forEach Piece))) (end (if (no Pieces Next) (result Next Loss))))}))

Cross-shaped board, with any number of squares in the arm with a central square, and a number of pieces per player equal to the number of spaces in two arms. Three squares in each arm with six pieces per player is common. Players alternate turns placing pieces on the board. Players may not place pieces in the central space. When the pieces are placed, players alternate turns move a piece to am empty adjacent square, or hopping over an adjacent opponent's piece or an unbroken line of opponent's pieces with an empty space behind it. The player who captures all of the opponent's pieces wins.
        
(game "Laram Wali" (players 2) (equipment {(board (merge (shift 0.0 (/ (- (* 3.0 3.0) 3.0) 2.0) (rectangle 3 (* 3 3))) (shift (/ (- (* 3.0 3.0) 3.0) 2.0) 0.0 (rectangle (* 3 3) 3))) Cell) (hand Each) (piece "Marker" Each (or (move Step Orthogonal (to (is Empty (to )))) (move Hop Orthogonal (between (range 1 6) (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to ))))))}) (rules (start (place "Marker" "Hand" 6)) {(phase "Placement" (play (move (from (handSite Mover)) (to (difference (sites Empty) (expand (sites Centre) (- (/ 3 2) (if (is Even 3) 1 0))))))) (nextPhase (all Sites (sites Hand P2) (= 0 (count Cell (site )))) "Movement")) (phase "Movement" (play (forEach Piece)))} (end (if (no Pieces Next) (result Next Loss)))))

Cage is a checkers variant for two players played on a square 10x10 board. In this implementation you also have the option of playing on smaller boards. In the initial position, 50 checkers of one color and 50 checkers of a different color fill up the board in a checkered pattern. The goal of the game is to capture all your opponent's checkers.
            
            On your turn, if you can, you must choose one of two different kinds of moves to perform:
            • a single step, or
            • a sequence of jumps.
            Note: A single jump is considered a jump sequence of length 1.
            
            Universal restriction:
            All moves are subject to the following restriction:
            • At no time may a checker be orthogonally adjacent to a checker of the same color.
            
            Stepping:
            Stepping is moving one of your checkers to an orthogonally or diagonally adjacent empty square, and this kind of move is subject to the following two additional restrictions:
            • A step my never bring the number of orthogonal enemy neighbors of the moved checker down to 0.
            • The only condition under which a step may fail to bring the moved checker closer to the center of the line you are moving along is if it brings its number of orthogonal enemy neighbors up from 0.
            
            (Some elaboration on this last restriction: In general, a step must decrease the moved checker's straight line distance to the board's central intersection. That's the same as bringing it closer to the center of the orthogonal or diagonal line you are moving along. (Note: The center of a diagonal line is an intersection if it is an even number of squares long, and a square otherwise. The center of an orthogonal line is an edge if it is an even number of squares long, and a square otherwise.) Here is a different way of putting it: Whatever diagonal or orthogonal line you are stepping along, the largest distance to an edge square on this line before the step must be bigger than the largest distance to an edge square on the same line after the step. The only exception to this rule, as explained in the last restriction, is if your checker has no orthogonal neighbors and can step into such a relationship – then you may step in any direction.)
            
            Jumping sequences:
            If a checker of your color is orthogonally adjacent to an enemy checker, and immediately on the opposite side of that enemy checker is either an empty square or the outside of the board, your checker may initiate a sequence of jumps. You do this by jumping your checker over to the opposite side of the enemy checker and immediately removing the jumped piece. If your checker lands outside the board, it too is removed from the board. Note: If your last checker is removed when you capture your opponent's last checker, you still win.
            
        If the jumping checker lands in a position where it can jump again, your turn does not end, and the checker must make yet a jump. If there are several ways to continue the sequence, you may choose freely between these. The sequence of jumps only ends when the checker lands on a square where it can make no further jump.
(game "Cage" (players 2) (equipment {(board (square 12)) (piece "Disc" Each)}) (rules (start {(place "Disc1" (difference (sites Phase 0) (sites Outer))) (place "Disc2" (difference (sites Phase 1) (sites Outer)))}) (play (forEach Piece (if (!= 1 (var )) (or (move Hop (from ) Orthogonal (between (is Occupied (between )) (apply (remove (between )))) (to (and {(is Empty (to )) (= 0 (count Sites (sites Around (to ) Own Orthogonal)))})) (then (and {(remove (sites Outer)) (set Var 1) (if (can Move (move Hop (from (last To)) Orthogonal (between (is Occupied (between )) (apply (remove (between )))) (to (and {(is Empty (to )) (= 0 (count Sites (sites Around (to ) Own Orthogonal)))})))) (moveAgain ) (set Var 0))}))) (move Step (from ) (to (and {(is Empty (to )) (= 0 (count Sites (difference (sites Around (to ) Own Orthogonal) (sites {(from )})))) (not (and (< 0 (count Sites (sites Around (from ) Enemy Orthogonal))) (= 0 (count Sites (sites Around (to ) Enemy Orthogonal))))) (or {(and (= 0 (count Sites (sites Around (from ) Enemy Orthogonal))) (< 0 (count Sites (sites Around (to ) Enemy Orthogonal)))) (or {(and (or (= (from ) (+ (to ) 12)) (= (from ) (- (to ) 12))) (> (max (count Sites (sites Direction (from ) N)) (count Sites (sites Direction (from ) S))) (max (count Sites (sites Direction (to ) N)) (count Sites (sites Direction (to ) S))))) (and (or (= (from ) (+ (to ) 1)) (= (from ) (- (to ) 1))) (> (max (count Sites (sites Direction (from ) E)) (count Sites (sites Direction (from ) W))) (max (count Sites (sites Direction (to ) E)) (count Sites (sites Direction (to ) W))))) (and (or (= (from ) (+ (to ) (+ 12 1))) (= (from ) (- (to ) (+ 12 1)))) (> (max (count Sites (sites Direction (from ) SW)) (count Sites (sites Direction (from ) NE))) (max (count Sites (sites Direction (to ) SW)) (count Sites (sites Direction (to ) NE))))) (and (or (= (from ) (+ (to ) (- 12 1))) (= (from ) (- (to ) (- 12 1)))) (> (max (count Sites (sites Direction (from ) SE)) (count Sites (sites Direction (from ) NW))) (max (count Sites (sites Direction (to ) SE)) (count Sites (sites Direction (to ) NW)))))})})})))) (move Hop (from (= (from ) (last To))) Orthogonal (between (is Occupied (between )) (apply (remove (between )))) (to (and {(is Empty (to )) (= 0 (count Sites (sites Around (to ) Own Orthogonal)))})) (then (and {(remove (sites Outer)) (set Var 1) (if (can Move (move Hop (from (last To)) Orthogonal (between (is Occupied (between )) (apply (remove (between )))) (to (and {(is Empty (to )) (= 0 (count Sites (sites Around (to ) Own Orthogonal)))})))) (moveAgain ) (set Var 0))})))))) (end (if (or (= 0 (count Sites (sites Occupied P1))) (= 0 (count Sites (sites Occupied P2)))) (result Mover Win)))))

5x5 board. Twelve pieces per player, arranged in the two rows in front of each player, and in the right two squares in the central row (the central space is empty). Players alternate turns moving a piece to an adjacent orthogonal space. The player may capture an opponent's piece by hopping over it in an orthogonal direction. Multiple hops are allowed in the same turn, but captures are not compulsory, The player who captures all of their opponent's pieces wins.
(game "Koruboddo" (players 2) (equipment {(board (square 5)) (piece "Marker" Each (or (move Hop Orthogonal (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to ))) (then (if (can Move (hop (from (last To)) Orthogonal (between (and (not (is In (between ) (sites ToClear))) (is Enemy (who (between ))))) (to (is Empty (to ))))) (moveAgain )))) (move Step Orthogonal (to (is Empty (to ))))))}) (rules (start {(place "Marker1" (union {(sites Row 0) (sites Row 1) (sites {"A3" "B3"})})) (place "Marker2" (union {(sites Row 3) (sites Row 4) (sites {"D3" "E3"})}))}) (play (if (is Prev Mover) (or (move Hop (from (last To)) Orthogonal (between (and (not (is In (between ) (sites ToClear))) (is Enemy (who (between )))) (apply (remove (between )))) (to (is Empty (to ))) (then (if (can Move (hop (from (last To)) Orthogonal (between (and (not (is In (between ) (sites ToClear))) (is Enemy (who (between ))))) (to (is Empty (to ))))) (moveAgain )))) (move Pass)) (forEach Piece))) (end (if (no Pieces Next) (result Next Loss)))))

5x5 board. Twelve pieces per player. Pieces begin in the rows closest to the player, and the two spaces to the right of the central space. Players alternate turns moving a piece orthogonally any distance. A player may capture an opponent's adjacent piece by hopping over it in an orthogonal direction to an empty space immediately on the opposite side of the opponent's piece. Multiple captures are allowed. The player who captures all of the opponent's pieces wins.
(game "Zuz Mel (5x5)" (players 2) (equipment {(board (square 5)) (piece "Marker" Each (or (move Hop Orthogonal (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to ))) (then (if (can Move (hop (from (last To)) Orthogonal (between (and (not (is In (between ) (sites ToClear))) (is Enemy (who (between ))))) (to (is Empty (to ))))) (moveAgain )))) (move Slide Orthogonal)))}) (rules (start {(place "Marker1" (union (expand (sites Bottom)) (sites {"D3" "E3"}))) (place "Marker2" (union (expand (sites Top)) (sites {"A3" "B3"})))}) (play (if (is Prev Mover) (or (move Hop (from (last To)) (between (and (not (is In (between ) (sites ToClear))) (is Enemy (who (between )))) (apply (remove (between )))) (to (is Empty (to ))) (then (if (can Move (hop (from (last To)) (between (and (not (is In (between ) (sites ToClear))) (is Enemy (who (between ))))) (to (is Empty (to ))))) (moveAgain )))) (move Pass)) (forEach Piece))) (end (if (no Pieces Next) (result Next Loss)))))

7x7 lines, forming a grid. 21 pieces per player. The pieces begin on the three rows  closest to the player.  Pieces move forward orthogonally or sideways, never backwards. A piece may capture an adjacent opponent's piece by hopping over it to an empty adjacent spot immediately on the opposite side of it along the lines of the board. Multiple captures are allowed. Captures can only be made in the forward orthogonal or sideways directions also. The player who captures all of their opponent's pieces or who blocks them from being able to move wins.
(game "Tablo" (players {(player N) (player S)}) (equipment {(board (square 7) Vertex) (piece "Marker" Each (or {(move Step (directions {Forward Rightward Leftward}) (to (is Empty (to )))) (move Hop (directions {Forward Rightward Leftward}) (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to ))) (then (if (can Move (move Hop (from (last To)) (directions {Forward Rightward Leftward}) (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to ))))) (moveAgain ))))}))}) (rules (start {(place "Marker1" (expand (sites Bottom) 2)) (place "Marker2" (expand (sites Top) 2))}) (play (if (is Prev Mover) (and (move Hop (from (last To)) (directions {Forward Rightward Leftward}) (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to ))) (then (if (can Move (move Hop (from (last To)) (directions {Forward Rightward Leftward}) (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to ))))) (moveAgain )))) (move Pass)) (forEach Piece))) (end (if (no Moves Next) (result Mover Win)))))

The king player receives one king piece and an army of 18. The mob player gets 26 pieces. Play is set on a star shape board. Captures are done by jumping adjacent enemy pieces and are compulsory but not multiple. Only the King can move to one of the star point cells (the blue cells). If no possible capture, a player moves a pawn to an adjacent empty cell.
        The mob wins if the king is captured and the king player wins by getting the king piece to any of the points of the star.
(game "Louis XVI" (players 2) (equipment {(board (remove (hex 7) {0 1 2 4 5 6 7 8 9 12 13 14 15 16 22 23 57 45 70 34 58 82 46 71 69 81 56 44 68 92 55 80 120 121 122 124 125 126 112 113 114 117 118 119 103 104 110 111})) (piece "Pawn" Each) (piece "King" P2) (regions "GoalKing" (difference (sites Corners) (expand (sites Centre) 4)))}) (rules (start {(place "Pawn1" (difference (expand (sites Centre) 4) (expand (sites Centre) 3))) (place "Pawn2" (difference (expand (sites Centre) 2) (sites Centre))) (place "Pawn1" (difference (expand (sites Centre) 4) (expand (sites Centre) 3))) (place "King2" (sites Centre))}) (play (priority {(or (forEach Piece "Pawn" (move Hop (between (is Enemy (who (between )))) (to (and (not (is In (to ) (sites "GoalKing"))) (is Empty (to ))) (apply (remove (between )))))) (forEach Piece "King" (move Hop (between (is Enemy (who (between )))) (to (is Empty (to )))))) (or (forEach Piece "Pawn" (move Step (to (and (not (is In (to ) (sites "GoalKing"))) (is Empty (to ))) (apply (remove (between )))))) (forEach Piece "King" (move Step (to (is Empty (to ))))))})) (end {(if (= (where "King" P2) -1) (result P1 Win)) (if (is Within (id "King2") (sites "GoalKing")) (result P2 Win))})))

Played on a 8x8 board. Each player has two stones, who can jump over any other stone. Enemy stones jumped over are captured. First player unable to move loses.
(game "Leap Frog" (players 2) (equipment {(board (square 8)) (piece "Marker" Each (move Hop (between (is Occupied (between )) (apply (if (is Enemy (who (between ))) (remove (between ))))) (to (is Empty (to )))))}) (rules (start {(place "Marker1" {"B4" "C5" "C6" "D2" "D4" "D6" "E3" "E5" "E7" "F3" "F4" "G5"}) (place "Marker2" {"B5" "C3" "C4" "D3" "D5" "D7" "E2" "E4" "E6" "F5" "F6" "G4"})}) (play (forEach Piece)) (end (if (no Moves Next) (result Mover Win)))))

3x8 board. The second space from the left and from the right in the center row are marked with an X. Eight pieces per player, which begin in the row closest to the player. Players alternate turns moving a piece to an empty adjacent space in an orthogonal direction. On the first move of a piece, that piece may move two spaces in one direction. A player may capture an opponent's piece in the central row by hopping over it to an empty space on the opposite side of it. The player who reduces their opponent to fewer than four pieces wins.
(game "Caturvimsatikosthakatmiki Krida" (players 2) (equipment {(board (rectangle 3 8)) (piece "Marker" Each (or {(move Hop Orthogonal (between (and (is Enemy (who (between ))) (not (is In (between ) (union (sites Bottom) (sites Top))))) (apply (remove (between )))) (to (is Empty (to )))) (move Step Orthogonal (to (is Empty (to )))) (if (= 1 (state (from ))) (move Slide Orthogonal (between (exact 2) (is Empty (between ))) (then (set State (last To) 0))))}))}) (rules (start {(place "Marker1" (sites Bottom) 1) (place "Marker2" (sites Top) 1)}) (play (forEach Piece)) (end (if (<= (count Pieces Next) 3) (result Next Loss)))))

8x8 board. 16 pieces per player, lined up in the second and third rows (first row on each side is empty). Pieces move forward or horizontally one space, and capture opponents' pieces by jumping in these directions. When they reach the opposite side, they become a king and can jump opponents' pieces from any distance orthogonally. Multiple captures cannot be made by moving 180 degrees from the previous jump. Pieces can be promoted to king mid-jump. Winning is achieved by capturing all of the other player's pieces or by blocking them so they cannot move.
        
(game "Dama (Comoros)" (players 2) (equipment {(board (square 8)) (piece "Counter" P1 N) (piece "Counter" P2 S) (piece "DoubleCounter" Each) (regions P1 (sites Bottom)) (regions P2 (sites Top))}) (rules (start {(place "Counter1" (union (sites Row 1) (sites Row 2))) (place "Counter2" (union (sites Row 5) (sites Row 6)))}) (play (if (is Prev Mover) (or (if (= (what (last To)) (id "Counter" Mover)) (move Hop (from (last To)) (directions {Forward Rightward Leftward}) (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to ))) (then (if (can Move (move Hop (from (last To)) (directions {Forward Rightward Leftward}) (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to ))))) (moveAgain ) (if (is In (last To) (sites Next)) (promote (last To) (piece "DoubleCounter") Mover))))) (move Hop (from (last To)) (difference Orthogonal OppositeDirection) (between (count Rows) (count Rows) (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to ))) (then (if (can Move (move Hop (from (last To)) (difference Orthogonal OppositeDirection) (between (count Rows) (count Rows) (and (not (is In (between ) (sites ToClear))) (is Enemy (who (between )))) (apply (remove (between )))) (to (is Empty (to ))))) (moveAgain ))))) (move Pass)) (or {(forEach Piece "Counter" (move Hop (from (from )) (directions {Forward Rightward Leftward}) (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to ))) (then (if (can Move (move Hop (from (last To)) (directions {Forward Rightward Leftward}) (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to ))))) (moveAgain ) (if (is In (last To) (sites Next)) (promote (last To) (piece "DoubleCounter") Mover)))))) (forEach Piece "DoubleCounter" (move Hop (from ) Orthogonal (between (count Rows) (count Rows) (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to ))) (then (if (can Move (move Hop (from (last To)) (difference Orthogonal OppositeDirection) (between (count Rows) (count Rows) (and (not (is In (between ) (sites ToClear))) (is Enemy (who (between )))) (apply (remove (between )))) (to (is Empty (to ))))) (moveAgain ))))) (forEach Piece "Counter" (move Step (directions {Forward Rightward Leftward}) (to (is Empty (to )))) (then (if (is In (last To) (sites Next)) (promote (last To) (piece "DoubleCounter") Mover)))) (forEach Piece "DoubleCounter" (move Slide Orthogonal))}))) (end (if (no Moves Next) (result Mover Win)))))

8x8 board. 16 pieces per player, lined up in the second and third rows (first row on each side is empty). Pieces move forward or horizontally one space, and capture opponents' pieces by jumping in these directions. When they reach the opposite side, they become a king and can jump opponents' pieces from any distance orthogonally. Captures must be taken if possible, and the maximum number of jumps must be made. In a situation where two pieces are able to make the maximum number of captures and one of them is a king, the king must make the captures. Multiple captures cannot be made by moving 180 degrees from the previous jump. Pieces can be promoted to king mid-jump. Winning is achieved by capturing all of the other player's pieces or by blocking them so they cannot move.
(game "Dama (Kenya)" (players 2) (equipment {(board (square 8)) (piece "Counter" P1 N) (piece "Counter" P2 S) (piece "DoubleCounter" Each) (regions P1 (sites Bottom)) (regions P2 (sites Top))}) (rules (start {(place "Counter1" (union (sites Row 1) (sites Row 2))) (place "Counter2" (union (sites Row 5) (sites Row 6)))}) (play (if (is Prev Mover) (if (= (what (last To)) (id "Counter" Mover)) (max Moves (move Hop (from (last To)) (directions {Forward Rightward Leftward}) (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to ))) (then (if (can Move (move Hop (from (last To)) (directions {Forward Rightward Leftward}) (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to ))))) (moveAgain ) (if (is In (last To) (sites Next)) (promote (last To) (piece "DoubleCounter") Mover)))))) (max Moves (move Hop (from (last To)) (difference Orthogonal OppositeDirection) (between (count Rows) (count Rows) (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to ))) (then (if (can Move (move Hop (from (last To)) (difference Orthogonal OppositeDirection) (between (count Rows) (count Rows) (and (not (is In (between ) (sites ToClear))) (is Enemy (who (between )))) (apply (remove (between )))) (to (is Empty (to ))))) (moveAgain )))))) (priority {(max Moves (priority {(forEach Piece "DoubleCounter" (move Hop (from ) Orthogonal (between (count Rows) (count Rows) (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to ))) (then (if (can Move (move Hop (from (last To)) (difference Orthogonal OppositeDirection) (between (count Rows) (count Rows) (and (not (is In (between ) (sites ToClear))) (is Enemy (who (between )))) (apply (remove (between )))) (to (is Empty (to ))))) (moveAgain ))))) (forEach Piece "Counter" (move Hop (from (from )) (directions {Forward Rightward Leftward}) (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to ))) (then (if (can Move (move Hop (from (last To)) (directions {Forward Rightward Leftward}) (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to ))))) (moveAgain ) (if (is In (last To) (sites Next)) (promote (last To) (piece "DoubleCounter") Mover))))))})) (or (forEach Piece "Counter" (move Step (directions {Forward Rightward Leftward}) (to (is Empty (to )))) (then (if (is In (last To) (sites Next)) (promote (last To) (piece "DoubleCounter") Mover)))) (forEach Piece "DoubleCounter" (move Slide Orthogonal)))}))) (end (if (no Moves Next) (result Mover Win)))))

3x3 crossed lines, pieces move on the intersections and along the lines. Three pieces per player. In the placement phase, players alternate turns placing one of their pieces on an empty spot. When all of the pieces are placed, Players attempt to capture their opponent's pieces by hopping over them. The player who captures all of the opponent's pieces wins.
(game "Tre Guti" (players 2) (equipment {(board (square 3) Vertex) (hand Each) (piece "Marker" Each (or (move Step (to (is Empty (to )))) (move Hop (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to ))))))}) (rules (start (place "Marker" "Hand" 3)) {(phase "Placement" (play (move (from (handSite Mover)) (to (sites Empty)))) (nextPhase (all Sites (sites Hand P2) (= 0 (count Cell (site )))) "Movement")) (phase "Movement" (play (forEach Piece)))} (end (if (no Pieces Next) (result Next Loss)))))

MOVE - Stones may move to an adjacent (orthogonal or diagonal) empty cell.
            
            CAPTURE - Stones capture by jumping over an enemy stone and landing in the immediate opposite empty cell.
            - Captures are mandatory.
            - Captures are multiple and the player must choose the jumping sequence that captures more enemy stones.
            
        GOAL - A player wins when it captures all enemy stones, or when he moves his last remaining stone to the center cell.
(game "Jumping Beans" (players 2) (equipment {(board (square 7)) (piece "Bean" Each (move Step (to (is Empty (to )))))}) (rules (start {(place "Bean1" (forEach (sites Board) (< (site ) (centrePoint )))) (place "Bean2" (forEach (sites Board) (> (site ) (centrePoint ))))}) (play (if (is Prev Mover) (max Moves (move Hop (from (last To)) (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to ))) (then (if (can Move (move Hop (from (last To)) (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to ))))) (moveAgain ))))) (priority {(max Moves (forEach Piece (move Hop (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to ))) (then (if (can Move (move Hop (from (last To)) (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to ))))) (moveAgain )))))) (forEach Piece)}))) (end (if (or (no Pieces Next) (and (= 1 (count Pieces Mover)) (= (centrePoint ) (where "Bean" Mover)))) (result Mover Win)))))

Five rows of five holes. Each player has twelve sticks; one player's sticks are longer than the other player's. Players alternate turns placing one of their sticks in an empty hole on the board. A player may, on their turn, move a stick to an empty adjacent hole in an orthogonal direction instead of placing a stick. Players do not have to place all of their sticks before moving, but if they wish to place a stick after they have already moved, the opponent must also place a stick on their following turn. A player captures an opponent's stick by hopping over it in an orthogonal direction to an empty hole immediately on the opposite side of the opponent's stick. The player who captures all of the opponent's pieces wins.
(game "Choko" (players 2) (equipment {(board (square 5) Vertex) (piece "Stick" Each (or (move Step Orthogonal (to (is Empty (to )))) (move Hop Orthogonal (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to )))))) (hand Each) (regions "AllSites" (sites Board))}) (rules (start (place "Stick" "Hand" 12)) (play (if (is Pending) (move (from (handSite Mover)) (to (sites Empty))) (or (if (not (all Sites (sites Hand Mover) (= 0 (count Cell (site ))))) (move (from (handSite Mover)) (to (sites Empty)) (then (set Pending)))) (forEach Piece)))) (end (if (no Pieces Next) (result Next Loss)))))

8x8 board. Eight pieces per player, which begin on alternating squares in the first two rows on opposing sides of the board. Players alternate turns moving one of their pieces to an adjacent space. Pieces move diagonally forward only. A piece may capture one of the opponent's adjacent pieces by hopping over it to an empty adjacent space immediately on the opposite side of the opponent's piece. Multiple captures are not allowed. When a piece arrives at the opposite edge of the board from where it began, it is promoted and may move diagonally forward or backward. The player who captures all of the opponent's pieces wins.
(game "Doov" (players {(player N) (player S)}) (equipment {(board (square 8)) (piece "Counter" P1 N) (piece "Counter" P2 S) (piece "DoubleCounter" Each) (regions P1 (sites Bottom)) (regions P2 (sites Top))}) (rules (start {(place "Counter1" (difference (expand (sites Bottom) (- 2 1)) (sites Phase 1))) (place "Counter2" (difference (expand (sites Top) (- 2 1)) (sites Phase 1)))}) (play (or (or (forEach Piece "Counter" (move Hop (from ) (directions {FR FL}) (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to ))) (then (if (is In (last To) (sites Next)) (promote (last To) (piece "DoubleCounter") Mover))))) (forEach Piece "DoubleCounter" (move Hop Diagonal (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to )))))) (or (forEach Piece "Counter" (move Step (directions {FR FL}) (to (is Empty (to )))) (then (if (is In (last To) (sites Next)) (promote (last To) (piece "DoubleCounter") Mover)))) (forEach Piece "DoubleCounter" (move Step Diagonal (to (is Empty (to )))))))) (end (if (no Moves Next) (result Mover Win)))))

10x10 board, 20 pieces per player, arranged on the dark squares, leaving the diagonal from bottom left to top right empty, with each player's pieces on opposite sides of it. Pieces move diagonally one or can jump an opponent's adjacent player to capture it. Pieces can move forward or backwards. When a piece reaches the opposite edge of the board from its starting position, it becomes a king and can may move and jump over any number of spaces diagonally. Captures are compulsory and the maximum number of jumps must be made. Winning is achieved by capturing all the opponent's pieces or by blocking them from moving.
        
(game "Diagonal Draughts" (players 2) (equipment {(board (square 10)) (piece "Counter" P1 N) (piece "Counter" P2 S) (piece "DoubleCounter" Each) (regions P1 (sites Bottom)) (regions P2 (sites Top))}) (rules (start {(place "Counter1" (difference (expand (intersection (sites Right) (sites Bottom)) 8 Orthogonal) (sites Phase 1))) (place "Counter2" (difference (expand (intersection (sites Left) (sites Top)) 8 Orthogonal) (sites Phase 1)))}) (play (if (is Prev Mover) (if (= (what (last To)) (id "Counter" Mover)) (max Moves (move Hop (from (last To)) Diagonal (between (and (not (is In (between ) (sites ToClear))) (is Enemy (who (between )))) (apply (remove (between ) EndOfTurn))) (to (is Empty (to ))) (then (if (can Move (move Hop (from (last To)) Diagonal (between (and (not (is In (between ) (sites ToClear))) (is Enemy (who (between )))) (apply (remove (between ) EndOfTurn))) (to (is Empty (to ))))) (moveAgain ) (if (is In (last To) (sites Next)) (promote (last To) (piece "DoubleCounter") Mover)))))) (max Moves (move Hop (from (last To)) Diagonal (between (count Rows) (count Rows) (and (not (is In (between ) (sites ToClear))) (is Enemy (who (between )))) (apply (remove (between ) EndOfTurn))) (to (is Empty (to ))) (then (if (can Move (hop (from (last To)) Diagonal (between (count Rows) (count Rows) (and (not (is In (between ) (sites ToClear))) (is Enemy (who (between ))))) (to (is Empty (to ))))) (moveAgain )))))) (priority {(max Moves (or (forEach Piece "Counter" (move Hop (from ) Diagonal (between (and (not (is In (between ) (sites ToClear))) (is Enemy (who (between )))) (apply (remove (between ) EndOfTurn))) (to (is Empty (to ))) (then (if (can Move (move Hop (from (last To)) Diagonal (between (and (not (is In (between ) (sites ToClear))) (is Enemy (who (between )))) (apply (remove (between ) EndOfTurn))) (to (is Empty (to ))))) (moveAgain ) (if (is In (last To) (sites Next)) (promote (last To) (piece "DoubleCounter") Mover)))))) (forEach Piece "DoubleCounter" (move Hop Diagonal (between (count Rows) (count Rows) (is Enemy (who (between ))) (apply (remove (between ) EndOfTurn))) (to (is Empty (to ))) (then (if (can Move (hop (from (last To)) Diagonal (between (count Rows) (count Rows) (and (not (is In (between ) (sites ToClear))) (is Enemy (who (between ))))) (to (is Empty (to ))))) (moveAgain ))))))) (or (forEach Piece "Counter" (move Step Diagonal (to (is Empty (to )))) (then (if (is In (last To) (sites Next)) (promote (last To) (piece "DoubleCounter") Mover)))) (forEach Piece "DoubleCounter" (move Slide Diagonal)))}))) (end (if (no Moves Next) (result Mover Win)))))

10x10 board, 20 pieces per player. Pieces move diagonally one or can jump an opponent's adjacent player to capture it. Pieces can move forward or backwards. When a piece reaches the opposite edge of the board from its starting position, it becomes a king and can may move and jump over any number of spaces diagonally. Captures are compulsory and the maximum number of jumps must be made. Winning is achieved by capturing all the opponent's pieces or by blocking them from moving.
(game "International Draughts" (players {(player N) (player S)}) (equipment {(board (square 10)) (piece "Counter" P1 N) (piece "Counter" P2 S) (piece "DoubleCounter" Each) (regions P1 (sites Bottom)) (regions P2 (sites Top))}) (rules (start {(place "Counter1" (difference (expand (sites Bottom) (- 4 1)) (sites Phase 1))) (place "Counter2" (difference (expand (sites Top) (- 4 1)) (sites Phase 1)))}) (play (if (is Prev Mover) (if (= (what (last To)) (id "Counter" Mover)) (max Moves (move Hop (from (last To)) Diagonal (between (and (not (is In (between ) (sites ToClear))) (is Enemy (who (between )))) (apply (remove (between ) EndOfTurn))) (to (is Empty (to ))) (then (if (can Move (move Hop (from (last To)) Diagonal (between (and (not (is In (between ) (sites ToClear))) (is Enemy (who (between )))) (apply (remove (between ) EndOfTurn))) (to (is Empty (to ))))) (moveAgain ) (if (is In (last To) (sites Next)) (promote (last To) (piece "DoubleCounter") Mover)))))) (max Moves (move Hop (from (last To)) Diagonal (between (count Rows) (count Rows) (and (not (is In (between ) (sites ToClear))) (is Enemy (who (between )))) (apply (remove (between ) EndOfTurn))) (to (is Empty (to ))) (then (if (can Move (hop (from (last To)) Diagonal (between (count Rows) (count Rows) (and (not (is In (between ) (sites ToClear))) (is Enemy (who (between ))))) (to (is Empty (to ))))) (moveAgain )))))) (priority {(max Moves (or (forEach Piece "Counter" (move Hop (from ) Diagonal (between (and (not (is In (between ) (sites ToClear))) (is Enemy (who (between )))) (apply (remove (between ) EndOfTurn))) (to (is Empty (to ))) (then (if (can Move (move Hop (from (last To)) Diagonal (between (and (not (is In (between ) (sites ToClear))) (is Enemy (who (between )))) (apply (remove (between ) EndOfTurn))) (to (is Empty (to ))))) (moveAgain ) (if (is In (last To) (sites Next)) (promote (last To) (piece "DoubleCounter") Mover)))))) (forEach Piece "DoubleCounter" (move Hop Diagonal (between (count Rows) (count Rows) (is Enemy (who (between ))) (apply (remove (between ) EndOfTurn))) (to (is Empty (to ))) (then (if (can Move (hop (from (last To)) Diagonal (between (count Rows) (count Rows) (and (not (is In (between ) (sites ToClear))) (is Enemy (who (between ))))) (to (is Empty (to ))))) (moveAgain ))))))) (or (forEach Piece "Counter" (move Step (directions {FR FL}) (to (is Empty (to )))) (then (if (is In (last To) (sites Next)) (promote (last To) (piece "DoubleCounter") Mover)))) (forEach Piece "DoubleCounter" (move Slide Diagonal)))}))) (end (if (no Moves Next) (result Mover Win)))))

Played on an 8x8 board with each player having twelve pieces. Pieces move diagonally one space forward, and can capture opponent's pieces by jumping them if they are adjacent. Capturing is not mandatory. Multiple captures are allowed. Once pieces reach the opposite side of the board from their starting position, they become kings and can move diagonally either forwards or backwards. The goal is to capture all of the opponent's pieces.
        
(game "Pleasant Draughts" (players {(player N) (player S)}) (equipment {(board (square 8)) (piece "Counter" P1 N) (piece "Counter" P2 S) (piece "DoubleCounter" Each) (regions P1 (sites Bottom)) (regions P2 (sites Top))}) (rules (start {(place "Counter1" (difference (expand (sites Bottom) (- 3 1)) (sites Phase 1))) (place "Counter2" (difference (expand (sites Top) (- 3 1)) (sites Phase 1)))}) (play (if (is Prev Mover) (or (if (= (what (last To)) (id "Counter" Mover)) (move Hop (from (last To)) (directions {FR FL}) (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to ))) (then (if (is In (last To) (sites Next)) (promote (last To) (piece "DoubleCounter") Mover) (if (can Move (move Hop (from (last To)) (directions {FR FL}) (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to ))))) (moveAgain ))))) (move Hop (from (last To)) Diagonal (between (and (not (is In (between ) (sites ToClear))) (is Enemy (who (between )))) (apply (remove (between )))) (to (is Empty (to ))) (then (if (can Move (hop (from (last To)) Diagonal (between (and (not (is In (between ) (sites ToClear))) (is Enemy (who (between ))))) (to (is Empty (to ))))) (moveAgain ))))) (move Pass)) (or (forEach Piece "Counter" (or (move Hop (from ) (directions {FR FL}) (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to ))) (then (if (is In (last To) (sites Next)) (promote (last To) (piece "DoubleCounter") Mover) (if (can Move (move Hop (from (last To)) (directions {FR FL}) (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to ))))) (moveAgain ))))) (move Step (directions {FR FL}) (to (is Empty (to )))) (then (if (is In (last To) (sites Next)) (promote (last To) (piece "DoubleCounter") Mover))))) (forEach Piece "DoubleCounter" (or (move Step Diagonal (to (is Empty (to )))) (move Hop Diagonal (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to ))) (then (if (can Move (hop (from (last To)) Diagonal (between (and (not (is In (between ) (sites ToClear))) (is Enemy (who (between ))))) (to (is Empty (to ))))) (moveAgain ))))))))) (end (if (no Pieces Next) (result Next Loss)))))

Played on a 12x12 board with 30 pieces per player, arranged on the dark squares. Pieces move diagonally one or can jump an opponent's adjacent player to capture it. Pieces can move forward or backwards. When a piece reaches the opposite edge of the board from its starting position, it becomes a king and can may move and jump over any number of spaces diagonally. Captures are compulsory and the maximum number of jumps must be made. Winning is achieved by capturing all the opponent's pieces or by blocking them from moving.
(game "Canadian Draughts" (players 2) (equipment {(board (square 12)) (piece "Counter" P1 N) (piece "Counter" P2 S) (piece "DoubleCounter" Each) (regions P1 (sites Bottom)) (regions P2 (sites Top))}) (rules (start {(place "Counter1" (difference (expand (sites Bottom) (- 5 1)) (sites Phase 1))) (place "Counter2" (difference (expand (sites Top) (- 5 1)) (sites Phase 1)))}) (play (if (is Prev Mover) (if (= (what (last To)) (id "Counter" Mover)) (max Moves (move Hop (from (last To)) Diagonal (between (and (not (is In (between ) (sites ToClear))) (is Enemy (who (between )))) (apply (remove (between ) EndOfTurn))) (to (is Empty (to ))) (then (if (can Move (move Hop (from (last To)) Diagonal (between (and (not (is In (between ) (sites ToClear))) (is Enemy (who (between )))) (apply (remove (between ) EndOfTurn))) (to (is Empty (to ))))) (moveAgain ) (if (is In (last To) (sites Next)) (promote (last To) (piece "DoubleCounter") Mover)))))) (max Moves (move Hop (from (last To)) Diagonal (between (count Rows) (count Rows) (and (not (is In (between ) (sites ToClear))) (is Enemy (who (between )))) (apply (remove (between ) EndOfTurn))) (to (is Empty (to ))) (then (if (can Move (hop (from (last To)) Diagonal (between (count Rows) (count Rows) (and (not (is In (between ) (sites ToClear))) (is Enemy (who (between ))))) (to (is Empty (to ))))) (moveAgain )))))) (priority {(max Moves (or (forEach Piece "Counter" (move Hop (from ) Diagonal (between (and (not (is In (between ) (sites ToClear))) (is Enemy (who (between )))) (apply (remove (between ) EndOfTurn))) (to (is Empty (to ))) (then (if (can Move (move Hop (from (last To)) Diagonal (between (and (not (is In (between ) (sites ToClear))) (is Enemy (who (between )))) (apply (remove (between ) EndOfTurn))) (to (is Empty (to ))))) (moveAgain ) (if (is In (last To) (sites Next)) (promote (last To) (piece "DoubleCounter") Mover)))))) (forEach Piece "DoubleCounter" (move Hop Diagonal (between (count Rows) (count Rows) (is Enemy (who (between ))) (apply (remove (between ) EndOfTurn))) (to (is Empty (to ))) (then (if (can Move (hop (from (last To)) Diagonal (between (count Rows) (count Rows) (and (not (is In (between ) (sites ToClear))) (is Enemy (who (between ))))) (to (is Empty (to ))))) (moveAgain ))))))) (or (forEach Piece "Counter" (move Step (directions {FR FL}) (to (is Empty (to )))) (then (if (is In (last To) (sites Next)) (promote (last To) (piece "DoubleCounter") Mover)))) (forEach Piece "DoubleCounter" (move Slide Diagonal)))}))) (end (if (no Moves Next) (result Mover Win)))))

This game is played on an empty 8x8 square chess board. Use 6 checkers and 66 Go stones.
            
            The Counterinsurgent (COIN) player places his checkers on black squares in the middle of the board. The Guerrilla player starts with no pieces on the board, but begins by placing one stone anywhere on the board, then a second stone orthogonally adjacent to the first.
            
            The Guerrilla player does not move his pieces. Instead, he places two and only two stones per turn on the board, on the intersections of the squares.
            The first stone must be orthogonally adjacent to any stone on the board; the second stone must be orthogonally adjacent to the first stone placed.
            He may not place stones on the board edge points.
            He captures an enemy checker by surrounding it.
            
            COIN player moves one checker per turn, one square diagonally as a King in regular checkers, or makes captures by jumping over the point between two squares.
            He is not forced to capture if he does not want to, but if he does he must take all possible captures. Captured stones are removed from the board.
            
        GOAL - The player who clears the board of all enemy pieces at the end of his turn wins. The Guerrilla player loses if he runs out of stones
(game "Guerrilla Checkers" (players 2) (equipment {(board (square 9) Vertex) (hand P1) (piece "Marker" P1) (piece "Counter" P2 (move Step (from Cell) Diagonal (to Cell (is Empty Cell (to ))) (then (forEach Site (intersection (sites Incident Vertex Cell (last From)) (sites Incident Vertex Cell (last To))) (if (is Enemy (who (site ))) (remove (site ) (then (if (can Move (move (from Cell (last To)) (to Cell (forEach (sites Around Cell (from ) Diagonal) (and (is Empty Cell (site )) (!= 0 (count Sites (forEach (intersection (sites Incident Vertex Cell (site )) (sites Incident Vertex Cell (from ))) (is Enemy (who (site ))))))))) (then (forEach Site (intersection (sites Incident Vertex Cell (last From)) (sites Incident Vertex Cell (last To))) (if (is Enemy (who (site ))) (remove (site ))))))) (moveAgain )))))))))}) (rules (start {(place "Counter2" Cell {"E3" "D4" "C5" "D6" "E5" "F4"}) (place "Marker1" "Hand1" 66)}) {(phase "InitGuerrilla" P1 (play (move (from (handSite Mover)) (to Vertex (difference (sites Empty Vertex) (sites Outer))) (then (moveAgain )))) (nextPhase (is Next Mover) "GuerrillaMove")) (phase "GuerrillaMove" P1 (play (if (is Prev Mover) (move (from (handSite Mover)) (to Vertex (difference (sites Around (last To) Orthogonal (is Empty (to ))) (sites Outer))) (then (forEach Site (forEach (sites Occupied P2 Cell) (all Sites (sites Incident Vertex Cell (site )) (is Occupied Vertex (site )))) (remove Cell (site ))))) (move (from (handSite Mover)) (to Vertex (difference (sites Empty Vertex) (sites Outer)) (not (= (count Sites (sites Around (to ) Own Orthogonal)) 0))) (then (and (forEach Site (forEach (sites Occupied P2 Cell) (all Sites (sites Incident Vertex Cell (site )) (is Occupied Vertex (site )))) (remove Cell (site ))) (moveAgain ))))))) (phase "CoinMove" P2 (play (if (is Prev Mover) (move (from Cell (last To)) (to Cell (forEach (sites Around Cell (from ) Diagonal) (and (is Empty Cell (site )) (!= 0 (count Sites (forEach (intersection (sites Incident Vertex Cell (site )) (sites Incident Vertex Cell (from ))) (is Enemy (who (site ))))))))) (then (forEach Site (intersection (sites Incident Vertex Cell (last From)) (sites Incident Vertex Cell (last To))) (if (is Enemy (who (site ))) (remove (site ) (then (if (can Move (move (from Cell (last To)) (to Cell (forEach (sites Around Cell (from ) Diagonal) (and (is Empty Cell (site )) (!= 0 (count Sites (forEach (intersection (sites Incident Vertex Cell (site )) (sites Incident Vertex Cell (from ))) (is Enemy (who (site ))))))))) (then (forEach Site (intersection (sites Incident Vertex Cell (last From)) (sites Incident Vertex Cell (last To))) (if (is Enemy (who (site ))) (remove (site ))))))) (moveAgain )))))))) (forEach Piece))))} (end (if (no Moves Next) (result Mover Win)))))

In Seesaw Draughts, when a man reaches the rank farthest away in its stepping direction, its capture range is increased and it changes the direction it steps in. It can thereby promote again if it reaches the opposite rank.
            
            The mechanism is implemented like this: All men are stacks. Single pieces are stacks of size 1. Every time a man promotes a piece is added to it, so it's stack size increases by 1. The following two-fold meaning of stack size is the key idea:
        1) Odd stacks step forwards and even stacks step backwards.
    2) A stack of size n can capture a piece up to n steps away in a straight line provided that there are no pieces between the capturing piece and its target, and that the square immediately behind the target in the capture direction is empty. The capturing piece must land there.
    
    Thus, the men gradually acquire the capturing power of a king in Thai Checkers as they seesaw up and down the board.
    
    There is no obligation to choose the capture sequence that maximizes the number of pieces captured. We deem this calculation a bit too demanding when a stack's range is a function of its size.
    
Other than this, the rules are as in Brazillian Draughts/Checkers, which is like International Draughts, but on 8x8.
(game "Seesaw Draughts" (players 2) (equipment {(board (square 8)) (piece "Disc" P1 N) (piece "Disc" P2 S) (regions P1 (sites Bottom)) (regions P2 (sites Top))}) (rules (start {(place "Disc1" (difference (expand (sites Bottom) 2) (sites Phase 1))) (place "Disc2" (difference (expand (sites Top) 2) (sites Phase 1)))}) (play (priority (forEach Piece "Disc" (move (from (= (* (from ) (if (< 0 (count MovesThisTurn)) 1 0)) (* (last To) (if (< 0 (count MovesThisTurn)) 1 0)))) (to (sites Direction (from ) Diagonal (+ 1 (size Stack (from )))) (and {(is Empty (to )) (= 1 (count Sites (intersection (sites Occupied Enemy) (sites Between (from ) (to ))))) (= 0 (count Sites (intersection (sites Occupied Mover) (sites Between (from ) (to ))))) (= 1 (count Steps (to ) (+ (array (intersection (sites Occupied Enemy) (sites Between (from ) (to ))))))) (not (is In (+ (array (intersection (sites Occupied Enemy) (sites Between (from ) (to ))))) (values Remembered)))}) (apply (remember Value (+ (array (intersection (sites Occupied Enemy) (sites Between (from ) (to )))))))) (size Stack (from )) true (then (if (can Move (move (from (last To)) (to (sites Direction (from ) (difference Diagonal (directions Cell (last To) (last From))) (+ 1 (size Stack (from )))) (and {(is Empty (to )) (= 1 (count Sites (intersection (sites Occupied Enemy) (sites Between (from ) (to ))))) (= 0 (count Sites (intersection (sites Occupied Mover) (sites Between (from ) (to ))))) (= 1 (count Steps (to ) (+ (array (intersection (sites Occupied Enemy) (sites Between (from ) (to ))))))) (not (is In (+ (array (intersection (sites Occupied Enemy) (sites Between (from ) (to ))))) (values Remembered)))})))) (moveAgain ) (do (forEach Site (sites (values Remembered)) (remove (site ) (size Stack (site )))) (and (if (or (and (is Odd (size Stack (last To))) (is In (last To) (sites (player (+ 1 (% (mover ) 2)))))) (and (is Even (size Stack (last To))) (is In (last To) (sites (player (mover )))))) (add (to (last To)) true)) (forget Value All)))))) true) (forEach Piece "Disc" (move Step (from ) (if (is Odd (size Stack (from ))) (directions {FL FR}) (directions {BL BR})) (to (is Empty (to ))) true (then (if (or (and (is Odd (size Stack (last To))) (is In (last To) (sites (player (+ 1 (% (mover ) 2)))))) (and (is Even (size Stack (last To))) (is In (last To) (sites (player (mover )))))) (add (to (last To)) true)))) true))) (end (if (no Moves Next) (result Next Loss)))))

8x8 checkered board, the dark spaces placed so that the bottom right corner is a dark space. Twelve pieces per player, placed on the dark spaces of the first three rows closest to the players. Players alternate turns moving a piece forward diagonally to an empty space. Pieces may capture an opponent's piece by hopping over it to an empty adjacent space. Captures are compulsory, multiple captures are possible, the maximum capture possible is not required. When a piece reaches the opposite edge of the board from where it started, it stops moving (if in a capture sequence), becomes a king, and the turn ends. Kings may move any distance diagonally forward or backward, and may capture any number of opponent's pieces it leaps over. The player who captures all of the opponent's pieces wins.
        
(game "Damenspiel" (players {(player N) (player S)}) (equipment {(board (square 8)) (piece "Counter" P1 N) (piece "Counter" P2 S) (piece "DoubleCounter" Each) (regions P1 (sites Bottom)) (regions P2 (sites Top))}) (rules (start {(place "Counter1" (difference (expand (sites Bottom) (- 3 1)) (sites Phase 0))) (place "Counter2" (difference (expand (sites Top) (- 3 1)) (sites Phase 0)))}) (play (if (is Prev Mover) (if (= (what (last To)) (id "Counter" Mover)) (move Hop (from (last To)) Diagonal (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to ))) (then (if (is In (last To) (sites Next)) (promote (last To) (piece "DoubleCounter") Mover) (if (can Move (move Hop (from (last To)) Diagonal (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to ))))) (moveAgain ))))) (move Hop (from (last To)) Diagonal (between (count Rows) (range 1 (count Rows)) (count Rows) (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to ))) (then (if (can Move (move Hop (from (last To)) Diagonal (between (count Rows) (range 1 (count Rows)) (count Rows) (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to ))))) (moveAgain ))))) (priority {(or (forEach Piece "Counter" (move Hop (from ) Diagonal (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to ))) (then (if (is In (last To) (sites Next)) (promote (last To) (piece "DoubleCounter") Mover) (if (can Move (move Hop (from (last To)) Diagonal (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to ))))) (moveAgain )))))) (forEach Piece "DoubleCounter" (move Hop (from ) Diagonal (between (count Rows) (range 1 (count Rows)) (count Rows) (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to ))) (then (if (can Move (move Hop (from (last To)) Diagonal (between (count Rows) (range 1 (count Rows)) (count Rows) (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to ))))) (moveAgain )))))) (or (forEach Piece "Counter" (move Step (directions {FR FL}) (to (is Empty (to ))) (then (if (is In (last To) (sites Next)) (promote (last To) (piece "DoubleCounter") Mover))))) (forEach Piece "DoubleCounter" (move Slide Diagonal)))}))) (end (if (no Pieces Next) (result Next Loss)))))

Played on an 8x8 board with 12 pieces per side. Pieces move one space diagonally. Capturing occurs when an opponent's piece is adjacent to a player's piece and there is an open space on the other side of the opponent and the player's piece jumps the opponent's. Capturing can happen either forwards or backwards. Capturing must happen if it is possible. Multiple jumps can be made in a turn, and the maximum number of jumps must be made. Pieces become kings when they reach the opposite side of the board from which they started at the end of its turn. Kings can move multiple spaces in one direction.
(game "Brazilian Draughts" (players 2) (equipment {(board (square 8)) (piece "Counter" P1 N) (piece "Counter" P2 S) (piece "DoubleCounter" Each) (regions P1 (sites Bottom)) (regions P2 (sites Top))}) (rules (start {(place "Counter1" (difference (expand (sites Bottom) (- 3 1)) (sites Phase 1))) (place "Counter2" (difference (expand (sites Top) (- 3 1)) (sites Phase 1)))}) (play (if (is Prev Mover) (if (= (what (last To)) (id "Counter" Mover)) (max Moves (move Hop (from (last To)) Diagonal (between (and (not (is In (between ) (sites ToClear))) (is Enemy (who (between )))) (apply (remove (between ) EndOfTurn))) (to (is Empty (to ))) (then (if (can Move (move Hop (from (last To)) Diagonal (between (and (not (is In (between ) (sites ToClear))) (is Enemy (who (between )))) (apply (remove (between ) EndOfTurn))) (to (is Empty (to ))))) (moveAgain ) (if (is In (last To) (sites Next)) (promote (last To) (piece "DoubleCounter") Mover)))))) (max Moves (move Hop (from (last To)) Diagonal (between (count Rows) (count Rows) (and (not (is In (between ) (sites ToClear))) (is Enemy (who (between )))) (apply (remove (between ) EndOfTurn))) (to (is Empty (to ))) (then (if (can Move (hop (from (last To)) Diagonal (between (count Rows) (count Rows) (and (not (is In (between ) (sites ToClear))) (is Enemy (who (between ))))) (to (is Empty (to ))))) (moveAgain )))))) (priority {(max Moves (or (forEach Piece "Counter" (move Hop (from ) Diagonal (between (and (not (is In (between ) (sites ToClear))) (is Enemy (who (between )))) (apply (remove (between ) EndOfTurn))) (to (is Empty (to ))) (then (if (can Move (move Hop (from (last To)) Diagonal (between (and (not (is In (between ) (sites ToClear))) (is Enemy (who (between )))) (apply (remove (between ) EndOfTurn))) (to (is Empty (to ))))) (moveAgain ) (if (is In (last To) (sites Next)) (promote (last To) (piece "DoubleCounter") Mover)))))) (forEach Piece "DoubleCounter" (move Hop Diagonal (between (count Rows) (count Rows) (is Enemy (who (between ))) (apply (remove (between ) EndOfTurn))) (to (is Empty (to ))) (then (if (can Move (hop (from (last To)) Diagonal (between (count Rows) (count Rows) (and (not (is In (between ) (sites ToClear))) (is Enemy (who (between ))))) (to (is Empty (to ))))) (moveAgain ))))))) (or (forEach Piece "Counter" (move Step (directions {FR FL}) (to (is Empty (to )))) (then (if (is In (last To) (sites Next)) (promote (last To) (piece "DoubleCounter") Mover)))) (forEach Piece "DoubleCounter" (move Slide Diagonal)))}))) (end (if (no Moves Next) (result Mover Win)))))

8x8 board. Twelve pieces per player. Pieces move forward diagonally to an empty space on the board. A piece may capture an opponent's adjacent piece by hopping over it to an empty space immediately on the opposite side of the opponent's piece. Multiple captures are allowed. Captures can be made in a forward or backward direction. Captures are compulsory, but it is not required to choose a capture sequence that captures the most pieces. A piece which reaches the opposite edge of the board from where it started is promoted to a king. Kings move any number of spaces forward or backward. They also may capture a single piece if there is at least one empty space beyond it, and can change direction after a capture. Kings must also make all possible captures in a sequence. The player who captures all of the opponent's pieces wins.
(game "American Pool Checkers" (players 2) (equipment {(board (square 8)) (piece "Counter" P1 N) (piece "Counter" P2 S) (piece "DoubleCounter" Each) (regions P1 (sites Bottom)) (regions P2 (sites Top))}) (rules (start {(place "Counter1" (difference (expand (sites Bottom) (- 3 1)) (sites Phase 1))) (place "Counter2" (difference (expand (sites Top) (- 3 1)) (sites Phase 1)))}) (play (if (is Prev Mover) (if (= (what (last To)) (id "Counter" Mover)) (move Hop (from (last To)) Diagonal (between (and (not (is In (between ) (sites ToClear))) (is Enemy (who (between )))) (apply (remove (between ) EndOfTurn))) (to (is Empty (to ))) (then (if (can Move (move Hop (from (last To)) Diagonal (between (and (not (is In (between ) (sites ToClear))) (is Enemy (who (between )))) (apply (remove (between ) EndOfTurn))) (to (is Empty (to ))))) (moveAgain ) (if (is In (last To) (sites Next)) (promote (last To) (piece "DoubleCounter") Mover))))) (max Moves (move Hop (from (last To)) Diagonal (between (count Rows) (count Rows) (and (not (is In (between ) (sites ToClear))) (is Enemy (who (between )))) (apply (remove (between ) EndOfTurn))) (to (is Empty (to ))) (then (if (can Move (hop (from (last To)) Diagonal (between (count Rows) (count Rows) (and (not (is In (between ) (sites ToClear))) (is Enemy (who (between ))))) (to (is Empty (to ))))) (moveAgain )))))) (priority {(or (forEach Piece "Counter" (move Hop (from ) Diagonal (between (and (not (is In (between ) (sites ToClear))) (is Enemy (who (between )))) (apply (remove (between ) EndOfTurn))) (to (is Empty (to ))) (then (if (can Move (move Hop (from (last To)) Diagonal (between (and (not (is In (between ) (sites ToClear))) (is Enemy (who (between )))) (apply (remove (between ) EndOfTurn))) (to (is Empty (to ))))) (moveAgain ) (if (is In (last To) (sites Next)) (promote (last To) (piece "DoubleCounter") Mover)))))) (max Moves (forEach Piece "DoubleCounter" (move Hop Diagonal (between (count Rows) (count Rows) (is Enemy (who (between ))) (apply (remove (between ) EndOfTurn))) (to (is Empty (to ))) (then (if (can Move (hop (from (last To)) Diagonal (between (count Rows) (count Rows) (and (not (is In (between ) (sites ToClear))) (is Enemy (who (between ))))) (to (is Empty (to ))))) (moveAgain ))))))) (or (forEach Piece "Counter" (move Step (directions {FR FL}) (to (is Empty (to )))) (then (if (is In (last To) (sites Next)) (promote (last To) (piece "DoubleCounter") Mover)))) (forEach Piece "DoubleCounter" (move Slide Diagonal)))}))) (end (if (no Moves Next) (result Mover Win)))))

12x12 checkered board. Thirty pieces per player, placed on the white spaces in the first five ranks on each player's side. Pieces move diagonally forward or backward. The opponent's pieces are captured by hopping over them. Multiple hops by one piece are allowed in one turn if they are possible. When they reach the opposite edge of the board from where they started, they become Kings. Kings may move diagonally any number of spaces.  They may capture pieces proceeding along its diagonal in one direction, as long as the next space beyond the piece to be captured is empty. It may not hop over any pieces which belong to the same player, or those belonging to the opponent except to capture them. Multiple captures for the King can only be made along the same diagonal, except when it makes a capture that brings it to the edge of the board, it can make another capture along the next available diagonal, if possible. The player who captures all of the opponent's pieces wins. 
(game "Dam" (players 2) (equipment {(board (square 12)) (piece "Counter" P1 N) (piece "Counter" P2 S) (piece "DoubleCounter" Each) (regions P1 (sites Bottom)) (regions P2 (sites Top))}) (rules (start {(place "Counter1" (difference (expand (sites Bottom) (- 5 1)) (sites Phase 0))) (place "Counter2" (difference (expand (sites Top) (- 5 1)) (sites Phase 0)))}) (play (if (is Prev Mover) (or (if (= (what (last To)) (id "Counter" Mover)) (move Hop (from (last To)) Diagonal (between (and (not (is In (between ) (sites ToClear))) (is Enemy (who (between )))) (apply (remove (between )))) (to (is Empty (to ))) (then (if (can Move (hop (from (last To)) Diagonal (between (and (not (is In (between ) (sites ToClear))) (is Enemy (who (between ))))) (to (is Empty (to ))))) (moveAgain )))) (move Hop (from (last To)) (if (is In (last To) (sites Outer)) (difference Diagonal OppositeDirection) SameDirection) (between (count Rows) (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to ))) (then (if (can Move (hop (from (last To)) (if (is In (last To) (sites Outer)) (difference Diagonal OppositeDirection) SameDirection) (between (count Rows) (and (not (is In (between ) (sites ToClear))) (is Enemy (who (between )))) (apply (remove (between )))) (to (is Empty (to ))))) (moveAgain ))))) (move Pass)) (or (forEach Piece "Counter" (or (move Hop Diagonal (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to ))) (then (if (can Move (hop (from (last To)) Diagonal (between (and (not (is In (between ) (sites ToClear))) (is Enemy (who (between ))))) (to (is Empty (to ))))) (moveAgain )))) (move Step Diagonal (to (is Empty (to )))))) (forEach Piece "DoubleCounter" (or (move Hop Diagonal (between (count Rows) (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to ))) (then (if (can Move (hop (from (last To)) (if (is In (last To) (sites Outer)) (difference Diagonal OppositeDirection) SameDirection) (between (count Rows) (and (not (is In (between ) (sites ToClear))) (is Enemy (who (between )))) (apply (remove (between )))) (to (is Empty (to ))))) (moveAgain )))) (move Slide (directions Diagonal))))) (then (if (and (= (what (last To)) (id "Counter" Mover)) (is In (last To) (sites Next))) (promote (last To) (piece "DoubleCounter") Mover))))) (end (if (no Moves Next) (result Mover Win)))))

10x10 checkered board. Twenty pieces per player, arranged on the four rows closest to the player. Pieces move orthogonally or diagonally in any direction, only on the white spaces. Pieces may capture by jumping over an enemy piece to an empty space on the other side of it. Multiple captures in one turn are allowed. The player to capture all of the opponent's pieces wins.
(game "The Babylonian" (players 2) (equipment {(board (square 10)) (piece "Counter" Each (or {(move Step Diagonal (to (is Empty (to )))) (move Slide Orthogonal (between (exact 2))) (move Hop (from ) Diagonal (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to ))) (then (if (can Move (or (move Hop (from (last To)) Diagonal (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to )))) (do (move Hop (from (last To)) Orthogonal (between 2 2 (and (= 2 (count Steps (from ) (between ))) (is Enemy (who (between )))) (apply (remove (between )))) (to (is Empty (to )))) (is In (last To) (sites Phase 1))))) (moveAgain )))) (do (move Hop (from ) Orthogonal (between 2 2 (and (= 2 (count Steps (from ) (between ))) (is Enemy (who (between )))) (apply (remove (between )))) (to (is Empty (to )))) (is In (last To) (sites Phase 1)) (then (if (can Move (or (move Hop (from (last To)) Diagonal (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to )))) (do (move Hop (from (last To)) Orthogonal (between 2 2 (and (= 2 (count Steps (from ) (between ))) (is Enemy (who (between )))) (apply (remove (between )))) (to (is Empty (to )))) (is In (last To) (sites Phase 1))))) (moveAgain ))))})) (regions P1 (sites Bottom)) (regions P2 (sites Top))}) (rules (start {(place "Counter1" (difference (expand (sites Bottom) (- 4 1)) (sites Phase 0))) (place "Counter2" (difference (expand (sites Top) (- 4 1)) (sites Phase 0)))}) (play (if (is Prev Mover) (or {(move Hop (from (last To)) Diagonal (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to ))) (then (if (can Move (or (move Hop (from (last To)) Diagonal (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to )))) (do (move Hop (from (last To)) Orthogonal (between 2 2 (and (= 2 (count Steps (from ) (between ))) (is Enemy (who (between )))) (apply (remove (between )))) (to (is Empty (to )))) (is In (last To) (sites Phase 1))))) (moveAgain )))) (do (move Hop (from (last To)) Orthogonal (between 2 2 (and (= 2 (count Steps (from ) (between ))) (is Enemy (who (between )))) (apply (remove (between )))) (to (is Empty (to )))) (is In (last To) (sites Phase 1)) (then (if (can Move (or (move Hop (from (last To)) Diagonal (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to )))) (do (move Hop (from (last To)) Orthogonal (between 2 2 (and (= 2 (count Steps (from ) (between ))) (is Enemy (who (between )))) (apply (remove (between )))) (to (is Empty (to )))) (is In (last To) (sites Phase 1))))) (moveAgain )))) (move Pass)}) (forEach Piece))) (end (if (no Pieces Next) (result Next Loss)))))

5x5 grid of points, four point in each row, each alternating position with an end point on the left or right edge. Points are connecting with diagonal lines. Twelve pieces per player, positioned on the first three rows closest to the player. Players alternate turns moving a piece forward to an empty adjacent spot along the lines. A player may capture an opponent's piece by hopping over it to an empty spot on the opposite side of it along the lines. Multiple captures are allowed, if possible. When a player's piece reaches the opposite edge of the board from which it started, it becomes a king. Kings may move any distance diagonally forward or backward, and may capture any number of opponent's pieces it leaps over. The king cannot take in multiple directions in one turn. The first player to capture all of the opponent's pieces wins.
        
(game "Dama (Philippines)" (players 2) (equipment {(board (rotate 45.0 (merge {(rectangle 5 4) (shift -1.0 1.0 (rectangle 3 6)) (shift -2.0 2.0 (rectangle 1 8)) (shift 1.0 -1.0 (rectangle 7 2))})) Vertex) (piece "Counter" P1 N) (piece "Counter" P2 S) (piece "DoubleCounter" Each) (regions P1 (sites Bottom)) (regions P2 (sites Top))}) (rules (start {(place "Counter1" (expand (sites Bottom) (- 3 1))) (place "Counter2" (expand (sites Top) (- 3 1)))}) (play (if (is Prev Mover) (or (if (= (what (last To)) (id "Counter" Mover)) (move Hop (from (last To)) (directions {FR FL}) (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to ))) (then (if (can Move (move Hop (from (last To)) (directions {FR FL}) (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to ))))) (moveAgain ) (if (is In (last To) (sites Next)) (promote (last To) (piece "DoubleCounter") Mover))))) (move Hop (from (last To)) SameDirection (between (count Rows) (count Rows) (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to ))) (then (if (can Move (move Hop (from (last To)) SameDirection (between (count Rows) (count Rows) (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to ))))) (moveAgain ))))) (move Pass)) (or {(forEach Piece "Counter" (move Hop (from (from )) (directions {FR FL}) (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to ))) (then (if (can Move (move Hop (from (last To)) (directions {FR FL}) (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to ))))) (moveAgain ) (if (is In (last To) (sites Next)) (promote (last To) (piece "DoubleCounter") Mover)))))) (forEach Piece "DoubleCounter" (move Hop (from ) Orthogonal (between (count Rows) (count Rows) (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to ))) (then (if (can Move (move Hop (from (last To)) SameDirection (between (count Rows) (count Rows) (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to ))))) (moveAgain ))))) (forEach Piece "Counter" (move Step (directions {FR FL}) (to (is Empty (to )))) (then (if (is In (last To) (sites Next)) (promote (last To) (piece "DoubleCounter") Mover)))) (forEach Piece "DoubleCounter" (move Slide))}))) (end (if (no Moves Next) (result Mover Win)))))

8x8 board, twelve pieces per player, arranged on the black spaces. Pieces move diagonally one space, or may hop an opponent's piece to capture it. Pieces may also capture orthogonally, but must remain on the black spaces. When a piece reaches the opponent's edge of the board, the piece becomes a \"Dam,\" and may move diagonally or orthogonally any number of spaces, including to jump over one piece. The player who captures all the opponent's pieces wins. 
(game "Makvoer" (players 2) (equipment {(board (square 8)) (piece "Counter" Each (or {(move Step Diagonal (to (is Empty (to )))) (move Hop Diagonal (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to )))) (do (move Hop Orthogonal (between 1 2 (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to )))) (is In (last To) (sites Phase 0)))} (then (if (is In (last To) (sites Next)) (promote (last To) (piece "DoubleCounter") Mover))))) (piece "DoubleCounter" Each (or (move Slide) (move Hop (between (count Rows) (count Rows) (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to )))))) (regions P1 (sites Bottom)) (regions P2 (sites Top))}) (rules (start {(place "Counter1" (difference (expand (sites Bottom) (- 3 1)) (sites Phase 1))) (place "Counter2" (difference (expand (sites Top) (- 3 1)) (sites Phase 1)))}) (play (forEach Piece)) (end (if (no Pieces Next) (result Next Loss)))))

Played on a 7x7 board. Each player has 11 pieces. they move diagonally one space or can capture opposing pieces by jumping. When captured, a piece is placed underneath the capturing piece, creating columns. When columns are captured, only the piece at the top of the column is taken. Columns are controlled by the player whose piece is on top of the column. When a piece or column reaches the opposite side of the board they become promoted to officer and can move backwards. A player wins by capturing all of the opponent's pieces.
(game "Lasca" (players {(player N) (player S)}) (equipment {(board (square 7)) (piece "Counter" Each) (piece "CounterStar" Each) (regions P1 (sites Bottom)) (regions P2 (sites Top))}) (rules (start {(place "Counter1" (difference (expand (sites Bottom) 2) (sites Phase 1))) (place "Counter2" (difference (expand (sites Top) 2) (sites Phase 1)))}) (play (if (is Prev Mover) (if (= (what (last To) (topLevel (last To))) (id "Counter" Mover)) (move Hop (from (last To)) (directions {FR FL}) (between (is Enemy (who (between ))) (apply (fromTo (from (between )) (to )))) (to (and (is In (from ) (sites Occupied Mover)) (is Empty (to )))) true (then (if (is In (last To) (sites Next)) (promote (last To) (piece "CounterStar") Mover) (if (can Move (move Hop (from (last To)) (directions {FR FL}) (between (is Enemy (who (between ))) (apply (fromTo (from (between )) (to )))) (to (and (is In (from ) (sites Occupied Mover)) (is Empty (to )))) true)) (moveAgain ))))) (move Hop (from (last To)) Diagonal (between (is Enemy (who (between ))) (apply (fromTo (from (between )) (to )))) (to (and (is In (from ) (sites Occupied Mover)) (is Empty (to )))) true (then (if (can Move (move Hop (from (last To)) Diagonal (between (is Enemy (who (between ))) (apply (fromTo (from (between )) (to )))) (to (and (is In (from ) (sites Occupied Mover)) (is Empty (to )))) true)) (moveAgain ))))) (priority {(or {(forEach Piece "Counter" (move Hop (directions {FR FL}) (between (is Enemy (who (between ))) (apply (fromTo (from (between )) (to )))) (to (and (is In (from ) (sites Occupied Mover)) (is Empty (to )))) true (then (if (can Move (move Hop (from (last To)) (directions {FR FL}) (between (is Enemy (who (between ))) (apply (fromTo (from (between )) (to )))) (to (and (is In (from ) (sites Occupied Mover)) (is Empty (to )))) true)) (moveAgain )))) true (then (if (is In (last To) (sites Next)) (promote (last To) (piece "CounterStar") Mover)))) (forEach Piece "CounterStar" (move Hop Diagonal (between (is Enemy (who (between ))) (apply (fromTo (from (between )) (to )))) (to (and (is In (from ) (sites Occupied Mover)) (is Empty (to )))) true (then (if (can Move (move Hop (from (last To)) Diagonal (between (is Enemy (who (between ))) (apply (fromTo (from (between )) (to )))) (to (and (is In (from ) (sites Occupied Mover)) (is Empty (to )))) true)) (moveAgain )))) true)}) (or {(forEach Piece "Counter" (move Step (directions {FR FL}) (to (and (is In (from ) (sites Occupied Mover)) (is Empty (to )))) true) true (then (if (is In (last To) (sites Next)) (promote (last To) (piece "CounterStar") Mover)))) (forEach Piece "CounterStar" (move Step Diagonal (to (and (is In (from ) (sites Occupied Mover)) (is Empty (to )))) true) true)})}))) (end (if (no Moves Next) (result Mover Win)))))

8x8 checkered board, the dark spaces placed so that the bottom right corner is a dark space. Twelve pieces per player, placed on the dark spaces of the first three rows closest to the players. Players alternate turns moving a piece forward diagonally to an empty space. Pieces may capture an opponent's piece by hopping over it to an empty adjacent space, in a forwards or backwards direction. Captures are not compulsory, multiple captures are possible, the maximum capture possible is not required. When a piece reaches the opposite edge of the board from where it started at the end of its turn, it it promoted. If it lands on the edge of the board in the middle of a capturing sequence, it is not promoted. Promoted pieces may move any distance diagonally forward or backward, and may capture any number of opponent's pieces it leaps over. The player who captures all of the opponent's pieces wins.
        
(game "Damspel" (players {(player N) (player S)}) (equipment {(board (square 8)) (piece "Counter" P1 N) (piece "Counter" P2 S) (piece "DoubleCounter" Each) (regions P1 (sites Bottom)) (regions P2 (sites Top))}) (rules (start {(place "Counter1" (difference (expand (sites Bottom) (- 3 1)) (sites Phase 0))) (place "Counter2" (difference (expand (sites Top) (- 3 1)) (sites Phase 0)))}) (play (if (is Prev Mover) (if (= (what (last To)) (id "Counter" Mover)) (or (move Pass (then (forEach Site (sites Next) (if (= (what (site )) (id "Counter" Mover)) (promote (site ) (piece "DoubleCounter") Mover))))) (move Hop (from (last To)) Diagonal (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to ))) (then (if (can Move (move Hop (from (last To)) Diagonal (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to ))))) (moveAgain ) (if (is In (last To) (sites Next)) (promote (last To) (piece "DoubleCounter") Mover)))))) (or (move Pass) (move Hop (from (last To)) Diagonal (between (count Rows) (range 1 (count Rows)) (count Rows) (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to ))) (then (if (can Move (move Hop (from (last To)) Diagonal (between (count Rows) (range 1 (count Rows)) (count Rows) (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to ))))) (moveAgain )))))) (or (forEach Piece "Counter" (or (move Step (directions {FR FL}) (to (is Empty (to ))) (then (if (is In (last To) (sites Next)) (promote (last To) (piece "DoubleCounter") Mover)))) (move Hop (from ) Diagonal (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to ))) (then (if (can Move (move Hop (from (last To)) Diagonal (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to ))))) (moveAgain ) (if (is In (last To) (sites Next)) (promote (last To) (piece "DoubleCounter") Mover))))))) (forEach Piece "DoubleCounter" (or (move Slide Diagonal) (move Hop (from ) Diagonal (between (count Rows) (range 1 (count Rows)) (count Rows) (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to ))) (then (if (can Move (move Hop (from (last To)) Diagonal (between (count Rows) (range 1 (count Rows)) (count Rows) (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to ))))) (moveAgain ))))))))) (end (if (no Pieces Next) (result Next Loss)))))

10x10 board, with red and white checkeres squares. Twenty pieces per player, which are arranged on the first four ranks closest to the player. Pieces move diagonally one space forward. Pieces may capture an opponent's piece by hopping over it diagonally to an empty adjacent square immediately on the other side of it. Pieces cannot capture in a backwards direction. The maximum number of pieces must be captured. If a player does not capture the maximum number of pieces, the other player may huff this piece, removing it from play. When a piece reaches the opposite edge of the board from where it started, it is promoted to king. Kings may move any distance diagonally, in a forward or backward direction. The player who captures all of their opponent's pieces wins.
(game "Dum Blas" (players {(player N) (player S)}) (equipment {(board (square 10)) (piece "Counter" P1 N) (piece "Counter" P2 S) (piece "DoubleCounter" Each) (regions P1 (sites Bottom)) (regions P2 (sites Top))}) (rules (start {(place "Counter1" (difference (expand (sites Bottom) (- 4 1)) (sites Phase 1))) (place "Counter2" (difference (expand (sites Top) (- 4 1)) (sites Phase 1)))}) (play (if (is Prev Mover) (if (= (what (last To)) (id "Counter" Mover)) (max Moves (move Hop (from (last To)) Diagonal (between (and (not (is In (between ) (sites ToClear))) (is Enemy (who (between )))) (apply (remove (between ) EndOfTurn))) (to (is Empty (to ))) (then (if (can Move (move Hop (from (last To)) Diagonal (between (and (not (is In (between ) (sites ToClear))) (is Enemy (who (between )))) (apply (remove (between ) EndOfTurn))) (to (is Empty (to ))))) (moveAgain ) (if (is In (last To) (sites Next)) (promote (last To) (piece "DoubleCounter") Mover)))))) (max Moves (move Hop (from (last To)) Diagonal (between (count Rows) (count Rows) (and (not (is In (between ) (sites ToClear))) (is Enemy (who (between )))) (apply (remove (between ) EndOfTurn))) (to (is Empty (to ))) (then (if (can Move (hop (from (last To)) Diagonal (between (count Rows) (count Rows) (and (not (is In (between ) (sites ToClear))) (is Enemy (who (between ))))) (to (is Empty (to ))))) (moveAgain )))))) (priority {(max Moves (or (forEach Piece "Counter" (move Hop (from ) Diagonal (between (and (not (is In (between ) (sites ToClear))) (is Enemy (who (between )))) (apply (remove (between ) EndOfTurn))) (to (is Empty (to ))) (then (if (can Move (move Hop (from (last To)) Diagonal (between (and (not (is In (between ) (sites ToClear))) (is Enemy (who (between )))) (apply (remove (between ) EndOfTurn))) (to (is Empty (to ))))) (moveAgain ) (if (is In (last To) (sites Next)) (promote (last To) (piece "DoubleCounter") Mover)))))) (forEach Piece "DoubleCounter" (move Hop Diagonal (between (count Rows) (count Rows) (is Enemy (who (between ))) (apply (remove (between ) EndOfTurn))) (to (is Empty (to ))) (then (if (can Move (hop (from (last To)) Diagonal (between (count Rows) (count Rows) (and (not (is In (between ) (sites ToClear))) (is Enemy (who (between ))))) (to (is Empty (to ))))) (moveAgain ))))))) (or (forEach Piece "Counter" (move Step (directions {FR FL}) (to (is Empty (to )))) (then (if (is In (last To) (sites Next)) (promote (last To) (piece "DoubleCounter") Mover)))) (forEach Piece "DoubleCounter" (move Slide Diagonal)))}))) (end (if (no Moves Next) (result Mover Win)))))

8x8 board, every other square marked with an X in a checkered pattern. Twelve pieces per player, positioned on the first three rows closest to the player on the marked squares. Players alternate turns moving a piece diagonally forward. A player may capture an opponent's piece by hopping over it to an empty spot on the opposite side of it along the lines. Multiple captures are allowed, if possible. When a player's piece reaches the opposite edge of the board from which it started, it becomes a king. It may move over any distance, diagonally, and may capture by leaping any distance over any number of opponent's pieces, capturing all of them in that line. The king cannot take in multiple directions in one turn. The first player to capture all of the opponent's pieces wins.
        
(game "Moo" (players {(player N) (player S)}) (equipment {(board (square 8)) (piece "Counter" P1 N) (piece "Counter" P2 S) (piece "DoubleCounter" Each) (regions P1 (sites Bottom)) (regions P2 (sites Top)) (regions "MarkedCell" (sites Phase 0))}) (rules (start {(place "Counter1" (difference (expand (sites Bottom) (- 3 1)) (sites Phase 1))) (place "Counter2" (difference (expand (sites Top) (- 3 1)) (sites Phase 1)))}) (play (if (is Prev Mover) (or (if (= (what (last To)) (id "Counter" Mover)) (move Hop (from (last To)) Diagonal (between (and (not (is In (between ) (sites ToClear))) (is Enemy (who (between )))) (apply (remove (between ) EndOfTurn))) (to (is Empty (to ))) (then (if (can Move (move Hop (from (last To)) Diagonal (between (and (not (is In (between ) (sites ToClear))) (is Enemy (who (between )))) (apply (remove (between ) EndOfTurn))) (to (is Empty (to ))))) (moveAgain ) (if (is In (last To) (sites Next)) (promote (last To) (piece "DoubleCounter") Mover))))) (move Hop (from (last To)) SameDirection (between (count Rows) (range 1 9) (count Rows) (and (not (is In (between ) (sites ToClear))) (is Enemy (who (between )))) (apply (remove (between )))) (to (is Empty (to ))) (then (if (can Move (hop (from (last To)) SameDirection (between (count Rows) (range 1 (count Rows)) (count Rows) (and (not (is In (between ) (sites ToClear))) (is Enemy (who (between )))) (apply (remove (between )))) (to (is Empty (to ))))) (moveAgain ))))) (move Pass)) (or (forEach Piece "Counter" (or (move Hop (from (from )) Diagonal (between (and (not (is In (between ) (sites ToClear))) (is Enemy (who (between )))) (apply (remove (between ) EndOfTurn))) (to (is Empty (to ))) (then (if (can Move (move Hop (from (last To)) Diagonal (between (and (not (is In (between ) (sites ToClear))) (is Enemy (who (between )))) (apply (remove (between ) EndOfTurn))) (to (is Empty (to ))))) (moveAgain ) (if (is In (last To) (sites Next)) (promote (last To) (piece "DoubleCounter") Mover))))) (move Step (directions {FR FL}) (to (is Empty (to )))) (then (if (is In (last To) (sites Next)) (promote (last To) (piece "DoubleCounter") Mover))))) (forEach Piece "DoubleCounter" (or (move Hop (from ) Diagonal (between (count Rows) (range 1 9) (count Rows) (and (not (is In (between ) (sites ToClear))) (is Enemy (who (between )))) (apply (remove (between )))) (to (is Empty (to ))) (then (if (can Move (hop (from (last To)) SameDirection (between (count Rows) (range 1 (count Rows)) (count Rows) (and (not (is In (between ) (sites ToClear))) (is Enemy (who (between )))) (apply (remove (between )))) (to (is Empty (to ))))) (moveAgain )))) (move Slide Diagonal)))))) (end (if (no Pieces Next) (result Next Loss)))))

8x8 board. Twelve pieces per player. Pieces move diagonally one space forward, and can capture opponent's pieces by jumping them in a forward direction if they are adjacent. Capturing must happen if it is possible. Multiple captures are allowed. Once pieces reach the opposite side of the board from their starting position, they become kings and can move diagonally either forwards or backwards, and can capture by jumping over any number of pieces, any distance. The goal is to capture all of the opponent's pieces.
(game "Main Dam" (players {(player N) (player S)}) (equipment {(board (square 8)) (piece "Counter" P1 N) (piece "Counter" P2 S) (piece "DoubleCounter" Each) (regions P1 (sites Bottom)) (regions P2 (sites Top))}) (rules (start {(place "Counter1" (difference (expand (sites Bottom) (- 3 1)) (sites Phase 1))) (place "Counter2" (difference (expand (sites Top) (- 3 1)) (sites Phase 1)))}) (play (if (is Prev Mover) (if (= (what (last To)) (id "Counter" Mover)) (move Hop (from (last To)) (directions {FR FL}) (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to ))) (then (if (is In (last To) (sites Next)) (promote (last To) (piece "DoubleCounter") Mover) (if (can Move (move Hop (from (last To)) (directions {FR FL}) (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to ))))) (moveAgain ))))) (move Hop (from (last To)) Diagonal (between (count Rows) (count Rows) (and (not (is In (between ) (sites ToClear))) (is Enemy (who (between )))) (apply (remove (between )))) (to (is Empty (to ))) (then (if (can Move (hop (from (last To)) Diagonal (between (count Rows) (count Rows) (and (not (is In (between ) (sites ToClear))) (is Enemy (who (between ))))) (to (is Empty (to ))))) (moveAgain ))))) (priority {(or (forEach Piece "Counter" (move Hop (from ) (directions {FR FL}) (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to ))) (then (if (is In (last To) (sites Next)) (promote (last To) (piece "DoubleCounter") Mover) (if (can Move (move Hop (from (last To)) (directions {FR FL}) (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to ))))) (moveAgain )))))) (forEach Piece "DoubleCounter" (move Hop Diagonal (between (count Rows) (count Rows) (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to ))) (then (if (can Move (hop (from (last To)) Diagonal (between (count Rows) (count Rows) (and (not (is In (between ) (sites ToClear))) (is Enemy (who (between ))))) (to (is Empty (to ))))) (moveAgain )))))) (or (forEach Piece "Counter" (move Step (directions {FR FL}) (to (is Empty (to )))) (then (if (is In (last To) (sites Next)) (promote (last To) (piece "DoubleCounter") Mover)))) (forEach Piece "DoubleCounter" (move Slide Diagonal)))}))) (end (if (no Moves Next) (result Mover Win)))))

8x8 Draughts board. Twelve pieces per player, arranged on the three rows closest to the players. Players alternate turns moving a piece forward diagonally to an adjacent empty space. Pieces capture an opponent's piece by hopping over it to an empty space on the opposite side of it, in a forward direction only. Captures are mandatory, and the maximum number of captures is required. Kings are made when a piece reaches the opposite edge of the board from where it started. Kings may move one space diagonally in either direction, and capture rules are the same as for pieces, except when different capturing routes are available with the same number of captures, the one which takes the most kings must be taken. In addition, if a sequence of captures can be made by a king or a regular piece, it must be made with the king. Kings cannot be captured by regular pieces. The first player to force the opponent to capture all of their pieces wins.
(game "Coc-Inbert" (players 2) (equipment {(board (square 8)) (piece "Counter" P1 N) (piece "Counter" P2 S) (piece "DoubleCounter" Each) (regions P1 (sites Bottom)) (regions P2 (sites Top))}) (rules (start {(place "Counter1" (difference (expand (sites Bottom) (- 3 1)) (sites Phase 1))) (place "Counter2" (difference (expand (sites Top) (- 3 1)) (sites Phase 1)))}) (play (if (is Prev Mover) (if (= (what (last To)) (id "Counter" Mover)) (max Moves (move Hop (from (last To)) (directions {FR FL}) (between (= (what (between )) (id "Counter" Next)) (apply (remove (between )))) (to (is Empty (to ))) (then (if (is In (last To) (sites Next)) (promote (last To) (piece "DoubleCounter") Mover) (if (can Move (move Hop (from (last To)) (directions {FR FL}) (between (= (what (between )) (id "Counter" Next)) (apply (remove (between )))) (to (is Empty (to ))))) (moveAgain )))))) (max Moves (move Hop (from (last To)) Diagonal (between (and (not (is In (between ) (sites ToClear))) (is Enemy (who (between )))) (apply (remove (between )))) (to (is Empty (to ))) (then (if (can Move (hop (from (last To)) Diagonal (between (and (not (is In (between ) (sites ToClear))) (is Enemy (who (between ))))) (to (is Empty (to ))))) (moveAgain )))))) (priority {(max Moves (priority {(forEach Piece "DoubleCounter" (move Hop Diagonal (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to ))) (then (if (can Move (hop (from (last To)) Diagonal (between (and (not (is In (between ) (sites ToClear))) (is Enemy (who (between ))))) (to (is Empty (to ))))) (moveAgain ))))) (forEach Piece "Counter" (move Hop (from ) (directions {FR FL}) (between (= (what (between )) (id "Counter" Next)) (apply (remove (between )))) (to (is Empty (to ))) (then (if (is In (last To) (sites Next)) (promote (last To) (piece "DoubleCounter") Mover) (if (can Move (move Hop (from (last To)) (directions {FR FL}) (between (= (what (between )) (id "Counter" Next)) (apply (remove (between )))) (to (is Empty (to ))))) (moveAgain ))))))})) (or (forEach Piece "Counter" (move Step (directions {FR FL}) (to (is Empty (to )))) (then (if (is In (last To) (sites Next)) (promote (last To) (piece "DoubleCounter") Mover)))) (forEach Piece "DoubleCounter" (move Step Diagonal (to (is Empty (to ))))))}))) (end (forEach Player (no Pieces Player) (result Player Win)))))

8x8 board. Twelve pieces per player. Pieces begin on the dark spaces. White plays first. Players alternate turns moving their pieces diagonally one space forward to an empty space. A piece may capture an opponent's piece by hopping over it to an empty space on the opposite side of the opponent's piece, in a forward direction only. When pieces are captured, they are placed underneath the piece making the capture, forming a stack, controlled by the player whose piece is on top, the \"commander.\" When a stack is captured, the commander is captured and the capturing piece becomes the commander, thus reducing the stack by one. The piece which is now on top of the stack now becomes the commander of that stack. Stacks always move together and cannot be broken apart. Capturing is compulsory when it is possible. There is no obligation to capture the maximum number of pieces. A player who captures the commmander of a stack can only capture from the same stack in the same turn again if there is another intervening capture between the two captures from the stack. When a piece reaches the opposite end of the board from where it started, it becomes a king immediately. If it its promoted in the midst of a sequence of captures, it may begin to capture as a king immediately when it is promoted. Kings move any number of spaces in either direction. Kings may capture by hopping over any distance, as long as there are no intervening pieces, and may land on any space beyond the captured piece, as long as the move is in a straight line and the captured piece is the only piece in the line. When a king is capturing and there is a choice for where it ends its capturing leap, an option which allows further captures must be taken if possible. Kings retain their rank when in a stack. Stacks move according to the rank of its commander. Play continues until one player cannot make a legal move; the opponent wins.
(game "Bashni" (players {(player N) (player S)}) (equipment {(board (square 8)) (piece "Counter" Each) (piece "CounterStar" Each) (regions P1 (sites Bottom)) (regions P2 (sites Top))}) (rules (start {(place "Counter1" (difference (expand (sites Bottom) (- 3 1)) (sites Phase 1))) (place "Counter2" (difference (expand (sites Top) (- 3 1)) (sites Phase 1)))}) (play (if (is Prev Mover) (if (= (what (last To) (topLevel (last To))) (id "Counter" Mover)) (move Hop (from (last To)) (directions {FR FL}) (between (is Enemy (who (between ))) (apply (fromTo (from (between )) (to )))) (to (and (is In (from ) (sites Occupied Mover)) (is Empty (to )))) true (then (if (is In (last To) (sites Next)) (promote (last To) (piece "CounterStar") Mover) (if (can Move (move Hop (from (last To)) (directions {FR FL}) (between (is Enemy (who (between ))) (apply (fromTo (from (between )) (to )))) (to (and (is In (from ) (sites Occupied Mover)) (is Empty (to )))) true)) (moveAgain ))))) (move Hop (from (last To)) Diagonal (between (count Rows) (count Rows) (and (not (is In (between ) (last Between))) (is Enemy (who (between )))) (apply (fromTo (from (between )) (to )))) (to (and (is In (from ) (sites Occupied Mover)) (is Empty (to )))) true (then (if (can Move (hop (from (last To)) Diagonal (between (count Rows) (count Rows) (and (not (is In (between ) (last Between))) (is Enemy (who (between )))) (apply (fromTo (from (between )) (to )))) (to (and (is In (from ) (sites Occupied Mover)) (is Empty (to )))) true)) (moveAgain ))))) (priority {(or {(forEach Piece "Counter" (move Hop (from ) (directions {FR FL}) (between (is Enemy (who (between ))) (apply (fromTo (from (between )) (to )))) (to (and (is In (from ) (sites Occupied Mover)) (is Empty (to )))) true (then (if (can Move (move Hop (from (last To)) (directions {FR FL}) (between (is Enemy (who (between ))) (apply (fromTo (from (between )) (to )))) (to (and (is In (from ) (sites Occupied Mover)) (is Empty (to )))) true)) (moveAgain )))) true (then (if (is In (last To) (sites Next)) (promote (last To) (piece "CounterStar") Mover)))) (forEach Piece "CounterStar" (move Hop (from ) Diagonal (between (count Rows) (count Rows) (is Enemy (who (between ))) (apply (fromTo (from (between )) (to )))) (to (and (is In (from ) (sites Occupied Mover)) (is Empty (to )))) true (then (if (can Move (hop (from (last To)) Diagonal (between (count Rows) (count Rows) (and (not (is In (between ) (last Between))) (is Enemy (who (between )))) (apply (fromTo (from (between )) (to )))) (to (and (is In (from ) (sites Occupied Mover)) (is Empty (to )))) true)) (moveAgain )))) true)}) (or {(forEach Piece "Counter" (move Step (directions {FR FL}) (to (and (is In (from ) (sites Occupied Mover)) (is Empty (to )))) true) true (then (if (is In (last To) (sites Next)) (promote (last To) (piece "CounterStar") Mover)))) (forEach Piece "CounterStar" (move Slide Diagonal true) true)})}))) (end (if (no Moves Next) (result Mover Win)))))

Played on an 8x8 board with each player having twelve pieces. Pieces move diagonally one space forward, and can capture opponent's pieces by jumping them in a forward direction if they are adjacent. Capturing must happen if it is possible. Multiple captures are allowed. Once pieces reach the opposite side of the board from their starting position, they become kings and can move diagonally either forwards or backwards. The goal is to capture all of the opponent's pieces.
(game "English Draughts" (players {(player N) (player S)}) (equipment {(board (square 8)) (piece "Counter" P1 N) (piece "Counter" P2 S) (piece "DoubleCounter" Each) (regions P1 (sites Bottom)) (regions P2 (sites Top))}) (rules (start {(place "Counter1" (difference (expand (sites Bottom) (- 3 1)) (sites Phase 1))) (place "Counter2" (difference (expand (sites Top) (- 3 1)) (sites Phase 1)))}) (play (if (is Prev Mover) (if (= (what (last To)) (id "Counter" Mover)) (move Hop (from (last To)) (directions {FR FL}) (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to ))) (then (if (is In (last To) (sites Next)) (promote (last To) (piece "DoubleCounter") Mover) (if (can Move (move Hop (from (last To)) (directions {FR FL}) (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to ))))) (moveAgain ))))) (move Hop (from (last To)) Diagonal (between (and (not (is In (between ) (sites ToClear))) (is Enemy (who (between )))) (apply (remove (between )))) (to (is Empty (to ))) (then (if (can Move (hop (from (last To)) Diagonal (between (and (not (is In (between ) (sites ToClear))) (is Enemy (who (between ))))) (to (is Empty (to ))))) (moveAgain ))))) (priority {(or (forEach Piece "Counter" (move Hop (from ) (directions {FR FL}) (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to ))) (then (if (is In (last To) (sites Next)) (promote (last To) (piece "DoubleCounter") Mover) (if (can Move (move Hop (from (last To)) (directions {FR FL}) (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to ))))) (moveAgain )))))) (forEach Piece "DoubleCounter" (move Hop Diagonal (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to ))) (then (if (can Move (hop (from (last To)) Diagonal (between (and (not (is In (between ) (sites ToClear))) (is Enemy (who (between ))))) (to (is Empty (to ))))) (moveAgain )))))) (or (forEach Piece "Counter" (move Step (directions {FR FL}) (to (is Empty (to )))) (then (if (is In (last To) (sites Next)) (promote (last To) (piece "DoubleCounter") Mover)))) (forEach Piece "DoubleCounter" (move Step Diagonal (to (is Empty (to ))))))}))) (end (if (no Moves Next) (result Mover Win)))))

8x8 Draughts board. Twelve pieces per player, arranged on the three rows closest to the players. Players alternate turns moving a piece forward diagonally to an adjacent empty space. Pieces capture an opponent's piece by hopping over it to an empty space on the opposite side of it, in a forward direction only. Captures are mandatory, and the maximum number of captures is required.  Kings are made when a piece reaches the opposite edge of the board from where it started. Kings may move one space diagonally in either direction, and capture rules are the same as for pieces, except when different capturing routes are available with the same number of captures, the one which takes the most kings must be taken. In addition, if a sequence of captures can be made by a king or a regular piece, it must be made with the king. Kings cannot be captured by regular pieces. When a piece does not capture the maximum number of captures and the opponent catches it, the opponent captures the opponent's piece. The first player to capture all of the opponent's pieces wins.
(game "Dama (Italy)" (players 2) (equipment {(board (square 8)) (piece "Counter" P1 N) (piece "Counter" P2 S) (piece "DoubleCounter" Each) (regions P1 (sites Bottom)) (regions P2 (sites Top))}) (rules (start {(place "Counter1" (difference (expand (sites Bottom) (- 3 1)) (sites Phase 1))) (place "Counter2" (difference (expand (sites Top) (- 3 1)) (sites Phase 1)))}) (play (if (is Prev Mover) (if (= (what (last To)) (id "Counter" Mover)) (max Moves (move Hop (from (last To)) (directions {FR FL}) (between (= (what (between )) (id "Counter" Next)) (apply (remove (between )))) (to (is Empty (to ))) (then (if (is In (last To) (sites Next)) (promote (last To) (piece "DoubleCounter") Mover) (if (can Move (move Hop (from (last To)) (directions {FR FL}) (between (= (what (between )) (id "Counter" Next)) (apply (remove (between )))) (to (is Empty (to ))))) (moveAgain )))))) (max Moves (move Hop (from (last To)) Diagonal (between (and (not (is In (between ) (sites ToClear))) (is Enemy (who (between )))) (apply (remove (between )))) (to (is Empty (to ))) (then (if (can Move (hop (from (last To)) Diagonal (between (and (not (is In (between ) (sites ToClear))) (is Enemy (who (between ))))) (to (is Empty (to ))))) (moveAgain )))))) (priority {(max Moves (priority {(forEach Piece "DoubleCounter" (move Hop Diagonal (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to ))) (then (if (can Move (hop (from (last To)) Diagonal (between (and (not (is In (between ) (sites ToClear))) (is Enemy (who (between ))))) (to (is Empty (to ))))) (moveAgain ))))) (forEach Piece "Counter" (move Hop (from ) (directions {FR FL}) (between (= (what (between )) (id "Counter" Next)) (apply (remove (between )))) (to (is Empty (to ))) (then (if (is In (last To) (sites Next)) (promote (last To) (piece "DoubleCounter") Mover) (if (can Move (move Hop (from (last To)) (directions {FR FL}) (between (= (what (between )) (id "Counter" Next)) (apply (remove (between )))) (to (is Empty (to ))))) (moveAgain ))))))})) (or (forEach Piece "Counter" (move Step (directions {FR FL}) (to (is Empty (to )))) (then (if (is In (last To) (sites Next)) (promote (last To) (piece "DoubleCounter") Mover)))) (forEach Piece "DoubleCounter" (move Step Diagonal (to (is Empty (to ))))))}))) (end (if (no Moves Next) (result Mover Win)))))

9x9 board played on the intersections, with diagonals for each 3x3 square. Typically played with 24 pieces, but any number up to 40 is possible. Pieces are arranged on the spots in the rows closest to the player, with those unable to fill a row placed on the right points of the next available row. Players alternate turns by moving a piece to an adjacent empty spot along the lines on the board. A player may capture an opponent's piece by hopping over one adjacent piece if there is an empty spot behind it along a line on the board. The player who captures all of the opponent's pieces wins.
(game "Challis Ghutia (Titagarh)" (players {(player N) (player S)}) (equipment {(board (rectangle 9 9 Alternating) Vertex) (piece "Marker" Each (or (move Step (to (is Empty (to )))) (move Hop (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to ))))))}) (rules (start {(place "Marker1" (union (expand (sites Bottom) 1) (expand (coord "I3") 5 W))) (place "Marker2" (union (expand (sites Top) 1) (expand (coord "A7") 5 E)))}) (play (forEach Piece)) (end (if (no Pieces Next) (result Next Loss)))))

4x4 board, eight pieces each player. Pieces move orthogonally by either jumping a player's own piece to capture an opponent's piece or by moving one space into an empty hole. Captures are not compulsory. The goal is to reduce the opponents pieces to 1 or blocking them so they can no longer move.
(game "Nei-Pat-Kono" (players 2) (equipment {(board (square 4) Vertex) (piece "Marker" Each (or (move Step Orthogonal (to (is Empty (to )))) (move Hop Orthogonal (between (is Friend (who (between )))) (to (is Enemy (who (to )))))))}) (rules (start {(place "Marker1" (expand (sites Bottom) (- (/ (count Rows) 2) 1))) (place "Marker2" (expand (sites Top) (- (/ (count Rows) 2) 1)))}) (play (forEach Piece)) (end (if (or (no Moves Next) (<= (count Pieces Next) 1)) (result Mover Win)))))

A series of three parallel lines are drawn, with diagonals connecting the outer lines at intervals, crossing each other at the central line. Eight in the outer rows, nine in the central. Pieces are moved along the intersections, and they are placed on the board on opposing sides, leaving the central spot empty. The first player moves to this spot along one of the lines, and the opponent jumps this pieces, thereby capturing it.
(game "Awithlaknan Mosona" (players 2) (equipment {(board (merge {(repeat 1 1 {{0.5 0.0} {1.0 0.0}} (poly {{0.5 0.0} {0.0 0.0} {0.0 0.5}})) (repeat 1 1 {{0.5 0.0} {1.0 0.0}} (poly {{0.5 0.0} {0.0 0.0} {0.0 -0.5}})) (repeat 7 1 {{0.5 0.0} {1.0 0.0}} (poly {{0.5 0.0} {0.0 0.5} {1.0 0.5}})) (repeat 7 1 {{0.5 0.0} {1.0 0.0}} (poly {{0.5 0.0} {0.0 -0.5} {1.0 -0.5}})) (shift (- 7.0 1.0) 0.0 (repeat 1 1 {{0.5 0.0} {1.0 0.0}} (poly {{0.5 0.0} {1.0 0.5} {1.0 0.0}}))) (shift (- 7.0 1.0) 0.0 (repeat 1 1 {{0.5 0.0} {1.0 0.0}} (poly {{0.5 0.0} {1.0 0.0} {1.0 -0.5}}))) (shift 0.5 0.0 (rectangle 1 7))}) Vertex) (piece "Counter" Each (or (move Hop (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to )))) (move Step (to (is Empty (to ))))))}) (rules (start {(place "Counter1" (union (sites Bottom) (sites Direction (centrePoint ) W))) (place "Counter2" (union (sites Direction (centrePoint ) E) (sites Top)))}) (play (forEach Piece)) (end (if (no Moves Next) (result Next Loss)))))

9x9 board played on the intersections, diagonals for the four quadrants of the board. Forty pieces per player, one playing as white, the other as red, arranged on opposite sides of the board, each player's pieces taking up the first through fourth ranks of spaces, plus their right half of the fifth rank. The central spot remains empty. Players alternate turns by moving a piece to an adjacent empty spot along the lines on the board. A player may capture an opponent's piece by hopping over one adjacent piece if there is an empty spot behind it along a line on the board. The player who captures all of the opponent's pieces wins.
(game "Ram Tir" (players 2) (equipment {(board (add (square 9) {{0 10} {10 20} {20 30} {30 40} {40 50} {50 60} {60 70} {70 80} {8 16} {16 24} {24 32} {32 40} {40 48} {48 56} {56 64} {64 72} {4 12} {12 20} {20 28} {28 36} {36 46} {46 56} {56 66} {66 76} {76 68} {68 60} {60 52} {52 44} {44 34} {34 24} {24 14} {14 4}}) Vertex) (piece "Marker" Each (or (move Hop (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to )))) (move Step (to (is Empty (to )))))) (hand P2)}) (rules (start {(place "Marker1" (difference (expand (sites Bottom) 4) (sites {36 37 38 39 40}))) (place "Marker2" (difference (expand (sites Top) 4) (sites {40 41 42 43 44})))}) (play (forEach Piece)) (end (if (no Pieces Next) (result Next Loss)))))

6x7 lines forming a grid. Diagonals in each small square, with a point where the diagonals cross. 28 pieces, which begin on opposite sides of the board. In addition, each player has a Prince piece, which begins on the rightmost point immediately in front of the other pieces, and a King piece, which begins on the rightmost point in the line in front of the Prince. All pieces move one space to an empty adjacent spot along the lines. A piece may capture an adjacent opponent's piece by hopping over it to an empty adjacent spot on the opposite side of it. Multiple captures are allowed. Captures are not compulsory and neither are the maximum number of captures. Pieces may only capture other pieces of the same rank or lower. A player wins when they capture all of the opponent's pieces, or by blocking a higher ranking piece from being able to move if it is the only remaining piece belonging to the opponent. If players are left with only one piece each of the same rank, one player may declare single combat, and both pieces must move toward one another until one captures the other. If only the Kings are left on the board the game is a draw. 
(game "Dablot Prejjesne" (players {(player S) (player N)}) (equipment {(board (rectangle 7 6 Solid) Vertex) (piece "Cone" Each (or (move Step (to (is Empty (to )))) (move Hop (between (and (is Enemy (who (between ))) (>= (value Piece (from )) (value Piece (between )))) (apply (remove (between )))) (to (is Empty (to ))) (then (if (can Move (hop (from (last To)) (between (and (is Enemy (who (between ))) (>= (value Piece (from )) (value Piece (between )))) (apply (remove (between )))) (to (is Empty (to ))))) (moveAgain )))))) (piece "Prince" Each (or (move Step (to (is Empty (to )))) (move Hop (between (and (is Enemy (who (between ))) (>= (value Piece (from )) (value Piece (between )))) (apply (remove (between )))) (to (is Empty (to ))) (then (if (can Move (hop (from (last To)) (between (and (is Enemy (who (between ))) (>= (value Piece (from )) (value Piece (between )))) (apply (remove (between )))) (to (is Empty (to ))))) (moveAgain )))))) (piece "King" Each (or (move Step (to (is Empty (to )))) (move Hop (between (and (is Enemy (who (between ))) (>= (value Piece (from )) (value Piece (between )))) (apply (remove (between )))) (to (is Empty (to ))) (then (if (can Move (hop (from (last To)) (between (and (is Enemy (who (between ))) (>= (value Piece (from )) (value Piece (between )))) (apply (remove (between )))) (to (is Empty (to ))))) (moveAgain )))))) (regions P1 (sites Top)) (regions P2 (sites Bottom))}) (rules (start {(place "Cone1" (expand (sites Bottom) 2)) (place "Cone2" (expand (sites Top) 2)) (place "Prince1" "H4" 1) (place "Prince2" "E9" 1) (place "King1" "I4" 2) (place "King2" "D9" 2)}) (play (if (is Prev Mover) (or (move Hop (from (last To)) (between (and (is Enemy (who (between ))) (>= (value Piece (from )) (value Piece (between )))) (apply (remove (between )))) (to (is Empty (to ))) (then (if (can Move (hop (from (last To)) (between (and (is Enemy (who (between ))) (>= (value Piece (from )) (value Piece (between )))) (apply (remove (between )))) (to (is Empty (to ))))) (moveAgain )))) (move Pass)) (if (and {(= 1 (count Pieces P1)) (= 1 (count Pieces P2)) (= (max (results (sites Occupied P1) (sites Occupied P1) (value Piece (to )))) (max (results (sites Occupied P2) (sites Occupied P2) (value Piece (to )))))}) (forEach Piece (priority (move Hop (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to )))) (move Step (to (and (is Empty (to )) (< (count Steps (to ) (regionSite (sites Occupied Next) 0)) (count Steps (from ) (regionSite (sites Occupied Next) 0)))))))) (forEach Piece)))) (end {(if (no Pieces Next) (result Next Loss)) (if (and {(< (max (results (sites Occupied Mover) (sites Occupied Mover) (value Piece (to )))) (max (results (sites Occupied Next) (sites Occupied Next) (value Piece (to ))))) (= 1 (count Pieces Next)) (no Moves Next)}) (result Mover Win)) (if (and {(= 1 (count Pieces P1)) (!= (where "King" P1) -1) (= 1 (count Pieces P2)) (!= (where "King" P2) -1)}) (result Mover Draw))})))

Game is played on an Alquerque board with 5x5 intersecting lines and with a triangular appendage on either side. Each player has sixteen pieces, which are placed on the intersections and move along the lines to the next open intersection. Players can hop opponents pieces to capture them. Multiple captures in one turn are allowed. A player wins when they capture all of the opponent's pieces or block them from being able to move.
(game "Mogul Putt'han" (players 2) (equipment {(board (merge {(square 5 Alternating) (shift 0.0 4.0 (rotate 180.0 (wedge 3))) (shift 0.0 -2.0 (wedge 3))}) Vertex) (piece "Marker" Each (or (move Hop (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to ))) (then (if (can Move (hop (from (last To)) (between (and (not (is In (between ) (sites ToClear))) (is Enemy (who (between ))))) (to (is Empty (to ))))) (moveAgain )))) (move Step (to (is Empty (to ))))))}) (rules (start {(place "Marker1" (union {(sites Row 0) (sites Row 1) (sites Row 2) (sites Row 3)})) (place "Marker2" (union {(sites Row 5) (sites Row 6) (sites Row 7) (sites Row 8)}))}) (play (if (is Prev Mover) (or (move Hop (from (last To)) (between (and (not (is In (between ) (sites ToClear))) (is Enemy (who (between )))) (apply (remove (between )))) (to (is Empty (to ))) (then (if (can Move (hop (from (last To)) (between (and (not (is In (between ) (sites ToClear))) (is Enemy (who (between ))))) (to (is Empty (to ))))) (moveAgain )))) (move Pass)) (forEach Piece))) (end (if (no Moves Next) (result Next Loss)))))

5x5 intersecting lines, with diagonals drawn in each quadrant. Eleven pieces per player, which begin on the two rows closest to the player, with the eleventh on the outer spot of the middle of to the left of the player. Players alternate turns moving a piece to an empty adjacent spot along the lines. A piece may capture an opponent's piece next to it by hopping over it to an empty spot immediately on the opposite side of the opponent's piece along the lines of the board. The player who captures all of the opponent's pieces wins.
(game "Sumi Naga Game (War)" (players 2) (equipment {(board (rectangle 5 5 Alternating) Vertex) (piece "Marker" Each (or (move Step (to (is Empty (to )))) (move Hop (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to ))) (then (if (can Move (hop (from (last To)) (between (and (not (is In (between ) (sites ToClear))) (is Enemy (who (between ))))) (to (is Empty (to ))))) (moveAgain ))))))}) (rules (start {(place "Marker1" (union (expand (sites Bottom)) (sites {"A3"}))) (place "Marker2" (union (expand (sites Top)) (sites {"E3"})))}) (play (forEach Piece)) (end (if (no Pieces Next) (result Next Loss)))))

Played on an Alquerque board with triangular appendages at the top and bottom. Sixteen pieces per player. Each player moves one spot along the lines on the board. Captures are made by hopping over an opponent's piece. Multiple hops are allowed per turn if possible. Captures are not compulsory. The player who captures all of the opponent's pieces wins.
(game "Hewakam Keliya" (players 2) (equipment {(board (merge {(square 5 Alternating) (shift 0.0 4.0 (rotate 180.0 (wedge 3))) (shift 0.0 -2.0 (wedge 3))}) Vertex) (piece "Marker" Each (or (move Hop (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to ))) (then (if (can Move (hop (from (last To)) (between (and (not (is In (between ) (sites ToClear))) (is Enemy (who (between ))))) (to (is Empty (to ))))) (moveAgain )))) (move Step (to (is Empty (to ))))))}) (rules (start {(place "Marker1" (union {(sites Row 0) (sites Row 1) (sites Row 2) (sites Row 3)})) (place "Marker2" (union {(sites Row 5) (sites Row 6) (sites Row 7) (sites Row 8)}))}) (play (if (is Prev Mover) (or (move Hop (from (last To)) (between (and (not (is In (between ) (sites ToClear))) (is Enemy (who (between )))) (apply (remove (between )))) (to (is Empty (to ))) (then (if (can Move (hop (from (last To)) (between (and (not (is In (between ) (sites ToClear))) (is Enemy (who (between ))))) (to (is Empty (to ))))) (moveAgain )))) (move Pass)) (forEach Piece))) (end (if (no Moves Next) (result Next Loss)))))

The board consists of 5x5 intersecting lines with diagonals. Pieces are placed on the intersections and can move along the lines. Each player has 12 pieces. Pieces can move to one adjacent point. Captures can be made by hopping over an opponent's piece. The goal is to capture all of the opponent's pieces.
(game "Alquerque" (players 2) (equipment {(board (rectangle 5 5 Alternating) Vertex) (piece "Counter" Each)}) (rules (start {(place "Counter1" (union {(expand (sites Bottom)) (sites {"D3" "E3"})})) (place "Counter2" (union {(sites {"A3" "B3"}) (expand (sites Top))}))}) (play (forEach Piece "Counter" (or (move Hop (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to )))) (move Step (to (is Empty (to ))))))) (end (if (no Moves Next) (result Next Loss)))))

9x9 intersecting lines, with diagonals drawn in every 4x4 square formed. Forty pieces per player, placed on the board with the central space unoccupied. Players alternate turns moving one piece to an empty adjacent spot. They may capture an opponent's piece by hopping over it. Multiple hops in one turn are allowed, but not required. The first person to capture all of the opponent's pieces wins.
(game "Meurimueng-rimueng Peuet Ploh" (players 2) (equipment {(board (rectangle 9 9 Alternating) Vertex) (piece "Marker" Each (or (move Hop (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to ))) (then (if (can Move (hop (from (last To)) (between (and (not (is In (between ) (sites ToClear))) (is Enemy (who (between ))))) (to (is Empty (to ))))) (moveAgain )))) (move Step (to (is Empty (to ))))))}) (rules (start {(place "Marker1" (forEach (sites Board) (< (site ) (centrePoint )))) (place "Marker2" (forEach (sites Board) (> (site ) (centrePoint ))))}) (play (if (is Prev Mover) (or (move Hop (from (last To)) (between (and (not (is In (between ) (sites ToClear))) (is Enemy (who (between )))) (apply (remove (between )))) (to (is Empty (to ))) (then (if (can Move (hop (from (last To)) (between (and (not (is In (between ) (sites ToClear))) (is Enemy (who (between ))))) (to (is Empty (to ))))) (moveAgain )))) (move Pass)) (forEach Piece))) (end (forEach Player (no Pieces Player) (result Player Loss)))))

5x5 intersecting lines, with diagonals in the four quadrants. Twelve pieces per player, arranged on the two rows closest to the player and the two spots in the central row to the player's right, leaving the central space empty. Players alternate turns moving a piece to an empty adjacent spot along the lines of the board. A piece belonging to the opponent may be captured when a piece hops over it to an empty adjacent spot immediately on the opposite side of the piece, along the lines of the board. The player who reduces the opponent to five pieces wins.
(game "Ethiopian Capture Game" (players 2) (equipment {(board (rectangle 5 5 Alternating) Vertex) (piece "Marker" Each (or (move Hop (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to )))) (move Step (to (is Empty (to ))))))}) (rules (start {(place "Marker1" (union {(expand (sites Bottom)) (sites {"D3" "E3"})})) (place "Marker2" (union {(sites {"A3" "B3"}) (expand (sites Top))}))}) (play (forEach Piece)) (end (if (<= (count Pieces Next) 5) (result Next Loss)))))

Played on a square Alquerque board with 9x9 intersecting lines with diagonals. Each player has 40 pieces. Pieces are placed on the intersections of the lines, and move forward along the lines to an adjacent unoccupied intersection. Once pieces reach the opposite side of the board from their starting position at the end of their turn, they are promoted and can move in any direction and over any distance. Opponent's pieces are captured by jumping them. Captures are obligatory if possible. If a player does not capture when they are supposed to, the opponent may remove that piece immediately and then play as normal. The player who captures all of their opponent's pieces or blocks them from being able to move wins.
(game "Zamma" (players {(player N) (player S)}) (equipment {(board (rectangle 9 9 Alternating) Vertex) (piece "Disc" Each (or (move Hop (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to ))) (then (and (if (is In (last To) (sites Next)) (promote (last To) (piece "DiscDouble") Mover)) (set Value Mover 0)))) (move Step Forwards (to (is Empty (to ))) (then (set Value Mover 1))) (then (if (is In (last To) (sites Next)) (promote (last To) (piece "DiscDouble") Mover))))) (piece "DiscDouble" Each (or (move Hop (between (count Rows) (count Rows) (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to ))) (then (set Value Mover 0))) (move Slide (then (set Value Mover 1))))) (regions P1 (sites Bottom)) (regions P2 (sites Top))}) (rules (start {(place "Disc1" (forEach (sites Board) (< (site ) (centrePoint )))) (place "Disc2" (forEach (sites Board) (> (site ) (centrePoint ))))}) (play (or (if (= (value Player Prev) 1) (or (if (and (is In (last From) (sites Pending)) (is In (last From) (sites Empty))) (move Select (from (last To) (is Occupied (from ))) (then (and {(remove (last To)) (moveAgain ) (set Value Prev 0)})))) (move Select (from (sites Pending) (is Occupied (from ))) (then (and {(remove (last To)) (moveAgain ) (set Value Prev 0)}))))) (do (set Pending (sites From (or (forEach Piece "Disc" (move Hop (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to ))) (then (and (if (is In (last To) (sites Next)) (promote (last To) (piece "DiscDouble") Mover)) (set Value Mover 0))))) (forEach Piece "DiscDouble" (move Hop (between (count Rows) (count Rows) (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to )))))))) (forEach Piece)))) (end (if (no Moves Mover) (result Next Win)))))

5x5 intersecting lines. Triangles on each side, with the apex intersecting with the midpoint of the side of the square. A line is drawn from the apex to the base of each triangle, and a line bisecting it and the two opposite sides. A diamond is drawn within the square, the corners of which intersect with the apices of the triangles and the midpoint of each side is the center point of each quadrant of the square. 24 pieces per player, which begin on the points of the board closest to the player and in the triangle to their right and the right half of the central row. The central point is vacant. Players alternate turns moving a piece to an empty adjacent spot on the board. A piece may capture an opponent's piece by hopping over it to an empty adjacent spot immediately on the opposite side of the opponent's pieces along the lines on the board. The player who captures all of the opponent's pieces wins.
(game "Padaivettu" (players 2) (equipment {(board (remove (merge {(shift 2.0 2.0 (square 5 Alternating)) (shift 2.0 0.0 (wedge 3)) (shift 5.0 3.0 (rotate 90.0 (wedge 3))) (shift 2.0 6.0 (rotate 180.0 (wedge 3))) (shift -1.0 3.0 (rotate 270.0 (wedge 3)))}) {{20 16} {16 12} {12 8} {8 4} {0 6} {6 12} {12 18} {18 24}}) Vertex) (piece "Marker" Each (or (move Step (to (is Empty (to )))) (move Hop (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to ))))))}) (rules (start {(place "Marker1" (difference (union (expand (sites Right)) (expand (sites Bottom) 4)) (expand (sites Centre) 2 W))) (place "Marker2" (difference (union (expand (sites Left)) (expand (sites Top) 4)) (expand (sites Centre) 2 E)))}) (play (forEach Piece)) (end (if (no Pieces Next) (result Next Loss)))))

Play begins with each player's pieces on the pieces occupying the points of one of the triangles, leaving the shared apex empty. Pieces move to the next adjacent point connected by a line. Captures are made by hopping over an opponent's piece. The player who captures all of the opponent's pieces wins.
(game "Lau Kata Kati" (players 2) (equipment {(board (merge (wedge 4) (shift 0.0 3.0 (rotate 180.0 (wedge 4)))) Vertex) (piece "Counter" Each (or (move Hop (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to )))) (move Step (to (is Empty (to ))))))}) (rules (start {(place "Counter1" (expand (sites Bottom) 2)) (place "Counter2" (expand (sites Top) 2))}) (play (forEach Piece)) (end (if (no Pieces Next) (result Next Loss)))))

5x5 intersecting lines, with diagonals in each quadrant. Two triangles, the apexes of which intersect with the square at the midpoint of opposite sides. One line bisecting the base of the triangle, and another bisecting this line. Eighteen pieces per player, each side arranged on one side of the board, with the central point empty and the player's pieces on the points to the right of it. Players alternate turns moving one of their pieces to an empty point. A piece may jump an opponent's piece to capture it. Multiple captures are allowed. The player who captures all of the opponent's pieces wins.
        
(game "Lam Pusri" (players 2) (equipment {(board (merge {(square 5 Alternating) (shift 0.0 4.0 (rotate 180.0 (wedge 3))) (shift 0.0 -2.0 (wedge 3))}) Vertex) (piece "Marker" Each (or (move Hop (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to ))) (then (if (can Move (hop (from (last To)) (between (and (not (is In (between ) (sites ToClear))) (is Enemy (who (between ))))) (to (is Empty (to ))))) (moveAgain )))) (move Step (to (is Empty (to ))))))}) (rules (start {(place "Marker1" (union {(sites Row 0) (sites Row 1) (sites Row 2) (sites Row 3) (expand (sites {"E5"}) W)})) (place "Marker2" (union {(sites Row 5) (sites Row 6) (sites Row 7) (sites Row 8) (expand (sites {"A5"}) E)}))}) (play (if (is Prev Mover) (or (move Hop (from (last To)) (between (and (not (is In (between ) (sites ToClear))) (is Enemy (who (between )))) (apply (remove (between )))) (to (is Empty (to ))) (then (if (can Move (hop (from (last To)) (between (and (not (is In (between ) (sites ToClear))) (is Enemy (who (between ))))) (to (is Empty (to ))))) (moveAgain )))) (move Pass)) (forEach Piece))) (end (if (no Pieces Next) (result Next Loss)))))

Each player begins with 21 pieces, arranges on the 21 intersections of three consecutive radii. Players alternate turns moving to an empty adjacent spot. Captures are made by hopping over an opponent's piece. The player who captures all of the other player's pieces wins.
(game "Gol Ekuish" (players 2) (equipment {(board (concentric {1 6 6 6 6 6 6 6}) Vertex) (piece "Counter" Each (or (move Hop Rotational (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to )))) (move Step Rotational (to (is Empty (to ))))))}) (rules (start {(place "Counter1" (sites {2 3 4 8 9 10 14 15 16 20 21 22 26 27 28 32 33 34 38 39 40})) (place "Counter2" (sites {1 7 13 19 25 31 37 5 6 11 12 17 18 23 24 29 30 35 36 41 42}))}) (play (forEach Piece)) (end (if (no Moves Next) (result Next Loss)))))

9x9 intersecting lines, with diagonals drawn in the large square. Forty pieces per player, arranged on the points closest to the player and to the right of the central spot, with the central spot remaining empty. Players alternate turns moving their pieces forward along the lines of the board. They cannot move sideways or backwards, except to capture. A piece may capture an adjacent opponent's piece by hopping over it to an empty spot immediately on the opposite side of the opponent's piece, along the lines of the board. When a player's piece reaches the line on the opposite side of the board from which it started, it is promoted to Sultan, and it may move in all directions along the lines of the board and over any unobstructed distance. The player who captures all of the opponent's pieces wins.
        
(game "Crand" (players {(player N) (player S)}) (equipment {(board (add (square 9) {{0 10} {10 20} {20 30} {30 40} {40 50} {50 60} {60 70} {70 80} {72 64} {64 56} {56 48} {48 40} {40 32} {32 24} {16 24} {16 8}}) Vertex) (piece "Counter" Each (or (move Step (difference Forwards Diagonal) (to (is Empty (to )))) (move Hop (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to )))) (then (if (is In (last To) (sites Next)) (promote (last To) (piece "DoubleCounter") Mover))))) (piece "DoubleCounter" Each (or (move Slide) (move Hop (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to )))))) (regions P1 (sites Bottom)) (regions P2 (sites Top))}) (rules (start {(place "Counter1" (union (sites {41 42 43 44}) (expand (sites Bottom) 3))) (place "Counter2" (union (sites {36 37 38 39}) (expand (sites Top) 3)))}) (play (forEach Piece)) (end (if (no Pieces Next) (result Next Loss)))))

7x7 lines, intersecting to form a square. Diagonals are drawn in the four quadrants of the board. Two triangles, their apices intersecting the main board at opposite midpoints. The base of the triangle is bisected by a line drawn from the apex, and this line is bisected and intersects with the other two sides of the triangle. Twenty pieces per player, which begin on the points in the triangles and the first two rows of points in the square on the side closest to the player. Players alternate turns moving a piece to an empty adjacent spot along the lines of the board. A piece may capture an opponent's piece by hopping over it to an empty point on the opposite side of the opponent's piece along the lies of the board. Multiple captures are allowed. The player who captures all of the opponent's peices wins.
(game "Mughal Pathan" (players 2) (equipment {(board (add (merge {(square 7) (shift 1.0 6.0 (rotate 180.0 (wedge 3))) (shift 1.0 -2.0 (wedge 3))}) {{0 8} {8 16} {16 24} {24 32} {32 40} {40 48} {6 12} {12 18} {18 24} {24 30} {30 36} {36 42} {3 9} {9 15} {15 21} {21 29} {29 37} {37 45} {45 39} {39 33} {33 27} {27 19} {19 11} {11 3}}) Vertex) (piece "Marker" Each (or (move Hop (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to ))) (then (if (can Move (hop (from (last To)) (between (and (not (is In (between ) (sites ToClear))) (is Enemy (who (between ))))) (to (is Empty (to ))))) (moveAgain )))) (move Step (to (is Empty (to ))))))}) (rules (start {(place "Marker1" (union (sites Bottom) (expand (sites Row 2)))) (place "Marker2" (union (sites Top) (expand (sites Row 8))))}) (play (if (is Prev Mover) (or (move Hop (from (last To)) (between (and (not (is In (between ) (sites ToClear))) (is Enemy (who (between )))) (apply (remove (between )))) (to (is Empty (to ))) (then (if (can Move (hop (from (last To)) (between (and (not (is In (between ) (sites ToClear))) (is Enemy (who (between ))))) (to (is Empty (to ))))) (moveAgain )))) (move Pass)) (forEach Piece))) (end (if (no Pieces Next) (result Next Loss)))))

Each player lays out the pieces on the board on the intersections of the lines, each filling all the intersections of the triangle closest to the player, plus the extra intersection to their right. Play moves to the next adjacent intersection connected by a line. Opponent's pieces can be captured by hopping over them. The player who captures all of the opponent's pieces wins.
(game "Dash Guti" (players 2) (equipment {(board (add (merge {(wedge 4) (shift 0.0 3.0 (rotate 180.0 (wedge 4)))}) {{0.0 3.0} {6.0 3.0}} {{7 19} {19 18} {0 19} {0 20} {20 16} {20 9}}) Vertex) (piece "Counter" Each (or (move Hop (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to )))) (move Step (to (is Empty (to ))))))}) (rules (start {(place "Counter1" (union {(sites Row 0) (sites Row 1) (sites Row 2) (intersection (sites Row 3) (sites Left))})) (place "Counter2" (union {(sites Row 6) (sites Row 5) (sites Row 4) (intersection (sites Row 3) (sites Right))}))}) (play (forEach Piece)) (end (if (no Moves Next) (result Next Loss)))))

5x5 holes. Twelve pieces per player, which begin in the two rows closest to each player and in the two holes to the right of the central hole. The central hole remains empty. 
            
            Players alternate turns moving a piece to an empty adjacent hole sideways or forward diagonally or orthogonally. Unpromoted pieces cannot move or capture backwards. A player may capture an opponent's piece by hopping over it to an empty space immediately on the opposite side of it, in one of the allowed directions. 
            
            The huff rules applies: when a player does not make a capture that they should, the opponent removes the piece that should have captured. 
            
            When a piece reaches a corner space on the opposite side of the board from where it starts, it is promoted to Dama. The Dama can move and capture any distance orthogonally or diagonally, and may also move backwards. 
            
        The player who captures all of the opponent's pieces wins.
(game "La Dama" (players {(player N) (player S)}) (equipment {(board (square 5) Vertex) (piece "Disc" Each (or (move Hop (directions {Rightward Leftward Forwards} All) (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to ))) (then (and (if (is In (last To) (sites Next)) (promote (last To) (piece "DiscDouble") Mover)) (set Value Mover 0)))) (move Step (directions {Rightward Leftward Forwards} All) (to (is Empty (to ))) (then (set Value Mover 1))) (then (if (is In (last To) (sites Next)) (promote (last To) (piece "DiscDouble") Mover))))) (piece "DiscDouble" Each (or (move Hop All (between (count Rows) (count Rows) (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to ))) (then (set Value Mover 0))) (move Slide All (then (set Value Mover 1))))) (regions P1 (intersection (sites Corners) (sites Bottom))) (regions P2 (intersection (sites Corners) (sites Top)))}) (rules (start {(place "Disc1" (union {(expand (sites Bottom)) (sites {"D3" "E3"})})) (place "Disc2" (union {(sites {"A3" "B3"}) (expand (sites Top))}))}) (play (or (if (= (value Player Prev) 1) (or (if (and (is In (last From) (sites Pending)) (is In (last From) (sites Empty))) (move Select (from (last To) (is Occupied (from ))) (then (and {(remove (last To)) (moveAgain ) (set Value Prev 0)})))) (move Select (from (sites Pending) (is Occupied (from ))) (then (and {(remove (last To)) (moveAgain ) (set Value Prev 0)}))))) (do (set Pending (sites From (or (forEach Piece "Disc" (move Hop (directions {Rightward Leftward Forwards} All) (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to ))) (then (and (if (is In (last To) (sites Next)) (promote (last To) (piece "DiscDouble") Mover)) (set Value Mover 0))))) (forEach Piece "DiscDouble" (move Hop All (between (count Rows) (count Rows) (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to )))))))) (forEach Piece)))) (end (if (no Pieces Mover) (result Mover Loss)))))

Claim Jumpers is a 2-player strategy game
            It may be played: 
            -- on a hex grid
            -- on a square grid
            -- on a square plus diagonal grid
            
            The goal is to maximize your pieces when the board is full. 
            A new piece is placed at the beginning of each turn. Followed, if possible, by a chain of forced jumps made by a different piece, that capture by 'flipping' the jumped opponent to your own color.
            
            The board starts empty. Turns alternate starting with White.
            Game ends when the board is full. No passing.
            
        Maximum captures are not required, but the piece choen to capture must capture at least one, and maynot stop capturing as long as it is able to capture the next adjacent opponent's piece.
(game "Claim Jumpers" (players 2) (equipment {(board (tri {3 5 3 5 3}) Vertex) (piece "Disc" Each)}) (rules (start (set Score Each 0)) (play (if (is Prev Mover) (if (= 0 (size Array (values Remembered))) (forEach Piece (move Hop (from (!= (from ) (last To))) Orthogonal (between (is In (between ) (difference (sites Occupied Next) (sites (values Remembered)))) (apply (set Pending (between )))) (to (is Empty (to ))) (then (and {(remember Value (value Pending)) (remove (value Pending)) (add (piece (id "Disc" Mover)) (to (value Pending)))} (then (and {(set Pending) (if (can Move (forEach Piece (move Hop (from (last To)) Orthogonal (between (is In (between ) (difference (sites Occupied Next) (sites (values Remembered))))) (to (is Empty (to )))))) (moveAgain ))})))))) (forEach Piece (move Hop (from (= (from ) (last To))) Orthogonal (between (is In (between ) (difference (sites Occupied Next) (sites (values Remembered)))) (apply (set Pending (between )))) (to (is Empty (to ))) (then (and {(remember Value (value Pending)) (remove (value Pending)) (add (piece (id "Disc" Mover)) (to (value Pending)))} (then (and {(set Pending) (if (can Move (forEach Piece (move Hop (from (last To)) Orthogonal (between (is In (between ) (difference (sites Occupied Next) (sites (values Remembered))))) (to (is Empty (to )))))) (moveAgain ))}))))))) (do (forget Value All) (move Add (piece (id "Disc" Mover)) (to (sites Empty)) (then (if (can Move (forEach Piece (move Hop (from (!= (from ) (last To))) Orthogonal (between (is In (between ) (difference (sites Occupied Next) (sites (values Remembered)))) (apply (set Pending (between )))) (to (is Empty (to ))) (then (and {(remember Value (value Pending)) (remove (value Pending)) (add (piece (id "Disc" Mover)) (to (value Pending)))} (then (and {(set Pending) (if (can Move (forEach Piece (move Hop (from (last To)) Orthogonal (between (is In (between ) (difference (sites Occupied Next) (sites (values Remembered))))) (to (is Empty (to )))))) (moveAgain ))}))))))) (moveAgain ))))) (then (and (set Score Mover (count Pieces Mover)) (set Score Next (count Pieces Next)))))) (end {(if (and (or {(no Moves Next) (all Passed)}) (= (score Mover) (score Next))) (result Mover Win)) (if (and (or {(no Moves Next) (all Passed)}) (!= (score Mover) (score Next))) (byScore ))})))

13x13 intersecting lines. Two players. Each player has 26 pieces. Pieces begin on the two lines closest to each player, opposite sides of the board. Pieces move along the lines of the board to an adjacent spot. A piece can be captured by hopping over an opponent's adjacent piece to an empty spot immediately on the opposite side of it. Multiple captures are allowed. The player who captures all of the opponent's pieces wins.
(game "Tavelspel" (players 2) (equipment {(board (square 13) Vertex) (piece "Marker" Each)}) (rules (start {(place "Marker1" (expand (sites Bottom))) (place "Marker2" (expand (sites Top)))}) (play (if (is Prev Mover) (or (move Hop (from (last To)) (between (and (not (is In (between ) (sites ToClear))) (is Enemy (who (between )))) (apply (remove (between )))) (to (is Empty (to ))) (then (if (can Move (hop (from (last To)) (between (and (not (is In (between ) (sites ToClear))) (is Enemy (who (between ))))) (to (is Empty (to ))))) (moveAgain )))) (move Pass)) (forEach Piece "Marker" (or (move Hop (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to ))) (then (if (can Move (hop (from (last To)) (between (and (not (is In (between ) (sites ToClear))) (is Enemy (who (between ))))) (to (is Empty (to ))))) (moveAgain )))) (move Step (to (is Empty (to )))))))) (end (if (no Pieces Next) (result Next Loss)))))

9x9 board played on the intersections, with diagonals for each 3x3 square. Forty pieces per player, one playing as white, the other as red, arranged on opposite sides of the board, each player's pieces taking up the first through fourth ranks of spaces, plus their right half of the fifth rank. The central spot remains empty. Players alternate turns by moving a piece to an adjacent empty spot along the lines on the board. A player may capture an opponent's piece by hopping over one adjacent piece if there is an empty spot behind it along a line on the board. The player who captures all of the opponent's pieces wins.
(game "Ratti-Chitti-Bakri" (players 2) (equipment {(board (rectangle 9 9 Alternating) Vertex) (piece "Marker" Each (or (move Hop (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to )))) (move Step (to (is Empty (to ))))))}) (rules (start {(place "Marker1" (forEach (sites Board) (< (site ) (centrePoint )))) (place "Marker2" (forEach (sites Board) (> (site ) (centrePoint ))))}) (play (forEach Piece)) (end (forEach Player (no Pieces Player) (result Player Loss)))))

5x5 intersecting lines, with diagonals in each quadrant. Two triangles, the apexes of which intersect with the square at the midpoint of opposite sides. One line bisecting the base of the triangle, and another bisecting this line. Each player has sixteen pieces, which begin on the points of one triangle and the two rows of points in front of it, thus leaving the central row of points empty. Players alternate turns moving a piece to an empty adjacent spot along the lines. A piece may capture an opponent's piece by hopping over it to an empty space immediately on the opposite side of the piece, along the lines of the board. The first player to capture all of the opponent's pieces wins.
(game "Dam (Singapore)" (players 2) (equipment {(board (merge {(square 5 Alternating) (shift 0.0 4.0 (rotate 180.0 (wedge 3))) (shift 0.0 -2.0 (wedge 3))}) Vertex) (piece "Marker" Each (or (move Hop (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to )))) (move Step (to (is Empty (to ))))))}) (rules (start {(place "Marker1" (union {(sites Row 0) (sites Row 1) (sites Row 2) (sites Row 3)})) (place "Marker2" (union {(sites Row 5) (sites Row 6) (sites Row 7) (sites Row 8)}))}) (play (forEach Piece)) (end (if (no Pieces Next) (result Next Loss)))))

A series of three parallel lines are drawn, with diagonals connecting the outer lines at intervals, crossing each other at the central line. Sixteen spaces each row. Pieces begin on all of the points on the board, except the central point and the leftmost point of the central row. Pieces are moved along the intersections, and they are placed on the board on opposing sides, leaving the central spot empty. The first player moves to this spot along one of the lines, and the opponent jumps this pieces, thereby capturing it.
(game "Kolowis Awithlaknannai" (players 2) (equipment {(board (merge {(repeat 1 1 {{0.5 0.0} {1.0 0.0}} (poly {{-0.5 0.0} {0.5 0.0} {0.0 0.5}})) (repeat 1 1 {{0.5 0.0} {1.0 0.0}} (poly {{-0.5 0.0} {0.5 0.0} {0.0 -0.5}})) (repeat 15 1 {{0.5 0.0} {1.0 0.0}} (poly {{0.5 0.0} {0.0 0.5} {1.0 0.5}})) (repeat 15 1 {{0.5 0.0} {1.0 0.0}} (poly {{0.5 0.0} {0.0 -0.5} {1.0 -0.5}})) (shift 0.5 0.0 (rectangle 1 15))}) Vertex) (piece "Counter" Each (or (move Hop (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to )))) (move Step (to (is Empty (to ))))))}) (rules (start {(place "Counter1" (difference (union (sites Bottom) (sites Direction (centrePoint ) W)) (coord "A2"))) (place "Counter2" (union (sites Direction (centrePoint ) E) (sites Top)))}) (play (forEach Piece)) (end (if (no Moves Next) (result Next Loss)))))

Each player begins with nine pieces. Pieces moves along the lines to the next intersection point. Players may hop an opponent's piece to capture it. Captures can be made in sequence if another capture is available after the previous one is made. The player who captures all of their opponent's pieces wins.
(game "Pretwa" (players 2) (equipment {(board (concentric {1 6 6 6}) Vertex) (piece "Counter" Each (or (move Hop Rotational (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to ))) (then (if (can Move (hop (from (last To)) Rotational (between (and (not (is In (between ) (sites ToClear))) (is Enemy (who (between ))))) (to (is Empty (to ))))) (moveAgain )))) (move Step Rotational (to (is Empty (to ))))))}) (rules (start {(place "Counter1" (sites {2 3 4 8 9 10 14 15 16})) (place "Counter2" (sites {1 6 5 7 12 11 13 18 17}))}) (play (if (is Prev Mover) (or (move Hop (from (last To)) Rotational (between (and (not (is In (between ) (sites ToClear))) (is Enemy (who (between )))) (apply (remove (between )))) (to (is Empty (to ))) (then (if (can Move (hop (from (last To)) Rotational (between (and (not (is In (between ) (sites ToClear))) (is Enemy (who (between ))))) (to (is Empty (to ))))) (moveAgain )))) (move Pass)) (forEach Piece))) (end (if (no Pieces Next) (result Next Loss)))))

5x5 intersecting lines, with diagonals in each square formed by the lines. Twenty pieces per player, which each player places on the points on their side of the board, as well as the two points to the left of the central space. The central spot remains empty. Players alternate turns by moving a piece to an adjacent empty spot along the lines on the board. A player may capture an opponent's piece by hopping over one adjacent piece if there is an empty spot behind it along a line on the board. The player who captures all of the opponent's pieces wins.
(game "Bis Gutiya" (players 2) (equipment {(board (square 5 Solid) Vertex) (piece "Marker" Each (or (move Step (to (is Empty (to )))) (move Hop (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to ))))))}) (rules (start {(place "Marker1" (forEach (sites Board) (< (site ) (centrePoint )))) (place "Marker2" (forEach (sites Board) (> (site ) (centrePoint ))))}) (play (forEach Piece)) (end (if (no Pieces Next) (result Next Loss)))))

5x5 intersecting lines with diagonals drawn in each quadrant. Twelve pieces per player, which begin on the rows closest to the player and the two spots to the right of the central point, leaving the central point open. Players alternate turns moving the pieces along the lines of the board. The first play is from one of the pieces directly above or below the central point. Pieces cannot move backwards. A player may capture an opponent's piece by hopping over it to an empty spot immediately adjacent to the opponent's piece on the opposite side, along the lines of the board. Pieces which reach the opposite edge of the board from where they started are promoted and can move and capture any distance along the two large diagonals of the board. The player who captures all of the opponent's pieces wins.
(game "Fetach" (players {(player N) (player S)}) (equipment {(board (rectangle 5 5 Alternating) Vertex) (piece "Counter" Each (or {(move Step (if (!= 0 (count Moves)) (difference Adjacent Backwards) Forwards) (to (is Empty (to ))) (then (if (is In (last To) (sites Next)) (promote (last To) (piece "DoubleCounter") Mover)))) (move Hop (difference Adjacent Backwards) (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to ))) (then (if (is In (last To) (sites Next)) (promote (last To) (piece "DoubleCounter") Mover))))})) (piece "DoubleCounter" Each (or {(move Step Adjacent (to (is Empty (to )))) (move Hop Adjacent (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to )))) (move Hop (from (from ) (is In (from ) (union (sites Direction 4 NW true) (sites Direction 0 NE true)))) Adjacent (between (count Rows) (count Rows) (and (is Enemy (who (between ))) (is In (between ) (union (sites Direction 4 NW true) (sites Direction 0 NE true)))) (apply (remove (between )))) (to (and (is Empty (to )) (is In (to ) (union (sites Direction 4 NW true) (sites Direction 0 NE true))))))})) (regions P1 (sites Bottom)) (regions P2 (sites Top))}) (rules (start {(place "Counter1" (union {(expand (sites Bottom)) (sites {"D3" "E3"})})) (place "Counter2" (union {(sites {"A3" "B3"}) (expand (sites Top))}))}) (play (forEach Piece)) (end (if (no Pieces Next) (result Next Loss)))))

Each player has 24 pieces, which are placed on the intersections of the lines and move along the lines to an adjacent intersection. Players may capture opponents' pieces by jumping them. Captures are not obligatory. Multiple captures can be made. A player wins by capturing all of the opponent's pieces.
(game "Peralikatuma" (players 2) (equipment {(board (merge {(shift 2.0 2.0 (square 5 Alternating)) (shift 2.0 0.0 (wedge 3)) (shift 5.0 3.0 (rotate 90.0 (wedge 3))) (shift 2.0 6.0 (rotate 180.0 (wedge 3))) (shift -1.0 3.0 (rotate 270.0 (wedge 3)))}) Vertex) (piece "Marker" Each)}) (rules (start {(place "Marker1" (union {(expand (sites Bottom) 2) (expand (sites Right) 3) (sites {"F3" "G3" "F4" "F6" "F7" "G7"})})) (place "Marker2" (union {(expand (sites Top) 2) (expand (sites Left) 3) (sites {"C3" "D3" "D4" "D6" "D7" "C7"})}))}) (play (if (is Prev Mover) (or (move Hop (from (last To)) (between (and (not (is In (between ) (sites ToClear))) (is Enemy (who (between )))) (apply (remove (between )))) (to (is Empty (to ))) (then (if (can Move (hop (from (last To)) (between (and (not (is In (between ) (sites ToClear))) (is Enemy (who (between ))))) (to (is Empty (to ))))) (moveAgain )))) (move Pass)) (forEach Piece "Marker" (or (move Hop (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to ))) (then (if (can Move (hop (from (last To)) (between (and (not (is In (between ) (sites ToClear))) (is Enemy (who (between ))))) (to (is Empty (to ))))) (moveAgain )))) (move Step (to (is Empty (to )))))))) (end (if (no Moves Next) (result Next Loss)))))

Three concentric circles, with four diameters dividing it into eight equal sections. Twelve pieces per player, placed on the points on one half of the circle, leaving the central point open. Players alternate turns moving one of their pieces to an empty adjacent spot along the lines. A piece may capture an opponent's piece by hopping over it to an empty spot immediately on the opposite side of the opponent's piece along the lines. The player who captures all of the opponent's pieces wins.
(game "Bara Guti (Bihar)" (players 2) (equipment {(board (concentric {1 8 8 8}) Vertex) (piece "Counter" Each (or (move Hop Rotational (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to )))) (move Step Rotational (to (is Empty (to ))))))}) (rules (start {(place "Counter1" (sites {2 3 4 5 10 11 12 13 18 19 20 21})) (place "Counter2" (sites {1 9 17 6 7 8 14 15 16 22 23 24}))}) (play (forEach Piece)) (end (if (no Pieces Next) (result Next Loss)))))

From the starting position, each player takes turns moving one piece to an adjacent point connected to its current position by a line. Captures are made by hopping over an adjacent piece. The player who captures all the opponent's pieces wins.
(game "Kotu Ellima" (players 2) (equipment {(board (merge {(shift 2.0 2.0 (square 5 Alternating)) (shift 2.0 0.0 (wedge 3)) (shift 5.0 3.0 (rotate 90.0 (wedge 3))) (shift 2.0 6.0 (rotate 180.0 (wedge 3))) (shift -1.0 3.0 (rotate 270.0 (wedge 3)))}) Vertex) (piece "Marker" Each (or (move Hop (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to )))) (move Step (to (is Empty (to ))))))}) (rules (start {(place "Marker1" (union {(expand (sites Bottom) 2) (expand (sites Right) 3) (sites {"F3" "G3" "E4" "F4" "F6" "F7" "G7"})})) (place "Marker2" (union {(expand (sites Top) 2) (expand (sites Left) 3) (sites {"C3" "D3" "D4" "D6" "E6" "D7" "C7"})}))}) (play (forEach Piece)) (end (if (no Moves Next) (result Next Loss)))))

Players take turns moving one of their pieces to an adjacent empty point, forwards or sideways. A piece can hop over an adjacent enemy piece to an empty point immeidately beyond it, forwards or sideways, and must do so if possible. Only one hope per turn is allowed. If a piece reaches the far point of the board, it is promoted to a king which can also move and hop backwards. Win by eliminating all enemy pieces. The game is drawn if both players are reduced to a single king.
(game "Game of Solomon" (players {(player N) (player S)}) (equipment {(board (renumber (splitCrossings (add (regular Star 6) {{0 5} {1 4} {2 3}}))) Vertex) (piece "Counter" Each) (piece "DoubleCounter" Each) (regions "Palace1" P1 (sites {"E7"})) (regions "Palace2" P2 (sites {"E1"}))}) (rules (start {(place "Counter1" (sites {"E1" "A2" "D2" "E2" "F2" "I2"})) (place "Counter2" (sites {"E7" "A6" "D6" "E6" "F6" "I6"}))}) (play (priority {(or (forEach Piece "Counter" (move Hop (directions {Forwards Rightward Leftward} true) (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to )))) (then (if (is In (last To) (sites Mover)) (promote (last To) (piece "DoubleCounter") Mover)))) (forEach Piece "DoubleCounter" (move Hop (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to )))))) (or (forEach Piece "Counter" (move Step (directions {Forwards Rightward Leftward} true) (to (is Empty (to )))) (then (if (is In (last To) (sites Mover)) (promote (last To) (piece "DoubleCounter") Mover)))) (forEach Piece "DoubleCounter" (move Step (to (is Empty (to ))))))})) (end {(if (no Moves Next) (result Mover Win)) (if (and {(= 1 (count Pieces P1)) (= 1 (count Pieces P2)) (= 1 (count Pieces P1 "DoubleCounter")) (= 1 (count Pieces P2 "DoubleCounter"))}) (result Mover Draw))})))

Two triangles, joined at the apex, with a line running through the apices bisecting the bases of each triangle, and another line bisecting this line and the sides of the triangle in each triangle. Six pieces per player, which begin on the six points in the triangle closest to the player. The apex remains empty. Players alternate turns moving a piece to an empty adjacent spot on the board. A player may capture an opponent's piece by hopping over it to an empty space immediately on the opposite side of the opponent's piece, according to the lines on the board. When a player moves their piece to one of the corners of the opponent's triangle, the piece is promoted. The promoted piece can move any distance along the lines.
(game "Felli" (players 2) (equipment {(board (graph {{0.0 0.0} {2.0 0.0} {4.0 0.0} {1.0 1.0} {2.0 1.0} {3.0 1.0} {2.0 2.0} {1.0 3.0} {2.0 3.0} {3.0 3.0} {0.0 4.0} {2.0 4.0} {4.0 4.0}} {{0 1} {0 3} {1 2} {1 4} {2 5} {3 4} {3 6} {4 5} {4 6} {5 6} {6 7} {6 8} {6 9} {7 8} {7 10} {8 9} {8 11} {9 12} {10 11} {11 12}}) Vertex) (piece "Counter" Each) (piece "DoubleCounter" Each) (regions P1 (intersection (sites Corners) (sites Bottom))) (regions P2 (intersection (sites Corners) (sites Top)))}) (rules (start {(place "Counter1" (expand (sites Bottom))) (place "Counter2" (expand (sites Top)))}) (play (or {(forEach Piece "Counter" (move Hop (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to )))) (then (if (is In (last To) (sites Next)) (promote (last To) (piece "DoubleCounter") Mover)))) (forEach Piece "Counter" (move Step (to (is Empty (to )))) (then (if (is In (last To) (sites Next)) (promote (last To) (piece "DoubleCounter") Mover)))) (forEach Piece "DoubleCounter" (move Slide)) (forEach Piece "DoubleCounter" (move Hop (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to )))))})) (end (if (no Moves Next) (result Next Loss)))))

5x5 intersecting lines with diagonals in the four quadrants. Twelve pieces per player, arranged on the intersections of the lines, on the first two ranks in front of each player and the two to the right of the player in the central rank. Pieces move in any direction one space. A piece may capture an opponent's piece by hopping over it to an empty space in a straight line. Captures are obligatory. If a player does not capture when they are supposed to, the opponent may remove that piece immediately and then play as normal.  Once pieces reach the opposite side of the board from their starting position at the end of their turn, they are promoted and can move in any direction and over any distance. The player who captures all of their opponent's pieces or blocks them from being able to move wins.
(game "Kharberg" (players 2) (equipment {(board (rectangle 5 5 Alternating) Vertex) (regions P1 (sites Bottom)) (regions P2 (sites Top)) (piece "Counter" Each (or (move Hop (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to ))) (then (and (if (is In (last To) (sites Next)) (promote (last To) (piece "DoubleCounter") Mover)) (set Value Mover 0)))) (move Step (to (is Empty (to ))) (then (set Value Mover 1))) (then (if (is In (last To) (sites Next)) (promote (last To) (piece "DoubleCounter") Mover))))) (piece "DoubleCounter" Each (or (move Hop (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to ))) (then (and (if (is In (last To) (sites Next)) (promote (last To) (piece "DoubleCounter") Mover)) (set Value Mover 0)))) (move Slide (then (set Value Mover 1)))))}) (rules (start {(place "Counter1" (union {(expand (sites Bottom)) (sites {"D3" "E3"})})) (place "Counter2" (union {(sites {"A3" "B3"}) (expand (sites Top))}))}) (play (or (if (= (value Player Prev) 1) (or (if (and (is In (last From) (sites Pending)) (is In (last From) (sites Empty))) (move Select (from (last To) (is Occupied (from ))) (then (and {(remove (last To)) (moveAgain ) (set Value Prev 0)})))) (move Select (from (sites Pending) (is Occupied (from ))) (then (and {(remove (last To)) (moveAgain ) (set Value Prev 0)}))))) (do (set Pending (sites From (or (forEach Piece "Counter" (move Hop (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to ))) (then (and (if (is In (last To) (sites Next)) (promote (last To) (piece "DoubleCounter") Mover)) (set Value Mover 0))))) (forEach Piece "DoubleCounter" (move Hop (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to ))) (then (and (if (is In (last To) (sites Next)) (promote (last To) (piece "DoubleCounter") Mover)) (set Value Mover 0)))))))) (forEach Piece)))) (end (if (no Moves Next) (result Mover Win)))))

Played on a grid of 4x4 squares, each square with both diagonals. Pieces are played on the intersections of the lines, moving to an empty point along one of the lines. Play begins with 20 pieces per player. Players take turns moving the pieces, and capture the opponent's pieces by hopping over them. When the back line on a player's side of the board is vacated, it is no longer in play. The player who captures the other player's pieces wins.
(game "Tuknanavuhpi" (players 2) (equipment {(board (square 5 Solid) Vertex) (piece "Counter" Each (or (move Hop (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to )))) (move Step (to (is Empty (to ))))))}) (rules (start {(place "Counter1" (union (difference (expand (sites Bottom) 2) (sites {"E5" "G5" "I5"})) (sites {"B2" "B4" "D2" "D4" "F2" "F4" "H2" "H4"}))) (place "Counter2" (union (difference (expand (sites Top) 2) (sites {"E5" "A5" "C5"})) (sites {"B6" "B8" "D6" "D8" "F6" "F8" "H6" "H8"})))}) (play (forEach Piece)) (end (if (no Moves Next) (result Next Loss)))))

3x3 intersecting lines, with diagonals in the four squares formed. Six pieces per player. Players alternate turns placing one of their pieces on the board. when all of the pieces have been placed, players alternate turns moving a piece by jumping over an adjacent spot to the next spot, along the lines of the board, which must be empty. If an opponent's piece is in the spot which was jumped, that piece is captured. The player who captures all of the opponent's pieces wins.
(game "Buudal" (players 2) (equipment {(board (square 3 Solid) Vertex) (hand Each) (piece "Marker" Each (move Hop (between true (apply (if (is Enemy (who (between ))) (remove (between ))))) (to (is Empty (to )))))}) (rules (start (place "Marker" "Hand" 6)) {(phase "Placement" (play (move (from (handSite Mover)) (to (sites Empty)))) (nextPhase Mover (all Sites (sites Hand Mover) (= 0 (count Cell (site )))) "Movement")) (phase "Movement" (play (forEach Piece)))} (end (if (no Pieces Next) (result Next Loss)))))

3x5 lines, intersecting one another and forming a square. Diagonals are drawn in the four quadrants of the board. Two triangles, their apices intersecting the main board at opposite midpoints. The base of the triangle is bisected by a line drawn from the apex, and this line is bisected and intersects with the other two sides of the triangle. Fourteen pieces per player, which begin on the points in the triangle and the first two rows of the square closest to each player. The central line remains empty. Players alternate turns moving to an empty adjacent point along the lines. A player may capture an opponent's piece by hopping over it to an empty space on the opposite side of the opponent's piece along the lines of the board. The player who captures all of the opponent's pieces wins.
(game "Pam Pait" (players 2) (equipment {(board (add (remove (merge {(square 5 Alternating) (shift 0.0 4.0 (rotate 180.0 (wedge 3))) (shift 0.0 -2.0 (wedge 3))}) {1 11 21 23 13 3}) {{0 1} {1 2} {8 9} {9 10} {16 17} {17 18}}) Vertex) (piece "Marker" Each (or (move Hop (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to )))) (move Step (to (is Empty (to ))))))}) (rules (start {(place "Marker1" (union (sites {"A4" "E4"}) (expand (sites Bottom) 3))) (place "Marker2" (union (sites {"A6" "E6"}) (expand (sites Top) 3)))}) (play (forEach Piece)) (end (if (no Pieces Next) (result Next Loss)))))

Players decide which colors to play, and who starts first. The board is filled in the beginning with all the players pieces. The only point vacant on the board is the middle point. Each player's pieces are placed on their half of the board, and lined up on the right-hand side of the fifth rank (the middle horizontal line of the grid board). Players alternate turns. Pieces move forward only (straight forward or diagonally forward) one space per turn following the pattern on the board until they are crowned Mullah by reaching the last rank. A non-Mullah piece may capture an enemy piece by hopping over it. The capture can be in any direction. When a piece reaches the other player's rank, it is promoted to Mullah. The Mullah can move and capture in any direction. It can also move any number of spaces. The Mullah can also capture an enemy piece from any distance, and land anywhere behind the captured piece provided there are no other pieces (friendly or not) within the spaces of the leap. If a piece piece reaches the other player's rank as an intermediate step of a capturing sequence, the piece does not get promoted to Mullah. The player to capture all of the opponent's pieces wins.
(game "Kharbaga" (players {(player S) (player N)}) (equipment {(board (square 5 Solid) Vertex) (piece "Counter" Each (or (move Step Forwards (to (is Empty (to )))) (move Hop (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to )))) (then (if (is In (last To) (sites Next)) (promote (last To) (piece "DoubleCounter") Mover))))) (piece "DoubleCounter" Each (or (move Hop (between (count Rows) (count Rows) (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to )))) (move Slide))) (regions P1 (sites Top)) (regions P2 (sites Bottom))}) (rules (start {(place "Counter2" (forEach (sites Board) (< (site ) (centrePoint )))) (place "Counter1" (forEach (sites Board) (> (site ) (centrePoint ))))}) (play (forEach Piece)) (end (if (no Moves Mover) (result Next Win)))))

Played on a board similar to Perali Kotuma, with the addition of triangular extensions on the four corners. Play begins with nine pieces for each player. Pieces move along the lines to the next open space. Opponent's pieces can be captured by hopping over them. Within the triangular extensions, pieces may move two places at a time, in a straight line. The player to capture all of the opponent's pieces wins.
(game "Terhuchu" (players 2) (equipment {(board (merge {(shift 2.0 2.0 (square 5 Alternating)) (shift 2.0 0.0 (wedge 3)) (shift 5.0 3.0 (rotate 90.0 (wedge 3))) (shift 2.0 6.0 (rotate 180.0 (wedge 3))) (shift -1.0 3.0 (rotate 270.0 (wedge 3))) (shift 0.65 1.15 (scale 0.5 (rotate -45.0 (wedge 3)))) (shift 5.35 1.15 (scale 0.5 (rotate 45.0 (wedge 3)))) (shift 5.35 5.85 (scale 0.5 (rotate 135.0 (wedge 3)))) (shift 0.65 5.85 (scale 0.5 (rotate -135.0 (wedge 3))))}) Vertex) (piece "Marker" Each (or {(move Hop (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to )))) (move Step (to (is Empty (to )))) (if (not (is In (from ) (difference (expand (sites Centre) 2) (sites {"F6" "I6" "L6" "F9" "L9" "F12" "I12" "L12"})))) (move Slide (between (exact 2) (and (is Empty (between )) (not (is In (between ) (difference (expand (sites Centre) 2) (sites {"F6" "I6" "L6" "F9" "L9" "F12" "I12" "L12"}))))))))}))}) (rules (start {(place "Marker1" (sites {"H3" "F6" "G6" "H6" "I6" "J6" "L6" "H8" "I8" "J8"})) (place "Marker2" (sites {"H10" "I10" "J10" "F12" "H12" "I12" "J12" "L12" "J15"}))}) (play (forEach Piece)) (end (if (no Moves Next) (result Next Loss)))))

Players alternate their turns using one piece to either move or capture exclusively per turn.
            Pieces may only move one space per turn either straight forward, diagonally forward, or sideways along a line onto a vacant adjacent intersection point. They cannot move backwards in any direction until they are promoted to Kings. However, pieces can make capturing moves backward.
            Captures are compulsory.
            Captured pieces are removed from the board.
            For pieces that have not yet been promoted to King, their captures are done by the short leap as in draughts and Alquerque. A piece leaps over an adjacent enemy piece onto a vacant adjacent intersection point on the other side. The leap must be in a straight line following the pattern on the board. Even pieces that are not yet promoted to King can capture enemy pieces backwards. A player's piece must continue to capture within a turn provided each capture meets the criteria of the short leap.
            A piece is promoted to King when it reaches the other player's first rank.
            Kings can move any number of unoccupied spaces in any available direction following the pattern of the board like the King in international draughts.
            Kings can leap over an enemy piece (and only one enemy piece per leap) from any distance and land any distance behind it onto a vacant intersection point as in the King in international draughts. The King must continue to capture within the turn if it is able to do so.
        The player who captures all of their opponent's pieces is the winner.
(game "Permainan-Tabal" (players {(player N) (player S)}) (equipment {(board (merge {(square 5 Alternating) (shift 0.0 4.0 (rotate 180.0 (wedge 3))) (shift 0.0 -2.0 (wedge 3))}) Vertex) (piece "Counter" P1 N) (piece "Counter" P2 S) (piece "DoubleCounter" Each) (regions P1 (sites Bottom)) (regions P2 (sites Top))}) (rules (start {(place "Counter1" (difference (expand (sites Bottom) 4) (sites Row 4))) (place "Counter2" (difference (expand (sites Top) 4) (sites Row 4)))}) (play (if (is Prev Mover) (if (= (what (last To)) (id "Counter" Mover)) (move Hop (from (last To)) Adjacent (between (and (not (is In (between ) (sites ToClear))) (is Enemy (who (between )))) (apply (remove (between )))) (to (is Empty (to ))) (then (if (can Move (move Hop (from (last To)) Adjacent (between (and (not (is In (between ) (sites ToClear))) (is Enemy (who (between )))) (apply (remove (between )))) (to (is Empty (to ))))) (moveAgain ) (if (is In (last To) (sites Next)) (promote (last To) (piece "DoubleCounter") Mover))))) (move Hop (from (last To)) Adjacent (between (count Rows) (count Rows) (and (not (is In (between ) (sites ToClear))) (is Enemy (who (between )))) (apply (remove (between )))) (to (is Empty (to ))) (then (if (can Move (hop (from (last To)) Adjacent (between (count Rows) (count Rows) (and (not (is In (between ) (sites ToClear))) (is Enemy (who (between ))))) (to (is Empty (to ))))) (moveAgain ))))) (priority {(or (forEach Piece "Counter" (move Hop (from ) Adjacent (between (and (not (is In (between ) (sites ToClear))) (is Enemy (who (between )))) (apply (remove (between )))) (to (is Empty (to ))) (then (if (can Move (move Hop (from (last To)) Adjacent (between (and (not (is In (between ) (sites ToClear))) (is Enemy (who (between )))) (apply (remove (between )))) (to (is Empty (to ))))) (moveAgain ) (if (is In (last To) (sites Next)) (promote (last To) (piece "DoubleCounter") Mover)))))) (forEach Piece "DoubleCounter" (move Hop Adjacent (between (count Rows) (count Rows) (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to ))) (then (if (can Move (hop (from (last To)) Adjacent (between (count Rows) (count Rows) (and (not (is In (between ) (sites ToClear))) (is Enemy (who (between ))))) (to (is Empty (to ))))) (moveAgain )))))) (or (forEach Piece "Counter" (move Step (directions {Forwards Rightward Leftward}) (to (is Empty (to )))) (then (if (is In (last To) (sites Next)) (promote (last To) (piece "DoubleCounter") Mover)))) (forEach Piece "DoubleCounter" (move Slide Adjacent)))}))) (end (if (no Moves Next) (result Mover Win)))))

The board consists of 5x5 intersecting lines with diagonals of each quadrant. Pieces are placed on the intersections and can move along the lines. Each player has 12 pieces. Pieces can move to one adjacent point. Captures can be made by hopping over an opponent's piece. The goal is to capture all of the opponent's pieces.
            
        
(game "Bara Guti" (players 2) (equipment {(board (rectangle 5 5 Alternating) Vertex) (piece "Marker" Each (or (move Hop (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to )))) (move Step (to (is Empty (to ))))))}) (rules (start {(place "Marker1" (forEach (sites Board) (< (site ) (centrePoint )))) (place "Marker2" (forEach (sites Board) (> (site ) (centrePoint ))))}) (play (forEach Piece)) (end (if (no Pieces Next) (result Next Loss)))))

Each player begins with their eleven pieces arrayed on the intersections of the lines in one of the triangles. Pieces move to an adjacent point along one of the lines connecting it to its present location. Captures are made by hopping over an opponent's piece. The player who captures all of the opponent's pieces wins.
(game "Egara Guti" (players 2) (equipment {(board (graph {{0.0 0.0} {2.0 0.0} {4.0 0.0} {6.0 0.0} {8.0 0.0} {2.0 2.0} {4.0 2.0} {6.0 2.0} {3.0 3.0} {4.0 3.0} {5.0 3.0} {4.0 4.0} {3.0 5.0} {4.0 5.0} {5.0 5.0} {2.0 6.0} {4.0 6.0} {6.0 6.0} {0.0 8.0} {2.0 8.0} {4.0 8.0} {6.0 8.0} {8.0 8.0}} {{0 1} {0 5} {1 2} {1 5} {2 3} {2 6} {3 4} {3 7} {4 7} {5 6} {5 8} {5 15} {6 7} {6 9} {7 10} {7 17} {8 9} {8 11} {9 10} {9 11} {10 11} {11 12} {11 13} {11 14} {12 13} {12 15} {13 14} {13 16} {14 17} {15 16} {15 18} {15 19} {16 17} {16 20} {17 21} {17 22} {18 19} {19 20} {20 21} {21 22}}) Vertex) (piece "Counter" Each (or (move Hop (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to )))) (move Step (to (is Empty (to ))))))}) (rules (start {(place "Counter1" (union (expand (sites Bottom)) (sites Row 2))) (place "Counter2" (union (expand (sites Top)) (sites Row 4)))}) (play (forEach Piece)) (end (if (no Moves Next) (result Next Loss)))))

5x5 intersecting lines, forming a grid. Diagonals in each of the quadrants. Twelve pieces per player, which begin on the points closest to the player, and the two points to the right of the center point. Players alternate turns moving a piece to an empty adjacent point along the lines of the board. A player may hop over an adjacent  opponent's pieces to an empty space immediately on the opposite side of it along the lines of the board to capture it. Multiple captures are allowed. A player wins if they capture all of their opponent's pieces, or reduces the opponent to one piece and blocks them from being able to move.
(game "Tsukkalavde" (players 2) (equipment {(board (rectangle 5 5 Alternating) Vertex) (piece "Marker" Each (or (move Hop (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to ))) (then (if (can Move (hop (from (last To)) (between (and (not (is In (between ) (sites ToClear))) (is Enemy (who (between ))))) (to (is Empty (to ))))) (moveAgain )))) (move Step (to (is Empty (to ))))))}) (rules (start {(place "Marker1" (union (expand (sites Bottom)) (sites {"D3" "E3"}))) (place "Marker2" (union (expand (sites Top)) (sites {"A3" "B3"})))}) (play (if (is Prev Mover) (or (move Hop (from (last To)) (between (and (not (is In (between ) (sites ToClear))) (is Enemy (who (between )))) (apply (remove (between )))) (to (is Empty (to ))) (then (if (can Move (hop (from (last To)) (between (and (not (is In (between ) (sites ToClear))) (is Enemy (who (between ))))) (to (is Empty (to ))))) (moveAgain )))) (move Pass)) (forEach Piece))) (end (if (and (no Moves Next) (>= 1 (count Pieces Next))) (result Mover Win)))))

5x5 intersecting lines and with a triangular appendage on either side. Each player has sixteen pieces, which are placed on the intersections and move along the lines to the next open intersection. Players can hop opponents pieces to capture them. Multiple captures in one turn are allowed. A player wins when they capture all of the opponent's pieces or block them from being able to move.
        
(game "Dam Hariman" (players 2) (equipment {(board (merge {(square 5 Alternating) (shift 0.0 4.0 (rotate 180.0 (wedge 3))) (shift 0.0 -2.0 (wedge 3))}) Vertex) (piece "Marker" Each (or (move Hop (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to ))) (then (if (can Move (hop (from (last To)) (between (and (not (is In (between ) (sites ToClear))) (is Enemy (who (between ))))) (to (is Empty (to ))))) (moveAgain )))) (move Step (to (is Empty (to ))))))}) (rules (start {(place "Marker1" (union {(sites Row 0) (sites Row 1) (sites Row 2) (sites Row 3)})) (place "Marker2" (union {(sites Row 5) (sites Row 6) (sites Row 7) (sites Row 8)}))}) (play (if (is Prev Mover) (or (move Hop (from (last To)) (between (and (not (is In (between ) (sites ToClear))) (is Enemy (who (between )))) (apply (remove (between )))) (to (is Empty (to ))) (then (if (can Move (hop (from (last To)) (between (and (not (is In (between ) (sites ToClear))) (is Enemy (who (between ))))) (to (is Empty (to ))))) (moveAgain )))) (move Pass)) (forEach Piece))) (end (if (no Moves Next) (result Next Loss)))))

5x5 intersecting lines, with diagonals drawn in each quadrant. Ten pieces per player, which begin on the two rows closes to the player. Players alternate turns moving a piece to an empty adjacent spot along the lines. A piece may capture an opponent's piece by hopping over it along the lines of the board to an empty spot immediately on the opposite side of the opponent's piece. The player who captures all of the opponent's pieces wins.
(game "Terhuchu (Small)" (players 2) (equipment {(board (rectangle 5 5 Alternating) Vertex) (piece "Marker" Each (or (move Step (to (is Empty (to )))) (move Hop (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to ))))))}) (rules (start {(place "Marker1" (expand (sites Bottom))) (place "Marker2" (expand (sites Top)))}) (play (forEach Piece)) (end (if (no Pieces Next) (result Next Loss)))))

9x9 intersecting lines, with diagonals in each 3x3 square. Two triangles on opposite sides, the apices of which intersect the central point on that side of the square. A line from the apex bisects the base, and this line is bisected with another line which intersects with the other two sides of the triangle. Forty pieces per player, which start on the four rows closest to the player, and on half of the central row. The central space remains empty. Players alternate turns moving a piece to an empty adjacent spot along the lines. Pieces may capture the adjacent piece of an opponent by hopping over it to an empty space directly behind it in a straight line. Multiple hops can be made in one turn if possible, with direction changes allowed. The player who captures all of their opponent's pieces wins.
(game "Satoel" (players 2) (equipment {(board (merge {(square 9 Alternating) (shift 2.0 8.0 (rotate 180.0 (wedge 3))) (shift 2.0 -2.0 (wedge 3))}) Vertex) (piece "Marker" Each (or (move Hop (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to ))) (then (if (can Move (hop (from (last To)) (between (and (not (is In (between ) (sites ToClear))) (is Enemy (who (between ))))) (to (is Empty (to ))))) (moveAgain )))) (move Step (to (is Empty (to ))))))}) (rules (start {(place "Marker1" (forEach (sites Board) (< (site ) (centrePoint )))) (place "Marker2" (forEach (sites Board) (and (> (site ) (centrePoint )) (< (site ) (* 9 9)))))}) (play (if (is Prev Mover) (or (move Hop (from (last To)) (between (and (not (is In (between ) (sites ToClear))) (is Enemy (who (between )))) (apply (remove (between )))) (to (is Empty (to ))) (then (if (can Move (hop (from (last To)) (between (and (not (is In (between ) (sites ToClear))) (is Enemy (who (between ))))) (to (is Empty (to ))))) (moveAgain )))) (move Pass)) (forEach Piece))) (end (if (no Pieces Next) (result Next Loss)))))

5x5 intersecting lines, with diagonals in each quadrant. Two triangles, the apexes of which intersect with the square at the midpoint of opposite sides. One line bisecting the base of the triangle, and another bisecting this line. Eighteen pieces per player, each side arranged on one side of the board, with the central point empty and the player's pieces on the points to the right of it. Players alternate turns moving one of their pieces to an empty point. A piece may jump an opponent's piece to capture it. Multiple captures are allowed. The player who captures all of the opponent's pieces wins.
(game "Ahtarah Guti" (players 2) (equipment {(board (merge {(square 5 Alternating) (shift 0.0 4.0 (rotate 180.0 (wedge 3))) (shift 0.0 -2.0 (wedge 3))}) Vertex) (piece "Marker" Each (or (move Hop (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to ))) (then (if (can Move (hop (from (last To)) (between (and (not (is In (between ) (sites ToClear))) (is Enemy (who (between ))))) (to (is Empty (to ))))) (moveAgain )))) (move Step (to (is Empty (to ))))))}) (rules (start {(place "Marker1" (union {(sites Row 0) (sites Row 1) (sites Row 2) (sites Row 3) (sites {13 14})})) (place "Marker2" (union {(sites Row 5) (sites Row 6) (sites Row 7) (sites Row 8) (sites {10 11})}))}) (play (if (is Prev Mover) (or (move Hop (from (last To)) (between (and (not (is In (between ) (sites ToClear))) (is Enemy (who (between )))) (apply (remove (between )))) (to (is Empty (to ))) (then (if (can Move (hop (from (last To)) (between (and (not (is In (between ) (sites ToClear))) (is Enemy (who (between ))))) (to (is Empty (to ))))) (moveAgain )))) (move Pass)) (forEach Piece))) (end (if (no Pieces Next) (result Next Loss)))))

5x5 intersecting lines with diagonals drawn in the four quadrants. Twelve pieces per player. which begin on two rows closest to the player and the two spaces in the central row on the player's right. Players alternate turns moving a piece to an empty adjacent point on the board, along the lines in a forward or sideways direction. A player may capture an opponent's piece by hopping over it to an empty space on immediately on the opposite side of it along the lines on the board. Captures are compulsory, and if the opponent realizes that the player did not make a possible capture, the opponent immediately captures the player's piece that could have captured but didn't. Regular pieces cannot capture backwards. When a piece reaches the farthest row on the opposite side of the board from where they started, it is promoted to a king, which can move and capture any distance along the lines of the board. The player who captures all of their opponent's pieces wins.
(game "Dama (Alquerque)" (players {(player N) (player S)}) (equipment {(board (rectangle 5 5 Alternating) Vertex) (piece "Counter" Each (or (move Hop (directions {Forwards Rightward Leftward}) (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to ))) (then (and (if (is In (last To) (sites Next)) (promote (last To) (piece "DoubleCounter") Mover)) (set Value Mover 0)))) (move Step (directions {Forwards Rightward Leftward}) (to (is Empty (to ))) (then (set Value Mover 1))) (then (if (is In (last To) (sites Next)) (promote (last To) (piece "DoubleCounter") Mover))))) (piece "DoubleCounter" Each (or (move Hop (between (count Rows) (count Rows) (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to ))) (then (set Value Mover 0))) (move Slide (then (set Value Mover 1))))) (regions P1 (sites Bottom)) (regions P2 (sites Top))}) (rules (start {(place "Counter1" (union {(expand (sites Bottom)) (sites {"D3" "E3"})})) (place "Counter2" (union {(sites {"A3" "B3"}) (expand (sites Top))}))}) (play (or (if (= (value Player Prev) 1) (or (if (and (is In (last From) (sites Pending)) (is In (last From) (sites Empty))) (move Select (from (last To) (is Occupied (from ))) (then (and {(remove (last To)) (moveAgain ) (set Value Prev 0)})))) (move Select (from (sites Pending) (is Occupied (from ))) (then (and {(remove (last To)) (moveAgain ) (set Value Prev 0)}))))) (do (set Pending (sites From (or (forEach Piece "Counter" (move Hop (directions {Forwards Rightward Leftward}) (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to ))) (then (and (if (is In (last To) (sites Next)) (promote (last To) (piece "DoubleCounter") Mover)) (set Value Mover 0))))) (forEach Piece "DoubleCounter" (move Hop (between (count Rows) (count Rows) (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to )))))))) (forEach Piece)))) (end (if (no Pieces Mover) (result Mover Loss)))))

The game is played either by two teams of two players, or by two players playing with two sets of pieces. The pieces move along the outer track of the board according to dice throws. If a piece lands on a space occupied by an opponent, the opponent's piece is sent back to the starting position. Certain marked squares indicate spaces where pieces are safe from being sent back. After completing a circuit of the board, the pieces then move into the central row of squares in the arm where the player began. The player must then move off all of their pieces by an exact roll. The player or team to remove all of their pieces from the board first wins.
(game "Pachisi" (players 4) (equipment {(board (add (hole (merge (shift 0.0 (/ (- 19.0 3.0) 2.0) (rectangle 3 19)) (shift (/ (- 19.0 3.0) 2.0) 0.0 (rectangle 19 3))) (poly {{8.0 8.0} {8.0 11.0} {11.0 11.0} {11.0 8.0}})) {{8 28 48 68 69 70 71 51 31 11 10 9}}) {(track "Track1" "97,68,N,11,E,N,W,53,N,W,S,42,W,S,E,8,S,55,N8" P1 true) (track "Track2" "98,46,W,53,N,W,S,42,W,S,E,8,S,E,N,11,E,34,W8" P2 true) (track "Track3" "99,81,S,42,W,S,E,8,S,E,N,11,E,N,W,53,N,94,S8" P3 true) (track "Track4" "100,4,E,8,S,E,N,11,E,N,W,53,N,W,S,42,W,19,E8" P4 true)}) (hand Each) (dice 2 0 6) (map "Die" {(pair 0 25) (pair 1 10) (pair 2 2) (pair 3 3) (pair 4 4) (pair 5 5) (pair 6 6)}) (map "Entry" {(pair 1 68) (pair 2 46) (pair 3 81) (pair 4 4)}) (map "PreviousGoal" {(pair 1 9) (pair 2 27) (pair 3 52) (pair 4 26)}) (regions "Castle" {61 63 65 32 47 15 80 84 86 21 38 3}) (regions "Grace" {0 1 6}) (piece "Pawn" Each (if (or (= (trackSite Move (count Pips)) 96) (and (is In (count Pips) (sites "Grace")) (= (from ) (mapEntry "PreviousGoal" (mover ))))) (move Select (from ) (to 96) (then (remove (last From)))) (if (and (not (= (trackSite Move (mapEntry "Die" (count Pips))) 96)) (not (= (trackSite Move (mapEntry "Die" (count Pips))) -1))) (move (from (from ) (level )) (to (trackSite Move (mapEntry "Die" (count Pips))) (apply (or (not (is In (trackSite Move (mapEntry "Die" (count Pips))) (sites "castle"))) (and (is In (trackSite Move (mapEntry "Die" (count Pips))) (sites "Castle")) (is Friend (who (trackSite Move (mapEntry "Die" (count Pips))))))) (if (is Enemy (who (to ))) (fromTo (from (to )) (to (handSite (who (to ))))))))))))}) (rules (start {(place Stack "Pawn1" (handSite P1) 4) (place Stack "Pawn2" (handSite P2) 4) (place Stack "Pawn3" (handSite P3) 4) (place Stack "Pawn4" (handSite P4) 4) (set Team 1 {P1 P3}) (set Team 2 {P2 P4})}) {(phase "firstTurn" (play (do (roll ) (move (from (handSite (mover ))) (to (trackSite Move (handSite (mover )) (mapEntry "Die" (count Pips))))))) (nextPhase (> (count Moves) 3) "Movement")) (phase "Movement" (play (do (roll ) (or {(forEach Piece) (if (and (is Occupied (handSite (mover ))) (is In (count Pips) (sites "Grace"))) (move (from (handSite Mover) (topLevel (handSite (mover )))) (to (mapEntry "Entry" (mover ))))) (move Pass)} (then (if (is In (count Pips) (sites "Grace")) (moveAgain )))))))} (end (if (no Pieces TeamMover) (result TeamMover Win)))))

To be reconstructed. The rules implemented here are suggested by Jenny Kile as follows: Besides being an 8x8 squared board, the board consists of certain marked spaces which denote safety, entry, or exit for players. The four corners, the four central squares, and two center squares on each side are crosscut, like shown. Two, three, or four people can play the game. If two players are playing, each would sit on one side of the board and enter their two pieces onto the center crosscut squares along the outer side The object of the game is to be the first player to enter and exit both his pieces. A player exits his piece once reaching the center squares. 
(game "Ashtapada" (players 2) (equipment {(board (square 8) {(track "Track1" "3,E,N,W,S,E1,N6,E5,S5,W4,N4,E3,S3,W1" 1 true) (track "Track2" "60,W,S,E,N,W1,S6,W5,N5,E4,S4,W3,N3,E1" 2 true) (track "Track3" "31,N,W,S,E,N1,W6,N5,E5,S4,W4,N3,E3,S1" 3 true) (track "Track4" "32,S,E,N,W,S1,E6,S5,W5,N4,E4,S3,W3,N1" 4 true)}) (dice 2 0 4) (hand Each) (map "DieValue" {(pair 4 8)}) (map "Entry" {(pair P1 "D1") (pair P2 "E8")}) (map "Exit" {(pair P1 "E3") (pair P2 "D6")}) (regions "Protect" (sites {"A1" "A4" "A5" "A8" "D1" "D4" "D5" "D8" "E1" "E4" "E5" "E8" "H1" "H4" "H5" "H8"})) (piece "Disc" Each (if (!= (trackSite Move (mapEntry "DieValue" (count Pips))) -1) (if (if (is In (trackSite Move (mapEntry "DieValue" (count Pips))) (sites "Protect")) (not (is Enemy (who (trackSite Move (mapEntry "DieValue" (count Pips)))))) true) (move (from ) (to (trackSite Move (mapEntry "DieValue" (count Pips))) (apply (is Enemy (who (to ))) (fromTo (from (to )) (to (handSite (who (to )))))))))))}) (rules (start {(place "Disc1" (handSite P1) 2) (place "Disc2" (handSite P2) 2)}) (play (do (if (not (is Prev Mover)) (roll )) (if (is Prev Mover) (or (forEach Piece (if (= (from ) (mapEntry "Exit" Mover)) (move Remove (from )) (if (!= (trackSite Move 1) -1) (if (if (is In (trackSite Move 1) (sites "Protect")) (not (is Enemy (who (trackSite Move 1)))) true) (move (from ) (to (trackSite Move 1) (apply (is Enemy (who (to ))) (fromTo (from (to )) (to (handSite (who (to )))))))))))) (if (not (all Sites (sites Hand Mover) (= 0 (count Cell (site ))))) (move (from (handSite Mover)) (to (mapEntry "Entry" Mover) (not (is Enemy (who (to )))))))) (if (can Move (forEach Piece)) (forEach Piece (then (if (= (count Pips) 3) (moveAgain )))) (move Pass (then (if (= (count Pips) 3) (moveAgain )))))))) (end (if (no Pieces Mover) (result Mover Win)))))

The game is played on a board with twelve points on either side. The points form a continuous track in a horseshoe shape; each player progresses in opposite directions (one from their bottom right to the top right, the other from their bottom left to their top left). Each player has 15 pieces. The starting position is as such, numbering the points from the origin of each player's track: Point six: five pieces. Point 8: three pieces. Point 13: five pieces. Point 24: two pieces. Players move according to the number on each die by moving one piece the number on one die and another the number on the other die, or by moving one piece twice (once for each die). Players cannot end their move on a point with multiple opposing pieces. If a player ends the turn on a point with one opposing piece, that piece is placed in the middle of the board (not on a point) and must reenter the board according to the next die roll, counting the origin point as a move of one. They cannot reenter on a point with two or more pieces. No other pieces can move until all of the pieces belonging to that player are removed from the center. When all of a player's pieces are on their final 6 points, they may start removing pieces from the board. They can do so by rolling a 6 to move from the 6th point, and so on down to 1. Players must use all available moves presented by the dice. The first player to remove all of their pieces wins. The winner gains one point, or two points if the opponent has pieces in their starting quadrant.
        
(game "Nard" (players 2) (equipment {(board (rectangle 2 13) {(track "Track1" {6 12 11 10 9 8 7 5 4 3 2 1 0 13 14 15 16 17 18 20 21 22 23 24 25 -2} P1 true) (track "Track2" {19 25 24 23 22 21 20 18 17 16 15 14 13 0 1 2 3 4 5 7 8 9 10 11 12 -2} P2 true)} Vertex) (dice 6 2) (map "Bar" {(pair P1 6) (pair P2 19)}) (regions "FinalQuadrant" P1 (sites {20 21 22 23 24 25})) (regions "FinalQuadrant" P2 (sites {7 8 9 10 11 12})) (piece "Disc" Each (forEach Die (!= (pips ) 0) (if (= (trackSite Move (from ) (pips )) -2) (if (all Sites (sites Occupied Mover) (is In (site ) (sites Mover "FinalQuadrant"))) (move Remove (from ))) (move (from (from )) (to (trackSite Move (from ) (pips )) (or (not (is Enemy (who (to )))) (= 1 (size Stack (to )))) (apply (is Enemy (who (to ))) (fromTo (from (to )) (to (mapEntry "Bar" Next))))))) (then (if (not (all DiceUsed)) (moveAgain )))))}) (rules (start {(place Stack "Disc1" 7 5) (place Stack "Disc1" 4 3) (place Stack "Disc1" 13 5) (place Stack "Disc1" 25 2) (place Stack "Disc2" 20 5) (place Stack "Disc2" 17 3) (place Stack "Disc2" 0 5) (place Stack "Disc2" 12 2)}) (play (do (if (not (is Prev Mover)) (roll )) (priority {(if (is Occupied (mapEntry "Bar" Mover)) (forEach Die (!= (pips ) 0) (move (from (mapEntry "Bar" Mover)) (to (trackSite Move (mapEntry "Bar" Mover) (pips )) (< (size Stack (to )) 2) (apply (is Enemy (who (to ))) (fromTo (from (to )) (to (mapEntry "Bar" Next)))))) (then (if (not (all DiceUsed)) (moveAgain ))))) (if (is Empty (mapEntry "Bar" Mover)) (max Distance (forEach Piece true)))}) (then (if (no Pieces Mover) (if (no Pieces Enemy (sites Mover "FinalQuadrant")) (addScore Mover 1) (addScore Mover 2)))))) (end (if (no Pieces Mover) (result Mover Win)))))

Play begins in the central row and continues from left to right, then down the furthest row from right to left, then on the closest row from left to right. Played using three dice; throws can be used singly or combined but could not be divided. No second throw with doubles or triples. More than one piece of the same player can occupy one point, Single pieces can be removed from the board when the opponent lands on it; it must then be re-entered to the board before the player can move their other pieces. The goal is to bear off all of the player's pieces, which can be done one they are all in the closest row.
(game "XII Scripta" (players 2) (equipment {(board (add (merge (rectangle 3 6) (shift 7.0 0.0 (rectangle 3 6))) {{5 18} {11 24} {17 30}}) {(track "Track1" "36,6,E,N1,W,0,E,End" P1 true) (track "Track2" "38,6,E,S1,W,12,E,End" P2 true)} Vertex) (dice 3) (hand Each 2) (piece "Disc" Each (forEach Die true (and (!= (pips ) 0) (!= (trackSite Move (from ) (pips )) -1)) (if (= (trackSite Move (from ) (pips )) -2) (move Select (from (from )) (then (if (= (count (last To)) 1) (remove (last To)) (set Count (last To) (- (count (last To)) 1))))) (move (from (from )) (to (trackSite Move (from ) (pips )) (not (and (is Enemy (who (to ))) (> (count (to )) 1))) (apply (and (is Enemy (who (to ))) (= (count (to )) 1)) (fromTo (from (to )) (to (handSite Next 1)))))))))}) (rules (start {(place "Disc1" (handSite P1) 15) (place "Disc2" (handSite P2) 15)}) (play (do (if (not (is Prev Mover)) (roll )) (if (!= (what (handSite Mover 1)) 0) (forEach Die true (and (!= (pips ) 0) (!= (trackSite Move (handSite Mover) (pips )) -1)) (if (= (trackSite Move (handSite Mover) (pips )) -2) (move Select (from (handSite Mover 1)) (then (if (= (count (last To)) 1) (remove (last To)) (set Count (last To) (- (count (last To)) 1))))) (move (from (handSite Mover 1)) (to (trackSite Move (handSite Mover) (pips )) (not (and (is Enemy (who (to ))) (> (count (to )) 1))) (apply (and (is Enemy (who (to ))) (= (count (to )) 1)) (fromTo (from (to )) (to (handSite Next 1)))))))) (or (forEach Piece) (forEach Piece (mover ))) (then (if (can Move (if (!= (what (handSite Mover 1)) 0) (forEach Die true (and (!= (pips ) 0) (!= (trackSite Move (handSite Mover) (pips )) -1)) (if (= (trackSite Move (handSite Mover) (pips )) -2) (move Select (from (handSite Mover 1)) (then (if (= (count (last To)) 1) (remove (last To)) (set Count (last To) (- (count (last To)) 1))))) (move (from (handSite Mover 1)) (to (trackSite Move (handSite Mover) (pips )) (not (and (is Enemy (who (to ))) (> (count (to )) 1))) (apply (and (is Enemy (who (to ))) (= (count (to )) 1)) (fromTo (from (to )) (to (handSite Next 1)))))))) (or (forEach Piece) (forEach Piece (mover ))))) (moveAgain )))))) (end (if (no Pieces Mover) (result Mover Win)))))

2x12 board, divided in half. Spaces on each side take the form of semi-circular sockets, into which the pieces fit. Fifteen pieces per player. Three six-sided dice. Players move according to the number on each die by moving one piece the value on one die then another piece the value on the other die, or by moving one piece the value of one die and then the value of the other. One player begins with all of their pieces on the space furthest to the left on their side, the other with their pieces on the point directly opposite it. Pieces move in opposite directions around the board, toward the point where the opponent's pieces begin, and bearing off the board from there. A player cannot have two of their pieces on the same spot in the starting quadrant. When a piece lands on the same space as a single opponent's piece, the opponent's piece is sent back to where it began. The first person to bear off all their pieces wins. If players move their pieces such that they fill up all the points in a quadrant, and the other fills up all of the points in an adjacent quadrant such that neither player can move, the game is a draw. It is a prime win when one player has twelve pieces arranged on consecutive points so that the other player cannot pass them. When the player sends four pieces back to the beginning while preserving this state, it is a prime win.
(game "Emperador" (players 2) (equipment {(board (merge {(rectangle 1 6) (shift 7.0 0.0 (rectangle 1 6)) (shift 0.0 6.0 (rectangle 1 6)) (shift 7.0 6.0 (rectangle 1 6))}) {(track "Track1" {24 0 1 2 3 4 5 6 7 8 9 10 11 23 22 21 20 19 18 17 16 15 14 13 12} P1 true) (track "Track2" {25 12 13 14 15 16 17 18 19 20 21 22 23 11 10 9 8 7 6 5 4 3 2 1 0} P2 true)} Vertex) (dice 6 3) (hand Each) (regions "StartingQuadrant" P1 (sites {0 1 2 3 4 5})) (regions "StartingQuadrant" P2 (sites {12 13 14 15 16 17})) (piece "Disc" Each (forEach Die (!= (pips ) 0) (if (= (trackSite Move (pips )) -1) (move Remove (from )) (if (or {(is Empty (trackSite Move (pips ))) (and (is Friend (who (trackSite Move (pips )))) (if (is In (to ) (sites Mover "StartingQuadrant")) (not (= 1 (size Stack (trackSite Move (pips ))))) true)) (and (is Enemy (who (trackSite Move (pips )))) (= 1 (size Stack (trackSite Move (pips )))))}) (move (from ) (to (trackSite Move (pips )) (apply (is Enemy (who (to ))) (fromTo (from (to )) (to (handSite (who (to ))))))))))))}) (rules (start {(place Stack "Disc1" 0 15) (place Stack "Disc2" 12 15)}) (play (do (if (not (is Prev Mover)) (roll )) (or (forEach Piece true) (forEach Piece (mover ) true) (then (if (not (all DiceUsed)) (moveAgain )))))) (end {(if (no Pieces Mover) (result Mover Win)) (if (and (no Moves P1) (no Moves P2)) (result Mover Draw))})))

The game is played on a board with twelve points on either side. The points form a continuous track in a horseshoe shape; each player progresses in opposite directions (one from their bottom right to the top right, the other from their bottom left to their top left. Each player has 15 pieces. The starting position is as such, numbering the points from the origin of each player's track: Point six: five pieces. Point 8: three pieces. Point 13: five pieces. Point 24: two pieces. Play begins by each player rolling one die; the player who rolls the highest plays first, and then rolls again to begin play. Players move according to the number on each die by moving one piece the number on one die and another the number on the other die, or by moving one piece twice (once for each die). If doubles are rolled, the player must play the number on each die twice. Players cannot end their move on a point with multiple opposing pieces. If a player ends the turn on a point with one opposing piece, that piece is placed in the middle of the board (not on a point) and must reenter the board according the the next die roll, counting the origin point as a move of one. They cannot reenter on a point with two or more pieces. No other pieces can move until all of the pieces belonging to that player are removed from the center. When all of a player's pieces are on their final six points, they may start removing pieces from the board. They can do so by rolling a 6 to move from the 6th point, and so on down to 1. Players must use all available moves presented by the dice. The first player to remove all of their pieces wins.
            
(game "Frangieh" (players 2) (equipment {(board (rectangle 2 13) {(track "Track1" {6 12 11 10 9 8 7 5 4 3 2 1 0 13 14 15 16 17 18 20 21 22 23 24 25 -2} P1 true) (track "Track2" {19 25 24 23 22 21 20 18 17 16 15 14 13 0 1 2 3 4 5 7 8 9 10 11 12 -2} P2 true)} Vertex) (dice 2) (regions P1 {20 21 22 23 24 25}) (regions P2 {7 8 9 10 11 12}) (map {(pair 1 6) (pair 2 19)}) (piece "Disc" Each (forEach Die true (and {(!= (pips ) 0) (!= (trackSite Move (from ) (pips )) -1) (!= (trackSite Move (from ) (pips )) -2)}) (move (from (from )) (to (trackSite Move (from ) (pips )) (or (not (is Enemy (who (to )))) (= 1 (size Stack (to )))) (apply (is Enemy (who (to ))) (fromTo (from (to )) (to (mapEntry (next )))))))))}) (rules (start {(place Stack "Disc1" 0 5) (place Stack "Disc1" 12 2) (place Stack "Disc1" 17 3) (place Stack "Disc1" 20 5) (place Stack "Disc2" 4 3) (place Stack "Disc2" 7 5) (place Stack "Disc2" 13 5) (place Stack "Disc2" 25 2)}) (play (do (if (not (is Prev Mover)) (roll )) (if (all Sites (sites Occupied Mover) (is In (site ) (sites Mover))) (forEach Die true (!= (pips ) 0) (forEach Site (sites Occupied Mover) (if (and (is Occupied (site )) (!= (trackSite Move (site ) (pips )) -1)) (if (= (trackSite Move (site ) (pips )) -2) (move Remove (site )) (move (from (site )) (to (trackSite Move (site ) (pips )) (or (not (is Enemy (who (to )))) (= 1 (size Stack (to )))) (apply (is Enemy (who (to ))) (fromTo (from (to )) (to (mapEntry (next ))))))))) (firstMoveOnTrack "Track" Mover (if (and (is Friend (who (site ))) (< (trackSite Move (site ) (pips )) 0)) (move Remove (site )))) (then (if (not (all DiceUsed)) (moveAgain ))))) (if (is Empty (mapEntry (mover ))) (forEach Piece true) (forEach Die true (!= (pips ) 0) (move (from (mapEntry (mover ))) (to (trackSite Move (mapEntry (mover )) (pips )) (or (not (is Enemy (who (to )))) (= 1 (size Stack (to )))) (apply (is Enemy (who (to ))) (fromTo (from (to )) (to (mapEntry (next )))))))) (then (if (not (all DiceUsed)) (if (can Move (if (is Empty (mapEntry (mover ))) (forEach Piece true) (forEach Die true (!= (pips ) 0) (move (from (mapEntry (mover ))) (to (trackSite Move (mapEntry (mover )) (pips )) (or (not (is Enemy (who (to )))) (= 1 (size Stack (to )))) (apply (is Enemy (who (to ))) (fromTo (from (to )) (to (mapEntry (next )))))))))) (moveAgain )))))))) (end (if (no Pieces Mover) (result Mover Win)))))

The board is a single track: nine squares along the bottom row. From the central space, a track of 25 spaces, which makes turns every five spaces. It begins vertically, then to the right, then vertical, then diagonallyup and to the left, then diagonallydown and to the left. The squares just before the track turns are marked with an \"X.\" Three pieces per player. Moves are determined with six cowrie shells, the number of mouths which are face up determine the length of the move. 6, 5, and 1 give the player an additional throw. A player must throw a 6, 5, or 1 to enter a piece on the board. The players begin on opposite sides of the bottom row of squares. The score of each throw must be used in its entirety by one piece; it cannot be subdivided. When a player's piece lands on the same square as an opponent's piece, the opponent's piece is sent back to the start. A piece resting on a marked square cannot be sent to start. To move off the board, a player must throw exactly one more than the number of spaces remaining in the track. The first player to remove all of their pieces from the board wins.
(game "Pancha Keliya" (players 2) (equipment {(board (rotate 90.0 (merge {(shift 2.79 10.44 (rotate 135.0 (rectangle 5 1))) (shift 6.32 11.15 (rotate 45.0 (rectangle 5 1))) (shift 9.0 11.0 (graph {{0.0 0.0} {-0.75 0.55} {-0.04 1.24} {1.0 0.0}} {{0 1} {1 2} {2 3} {3 0}})) (shift 9.0 5.0 (rectangle 6 1)) (shift 5.0 5.0 (rectangle 1 5)) (rectangle 1 9) (shift 4.0 0.0 (rectangle 6 1))})) {(track "Track1" "23,N4,W,N,W,11,7,SW,SE,End" P1 true) (track "Track2" "31,S4,W,N,W,11,7,SW,SE,End" P2 true)}) (piece "Marker" Each (if (= (trackSite Move (count Pips)) -2) (move Remove (from )) (if (!= (trackSite Move (count Pips)) -1) (if (or (is Empty (trackSite Move (count Pips))) (and (not (is Friend (who (trackSite Move (count Pips))))) (not (is In (trackSite Move (count Pips)) (sites "Protect"))))) (move (from ) (to (trackSite Move (count Pips)) (apply (is Enemy (who (to ))) (fromTo (from (to )) (to (mapEntry "Entry" Next)))))))))) (dice 2 0 6) (hand Each) (regions "Protect" (sites {27 19 12 10 1})) (regions "SpecialDiceValues" (sites {1 5 6})) (map "Entry" {(pair P1 23) (pair P2 31)})}) (rules (start (place "Marker" "Hand" 3)) (play (do (roll ) (if (and (is In (count Pips) (sites "SpecialDiceValues")) (not (all Sites (sites Hand Mover) (= 0 (count Cell (site )))))) (or (move (from (handSite Mover)) (to (mapEntry "Entry" Mover) (not (is Enemy (who (to )))))) (forEach Piece) (then (moveAgain ))) (forEach Piece)))) (end (if (no Pieces Mover) (result Mover Win)))))

2x12 board, divided in half. Spaces on each side take the form of semi-circular sockets, into which the pieces fit. Fifteen pieces per player. Two or three six-sided dice. Players move according to the number on each die by moving one piece the value on one die then another piece the value on the other die, or by moving one piece the value of one die and then the value of the other. One player begins with all of their pieces on the space furthest to the left on their side, the other with their pieces on the point directly opposite it. Pieces move in opposite directions around the board, only on the half of the board where the pieces begin, toward the point where the opponent's pieces begin, and bearing off the board from there. When a piece lands on the same space as an opponent's piece, the opponent's piece is sent back to where it began. The first person to bear off all their pieces wins. If players move their pieces such that they fill up all the points in a quadrant, and the other fills up all of the points in an adjacent quadrant such that neither player can move, the game is a draw.
        
(game "Medio Emperador" (players 2) (equipment {(board (merge {(rectangle 1 6) (shift 7.0 0.0 (rectangle 1 6)) (shift 0.0 6.0 (rectangle 1 6)) (shift 7.0 6.0 (rectangle 1 6))}) {(track "Track1" {24 0 1 2 3 4 5 6 7 8 9 10 11 23 22 21 20 19 18 17 16 15 14 13 12} P1 true) (track "Track2" {25 12 13 14 15 16 17 18 19 20 21 22 23 11 10 9 8 7 6 5 4 3 2 1 0} P2 true)} Vertex) (dice 6 2) (hand Each) (piece "Disc" Each (forEach Die (!= (pips ) 0) (if (= (trackSite Move (pips )) -1) (move Remove (from )) (if (or (not (is Enemy (who (trackSite Move (pips ))))) (= 1 (size Stack (trackSite Move (pips ))))) (move (from ) (to (trackSite Move (pips )) (apply (is Enemy (who (to ))) (fromTo (from (to )) (to (handSite Next))))))))))}) (rules (start {(place Stack "Disc1" 0 15) (place Stack "Disc2" 12 15)}) (play (do (if (not (is Prev Mover)) (roll )) (or (forEach Piece true) (forEach Piece (mover ) true) (then (if (not (all DiceUsed)) (moveAgain )))))) (end {(if (no Pieces Mover) (result Mover Win)) (if (and (no Moves P1) (no Moves P2)) (result Mover Draw))})))

The game is played on a board with twelve points on either side. The points form a continuous track in a horseshoe shape; both players progress in an anti-clockwise direction. Fifteen pieces per player, two six-sided dice. Each player begins with two pieces on the rightmost point on the opposite side of the board. Players move according to the number on each die by moving one piece the number on one die and other the number on the other die, or by moving one piece the total number of both die. Further pieces are entered based on the roll of the dice, the point after the one with the two pieces on it at the beginning being counted as the first point. When entering captured pieces, however, the point where the two pieces start is counted as the first point. The two pieces which start on the board cannot be moved until all of the remaining pieces have been entered on the board. No more than one piece may rest on a point on the first half of the board, except for the two which start and also on the leftmost point on the opposite side of the board from where the player sits. When a piece lands on a point occupied by an opponent's piece, the opponent's piece is removed from the board and must be entered again. Players must enter captured pieces before continuing to move the other pieces on the board. When a piece is captured in the opponent's starting quadrant, a point must be left open or with only one piece, thus allowing the opponent to enter their piece. The player to move all of their pieces off the board wins.
        
(game "Tawula" (players 2) (equipment {(board (rectangle 2 13) {(track "Track1" {6 25 24 23 22 21 20 18 17 16 15 14 13 0 1 2 3 4 5 7 8 9 10 11 12} P1 true) (track "Track2" {19 0 1 2 3 4 5 7 8 9 10 11 12 25 24 23 22 21 20 18 17 16 15 14 13} P2 true)} Vertex) (dice 6 2) (piece "Disc" Each (if (or (!= (from ) (mapEntry "StartTrack" Mover)) (and (= (from ) (mapEntry "StartTrack" Mover)) (all Sites (sites Hand Mover) (= 0 (count Cell (site )))))) (forEach Die (!= (pips ) 0) (if (= (trackSite Move (pips )) -1) (move Remove (from )) (move (from ) (to (trackSite Move (pips )) (or (or (and (is Empty (to )) (is In (to ) (sites Mover "OnePieceMax"))) (and (not (is In (to ) (sites Mover "OnePieceMax"))) (or (is Friend (who (to ))) (is Empty (to ))))) (and (= 1 (size Stack (to ))) (is Enemy (who (to ))))) (apply (if (is Enemy (who (to ))) (move (from (to )) (to (mapEntry "Bar" Next))))))))))) (hand Each) (map "Bar" {(pair P1 6) (pair P2 19)}) (map "StartTrack" {(pair P1 25) (pair P2 0)}) (regions "OnePieceMax" P1 (sites {14 15 16 17 18 20 21 22 23 24})) (regions "OnePieceMax" P2 (sites {1 2 3 4 5 7 8 9 10 11}))}) (rules (start {(place Stack "Disc1" 25 2) (place Stack "Disc2" 0 2) (place Stack "Disc1" (handSite P1) 13) (place Stack "Disc2" (handSite P2) 13)}) (play (do (if (not (is Prev Mover)) (roll )) (or (if (is Empty (mapEntry "Bar" Mover)) (forEach Piece true) (forEach Die (!= (pips ) 0) (move (from (mapEntry "Bar" Mover)) (to (trackSite Move (mapEntry "Bar" Mover) (pips )) (or (or (and (is Empty (to )) (is In (to ) (sites Mover "OnePieceMax"))) (and (not (is In (to ) (sites Mover "OnePieceMax"))) (or (is Friend (who (to ))) (is Empty (to ))))) (and (= 1 (size Stack (to ))) (is Enemy (who (to ))))) (apply (if (is Enemy (who (to ))) (move (from (to )) (to (mapEntry "Bar" Next))))))))) (if (not (all Sites (sites Hand Mover) (= 0 (count Cell (site ))))) (forEach Die (!= (pips ) 0) (move (from (handSite Mover)) (to (trackSite Move (mapEntry "StartTrack" Mover) (pips )) (or (is Empty (to )) (and (= 1 (size Stack (to ))) (is Enemy (who (to ))))) (apply (if (is Enemy (who (to ))) (move (from (to )) (to (mapEntry "Bar" Next))))))))) (then (if (not (all DiceUsed)) (moveAgain )))))) (end (if (no Pieces Mover) (result Mover Win)))))

2x12 board, divided in half, where the spaces are rendered as points. Fifteen pieces per player. Two six-sided dice. Both players begin on the same side of the board, one player with fifteen pieces on the rightmost point, the other player with fourteen pieces on the point behind it, and one on the point behind that. Players move according to the number on each die by moving one piece the value on one die then another piece the value on the other die, or by moving one piece the value of one die and then the value of the other. On each throw the player also plays a throw of 6 in addition to the throw presented by the dice. Pieces move in an anti-clockwise direction around the board. A piece cannot move to a point that is occupied by more than one of the opponent's pieces. If a piece lands on a point occupied by a single piece belonging  to the opponent, the opponent's piece is removed from the board and must enter again from the leftmost point in the row where the pieces began. A piece may be borne off the board when a throw is greater than the number of points left on the board. The first player to bear all of their pieces off the board wins.
(game "Baralie" (players 2) (equipment {(board (rectangle 2 13) {(track "Track1" {6 0 1 2 3 4 5 7 8 9 10 11 12 25 24 23 22 21 20 18 17 16 15 14 13} P1 true) (track "Track2" {19 0 1 2 3 4 5 7 8 9 10 11 12 25 24 23 22 21 20 18 17 16 15 14 13} P2 true)} Vertex) (dice 2) (map {(pair 1 19) (pair 2 6)}) (piece "Disc" Each)}) (rules (start {(place Stack "Disc1" 12 15) (place Stack "Disc2" 11 14) (place Stack "Disc2" 10)}) (play (do (if (not (is Prev Mover)) (roll )) (if (all DiceUsed) (forEach Site (sites Occupied Mover) (if (= (trackSite Move (site ) 6) -1) (move Remove (site )) (move (from (site )) (to (trackSite Move (site ) 6) (or (not (is Enemy (who (to )))) (= 1 (size Stack (to )))) (apply (is Enemy (who (to ))) (fromTo (from (to )) (to (mapEntry (mover ))))))))) (forEach Die (!= (pips ) 0) (forEach Site (sites Occupied Mover) (if (= (trackSite Move (site ) (pips )) -1) (move Remove (site )) (move (from (site )) (to (trackSite Move (site ) (pips )) (or (not (is Enemy (who (to )))) (= 1 (size Stack (to )))) (apply (is Enemy (who (to ))) (fromTo (from (to )) (to (mapEntry (mover ))))))))) (then (moveAgain )))))) (end (if (no Pieces Mover) (result Mover Win)))))

The game is played on a board with twelve points on either side. The points form a continuous track in a horseshoe shape; each player progresses in opposite directions (one from their bottom right to the top right, the other from their bottom left to their top left). Each player has 15 pieces. The starting position is as such, numbering the points from the origin of each player's track: Point six: five pieces Point 8: three pieces Point 13: five pieces Point 24: two pieces. Players move according to the number on each die by moving one piece the number on one die and other the number on the other die, or by moving one piece the total number of both die. Players cannot end their move on a point with multiple opposing pieces. If a player ends the turn on a point with one opposing piece, that piece is placed in the middle of the board (not on a point) and must reenter the board according the the next die roll, counting the origin point as a move of 1. They cannot reenter on a point with two or more pieces. No other pieces can move until all of the pieces belonging to that player are removed from the center. When all of a player's pieces are on their final 6 points, they may start removing pieces from the board. They can do so by rolling a 6 to move from the 6th point, and so on down to 1. Players must use all available moves presented by the dice. The first player to remove all of their pieces wins.
        
(game "Ssang-Ryouk" (players 2) (equipment {(board (merge {(rectangle 1 6) (shift 7.0 0.0 (rectangle 1 6)) (shift 0.0 6.0 (rectangle 1 6)) (shift 7.0 6.0 (rectangle 1 6))}) {(track "Track1" {24 11 10 9 8 7 6 5 4 3 2 1 0 12 13 14 15 16 17 18 19 20 21 22 23 -2} P1 true) (track "Track2" {25 23 22 21 20 19 18 17 16 15 14 13 12 0 1 2 3 4 5 6 7 8 9 10 11 -2} P2 true)} Vertex) (dice 6 2) (piece "Disc" Each (forEach Die (!= (pips ) 0) (if (= -2 (trackSite Move (from ) (pips ))) (if (all Sites (sites Occupied Mover) (is In (site ) (sites Mover "FinalQuadrant"))) (move Remove (from ))) (move (from (from )) (to (trackSite Move (from ) (pips )) (or (not (is Enemy (who (to )))) (= 1 (size Stack (to )))) (apply (is Enemy (who (to ))) (fromTo (from (to )) (to (handSite Next))))))) (then (if (not (all DiceUsed)) (moveAgain ))))) (hand Each) (regions "FinalQuadrant" P1 (sites {18 19 20 21 22 23})) (regions "FinalQuadrant" P2 (sites {6 7 8 9 10 11}))}) (rules (start {(place Stack "Disc1" 6 5) (place Stack "Disc1" 4 3) (place Stack "Disc1" 12 5) (place Stack "Disc1" 23 2) (place Stack "Disc2" 18 5) (place Stack "Disc2" 16 3) (place Stack "Disc2" 0 5) (place Stack "Disc2" 11 2)}) (play (do (if (not (is Prev Mover)) (roll )) (priority {(if (is Occupied (handSite Mover)) (forEach Die (!= (pips ) 0) (move (from (handSite Mover)) (to (trackSite Move (handSite Mover) (pips )) (< (size Stack (to )) 2) (apply (is Enemy (who (to ))) (fromTo (from (to )) (to (handSite Next)))))) (then (if (not (all DiceUsed)) (moveAgain ))))) (if (is Empty (handSite Mover)) (max Distance (forEach Piece true)))}))) (end (if (no Pieces Mover) (result Mover Win)))))

2x12 board, with spaces as points, divided in two. Twelve pieces per player, which start stacked, two per point in the quadrant to the player's right. Two six-sided dice. Players unstack the pieces by moving pieces off of the stack, but remaining on the same point, according to the throws of the dice. The value of the throw indicates the number of the point which can be unstacked. For example, a throw of 1 and 4 allows the player to unstack the pieces on points 1 and 4. Doubles allow players to only move one piece, but grant the player another throw. When all of a player's pieces are unstacked, they must be restacked, in the same way. When they have been successfully restacked, the player then bears off the pieces from this quadrant of the board. When bearing off, players move according to the number on each die by moving one piece the value on one die then another piece the value on the other die, or by moving one piece the value of one die and then the value of the other. The first player to bear off all their pieces wins. 
(game "Ofanfelling" (players 2) (equipment {(board (rectangle 2 13) {(track "Track1" {7 8 9 10 11 12} P1 true) (track "Track2" {18 17 16 15 14 13} P2 true)} Vertex) (dice 6 2) (piece "Disc" Each (forEach Die (!= (pips ) 0) (if (= (trackSite Move (pips )) -1) (move Remove (from )) (move (from ) (to (trackSite Move (pips ))))))) (map "StartTrack" {(pair P1 7) (pair P2 18)})}) (rules (start {(place Stack "Disc1" (sites {7 8 9 10 11 12}) 2) (place Stack "Disc2" (sites {13 14 15 16 17 18}) 2)}) {(phase "UnStacking" (play (do (if (or (is Pending) (not (is Prev Mover))) (roll )) (forEach Die (!= (pips ) 0) (if (= (state (trackSite Move (mapEntry "StartTrack" (mover )) (- (pips ) 1))) 0) (move Select (from (trackSite Move (mapEntry "StartTrack" (mover )) (- (pips ) 1))) (then (and (forEach Level (last To) (set State (last To) (level ) 1)) (if (not (all DiceUsed)) (moveAgain ))))))) (then (if (all DiceEqual) (and (set Pending) (moveAgain )))))) (nextPhase Mover (all Sites (sites Occupied Mover) (not (= (state (site )) 0))) "Stacking")) (phase "Stacking" (play (do (if (or (is Pending) (not (is Prev Mover))) (roll )) (forEach Die (!= (pips ) 0) (if (= (state (trackSite Move (mapEntry "StartTrack" (mover )) (- (pips ) 1))) 1) (move Select (from (trackSite Move (mapEntry "StartTrack" (mover )) (- (pips ) 1))) (then (and (forEach Level (last To) (set State (last To) (level ) 0)) (if (not (all DiceUsed)) (moveAgain ))))))) (then (if (all DiceEqual) (and (set Pending) (moveAgain )))))) (nextPhase Mover (all Sites (sites Occupied Mover) (not (= (state (site )) 1))) "BearingOff")) (phase "BearingOff" (play (do (if (or (all DiceEqual) (not (is Prev Mover))) (roll )) (forEach Piece true) (then (if (or (not (all DiceUsed)) (all DiceEqual)) (moveAgain ))))) (end (if (no Pieces Mover) (result Mover Win))))}))

2x12 board, divided in half. Spaces on each side take the form of points. Fifteen pieces per player. Three six-sided dice. Players move according to the number on each die by moving one piece the value on one die then another piece the value on the other die, or by moving one piece the value of one die and then the value of the other. One player begins with all of their pieces on the space furthest to the left on their side, the other with their pieces on the point directly opposite it. Pieces move in opposite directions around the board, toward the point where the opponent's pieces begin, and bearing off the board from there. A player cannot have two of their pieces on the same spot in the starting quadrant. When a piece lands on the same space as a single opponent's piece, the opponent's piece is sent back to where it began. The first person to bear off all their pieces wins. 
(game "Ludus Anglicorum" (players 2) (equipment {(board (rectangle 2 13) {(track "Track1" {6 0 1 2 3 4 5 7 8 9 10 11 12 25 24 23 22 21 20 18 17 16 15 14 13 12} P1 true) (track "Track2" {19 12 13 14 15 16 17 18 20 21 22 23 24 25 12 11 10 9 8 7 5 4 3 2 1 0} P2 true)} Vertex) (dice 3) (map {(pair 1 19) (pair 2 6)}) (piece "Disc" Each) (regions P1 {0 1 2 3 4 5}) (regions P2 {13 14 15 16 17 18})}) (rules (start {(place Stack "Disc1" 0 15) (place Stack "Disc2" 13 15)}) (play (do (if (not (is Prev Mover)) (roll )) (forEach Die (!= (pips ) 0) (forEach Site (sites Occupied Mover) (if (= (trackSite Move (site ) (pips )) -1) (move Remove (site )) (move (from (site )) (to (trackSite Move (site ) (pips )) (or (and (is Enemy (who (to ))) (= 1 (size Stack (to )))) (and (if (not (is In (to ) (sites Mover))) true (is Empty (to ))) (not (is Enemy (who (to )))))) (apply (is Enemy (who (to ))) (fromTo (from (to )) (to (mapEntry (mover ))))))))) (then (if (not (all DiceUsed)) (moveAgain )))))) (end (if (no Pieces Mover) (result Mover Win)))))

Two players. Four pieces per player, played with four stick dice. They are round on one side, flat on the other, and the round side of one has horizontal stripes, another has cross-hatching, the other two remaining blank. The throws are as follows: One flat side up = 1; two flat sides and at least one blank round side up = 2; two flat sides and both marked round sides up = 35; four flat sides up = 5; four round sides up = 10; three flat sides and one blank round side up = 3; three flat sides and cross-hatched round side up = 15; three flat sides and striped round side up = 20. The throw may only be applied to one piece. Pieces enter from the midpoint of the sides and proceed along the track in the middle, then back to the edge following that track and making a circuit of the board, returning back to the center when it has traveled along the entire perimeter. If a piece lands exactly on the points where the tracks cross in the center, the piece starts again from the beginning, but remains in the center of the board until it does so. The goal is for pieces to pass the points where the center tracks intersect after traveling all the way around the board with all four pieces. If a player lands on the same space as an opponent's piece, the opponent's piece must again start from the beginning.  
(game "Kolica Atarakua" (players 2) (equipment {(board (add (merge {(rectangle 1 10) (shift 0.0 9.0 (rectangle 1 10)) (shift -1.0 -1.0 (square 2)) (shift 9.0 -1.0 (square 2)) (rectangle 10 1) (shift 9.0 0.0 (rectangle 10 1)) (shift -1.0 9.0 (square 2)) (shift 9.0 9.0 (square 2)) (shift 5.0 0.0 (rectangle 6 1)) (shift 0.0 5.0 (rectangle 1 6)) (shift 4.0 4.0 (rectangle 1 6)) (shift 4.0 4.0 (rectangle 6 1))}) {{1.0 1.0} {1.0 8.0} {8.0 1.0} {8.0 8.0} {4.5 4.5}}) {(track "Track1" "69,5,N,W,N,W,S,65,11,E,N,W,67,41,S,E,N,66,8,W,S,E,64,26,N4,E3,68,56" P1 true) (track "Track2" "70,14,S,E,S,E,N,66,8,W,S,E,64,26,N,W,S,65,11,E,N,W,67,41,S4,W3,68,56" P2 true)} Vertex) (dice 2 0 4) (piece "Marker" Each (if (= (trackSite Move (from ) (if (= 1 (count Pips)) 1 (if (= 4 (count Pips)) 5 (if (= 0 (count Pips)) 10 (if (= 2 (count Pips)) (if (or (= 0 (face 73)) (= 0 (face 74))) 2 35) (if (or (= 0 (face 73)) (= 0 (face 74))) 3 (if (= 0 (face 71)) 20 15))))))) -1) (move Remove (from ) (level )) (move (from (from ) (level )) (to (trackSite Move (from ) (if (= 1 (count Pips)) 1 (if (= 4 (count Pips)) 5 (if (= 0 (count Pips)) 10 (if (= 2 (count Pips)) (if (or (= 0 (face 73)) (= 0 (face 74))) 2 35) (if (or (= 0 (face 73)) (= 0 (face 74))) 3 (if (= 0 (face 71)) 20 15))))))) true (apply (if (is Enemy (who (to ))) (forEach Level (to ) FromTop (fromTo (from (to ) (level )) (to (handSite (who (to ) (level ))))))))) (then (if (is In (last To) (sites "RemoveSites")) (fromTo (from (last To)) (to (handSite (mover ))))))))) (hand Each) (regions "RemoveSites" (sites {51 56}))}) (rules (start {(place Stack "Marker1" (handSite P1) 4) (place Stack "Marker2" (handSite P2) 4)}) (play (do (roll ) (or (forEach Piece) (forEach Piece (mover ))))) (end (if (no Pieces Mover) (result Mover Win)))))

2x12 board, divided in half, where the spaces are rendered as points. Fifteen pieces per player. Two six-sided dice. Play occurs only in two quadrants of the board, opposite one another, a player's pieces only leaving their quadrant to bear off. Two pieces are stacked each on the first three points, and three are stacked in the second three points. Players use throws to unstack pieces on their points, unstacking one piece per die which corresponds to that point. Doubles allow the player to unstack or bear off a number of pieces equal to the total number of the throw.  When all of the pieces are unstacked, that player may begin bearing their pieces off. Players move according to the number on each die by moving one piece the value on one die then another piece the value on the other die, or by moving one piece the value of one die and then the value of the other. The first player to bear off all their pieces wins. 
(game "Dubblets" (players 2) (equipment {(board (merge {(rectangle 1 6) (shift 7.0 0.0 (rectangle 1 6)) (shift 0.0 6.0 (rectangle 1 6)) (shift 7.0 6.0 (rectangle 1 6))}) {(track "Track1" {0 1 2 3 4 5} P1 true) (track "Track2" {12 13 14 15 16 17} P2 true)} Vertex) (dice 6 2) (piece "Disc" Each (forEach Die (!= (pips ) 0) (if (= (trackSite Move (pips )) -1) (move Remove (from )) (move (from ) (to (trackSite Move (pips ))))))) (hand Each) (map "StartTrack" {(pair P1 0) (pair P2 12)})}) (rules (start {(place Stack "Disc1" (sites {0 1 2}) 2) (place Stack "Disc1" (sites {3 4 5}) 3) (place Stack "Disc2" (sites {12 13 14}) 2) (place Stack "Disc2" (sites {15 16 17}) 3)}) {(phase "UnStacking" (play (do (if (not (is Prev Mover)) (roll )) (if (or (< 0 (var "Double")) (all DiceEqual)) (do (if (>= 0 (var "Double")) (set Var "Double" (count Pips))) (forEach Site (sites Occupied Mover) (if (= (state (site )) 0) (move Select (from (site )) (then (if (= 3 (size Stack (last To))) (forEach Level (last To) (set State (last To) (level ) 1)) (forEach Level (last To) (set State (last To) (level ) 2))))) (if (= (state (site )) 1) (move Select (from (site )) (then (forEach Level (last To) (set State (last To) (level ) 2)))))) (then (and (if (< 1 (var "Double")) (moveAgain )) (set Var "Double" (- (var "Double") 1)))))) (forEach Die (!= (pips ) 0) (or (if (= (state (trackSite Move (mapEntry "StartTrack" (mover )) (- (pips ) 1))) 0) (move Select (from (trackSite Move (mapEntry "StartTrack" (mover )) (- (pips ) 1))) (then (and (if (= 3 (size Stack (last To))) (forEach Level (last To) (set State (last To) (level ) 1)) (forEach Level (last To) (set State (last To) (level ) 2))) (if (not (all DiceUsed)) (moveAgain )))))) (if (= (state (trackSite Move (mapEntry "StartTrack" (mover )) (- (pips ) 1))) 1) (move Select (from (trackSite Move (mapEntry "StartTrack" (mover )) (- (pips ) 1))) (then (and (forEach Level (last To) (set State (last To) (level ) 2)) (if (not (all DiceUsed)) (moveAgain ))))))))))) (nextPhase Mover (all Sites (sites Occupied Mover) (not (or (= (state (site )) 0) (= (state (site )) 1)))) "BearingOff")) (phase "BearingOff" (play (do (if (not (is Prev Mover)) (roll )) (if (or (< 0 (var "Double")) (all DiceEqual)) (do (if (>= 0 (var "Double")) (set Var "Double" (count Pips))) (forEach Site (sites Occupied Mover) (move Remove (site )) (then (and (if (< 1 (var "Double")) (moveAgain )) (set Var "Double" (- (var "Double") 1)))))) (forEach Piece true)) (then (if (not (all DiceUsed)) (moveAgain ))))) (end (if (no Pieces Mover) (result Mover Win))))}))

Boards consist of a grid of 3x4 squares and a continuation of the central row in the grid that extends for 8 further squares. The game is played with two astragals as dice: one from a sheep and one from an ox. The sheep astragal provides the base value for the roll, and the ox astragal serves as a bonus. Rolls of the sheep astragal produce values of 1, 2 ,3 or 4. The ox astragal produces a \"yes\" or \"no\" value. If \"no\" is rolled, the values remain the same. If \"yes\" is rolled, the value of the first roll is boosted to 5, 6, 7, or 10, respectively. These rules are proposed by Finkel based on the values of moves provided in the cuneiform tablets (Finkel 2007: 21–22). Each player starts play on one of the right corners of the 3x4 grid, proceeding left down that row to the opposite corner, and then right down the central track, which both players use, with the goal of moving off the end of the track. If a player lands on a square occupied by the opponent, the opponent's piece is removed from the board and may reenter on a subsequent turn. Rosettes on certain squares in the central track mark spaces where a player is safe from being sent to the beginning. Rosettes in the corners allow a player to roll again when a player lands on them. A player wins when they remove all seven of their pieces from the board by rolling the exact number of spaces left in the track, plus one.
(game "20 Squares" (players 2) (equipment {(board (merge (rectangle 3 4) (shift 0.0 1.0 (rectangle 1 12))) {(track "Track1" "20,3,W,N1,E,End" P1 true) (track "Track2" "21,12,W,S1,E,End" P2 true)}) (dice {{1 2 3 4} {0 1}} 2) (hand Each) (regions "Replay" (sites {"A1" "A3" "D2" "H2" "L2"})) (piece "UrPiece" Each (if (= (trackSite Move (if (= 0 (face 23)) (face 22) (if (= 1 (face 22)) (+ (face 22) 5) (if (= 2 (face 22)) (+ (face 22) 6) (if (= 3 (face 22)) (+ (face 22) 7) (+ (face 22) 10)))))) -2) (move Remove (from )) (if (!= (trackSite Move (if (= 0 (face 23)) (face 22) (if (= 1 (face 22)) (+ (face 22) 5) (if (= 2 (face 22)) (+ (face 22) 6) (if (= 3 (face 22)) (+ (face 22) 7) (+ (face 22) 10)))))) -1) (if (or (is Empty (trackSite Move (if (= 0 (face 23)) (face 22) (if (= 1 (face 22)) (+ (face 22) 5) (if (= 2 (face 22)) (+ (face 22) 6) (if (= 3 (face 22)) (+ (face 22) 7) (+ (face 22) 10))))))) (and (not (is Friend (who (trackSite Move (if (= 0 (face 23)) (face 22) (if (= 1 (face 22)) (+ (face 22) 5) (if (= 2 (face 22)) (+ (face 22) 6) (if (= 3 (face 22)) (+ (face 22) 7) (+ (face 22) 10))))))))) (not (is In (trackSite Move (if (= 0 (face 23)) (face 22) (if (= 1 (face 22)) (+ (face 22) 5) (if (= 2 (face 22)) (+ (face 22) 6) (if (= 3 (face 22)) (+ (face 22) 7) (+ (face 22) 10)))))) (sites "Replay"))))) (move (from ) (to (trackSite Move (if (= 0 (face 23)) (face 22) (if (= 1 (face 22)) (+ (face 22) 5) (if (= 2 (face 22)) (+ (face 22) 6) (if (= 3 (face 22)) (+ (face 22) 7) (+ (face 22) 10)))))) (apply (is Enemy (who (to ))) (fromTo (from (to )) (to (handSite (who (to ))))))) (then (if (is In (last To) (sites "Replay")) (moveAgain ))))))))}) (rules (start {(place "UrPiece1" (handSite P1) 7) (place "UrPiece2" (handSite P2) 7)}) (play (do (roll ) (or (forEach Piece) (forEach Piece (mover ))))) (end (if (no Pieces Mover) (result Mover Win)))))

Played on a nxn board. Each player has n-1 cars, that can move either forward or up and down. Cars can leave the board once they have reached the opposite edge. First player to run out of legal moves wins.
(game "Dodgem" (players 2) (equipment {(board (square 3)) (piece "Car" P1 E (if (is In (from ) (sites Right)) (move Remove (from )) (move Step (directions {Forward Leftward Rightward}) (to (is Empty (to )))))) (piece "Car" P2 N (if (is In (from ) (sites Top)) (move Remove (from )) (move Step (directions {Forward Leftward Rightward}) (to (is Empty (to ))))))}) (rules (start {(place "Car1" (difference (sites Left) (sites {"A1"}))) (place "Car2" (difference (sites Bottom) (sites {"A1"})))}) (play (forEach Piece)) (end (if (no Pieces Mover) (result Mover Win)))))

Four 3x8 rectangles, arranged in a cross shape around large central square. Four players. Four pieces per player. Two rectangular four-sided die, each marked as follows: 0, 1, 2, 4. When the throw is 0 and 1, the throw is called Tayam, when it is 0 and 4 it is called Sonal. Pieces enter the board from the central square onto the central row of their arm of the board, proceed down the central row, and then in an anti-clockwise direction around the circumference of the board, and back up the central row of their arm of the board, having to enter the central square with an exact throw. The first counter of each player must be entered with a throw of Tayam. After this, pieces may be entered with a throw of 1, 5, or Sonal, each of which enter the piece on the first square of the central row of their arm. These three throws also grant the player another throw. The throws made after entering a piece are made at once, and then the pieces moved afterward, the undivided value of each throw being used to move a piece. When a piece lands on a space occupied by an opponent's piece, the opponent's piece is sent back to start. If the opponent has two pieces on such a space, they both are sent back to start, but both may reenter the board with a single throw of 1, 5, or Sonal. The first player to place all of their pieces in the central square wins. 
(game "Tayam Sonalu" (players 4) (equipment {(board (add (hole (merge (shift 0.0 (/ (- 19.0 3.0) 2.0) (rectangle 3 19)) (shift (/ (- 19.0 3.0) 2.0) 0.0 (rectangle 19 3))) (poly {{8.0 8.0} {8.0 11.0} {11.0 11.0} {11.0 8.0}})) {{8 28 48 68 69 70 71 51 31 11 10 9}}) {(track "Track1" "96,9,S,E,N,11,E,N,W,53,N,W,S,42,W,S,E,8,S,E1,N7,End" P1 true) (track "Track2" "96,26,W,S,E,8,S,E,N,11,E,N,W,53,N,W,S,42,W,S1,E7,End" P2 true) (track "Track3" "96,52,N,W,S,42,W,S,E,8,S,E,N,11,E,N,W,53,N,W1,S7,End" P3 true) (track "Track4" "96,27,E,N,W,53,N,W,S,42,W,S,E,8,S,E,N,11,E,N1,W7,End" P4 true)}) (hand Each) (dice 4 {0 1 2 4} 2) (piece "Pawn" Each (if (= (trackSite Move (from ) (count Pips)) -2) (move Remove (from ) (level )) (move (from (from ) (level )) (to (trackSite Move (from ) (count Pips)) true (apply (if (is Enemy (who (to ))) (if (= 1 (size Stack (to ))) (forEach Level (to ) FromTop (fromTo (from (to ) (level )) (to (centrePoint )))) (forEach Level (to ) FromTop (fromTo (from (to ) (level )) (to (handSite (who (to ) (level ))))))))))))) (map "Start" {(pair P1 9) (pair P2 26) (pair P3 52) (pair P4 27)})}) (rules (start {(place Stack "Pawn1" (handSite P1) 4) (place Stack "Pawn2" (handSite P2) 4) (place Stack "Pawn3" (handSite P3) 4) (place Stack "Pawn4" (handSite P4) 4)}) (play (do (roll ) (if (!= 0 (count Pips)) (or (if (and (is Occupied (handSite Mover)) (or (and (= -1 (value Player Mover)) (or (and (= 0 (face 101)) (= 1 (face 102))) (and (= 1 (face 101)) (= 0 (face 102))))) (and (= 1 (value Player Mover)) (or (is In (count Pips) (sites {1 5})) (or (and (= 0 (face 101)) (= 4 (face 102))) (and (= 4 (face 101)) (= 0 (face 102)))))))) (move (from (handSite Mover)) (to (mapEntry "Start" Mover)) (then (if (= -1 (value Player Mover)) (set Value Mover 1))))) (forEach Piece))) (then (if (and (not (no Pieces Mover)) (or (is In (count Pips) (sites {1 5})) (or (and (= 0 (face 101)) (= 4 (face 102))) (and (= 4 (face 101)) (= 0 (face 102)))))) (moveAgain ))))) (end (if (no Pieces Mover) (result Mover Win)))))

2x12 board, divided in half. Spaces on each side take the form of semi-circular sockets, into which the pieces fit. Fifteen pieces per player. Pieces begin on one half of a player's side of the board (the half to the left of one player, and to the right of the other player), two per space, then two on the next space and one on the space following that one. Three six-sided dice. Players move according to the number on each die by moving one piece the value on one die then another piece the value on the other die, or by moving one piece the value of one die and then the value of the other. Pieces move in a track the long way around the board toward the portion where the opponent begins. No more than two pieces can occupy a space at a time. When a piece lands on a space occupied by a single piece of the opponent, the opponent's piece is removed from the board. The opponent must then reenter this piece on the board onto an open point according to the throw of the dice, from the original starting quadrant on the board. Players attempt to bear off their pieces by rolling the exact number of spaces left on the board, plus one. The first player to bear off all their pieces wins.
(game "Quinze Tablas" (players 2) (equipment {(board (merge {(rectangle 1 6) (shift 7.0 0.0 (rectangle 1 6)) (shift 0.0 6.0 (rectangle 1 6)) (shift 7.0 6.0 (rectangle 1 6))}) {(track "Track1" {24 0 1 2 3 4 5 6 7 8 9 10 11 23 22 21 20 19 18 17 16 15 14 13 12 -2} P1 true) (track "Track2" {25 12 13 14 15 16 17 18 19 20 21 22 23 11 10 9 8 7 6 5 4 3 2 1 0 -2} P2 true)} Vertex) (dice 6 3) (hand Each) (piece "Disc" Each (forEach Die (!= (pips ) 0) (if (= (trackSite Move (pips )) -2) (move Remove (from )) (if (!= (trackSite Move (pips )) -1) (if (= (topLevel (trackSite Move (pips ))) 0) (move (from ) (to (trackSite Move (pips )) (apply (is Enemy (who (to ))) (fromTo (from (to )) (to (handSite Next)))))))))))}) (rules (start {(place Stack "Disc1" (sites {0 1 2 3 4 5 6}) 2) (place Stack "Disc1" 7 1) (place Stack "Disc2" (sites {12 13 14 15 16 17 18}) 2) (place Stack "Disc2" 19 1)}) (play (do (if (not (is Prev Mover)) (roll )) (if (is Empty (handSite Mover)) (forEach Piece true) (forEach Die true (!= (pips ) 0) (move (from (handSite Mover)) (to (trackSite Move (handSite Mover) (pips )) (or (not (is Enemy (who (to )))) (= 1 (size Stack (to )))) (apply (is Enemy (who (to ))) (fromTo (from (to )) (to (handSite Next))))))) (then (if (not (all DiceUsed)) (moveAgain )))))) (end {(if (no Pieces P1) (result P1 Win)) (if (no Pieces P2) (result P2 Win))})))

2x12 board, divided in half, where the spaces are rendered as points. Fifteen pieces per player. Pieces begin on the leftmost point on their opponent's side of the board. Two six-sided dice. Players move according to the number on each die by moving one piece the value on one die then another piece the value on the other die, or by moving one piece the value of one die and then the value of the other. When doubles are thrown, the player plays the throw twice. Each player progresses in a clockwise direction around the board, to bear off upon reaching the final point on the opponent's side of the board. One piece must reach the opposite quadrant of the board from where it entered before the player may place more than one piece on a point. When a piece lands on a point occupied by a single opponent's piece, the opponent's piece is removed from the board and must enter the board again. When all of the player's pieces have entered the opposite quadrant from the one in which they entered, they may begin to bear off. The first player to bear off all their pieces wins.
(game "Jacquet" (players 2) (equipment {(board (rectangle 2 13) {(track "Track1" {6 13 14 15 16 17 18 20 21 22 23 24 25 12 11 10 9 8 7 5 4 3 2 1 0} P1 true) (track "Track2" {19 12 11 10 9 8 7 5 4 3 2 1 0 13 14 15 16 17 18 20 21 22 23 24 25} P2 true)} Vertex) (dice 2) (piece "Disc" Each) (map {(pair 1 6) (pair 2 19)}) (regions "Home" P1 {13 14 15 16 17 18}) (regions "Home" P2 {12 11 10 9 8 7}) (regions "OppositeQuadrant" P1 {0 1 2 3 4 5}) (regions "OppositeQuadrant" P2 {20 21 22 23 24 25})}) (rules (start {(place Stack "Disc1" 13 15) (place Stack "Disc2" 12 15)}) (play (do (if (not (is Prev Mover)) (roll )) (forEach Die true (!= (pips ) 0) (forEach Site (sites Occupied Mover) (if (and (= (trackSite Move (site ) (pips )) -1) (all Sites (sites Occupied Mover) (is In (site ) (sites Mover "OppositeQuadrant")))) (move Remove (site )) (if (if (!= (site ) (trackSite Move (mapEntry (mover )) 1)) true (or {(all Sites (difference (sites Board) (trackSite Move (mapEntry (mover )) 1)) (!= (who (site )) (mover ))) (is Occupied (mapEntry (mover ))) (< (size Stack (trackSite Move (mapEntry (mover )) 1)) 14) (not (all Sites (sites Mover "OppositeQuadrant") (!= (who (site )) (mover ))))})) (move (from (site )) (to (trackSite Move (site ) (pips )) (or (not (is Enemy (who (to )))) (= 1 (size Stack (to )))) (apply (is Enemy (who (to ))) (fromTo (from (to )) (to (mapEntry (next )))))))))) (then (if (not (all DiceUsed)) (moveAgain )))))) (end (if (no Pieces Mover) (result Mover Win)))))

2x12 board, divided in half. Spaces on each side take the form of semi-circular sockets, into which the pieces fit. Twelve pieces per player. Two dice. Players move according to the number on each die by moving one piece the value on one die then another piece the value on the other die, or by moving one piece the value of one die and then the value of the other. Each player enters their pieces into their home section of the board (to the left of one player, to the right of the other player, and move pieces along a horseshoe-shaped track around the board toward the other player's home space. At the beginning of play, the first player will choose one quadrant of the board, and the goal of the game will be for one player to move two  pieces onto each of the six places in that quadrant. When a piece lands on a space occupied by a single piece of the opponent, the opponent's piece is removed from the board, and must be reentered.
(game "Los Doze Canes" (players 2) (equipment {(board (merge {(rectangle 1 6) (shift 7.0 0.0 (rectangle 1 6)) (shift 0.0 6.0 (rectangle 1 6)) (shift 7.0 6.0 (rectangle 1 6))}) {(track "Track1" {24 0 1 2 3 4 5 6 7 8 9 10 11 23 22 21 20 19 18 17 16 15 14 13 12} P1 true) (track "Track2" {25 12 13 14 15 16 17 18 19 20 21 22 23 11 10 9 8 7 6 5 4 3 2 1 0} P2 true)} Vertex) (dice 6 2) (piece "Disc" Each (forEach Die (!= (pips ) 0) (if (or (not (is Enemy (who (trackSite Move (pips ))))) (= 1 (size Stack (trackSite Move (pips ))))) (move (from ) (to (trackSite Move (pips )) (apply (is Enemy (who (to ))) (fromTo (from (to )) (to (handSite Next))))))))) (hand Each)}) (rules (start {(place Stack "Disc1" (handSite P1) 12) (place Stack "Disc2" (handSite P2) 12)}) (play (do (if (not (is Prev Mover)) (roll )) (or (forEach Piece true) (forEach Piece (mover ) true) (then (if (not (all DiceUsed)) (moveAgain )))))) (end {(if (and {(= 2 (size Stack 18)) (= 2 (size Stack 19)) (= 2 (size Stack 20)) (= 2 (size Stack 21)) (= 2 (size Stack 22)) (= 2 (size Stack 23)) (= 0 (count Sites (difference (sites Occupied Mover) (sites {18 19 20 21 22 23}))))}) (result Mover Win)) (if (and (< 2 (size Stack 12)) (< 2 (size Stack 0))) (result Mover Draw))})))

The game is played on a board with twelve points on either side. The points form a continuous track in a horseshoe shape; each player progresses in opposite directions (one from their bottom right to the top right, the other from their bottom left to their top left. Each player has 15 pieces. The starting position is as such, numbering the points from the origin of each player's track: Point six: five pieces. Point 8: three pieces. Point 13: five pieces. Point 24: two pieces. Play begins by each player rolling one die; the player who rolls the highest plays first, and then rolls again to begin play. Players move according to the number on each die by moving one piece the number on one die and another the number on the other die, or by moving one piece twice (once for each die). If doubles are rolled, the player must play the number on each die twice. Players cannot end their move on a point with multiple opposing pieces. If a player ends the turn on a point with one opposing piece, that piece is placed in the middle of the board (not on a point) and must reenter the board according the the next die roll, counting the origin point as a move of one. They cannot reenter on a point with two or more pieces. No other pieces can move until all of the pieces belonging to that player are removed from the center. When all of a player's pieces are on their final 6 points, they may start removing pieces from the board. They can do so by rolling a 6 to move from the 6th point, and so on down to 1. Players must use all available moves presented by the dice. The first player to remove all of their pieces wins. The winner gains one point, or two points if the opponent has pieces in their starting quadrant.
            
(game "Portes" (players 2) (equipment {(board (rectangle 2 13) {(track "Track1" {6 12 11 10 9 8 7 5 4 3 2 1 0 13 14 15 16 17 18 20 21 22 23 24 25 -2} P1 true) (track "Track2" {19 25 24 23 22 21 20 18 17 16 15 14 13 0 1 2 3 4 5 7 8 9 10 11 12 -2} P2 true)} Vertex) (dice 2) (regions P1 {20 21 22 23 24 25}) (regions P2 {7 8 9 10 11 12}) (map {(pair 1 6) (pair 2 19)}) (piece "Disc" Each (forEach Die true (and {(!= (pips ) 0) (!= (trackSite Move (from ) (pips )) -1) (!= (trackSite Move (from ) (pips )) -2)}) (move (from (from )) (to (trackSite Move (from ) (pips )) (or (not (is Enemy (who (to )))) (= 1 (size Stack (to )))) (apply (is Enemy (who (to ))) (fromTo (from (to )) (to (mapEntry Next))))))))}) (rules (start {(place Stack "Disc1" 0 5) (place Stack "Disc1" 12 2) (place Stack "Disc1" 17 3) (place Stack "Disc1" 20 5) (place Stack "Disc2" 4 3) (place Stack "Disc2" 7 5) (place Stack "Disc2" 13 5) (place Stack "Disc2" 25 2)}) (play (do (if (not (is Prev Mover)) (roll )) (if (all Sites (sites Occupied Mover) (is In (site ) (sites Mover))) (forEach Die true (!= (pips ) 0) (forEach Site (sites Occupied Mover) (if (and (is Occupied (site )) (!= (trackSite Move (site ) (pips )) -1)) (if (= (trackSite Move (site ) (pips )) -2) (move Remove (site )) (move (from (site )) (to (trackSite Move (site ) (pips )) (or (not (is Enemy (who (to )))) (= 1 (size Stack (to )))) (apply (is Enemy (who (to ))) (fromTo (from (to )) (to (mapEntry Next)))))))) (firstMoveOnTrack "Track" Mover (if (and (is Friend (who (site ))) (< (trackSite Move (site ) (pips )) 0)) (move Remove (site )))) (then (if (not (all DiceUsed)) (moveAgain ))))) (max Distance "Track" Mover (if (is Empty (mapEntry (mover ))) (forEach Piece true) (forEach Die true (!= (pips ) 0) (move (from (mapEntry (mover ))) (to (trackSite Move (mapEntry (mover )) (pips )) (or (not (is Enemy (who (to )))) (= 1 (size Stack (to )))) (apply (is Enemy (who (to ))) (fromTo (from (to )) (to (mapEntry Next))))))) (then (if (not (all DiceUsed)) (if (can Move (if (is Empty (mapEntry (mover ))) (forEach Piece true) (forEach Die true (!= (pips ) 0) (move (from (mapEntry (mover ))) (to (trackSite Move (mapEntry (mover )) (pips )) (or (not (is Enemy (who (to )))) (= 1 (size Stack (to )))) (apply (is Enemy (who (to ))) (fromTo (from (to )) (to (mapEntry Next))))))))) (moveAgain ))))))))) (end (if (no Pieces Mover) (byScore {(score P1 (if (is Mover P1) (if (= (size Stack (sites Occupied P2)) 15) 2 1) 0)) (score P2 (if (is Mover P2) (if (= (size Stack (sites Occupied P1)) 15) 2 1) 0))})))))

2x12 board, divided in half, where the spaces are rendered as points. Fifteen pieces per player. Three six-sided dice. The points form a continuous track in a horseshoe shape; each player progresses in opposite directions, one from their bottom right to the top right, the other from their bottom left to their top left. Pieces begin on the board, each player with eight pieces on the sixth and seven on the seventh point of their track. Players move according to the number on each die by moving one piece the value on one die then another piece the value on the other die, or by moving one piece the value of one die and then the value of the other. A piece cannot move to a point that is occupied by more than one of the opponent's pieces. If a piece lands on a point occupied by a single piece belonging to the opponent, the opponent's piece is removed from the board and must enter again from the beginning of the player's track. A piece may be borne off the board when a throw is greater than the number of points left on the board. The first player to bear all of their pieces off the board wins.
        
(game "Provincial" (players 2) (equipment {(board (rectangle 2 13) {(track "Track1" {6 12 11 10 9 8 7 5 4 3 2 1 0 13 14 15 16 17 18 20 21 22 23 24 25} P1 true) (track "Track2" {19 25 24 23 22 21 20 18 17 16 15 14 13 0 1 2 3 4 5 7 8 9 10 11 12} P2 true)} Vertex) (dice 3) (map {(pair 1 19) (pair 2 6)}) (piece "Disc" Each)}) (rules (start {(place Stack "Disc1" 7 8) (place Stack "Disc1" 5 7) (place Stack "Disc2" 20 8) (place Stack "Disc2" 18 7)}) (play (do (if (not (is Prev Mover)) (roll )) (forEach Die (!= (pips ) 0) (forEach Site (sites Occupied Mover) (if (= (trackSite Move (site ) (pips )) -1) (move Remove (site )) (move (from (site )) (to (trackSite Move (site ) (pips )) (or (not (is Enemy (who (to )))) (= 1 (size Stack (to )))) (apply (is Enemy (who (to ))) (fromTo (from (to )) (to (mapEntry (mover ))))))))) (then (if (not (all DiceUsed)) (moveAgain )))))) (end (if (no Pieces Mover) (result Mover Win)))))

Four 3x4 rectangles, arranged in a cross shape, with a large central square which has diagonals, and spaces in the four corners between each arm of the cross. Four players, played on two teams, with team members sitting on opposite sides of the board. Four pieces per player, with the colors red, black, yellow, and green. Six cowrie shells used as dice: five are white and one is yellow. The number of the mouths which are face-up determine the value of the throw, except for a throw of 3 when one of the cowries with the mouth down is the yellow one, in which case the throw is known as So-hatara, and counts as 4, but allows special moves because it is actually considered four individual throws of 1. When the player throws 1, 5, or So-hatara, the player receives an extra throw. A 1, 5, or So-hatara must be thrown to enter a piece on the board. The entirety of a throw must be used to move one piece, but separate throws in a turn can each be used individually to move a different piece. This does not apply when So-hatara is one of the throws; in this case, the total of the throw can be subdivided however the player sees fit. Pieces enter the board from the center, moving down the central track of their arm, then in an anti-clockwise direction around the board, and then back up the central row of their arm of the board to the central square. If a player lands on a space occupied by a piece of the opposing team, the opponent's piece is sent back to start. Pieces resting on the corner spaces between the arms of the cross cannot be sent to start in any circumstance. The first team who places all of their pieces in the central square wins.
        
(game "Asi Keliya" (players 4) (equipment {(board (merge {(add (add (merge {(rectangle 3 4) (shift 7.0 0.0 (rectangle 3 4)) (shift 3.5 3.5 (rotate 90.0 (rectangle 3 4))) (shift 3.5 -3.5 (rotate 90.0 (rectangle 3 4)))}) {{5.5 1.5}}) {{4 76} {35 76} {19 76} {20 76}}) (shift 3.0 3.0 (square 1)) (shift 7.0 3.0 (square 1)) (shift 3.0 -1.0 (square 1)) (shift 7.0 -1.0 (square 1))}) {(track "Track1" "6,52,S,E,N3,E,N1,E,N,W3,N1,W1,N,W,S3,W1,S1,W,S,E3,S1,E1,S,E1,N3,End" P1 true) (track "Track2" "7,11,W,S1,E3,S1,E1,S,E,N3,E1,N1,E,N,W3,N,W1,N,W2,S3,W1,S1,W,S1,E3,End" P2 true) (track "Track3" "17,39,N,W1,S3,W1,S1,W,S,E3,S1,E1,S,E,N3,E,N1,E,N,W3,N,W1,N,W1,S3,End" P3 true) (track "Track4" "21,26,E,N1,W3,N1,W1,N,W,S3,W1,S1,W,S,E3,S1,E1,S,E,N3,E1,N1,E,N1,W3,End" P4 true)}) (piece "Marker" Each (if (= (trackSite Move (count Pips)) -2) (move Remove (from )) (if (!= (trackSite Move (count Pips)) -1) (if (or (is Empty (trackSite Move (count Pips))) (and (is Enemy (who (trackSite Move (count Pips)))) (not (is In (trackSite Move (count Pips)) (sites "SafeSites"))))) (move (from ) (to (trackSite Move (count Pips)) (apply (is Enemy (who (to ))) (fromTo (from (to )) (to (handSite (who (to )))))))))))) (hand Each) (dice 2 0 6) (map {(pair P1 6) (pair P2 7) (pair P3 17) (pair P4 21)}) (regions "SafeSites" (sites {3 19 16 34}))}) (rules (start {(set Team 1 {P1 P3}) (set Team 2 {P2 P4}) (place "Marker" "Hand" 4)}) (play (do (if (not (is Pending)) (roll )) (or (if (or (and (= (count Pips) 3) (= 0 (face 65))) (is In (count Pips) (sites {1 5}))) (move (from (handSite Mover)) (to (mapEntry (mover )) (is Empty (mapEntry (mover )))))) (if (or (is Pending) (and (= (count Pips) 3) (= 0 (face 65)))) (forEach Die (!= (pips ) 0) (forEach Piece (if (= (trackSite Move (pips )) -2) (move Remove (from )) (if (!= (trackSite Move (pips )) -1) (if (or (is Empty (trackSite Move (pips ))) (and (is Enemy (who (trackSite Move (pips )))) (not (is In (trackSite Move (pips )) (sites "SafeSites"))))) (move (from ) (to (trackSite Move (pips )) (apply (is Enemy (who (to ))) (fromTo (from (to )) (to (handSite (who (to )))))))))))) (then (if (not (all DiceUsed)) (and (set Pending) (moveAgain ))))) (forEach Piece))) (then (if (or (and (= (count Pips) 3) (= 0 (face 65))) (is In (count Pips) (sites {1 5}))) (moveAgain ))))) (end (if (no Pieces TeamMover) (result TeamMover Win)))))

2x12 board, divided in half. Spaces on each side take the form of semi-circular sockets, into which the pieces fit. Twelve pieces per player. Pieces begin on one half of a player's side of the board (the half to the left of one player, and to the right of the other player), two per space, stacked on top of one another. Three dice. To begin, a player must first unstack their pieces, by rolling the number of the space on which the stack is located, and thus removing the stack, but keeping the piece on the same space. Once complete, pieces move in a track the long way around the board toward the portion where the opponent begins. Players move according to the number on each die by moving one piece the value on one die then another piece the value on the other die, or by moving one piece the value of one die and then the value of the other. No more than two pieces can occupy a space at a time. When a piece lands on a space occupied by a single piece of the opponent, the opponent's piece is removed from the board. Players attempt to bear off their pieces by rolling the exact number of spaces left on the board, plus one. When unstacking the pieces in the beginning or when bearing off at the end, if the player cannot play their roll but the opponent is able, the opponent may use the roll. The first player to bear off all of their pieces wins.
        
(game "Doblet" (players 2) (equipment {(board (merge {(rectangle 1 6) (shift 7.0 0.0 (rectangle 1 6)) (shift 0.0 6.0 (rectangle 1 6)) (shift 7.0 6.0 (rectangle 1 6))}) {(track "Track1" {0 1 2 3 4 5 6 7 8 9 10 11 23 22 21 20 19 18 17 16 15 14 13 12 -2} P1 true) (track "Track2" {12 13 14 15 16 17 18 19 20 21 22 23 11 10 9 8 7 6 5 4 3 2 1 0 -2} P2 true)} Vertex) (dice 6 3) (piece "Disc" Each (forEach Die (!= (pips ) 0) (if (= (trackSite Move (pips )) -2) (move Remove (from )) (move (from ) (to (trackSite Move (pips )) (< (size Stack (trackSite Move (pips ))) 2) (apply (if (is Enemy (who (to ))) (remove (to ))))))))) (map "StartTrack" {(pair P1 0) (pair P2 12)})}) (rules (start {(place Stack "Disc1" (sites {0 1 2 3 4 5}) 2 1) (place Stack "Disc2" (sites {12 13 14 15 16 17}) 2 1)}) {(phase "UnStacking" (play (do (if (not (is Prev Mover)) (roll )) (forEach Die (!= (pips ) 0) (if (= (state (trackSite Move (mapEntry "StartTrack" (mover )) (- (pips ) 1))) 1) (move Select (from (trackSite Move (mapEntry "StartTrack" (mover )) (- (pips ) 1))) (then (and {(set State (last To) 0) (if (not (all DiceUsed)) (moveAgain ))}))))))) (nextPhase Mover (all Sites (sites Occupied Mover) (not (= (state (site )) 1))) "BearingOff")) (phase "BearingOff" (play (do (if (not (is Prev Mover)) (roll )) (forEach Piece true) (then (if (and (not (was Pass)) (not (all DiceUsed))) (moveAgain ))))))} (end (if (no Pieces Mover) (result Mover Win)))))

7x7 board. The central square, as well as the central square on each edge of the board, is marked with an X. Two to four players. Four pieces per player. Four cowries used as dice, the values are equal to the number of mouths which land face up; when all mouths are down the value = 8 and a \"grace,\" all mouths up = a grace. Throws giving a grace also allow the player to throw again. Players are not obliged to play their throws if they do not wish to. Pieces enter the board with a grace on the marked square on the edge closest to the player. Pieces move along the outer squares of the board in an anti-clockwise direction. Upon reaching the square before the marked square where the player enters their pieces, the track proceeds in the left corner (respective to the player) of the next concentric track of squares, and proceeds in a clockwise spiraling track toward the central marked square. When a player's piece lands on a square occupied by an opponent's piece, the opponent's piece is removed from the board, and the player gains another throw. Pieces cannot be removed from the board if they are resting on a marked square. Players may enter their pieces onto the board when an opponent's piece is resting on their starting place. This first player to move all of their pieces to the central square by exact throws wins.
(game "Ashta-kashte" (players 2) (equipment {(board (square 7) {(track "Track1" "27,N,W,S,E,N2,SW1,W4,N4,E4,S3,W3,N2,E2,S1,W1" P1 true) (track "Track2" "21,S,E,N,W,S2,NE1,E4,S4,W4,N3,E3,S2,W2,N1,E1" P2 true)}) (piece "Paddle" Each (if (and (is In (from ) (sites Board)) (!= (trackSite Move (mapEntry "Throw" (count Pips))) -1)) (move (from (from ) (level )) (to (trackSite Move (mapEntry "Throw" (count Pips))) (apply (and (not (is In (to ) (sites "ProtectedSites"))) (is Enemy (who (to )))) (and (fromTo (from (to )) (to (handSite (who (to ))))) (moveAgain ))))) (then (if (= 24 (last To)) (remove (last To)))))) (hand Each) (dice 2 0 4) (map {(pair 1 "G4") (pair 2 "A4") (pair 3 "D1") (pair 4 "D7")}) (map "Throw" {(pair 0 8)}) (regions "ProtectedSites" (sites {0 3 6 21 27 3 45 42 48 24}))}) (rules (start {(place Stack "Paddle1" (handSite P1) 4) (place Stack "Paddle2" (handSite P2) 4)}) (play (do (roll ) (or {(forEach Piece) (move Pass) (if (and (is In (count Pips) (array {0 4})) (!= 0 (who (handSite Mover)))) (move (from (handSite Mover)) (to (mapEntry Mover))))}) (then (if (is In (count Pips) (array {0 4})) (moveAgain ))))) (end (if (no Pieces Mover) (result Mover Win)))))

2x12 board, with spaces as points, divided in two. Fifteen pieces per player, which start stacked, two on the players' first three points and three in the next three points. Two six-sided dice. Players unstack the pieces by moving pieces off of the stack, but remaining on the same point, according to the throws of the dice. The value of the throw indicates the number of the point which can be unstacked. For example, a throw of 1 and 4 allows the player to unstack the pieces on points 1 and 4. Doubles allow the player to unstack all pieces on that point. The player then bears off the pieces from this quadrant of the board. Players bear off the pieces in the same manner as they were unstacked. The first player to bear off all their pieces wins.
        
(game "Kiz Tavlasi" (players 2) (equipment {(board (rectangle 2 13) {(track "Track1" {7 8 9 10 11 12} P1 true) (track "Track2" {18 17 16 15 14 13} P2 true)} Vertex) (dice 6 2) (piece "Disc" Each (forEach Die (!= (pips ) 0) (if (= (trackSite Move (pips )) -1) (move Remove (from )) (move (from ) (to (trackSite Move (pips ))))))) (map "StartTrack" {(pair P1 7) (pair P2 18)})}) (rules (start {(place Stack "Disc1" (sites {7 8 9}) 2) (place Stack "Disc1" (sites {10 11 12}) 3) (place Stack "Disc2" (sites {13 14 15}) 3) (place Stack "Disc2" (sites {16 17 18}) 2)}) {(phase "UnStacking" (play (do (if (not (is Prev Mover)) (roll )) (forEach Die (!= (pips ) 0) (or (if (= (state (trackSite Move (mapEntry "StartTrack" (mover )) (- (pips ) 1))) 0) (move Select (from (trackSite Move (mapEntry "StartTrack" (mover )) (- (pips ) 1))) (then (and (if (= 3 (size Stack (last To))) (forEach Level (last To) (set State (last To) (level ) 1)) (forEach Level (last To) (set State (last To) (level ) 2))) (if (not (all DiceUsed)) (moveAgain )))))) (if (= (state (trackSite Move (mapEntry "StartTrack" (mover )) (- (pips ) 1))) 1) (move Select (from (trackSite Move (mapEntry "StartTrack" (mover )) (- (pips ) 1))) (then (and (forEach Level (last To) (set State (last To) (level ) 2)) (if (not (all DiceUsed)) (moveAgain )))))))))) (nextPhase Mover (all Sites (sites Occupied Mover) (not (or (= (state (site )) 0) (= (state (site )) 1)))) "BearingOff")) (phase "BearingOff" (play (do (if (or (all DiceEqual) (not (is Prev Mover))) (roll )) (forEach Piece true) (then (if (not (all DiceUsed)) (moveAgain ))))) (end (if (no Pieces Mover) (result Mover Win))))}))

2x12 board, divided in half, where the spaces are rendered as points. Fifteen pieces per player. Pieces begin on the leftmost point on their opponent's side of the board. Two six-sided dice. Players move according to the number on each die by moving one piece the value on one die then another piece the value on the other die, or by moving one piece the value of one die and then the value of the other. When doubles are thrown, the player may move the value of one of the die (n), n times (e.g., double sixes allows a player to move 6 six times, double twos allow a player to move 2 twice). Each player progresses in a clockwise direction around the board, to bear off upon reaching the final point on the opposite side of the board from which the player started. This first piece must reach the opposite quadrant of the board from where it started before the player may enter any other pieces. In the quadrant where the players enter their pieces, that player may only have two or more pieces on a point on a maximum of two points. When a piece lands on a point occupied by a single opponent's piece, The opponent's piece is removed from the board and must enter the board again. When all of the player's pieces have entered the opposite quadrant from the one in which they entered, they may begin to bear off. The first player to bear off all their pieces wins. It is considered a double win if the player bears off all their pieces before the opponent bears off any. 
(game "Jacquet de Versailles" (players 2) (equipment {(board (rectangle 2 13) {(track "Track1" {6 13 14 15 16 17 18 20 21 22 23 24 25 12 11 10 9 8 7 5 4 3 2 1 0} P1 true) (track "Track2" {19 12 11 10 9 8 7 5 4 3 2 1 0 13 14 15 16 17 18 20 21 22 23 24 25} P2 true)} Vertex) (dice 2) (piece "Disc" Each) (map {(pair 1 6) (pair 2 19)}) (regions "Home" P1 {13 14 15 16 17 18}) (regions "Home" P2 {12 11 10 9 8 7}) (regions "OppositeQuadrant" P1 {0 1 2 3 4 5}) (regions "OppositeQuadrant" P2 {20 21 22 23 24 25})}) (rules (start {(place Stack "Disc1" 13 15) (place Stack "Disc2" 12 15)}) (play (do (do (if (not (is Prev Mover)) (roll )) (if (all DiceEqual) (forEach Site (sites Occupied Mover) (if (and (= (trackSite Move (site ) (/ (count Pips) 2)) -1) (all Sites (sites Occupied Mover) (is In (site ) (sites Mover "OppositeQuadrant")))) (move Remove (site )) (if (or (!= (site ) (trackSite Move (mapEntry (mover )) 1)) (and (= (site ) (trackSite Move (mapEntry (mover )) 1)) (or {(all Sites (difference (sites Board) (trackSite Move (mapEntry (mover )) 1)) (!= (who (site )) (mover ))) (is Occupied (mapEntry (mover ))) (< (size Stack (trackSite Move (mapEntry (mover )) 1)) 14) (not (all Sites (sites Mover "OppositeQuadrant") (!= (who (site )) (mover ))))}))) (move (from (site )) (to (trackSite Move (site ) (/ (count Pips) 2)) (or (not (is Enemy (who (to )))) (= 1 (size Stack (to )))) (apply (is Enemy (who (to ))) (fromTo (from (to )) (to (mapEntry (next ))))))))) (then (if (< (value Player Mover) (- (/ (count Pips) 2) 1)) (and (moveAgain ) (if (< (value Player Mover) 0) (set Value Mover 1) (set Value Mover (+ 1 (value Player Mover))))) (set Value Mover 0)))) (forEach Die (!= (pips ) 0) (forEach Site (sites Occupied Mover) (if (and (= (trackSite Move (site ) (pips )) -1) (all Sites (sites Occupied Mover) (is In (site ) (sites Mover "OppositeQuadrant")))) (move Remove (site )) (if (or (!= (site ) (trackSite Move (mapEntry (mover )) 1)) (and (= (site ) (trackSite Move (mapEntry (mover )) 1)) (or {(all Sites (difference (sites Board) (trackSite Move (mapEntry (mover )) 1)) (!= (who (site )) (mover ))) (is Occupied (mapEntry (mover ))) (< (size Stack (trackSite Move (mapEntry (mover )) 1)) 14) (not (all Sites (sites Mover "OppositeQuadrant") (!= (who (site )) (mover ))))}))) (move (from (site )) (to (trackSite Move (site ) (pips )) (or (not (is Enemy (who (to )))) (= 1 (size Stack (to )))) (apply (is Enemy (who (to ))) (fromTo (from (to )) (to (mapEntry (next )))))))))) (then (if (not (all DiceUsed)) (moveAgain )))))) (<= (count Sites (forEach (intersection (sites Occupied Mover) (sites Mover "Home")) (>= (size Stack (site )) 2))) 2))) (end {(if (no Pieces Mover) (byScore {(score P1 (if (is Mover P1) (if (= (size Stack (sites Occupied P2)) 15) 2 1) 0)) (score P2 (if (is Mover P2) (if (= (size Stack (sites Occupied P1)) 15) 2 1) 0))}))})))

The board is a track of any number of spaces, made in the sand. Any number of players, playing with one piece. One piece is the hyena. Four nut shells are used as dice, with the following throws: four of all the same side = 20; two of the same side = 2; any other throw = 0. The first player to reach the end of the track then plays as the hyena. The hyena moves twice the value of the throw. When the hyena overtakes a player's piece, it is removed from the board and the player loses. 
(game "Nama" (players 8) (equipment {(board (rectangle 100 1) (track "Track" {0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99} true)) (hand Each) (hand Shared) (piece "Marker" Each (if (= (if (= (from ) (handSite Mover)) (trackSite Move 0 (- (mapEntry "Throw" (count Pips)) 1)) (trackSite Move (from ) (mapEntry "Throw" (count Pips)))) -1) (move Remove (from ) (level ) (then (if (= (where "Hyena" Shared) -1) (and (add (piece "Hyena") (to 0) true) (set Var (id Mover)))))) (move (from (from ) (level )) (to (if (= (from ) (handSite Mover)) (trackSite Move 0 (- (mapEntry "Throw" (count Pips)) 1)) (trackSite Move (from ) (mapEntry "Throw" (count Pips))))) true))) (piece "Hyena" Shared) (dice 2 0 4) (map "Throw" {(pair 0 0) (pair 1 0) (pair 2 2) (pair 3 0) (pair 4 20)})}) (rules (start (place "Marker" "Hand")) (play (do (roll ) (if (< 0 (mapEntry "Throw" (count Pips))) (if (= (var ) (id Mover)) (if (= (trackSite Move (where "Hyena" Shared) (* 2 (mapEntry "Throw" (count Pips)))) -1) (move Remove (where "Hyena" Shared) (then (forEach Site (sites Board) (if (is Occupied (site )) (remove (site ) (size Stack (site ))))))) (move (from (where "Hyena" Shared)) (to (trackSite Move (where "Hyena" Shared) (* 2 (mapEntry "Throw" (count Pips))))) (then (forEach Value 1 (- (* 2 (mapEntry "Throw" (count Pips))) 1) (if (is Occupied (trackSite Move (last From) (value ))) (remove (trackSite Move (last From) (value )) (size Stack (trackSite Move (last From) (value ))))))))) (or (forEach Piece) (forEach Piece (mover ))))))) (end {(forEach Player (and {(> (var ) 0) (!= (player ) (var )) (= (where "Hyena" Shared) -1)}) (result Player Loss)) (if (and (= (id Mover) (var )) (= (where "Hyena" Shared) -1)) (result Mover Win)) (forEach Player (and (!= (player ) (var )) (no Pieces (player ))) (result Player Loss))})))

Played on a standard Backgammon board. Each player has fifteen pieces, which all begin on the leftmost point on each player's side of the board. Both players move anti-clockwise around the board. Both players roll one die, and the player with the higher number plays first. If it is played after another game, the winner of the previous game goes first. The player rolls two die and begins play with that roll. Players move according to the number on each die by moving one piece the value on one die then another piece the value on the other die, or by moving one piece the value of one die and then the value of the other. When doubles are thrown, they are played twice. If a player can only play one number but not both, they must play the higher number, if possible. To begin, each player may only move one piece, until it passes the opponent's starting point, after which any pieces can be moved. Pieces may only be moved to an empty point or one occupied by another piece belonging to the player. Players may not block all six points in either player's starting quadrant. If a player has blocked six points in a row, and the opponent has moved all of their pieces to the point adjacent to the blocked points, the player must move to unblock one of the points. Once a player has moved all of their pieces into the final six points of their track, they may begin bearing off. They do so by rolling a number equal to the number of points left in the track, plus one. If they cannot bear off, they must make a legal move with a piece that cannot bear off. If no such move is available, then they must bear off the piece which is furthest from the goal. The first player to bear off all their pieces wins the game and gets one point. If the winner bears off all their pieces before the opponent bears off any, they get two points. 
(game "Fevga" (players 2) (equipment {(board (rectangle 2 13) {(track "Track1" {0 1 2 3 4 5 7 8 9 10 11 12 25 24 23 22 21 20 18 17 16 15 14 13 -2} P1 true) (track "Track2" {25 24 23 22 21 20 18 17 16 15 14 13 0 1 2 3 4 5 7 8 9 10 11 12 -2} P2 true)} Vertex) (dice 2) (regions "Home" P1 {20 21 22 23 24 25}) (regions "Home" P2 {7 8 9 10 11 12}) (regions "Side" P1 {0 1 2 3 4 5 6 7 8 9 10 11 12}) (regions "Side" P2 {13 14 15 16 17 18 19 20 21 22 23 24 25}) (map {(pair 1 0) (pair 2 25)}) (piece "Disc" Each (forEach Die true (and {(!= (pips ) 0) (!= (trackSite Move (from ) (pips )) -1) (!= (trackSite Move (from ) (pips )) -2)}) (if (or {(not (= (from ) (mapEntry (mover )))) (and (= (from ) (mapEntry (mover ))) (!= (topLevel (from )) 13)) (not (all Sites (sites Occupied Mover) (is In (site ) (sites Mover "Side"))))}) (move (from (from )) (to (trackSite Move (from ) (pips )) (not (is Enemy (who (to )))))))))}) (rules (start {(place Stack "Disc1" 0 15) (place Stack "Disc2" 25 15)}) (play (do (if (not (is Prev Mover)) (roll )) (if (all Sites (sites Occupied Mover) (is In (site ) (sites Mover "Home"))) (forEach Die true (!= (pips ) 0) (forEach Site (sites Occupied Mover) (if (and (is Occupied (site )) (!= (trackSite Move (site ) (pips )) -1)) (if (= (trackSite Move (site ) (pips )) -2) (move Remove (site )) (move (from (site )) (to (trackSite Move (site ) (pips )) (not (is Enemy (who (to )))))))) (firstMoveOnTrack "Track" Mover (if (and (is Friend (who (site ))) (< (trackSite Move (site ) (pips )) 0)) (move Remove (site )))) (then (if (not (all DiceUsed)) (moveAgain ))))) (max Distance "Track" Mover (forEach Piece true (then (if (not (all DiceUsed)) (moveAgain )))))))) (end (if (no Pieces Mover) (byScore {(score P1 (if (is Mover P1) (if (= (size Stack (sites Occupied P2)) 15) 2 1) 0)) (score P2 (if (is Mover P2) (if (= (size Stack (sites Occupied P1)) 15) 2 1) 0))})))))

Played on a board with 36 holes arranged in a square, with a gap in the center of each side. There are two semi circles of five holes on the outside of two opposite corners of the board. Two pieces per player. Four stick dice are used, each with one marked side. Each die is marked differently for a different value: 4, 6, 14, 15. The throws are as follows: All marked sides up = 5; three marked sides up = 3; two marked sides up = 2, one marked side up = the value of the marked side; zero marked sides up = 10. Throws of 14 may instead be played as a throw of 1, whenever the player chooses. Players’ pieces enter on the branching arcs. Players move in opposite directions around the board, and then back down the arc in which they started, moving their pieces off the board. If a player lands on the same spot as the opponent, the opponent’s piece is removed from the board and must re-enter. A player's piece is allowed to occupy the same space as that player's other piece. On the last side of the rectangle before completing a circuit of the board, only throws of 1, 2, or 3 are used. Players must make an exact throw to get a piece off the board. The first player to remove their pieces from the board wins.
        
(game "Romavoa" (players 2) (equipment {(board (add (merge {(shift -1.25 -0.34 (rotate 30.0 (rectangle 6 1))) (rectangle 1 5) (rectangle 5 1) (shift 0.0 6.0 (rectangle 5 1)) (shift 0.0 10.0 (rectangle 1 5)) (shift 7.0 0.0 (rectangle 1 5)) (shift 7.0 10.0 (rectangle 1 5)) (shift 11.0 0.0 (rectangle 5 1)) (shift 11.0 6.0 (rectangle 5 1)) (shift 12.25 5.33 (rotate 30.0 (rectangle 6 1)))}) {{13 14} {22 28} {37 36} {9 23}}) {(track "Track1" "46,5,SSE,N,E,S,W,NNW2,End" P1 true) (track "Track2" "47,41,NNW,W,S,E,N,SSE2,End" P2 true)} Vertex) (regions "AllSites" (sites Board)) (regions "LastSide" P1 (sites {6 7 8 9 23 24 25 26 27})) (regions "LastSide" P2 (sites {27 33 34 35 36 37 38 39 40})) (dice 2 {{0 4} {0 6} {0 14} {0 15}} 4) (piece "Marker" Each (if (if (not (is In (from ) (sites Mover "LastSide"))) true (or {(= (mapEntry "Throw" (count Pips)) 1) (= (mapEntry "Throw" (count Pips)) 2) (= (mapEntry "Throw" (count Pips)) 3)})) (or (if (= 14 (mapEntry "Throw" (count Pips))) (if (= (trackSite Move 1) -2) (move Remove (from ) (level )) (move (from (from ) (level )) (to (trackSite Move 1) (apply (if (is Enemy (who (to ))) (forEach Level (to ) FromTop (fromTo (from (to ) (level )) (to (handSite (who (to ) (level )))))))))))) (if (= (trackSite Move (mapEntry "Throw" (count Pips))) -2) (move Remove (from ) (level )) (move (from (from ) (level )) (to (trackSite Move (mapEntry "Throw" (count Pips))) (apply (if (is Enemy (who (to ))) (forEach Level (to ) FromTop (fromTo (from (to ) (level )) (to (handSite (who (to ) (level )))))))))))))) (hand Each) (map "Throw" {(pair 0 10) (pair 39 5) (pair 24 3) (pair 25 3) (pair 35 3) (pair 33 3) (pair 10 2) (pair 18 2) (pair 19 2) (pair 20 2) (pair 21 2) (pair 29 2)})}) (rules (start {(place Stack "Marker1" (handSite P1) 2) (place Stack "Marker2" (handSite P2) 2)}) (play (do (roll ) (or (forEach Piece) (forEach Piece (mover ))))) (end (if (no Pieces Mover) (result Mover Win)))))

Four players. Circular board, with 24 semi-circular sockets along the circumference, divided into four sections of six. Twelve pieces per player; the player's colors are green, red, black, and white, the sections to which they enter are in that order anti-clockwise around the board. Three seven-sided dice. Play proceeds in an anti-clockwise fashion around the board, as is the order of player turns. Players enter their pieces on the board according to the throws of the dice. The player must enter all of their pieces, and then attempt to move all of their pieces in the section of the board belonging to the player sitting opposite them. Once the player achieves this, they begin bearing their pieces off the board. When a piece lands on a spot occupied by a single piece belonging to the opponent, the opponent's piece is returned to the place where it started. When a player bears off all their pieces, they win.
(game "El Mundo" (players 4) (equipment {(board (concentric {24}) {(track "Track1" {24 0 2 4 6 8 10 12 14 16 18 20 22 23 21 19 17 15 13} P1 true) (track "Track2" {25 12 14 16 18 20 22 23 21 19 17 15 13 11 9 7 5 3 1} P2 true) (track "Track3" {26 23 21 19 17 15 13 11 9 7 5 3 1 0 2 4 6 8 10} P3 true) (track "Track4" {27 11 9 7 5 3 1 0 2 4 6 8 10 12 14 16 18 20 22} P4 true)} Vertex) (dice 7 3) (regions "Mundo" P1 {23 21 19 17 15 13}) (regions "Mundo" P2 {11 9 7 5 3 1}) (regions "Mundo" P3 {0 2 4 6 8 10}) (regions "Mundo" P4 {12 14 16 18 20 22}) (piece "Marker" Each (forEach Die (!= (pips ) 0) (if (and (no Pieces Mover (union (sites Hand Mover) (difference (sites Board) (sites Mover "FinalQuadrant")))) (= (trackSite Move (from ) (pips )) -1)) (move Remove (from )) (move (from (from )) (to (trackSite Move (from ) (pips )) (or (not (is Enemy (who (to )))) (= 1 (size Stack (to )))) (apply (is Enemy (who (to ))) (fromTo (from (to )) (to (handSite (who (to ))))))))) (then (if (not (all DiceUsed)) (moveAgain ))))) (map "Entry" {(pair P1 0) (pair P2 6) (pair P3 12) (pair P4 18)}) (hand Each) (regions "FinalQuadrant" P1 (sites {13 15 17 19 21 23})) (regions "FinalQuadrant" P2 (sites {1 3 5 7 9 11})) (regions "FinalQuadrant" P3 (sites {10 8 6 4 2 0})) (regions "FinalQuadrant" P4 (sites {22 20 18 16 14 12}))}) (rules (start {(place Stack "Marker1" (handSite P1) 12) (place Stack "Marker2" (handSite P2) 12) (place Stack "Marker3" (handSite P3) 12) (place Stack "Marker4" (handSite P4) 12)}) (play (do (if (not (is Prev Mover)) (roll )) (or (forEach Piece true) (forEach Piece (mover ) true)))) (end (if (no Pieces Mover) (result Mover Win)))))

Played on a Tables board with sockets for the pieces instead of points. Fifteen pieces per player. Three six-sided dice. Players move according to the number on each die by moving one piece the value on one die, another piece the value on another die, and another piece the value on the final die, by moving one piece the value of two of the die subsequently, and a second piece the value of the remaining die, or one piece the value of each die subsequently. Pieces begin off the board. Players must enter all of their pieces onto one half of the board (one player entering in the quadrant to their right and the other player's entering into the quadrant on their left), according to the throws of the dice. Once a player has entered all of their pieces, they move through all of the quadrants of the board toward the quadrant where the opponent entered their pieces. A piece landing on a space with a single opponent's piece sends the opponent's piece back to start, and it must be reentered. Once players enter all of their pieces into the final quadrant, they may bear off their pieces. They can do so by rolling a 6 to move from the sixth point, and so on down to 1. Throughout the game, a player must use the maximum number of moves presented by the dice. The first player to remove all of their pieces wins.
        
(game "Buffa de Baldrac" (players 2) (equipment {(board (merge {(rectangle 1 6) (shift 7.0 0.0 (rectangle 1 6)) (shift 0.0 6.0 (rectangle 1 6)) (shift 7.0 6.0 (rectangle 1 6))}) {(track "Track1" {0 1 2 3 4 5 6 7 8 9 10 11 23 22 21 20 19 18 17 16 15 14 13 12 -2} P1 true) (track "Track2" {12 13 14 15 16 17 18 19 20 21 22 23 11 10 9 8 7 6 5 4 3 2 1 0 -2} P2 true)} Vertex) (dice 6 3) (piece "Disc" Each (or (forEach Die true (and (!= (pips ) 0) (<= 0 (trackSite Move (from ) (pips )))) (move (from (from )) (to (trackSite Move (from ) (pips )) (or (not (is Enemy (who (to )))) (= 1 (size Stack (to )))) (apply (is Enemy (who (to ))) (fromTo (from (to )) (to (handSite Next)))))) (then (if (not (all DiceUsed)) (moveAgain )))) (if (all Sites (sites Occupied Mover) (is In (site ) (sites Mover "LastQuadrant"))) (forEach Die true (and (!= (pips ) 0) (= (trackSite Move (from ) (pips )) -2)) (move Remove (from )) (then (if (not (all DiceUsed)) (moveAgain ))))))) (regions "FirstQuadrant" P1 (sites {0 1 2 3 4 5})) (regions "FirstQuadrant" P2 (sites {12 13 14 15 16 17})) (regions "LastQuadrant" P1 (sites {12 13 14 15 16 17})) (regions "LastQuadrant" P2 (sites {0 1 2 3 4 5})) (map "StartTrack" {(pair P1 0) (pair P2 12)}) (hand Each)}) (rules (start {(place Stack "Disc1" (handSite P1) 15) (place Stack "Disc2" (handSite P2) 15)}) (play (max Moves (do (if (not (is Prev Mover)) (roll )) (if (is Occupied (handSite Mover)) (forEach Die true (and (!= (pips ) 0) (is In (trackSite Move (mapEntry "StartTrack" (mover )) (- (pips ) 1)) (sites Mover "FirstQuadrant"))) (move (from (handSite Mover)) (to (trackSite Move (mapEntry "StartTrack" (mover )) (- (pips ) 1)) (or (not (is Enemy (who (to )))) (= 1 (size Stack (to )))))) (then (if (not (all DiceUsed)) (moveAgain )))) (forEach Piece true))))) (end (if (no Pieces Mover) (result Mover Win)))))

Played on a board with 36 holes arranged in a square, with a gap in the center of each side. There are two semi circles of five holes on the outside of two opposite corners of the board. The central space of these semicircles is marked. One or two pieces per player. Four stick dice are used, with one marked side. Each die is marked differently for a different value: 4, 6, 14, 15. The throws are as follows: All marked sides up = 5; three marked sides up = 3; two marked sides up = 2, one marked side up = the value of the marked side; zero marked sides up = 10. Players’ pieces enter on the branching arcs. The second piece cannot enter before the first one leaves the arc. Players move in opposite directions around the board. If a player lands on the same spot as the opponent, the opponent’s piece is removed from the board and must re-enter. Player must make an exact throw to get a piece off the board. The player to get both of their pieces around the board, and then to reach the marked space with an exact throw. When a piece is in the hole before the marked space, they may throw anything but 14 or 15 to exit the board. The first player to remove their piece(s) from the board wins.
(game "Kints" (players 2) (equipment {(board (add (merge {(shift -1.25 -0.34 (rotate 30.0 (rectangle 6 1))) (rectangle 1 5) (rectangle 5 1) (shift 0.0 6.0 (rectangle 5 1)) (shift 0.0 10.0 (rectangle 1 5)) (shift 7.0 0.0 (rectangle 1 5)) (shift 7.0 10.0 (rectangle 1 5)) (shift 11.0 0.0 (rectangle 5 1)) (shift 11.0 6.0 (rectangle 5 1)) (shift 12.25 5.33 (rotate 30.0 (rectangle 6 1)))}) {{13 14} {22 28} {37 36} {9 23}}) {(track "Track1" "46,5,SSE,N,E,S,W,NNW2,End" P1 true) (track "Track2" "47,41,NNW,W,S,E,N,SSE2,End" P2 true)} Vertex) (regions "AllSites" (sites Board)) (regions "Arc" P1 (sites {1 2 3 4 5})) (regions "Arc" P2 (sites {41 42 43 44 45})) (dice 2 {{0 4} {0 6} {0 14} {0 15}} 4) (piece "Marker" Each (if (or (!= (from ) (handSite Mover)) (and (= (from ) (handSite Mover)) (all Sites (sites Occupied Mover) (not (is In (site ) (sites Mover "Arc")))))) (if (= (trackSite Move (mapEntry "Throw" (count Pips))) -2) (move Remove (from )) (if (!= (trackSite Move (mapEntry "Throw" (count Pips))) -1) (if (not (is Friend (who (trackSite Move (mapEntry "Throw" (count Pips)))))) (move (from ) (to (trackSite Move (mapEntry "Throw" (count Pips))) (apply (is Enemy (who (to ))) (fromTo (from (to )) (to (handSite Next))))))))))) (hand Each) (map "Throw" {(pair 0 10) (pair 39 5) (pair 24 3) (pair 25 3) (pair 35 3) (pair 33 3) (pair 10 2) (pair 18 2) (pair 19 2) (pair 20 2) (pair 21 2) (pair 29 2)})}) (rules (start (place "Marker" "Hand" 2)) (play (do (roll ) (or (forEach Piece) (forEach Piece (mover ))))) (end (if (no Pieces Mover) (result Mover Win)))))

2x12 board, divided in half. Spaces on each side take the form of semi-circular sockets, into which the pieces fit. Fifteen pieces per player. One player places fourteen of their pieces on the first point of the table to their right closest to them, with the other piece on the point opposite it on the other side of the board. The other player places three pieces on each of the four  spots following the spot with the other player's fourteen, two on the spot following this, and one on the opposite end of the row of spots where the opponent's single piece is located. Two six-sided dice. Players move according to the number on each die by moving one piece the value on one die then another piece the value on the other die, or by moving one piece the value of one die and then the value of the other. Players move along the spaces of the board toward the spot where the first player's single piece is located, and from there they bear off. Pieces cannot be hit as in similar games. If a player cannot play the value on a die (or on both dice), the opponent may play it. The first player to bear off all of their pieces wins.
(game "Laquet" (players 2) (equipment {(board (merge {(rectangle 1 6) (shift 7.0 0.0 (rectangle 1 6)) (shift 0.0 6.0 (rectangle 1 6)) (shift 7.0 6.0 (rectangle 1 6))}) (track "Track1" {11 10 9 8 7 6 5 4 3 2 1 0 12 13 14 15 16 17 18 19 20 21 22 23} true) Vertex) (dice 6 2) (piece "Disc" Each (forEach Die (!= (pips ) 0) (if (= (trackSite Move (pips )) -1) (move Remove (from )) (if (not (is Enemy (who (trackSite Move (pips ))))) (move (from ) (to (trackSite Move (pips ))))))))}) (rules (start {(place Stack "Disc1" 11 14) (place Stack "Disc1" 23) (place Stack "Disc2" (sites {7 8 9 10}) 3) (place Stack "Disc2" 6 2) (place Stack "Disc2" 12)}) (play (do (if (and (not (is Pending)) (not (is Prev Mover))) (roll )) (if (can Move (forEach Piece)) (forEach Piece true (then (if (not (all DiceUsed)) (moveAgain )))) (move Pass (then (set Pending)))))) (end (if (no Pieces Mover) (result Mover Win)))))

2x12 board, divided in half. Spaces on each side take the form of semi-circular sockets, into which the pieces fit. The points form a continuous track in a horseshoe shape; each player progresses in opposite directions (one from their bottom right to the top right, the other from their bottom left to their top left). Fifteen pieces per player. The starting position is as such, number the points from the origin of each player's track: point six: five pieces; point 8: three pieces; point 13: five pieces; point 24: two pieces. Two dice. Players move according to the number on each die by moving one piece the value on one die then another piece the value on the other die, or by moving one piece the value of one die and then the value of the other. When a player's piece lands on a spot occupied by a single piece belonging to the opponent, the opponent's piece is sent back to the quadrant in which that player started with two pieces. Players bear off their pieces at the end of their track. The first player to bear off all their pieces wins.
(game "Todas Tablas" (players 2) (equipment {(board (merge {(rectangle 1 6) (shift 7.0 0.0 (rectangle 1 6)) (shift 0.0 6.0 (rectangle 1 6)) (shift 7.0 6.0 (rectangle 1 6))}) {(track "Track1" {11 10 9 8 7 6 5 4 3 2 1 0 12 13 14 15 16 17 18 19 20 21 22 23} P1 true) (track "Track2" {23 22 21 20 19 18 17 16 15 14 13 12 0 1 2 3 4 5 6 7 8 9 10 11} P2 true)} Vertex) (dice 6 2) (piece "Disc" Each (forEach Die (!= (pips ) 0) (if (= (trackSite Move (from ) (pips )) -1) (move Remove (from )) (move (from (from )) (to (trackSite Move (from ) (pips )) (or (not (is Enemy (who (to )))) (= 1 (size Stack (to )))) (apply (is Enemy (who (to ))) (fromTo (from (to )) (to (if (and (!= (to ) (regionSite (sites Next "StartQuadrant") 0)) (not (is Friend (who (regionSite (sites Next "StartQuadrant") 0))))) (regionSite (sites Next "StartQuadrant") 0) (if (and (!= (to ) (regionSite (sites Next "StartQuadrant") 1)) (not (is Friend (who (regionSite (sites Next "StartQuadrant") 1))))) (regionSite (sites Next "StartQuadrant") 1) (if (and (!= (to ) (regionSite (sites Next "StartQuadrant") 2)) (not (is Friend (who (regionSite (sites Next "StartQuadrant") 2))))) (regionSite (sites Next "StartQuadrant") 2) (if (and (!= (to ) (regionSite (sites Next "StartQuadrant") 3)) (not (is Friend (who (regionSite (sites Next "StartQuadrant") 3))))) (regionSite (sites Next "StartQuadrant") 3) (if (and (!= (to ) (regionSite (sites Next "StartQuadrant") 4)) (not (is Friend (who (regionSite (sites Next "StartQuadrant") 4))))) (regionSite (sites Next "StartQuadrant") 4) (if (and (!= (to ) (regionSite (sites Next "StartQuadrant") 5)) (not (is Friend (who (regionSite (sites Next "StartQuadrant") 5))))) (regionSite (sites Next "StartQuadrant") 5) (if (and (!= (to ) (regionSite (sites Next "StartQuadrant") 6)) (not (is Friend (who (regionSite (sites Next "StartQuadrant") 6))))) (regionSite (sites Next "StartQuadrant") 6) -1))))))))))))) (then (if (not (all DiceUsed)) (moveAgain ))))) (regions "StartQuadrant" P1 (sites {6 7 8 9 10 11})) (regions "StartQuadrant" P2 (sites {18 19 20 21 22 23}))}) (rules (start {(place Stack "Disc1" 6 5) (place Stack "Disc1" 4 3) (place Stack "Disc1" 12 5) (place Stack "Disc1" 23 2) (place Stack "Disc2" 18 5) (place Stack "Disc2" 16 3) (place Stack "Disc2" 0 5) (place Stack "Disc2" 11 2)}) (play (do (if (not (is Prev Mover)) (roll )) (forEach Piece))) (end (if (no Pieces Mover) (result Mover Win)))))

2x12 board, divided in half, where the spaces are rendered as points. Fifteen pieces per player. Three six-sided dice. The points form a continuous track in a horseshoe shape; each player progresses in opposite directions, one from their bottom right to the top right, the other from their bottom left to their top left. Pieces begin on the board, five each on the sixth, seventh, and eighth point in their track. Players move according to the number on each die by moving one piece the value on one die then another piece the value on the other die, or by moving one piece the value of one die and then the value of the other. A piece cannot move to a point that is occupied by more than one of the opponent's pieces. If a piece lands on a point occupied by a single piece belonging to the opponent, the opponent's piece is removed from the board and must enter again from the beginning of the player's track. A piece may be borne off the board when a throw is greater than the number of points left on the board. The first player to bear all of their pieces off the board wins.
        
(game "Imperial" (players 2) (equipment {(board (rectangle 2 13) {(track "Track1" {6 12 11 10 9 8 7 5 4 3 2 1 0 13 14 15 16 17 18 20 21 22 23 24 25} P1 true) (track "Track2" {19 25 24 23 22 21 20 18 17 16 15 14 13 0 1 2 3 4 5 7 8 9 10 11 12} P2 true)} Vertex) (dice 3) (map {(pair 1 19) (pair 2 6)}) (piece "Disc" Each)}) (rules (start {(place Stack "Disc1" 10 5) (place Stack "Disc1" 11 5) (place Stack "Disc1" 12 5) (place Stack "Disc2" 23 5) (place Stack "Disc2" 24 5) (place Stack "Disc2" 25 5)}) (play (do (if (not (is Prev Mover)) (roll )) (forEach Die (!= (pips ) 0) (forEach Site (sites Occupied Mover) (if (= (trackSite Move (site ) (pips )) -1) (move Remove (site )) (move (from (site )) (to (trackSite Move (site ) (pips )) (or (not (is Enemy (who (to )))) (= 1 (size Stack (to )))) (apply (is Enemy (who (to ))) (fromTo (from (to )) (to (mapEntry (mover ))))))))) (then (if (not (all DiceUsed)) (moveAgain )))))) (end (if (no Pieces Mover) (result Mover Win)))))

2x12 board, with spaces as points, divided in two. Fifteen pieces per player. Two six-sided die. Players move according to the number on each die by moving one piece the value on one die then another piece the value on the other die, or by moving one piece the value of one die and then the value of the other. The lowest value of the dice must be played; if it cannot, the player does not move. When a player throws doubles, they play the values on each die, as well as the values on the opposite side of the dice (I.e., double 6 if double 1 is thrown, 5 if 2, 3 if 4). However, the values on the bottom can only be played if all of the top values are played. The first double throw is only played once, but every subsequent double throw is played twice, and the top values must be played twice before using the bottom values. Bottom values do not have to be played, or only some of the bottom values may be played if the player wishes. In addition, an extra throw is granted for the second and subsequent throws of doubles. Players enter their pieces onto opposite sections of the board, and proceed around the board toward the section where the opponent enters the board, and then bearing pieces off the board. A player may not land on a point with two or more of the opponent's pieces. A player's piece may land on a point with a single opponent's piece. The opponent's piece is removed from the board and must enter again. The first player to remove all of their pieces from the board wins.
        
(game "Contrare Puff" (players 2) (equipment {(board (rectangle 2 13) {(track "Track1" {26 12 11 10 9 8 7 5 4 3 2 1 0 13 14 15 16 17 18 20 21 22 23 24 25} P1 true) (track "Track2" {27 25 24 23 22 21 20 18 17 16 15 14 13 0 1 2 3 4 5 7 8 9 10 11 12} P2 true)} Vertex) (dice 6 2) (piece "Disc" Each (forEach Die (= 1 (value Player Mover)) (!= (pips ) 0) (if (= (trackSite Move (from ) (pips )) -1) (move Remove (from )) (move (from (from )) (to (trackSite Move (from ) (pips )) (or (not (is Enemy (who (to )))) (= 1 (size Stack (to )))) (apply (is Enemy (who (to ))) (fromTo (from (to )) (to (handSite (who (to ))))))))) (then (if (not (all DiceUsed)) (moveAgain ) (if (= 1 (value Player Mover)) (if (and (all DiceEqual) (= 0 (size Array (values Remembered)))) (and (moveAgain ) (set Var "PlayOpposite" 1))) (set Value Mover 1)))))) (hand Each)}) (rules (start {(place Stack "Disc1" (handSite P1) 15) (place Stack "Disc2" (handSite P2) 15)}) (play (do (if (or (is Pending) (not (is Prev Mover))) (roll )) (if (= 1 (var "PlayOpposite")) (or {(forEach Piece (forEach Value (values Remembered "Opposite") (if (= (trackSite Move (from ) (value )) -1) (move Remove (from )) (move (from (from )) (to (trackSite Move (from ) (value )) (or (not (is Enemy (who (to )))) (= 1 (size Stack (to )))) (apply (and (if (is Enemy (who (to ))) (fromTo (from (to )) (to (handSite Next)))) (forget Value "Opposite" (value )))))) (then (if (!= 0 (size Array (values Remembered "Opposite"))) (moveAgain ) (and {(set Var "PlayOpposite" 0) (set Pending) (moveAgain )}))))) true) (forEach Piece (mover ) (forEach Value (values Remembered "Opposite") (if (= (trackSite Move (from ) (value )) -1) (move Remove (from )) (move (from (from )) (to (trackSite Move (from ) (value )) (or (not (is Enemy (who (to )))) (= 1 (size Stack (to )))) (apply (and (if (is Enemy (who (to ))) (fromTo (from (to )) (to (handSite Next)))) (forget Value "Opposite" (value )))))) (then (if (!= 0 (size Array (values Remembered "Opposite"))) (moveAgain ) (and {(set Var "PlayOpposite" 0) (set Pending) (moveAgain )}))))) true) (move Pass (then (and {(forget Value "Opposite" All) (set Var "PlayOpposite" 0) (set Pending) (moveAgain )})))}) (do (if (and {(= 0 (count MovesThisTurn)) (all DiceEqual) (= 1 (value Player Mover))}) (and (remember Value "Opposite" (- 7 (face 28))) (remember Value "Opposite" (- 7 (face 28))))) (or (forEach Piece true) (forEach Piece (mover ) true)))))) (end (if (no Pieces Mover) (result Mover Win)))))

Played on a board with twelve points on either side. The points form a continuous track in a horseshoe shape; each player progresses in opposite directions (one from their bottom right to the top right, the other from their bottom left to their top left. Each player has 15 pieces. Each player's pieces begin in three stacks of five on the first point of their track. Two six-sided dice. Players move according to the number on each die by moving one piece the value on one die then another piece the value on the other die, or by moving one piece the value of one die and then the value of the other. If a player places all of their pieces on all of the points on the final six points of their side of the board, with three on each of the final three points, they win two points. Otherwise, they move into the opposite side of the board. When an opponent's piece lands on a point occupied by one of the player's pieces on the opponent's side of the board, the piece is removed from the board and must enter again. A player's pieces cannot be hit on their own side of the board. Once a player has brought all of their pieces into the final six points of the board, they may begin to bear off. They can do so by rolling a 6 to move from the 6th point, and so on down to 1. Players must use all available moves presented by the dice. The first player to remove all of their pieces wins.
            
(game "Schuster" (players 2) (equipment {(board (rectangle 2 13) {(track "Track1" {6 12 11 10 9 8 7 5 4 3 2 1 0 13 14 15 16 17 18 20 21 22 23 24 25 -2} P1 true) (track "Track2" {19 25 24 23 22 21 20 18 17 16 15 14 13 0 1 2 3 4 5 7 8 9 10 11 12 -2} P2 true)} Vertex) (dice 6 2) (piece "Disc" Each (forEach Die (!= (pips ) 0) (if (= (trackSite Move (from ) (pips )) -2) (if (all Sites (sites Occupied Mover) (is In (site ) (sites Mover "FinalQuadrant"))) (move Remove (from ))) (move (from (from )) (to (trackSite Move (from ) (pips )) (or (and {(is Enemy (who (to ))) (not (is In (to ) (sites Mover "OppositeSide"))) (= (topLevel (to )) 0)}) (not (is Enemy (who (to ))))) (apply (is Enemy (who (to ))) (fromTo (from (to )) (to (mapEntry "Bar" Next))))))) (then (and (if (not (all DiceUsed)) (moveAgain )) (if (if (is Mover P1) (and {(= 15 (count Pieces Mover (sites {0 1 2 3 4 5}))) (is Friend (who 3)) (is Friend (who 4)) (is Friend (who 5)) (= 3 (size Stack 0)) (= 3 (size Stack 1)) (= 3 (size Stack 2))}) (and {(= 15 (count Pieces Mover (sites {13 14 15 16 17 18}))) (is Friend (who 16)) (is Friend (who 17)) (is Friend (who 18)) (= 3 (size Stack 13)) (= 3 (size Stack 14)) (= 3 (size Stack 15))})) (addScore Mover 2)))))) (regions "FinalQuadrant" P1 (sites {20 21 22 23 24 25})) (regions "FinalQuadrant" P2 (sites {7 8 9 10 11 12})) (regions "OppositeSide" P1 (sites {25 24 23 22 21 20 18 17 16 15 14 13})) (regions "OppositeSide" P2 (sites {0 1 2 3 4 5 7 8 9 10 11 12})) (map "Bar" {(pair P1 6) (pair P2 19)})}) (rules (start {(place Stack "Disc1" 12 15) (place Stack "Disc2" 25 15)}) (play (do (if (not (is Prev Mover)) (roll )) (forEach Piece true))) (end {(if (if (is Mover P1) (and {(= 15 (count Pieces Mover (sites {0 1 2 3 4 5}))) (is Friend (who 3)) (is Friend (who 4)) (is Friend (who 5)) (= 3 (size Stack 0)) (= 3 (size Stack 1)) (= 3 (size Stack 2))}) (and {(= 15 (count Pieces Mover (sites {13 14 15 16 17 18}))) (is Friend (who 16)) (is Friend (who 17)) (is Friend (who 18)) (= 3 (size Stack 13)) (= 3 (size Stack 14)) (= 3 (size Stack 15))})) (result Mover Win)) (if (no Pieces Mover) (result Mover Win))})))

The board is a rectilinear track with two rows, of any number. Six or seven players, seven are preferred. One piece per player. Two seashells, used as dice. The throws are as follows: two backs = 20; two hollow sides = 10, one of each = 0. The player to reach the end of the track wins.
(game "Uturu Uturu Kaida" (players 7) (equipment {(board (rectangle 2 50) (track "Track" {0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 99 98 97 96 95 94 93 92 91 90 89 88 87 86 85 84 83 82 81 80 79 78 77 76 75 74 73 72 71 70 69 68 67 66 65 64 63 62 61 60 59 58 57 56 55 54 53 52 51 50} true) Vertex) (hand Each) (piece "Horse" Each (if (= (if (= (from ) (handSite Mover)) (trackSite Move 0 (- (mapEntry (count Pips)) 1)) (trackSite Move (from ) (mapEntry (count Pips)))) -1) (move Remove (from ) (level )) (move (from (from ) (level )) (to (if (= (from ) (handSite Mover)) (trackSite Move 0 (- (mapEntry (count Pips)) 1)) (trackSite Move (from ) (mapEntry (count Pips))))) true))) (dice 2 0 2) (map {(pair 0 10) (pair 1 0) (pair 2 20)})}) (rules (start (place "Horse" "Hand")) (play (do (roll ) (if (< 0 (mapEntry (count Pips))) (or (forEach Piece) (forEach Piece (mover )))))) (end (if (no Pieces Mover) (result Mover Win)))))

2x12 board, with spaces as points, divided in two. Fifteen pieces per player. Two six-sided die. Players move according to the number on each die by moving one piece the value on one die then another piece the value on the other die, or by moving one piece the value of one die and then the value of the other. The lowest value of the dice must be played; if it cannot, the player does not move. When a player throws doubles, they play the values on each die, as well as the values on the opposite side of the dice (I.e., double 6 if double 1 is thrown, 5 if 2, 3 if 4). However, the values on the bottom can only be played if all of the top values are played. The first double throw is only played once, but every subsequent double throw is played twice, and the top values must be played twice before using the bottom values. Bottom values do not have to be played, or only some of the bottom values may be played if the player wishes. In addition, an extra throw is granted for the second and subsequent throws of doubles. Players enter their pieces onto the same section of the board, and proceed around the board to the point opposite the starting point, and then off the board. A player may not land on a point with two or more of the opponent's pieces. A player's piece may land on a point with a single opponent's piece. The opponent's piece is removed from the board and must enter again. The first player to remove all of their pieces from the board wins.
(game "Lange Puff" (players 2) (equipment {(board (rectangle 2 13) {(track "Track1" {26 25 24 23 22 21 20 18 17 16 15 14 13 0 1 2 3 4 5 7 8 9 10 11 12} P1 true) (track "Track2" {27 25 24 23 22 21 20 18 17 16 15 14 13 0 1 2 3 4 5 7 8 9 10 11 12} P2 true)} Vertex) (dice 6 2) (piece "Disc" Each (forEach Die (= 1 (value Player Mover)) (!= (pips ) 0) (if (= (trackSite Move (from ) (pips )) -1) (move Remove (from )) (move (from (from )) (to (trackSite Move (from ) (pips )) (or (not (is Enemy (who (to )))) (= 1 (size Stack (to )))) (apply (is Enemy (who (to ))) (fromTo (from (to )) (to (handSite Next))))))) (then (if (not (all DiceUsed)) (moveAgain ) (if (= 1 (value Player Mover)) (if (and (all DiceEqual) (= 0 (size Array (values Remembered)))) (and (moveAgain ) (set Var "PlayOpposite" 1))) (set Value Mover 1)))))) (hand Each)}) (rules (start {(place Stack "Disc1" (handSite P1) 15) (place Stack "Disc2" (handSite P2) 15)}) (play (do (if (or (is Pending) (not (is Prev Mover))) (roll )) (if (= 1 (var "PlayOpposite")) (or {(forEach Piece (forEach Value (values Remembered "Opposite") (if (= (trackSite Move (from ) (value )) -1) (move Remove (from )) (move (from (from )) (to (trackSite Move (from ) (value )) (or (not (is Enemy (who (to )))) (= 1 (size Stack (to )))) (apply (and (if (is Enemy (who (to ))) (fromTo (from (to )) (to (handSite Next)))) (forget Value "Opposite" (value )))))) (then (if (!= 0 (size Array (values Remembered "Opposite"))) (moveAgain ) (and {(set Var "PlayOpposite" 0) (set Pending) (moveAgain )}))))) true) (forEach Piece (mover ) (forEach Value (values Remembered "Opposite") (if (= (trackSite Move (from ) (value )) -1) (move Remove (from )) (move (from (from )) (to (trackSite Move (from ) (value )) (or (not (is Enemy (who (to )))) (= 1 (size Stack (to )))) (apply (and (if (is Enemy (who (to ))) (fromTo (from (to )) (to (handSite Next)))) (forget Value "Opposite" (value )))))) (then (if (!= 0 (size Array (values Remembered "Opposite"))) (moveAgain ) (and {(set Var "PlayOpposite" 0) (set Pending) (moveAgain )}))))) true) (move Pass (then (and {(forget Value "Opposite" All) (set Var "PlayOpposite" 0) (set Pending) (moveAgain )})))}) (do (if (and {(= 0 (count MovesThisTurn)) (all DiceEqual) (= 1 (value Player Mover))}) (and (remember Value "Opposite" (- 7 (face 28))) (remember Value "Opposite" (- 7 (face 28))))) (or (forEach Piece true) (forEach Piece (mover ) true)))))) (end (if (no Pieces Mover) (result Mover Win)))))

A track of eleven squares, with marks in the two outer and central squares. Ten further squares extending from the central square, with markings in the fifth and final squares. Including this fifth square, a square track with eleven squares per side, with a marked square in each corner and middle square of each side. Five pieces per player. Seven cowries used as dice. The number of mouths up equals the value of the throw; when no mouths are up the player loses their turn. Players begin from opposite ends of the bottom track, and proceed up the vertical track, around the square, and then up the remainder of the vertical track. A player must throw a 1, 5, or 7 to enter the board. Throws of 1, 5, or 7 grant the player another throw. If a piece lands on a space occupied by a piece belonging to the opponent, the opponent's piece is removed from the board and must enter again. Pieces resting on a marked square are safe from being sent back. The player who moves all five of their pieces beyond the final space in the vertical row with an exact throw wins.
        
(game "Panchi" (players 2) (equipment {(board (merge {(rectangle 1 11) (shift 0.0 5.0 (rotate 90.0 (rectangle 1 11))) (shift 0.0 5.0 (rectangle 1 11)) (shift -5.0 10.0 (rotate 90.0 (rectangle 1 11))) (shift 5.0 10.0 (rotate 90.0 (rectangle 1 11))) (shift 0.0 15.0 (rectangle 1 11))}) {(track "Track1" "0,E5,N5,W,N,E,S,W5,N,End" P1 true) (track "Track2" "10,W5,N5,E,N,W,S,E5,N,End" P2 true)}) (piece "Pawn" Each (if (= (trackSite Move (count Pips)) -2) (move Remove (from )) (if (!= (trackSite Move (count Pips)) -1) (if (if (not (is Enemy (who (trackSite Move (count Pips))))) true (not (is In (trackSite Move (count Pips)) (sites "Protect")))) (move (from (from ) (level )) (to (trackSite Move (count Pips)) (apply (is Enemy (who (to ))) (fromTo (from (to )) (to (handSite (who (to )))) (count (to )))))))))) (dice 2 0 7) (hand Each) (regions "Protect" (sites {0 10 5 16 21 23 30 36 46 56 51 42})) (map {(pair P1 0) (pair P2 10)})}) (rules (start {(place Stack "Pawn1" (handSite P1) 5) (place Stack "Pawn2" (handSite P2) 5)}) (play (do (roll ) (if (can Move (or {(forEach Piece) (forEach Piece (mover )) (if (and {(or {(= (count Pips) 1) (= (count Pips) 5) (= (count Pips) 7)}) (not (all Sites (sites Hand Mover) (= 0 (count Cell (site ))))) (or (is Empty (mapEntry (mover ))) (is Friend (who (mapEntry (mover )))))}) (move (from (handSite (mover ))) (to (mapEntry (mover )))))} (then (if (or {(= (count Pips) 1) (= (count Pips) 5) (= (count Pips) 7)}) (moveAgain ))))) (or {(forEach Piece) (forEach Piece (mover )) (if (and {(or {(= (count Pips) 1) (= (count Pips) 5) (= (count Pips) 7)}) (not (all Sites (sites Hand Mover) (= 0 (count Cell (site ))))) (or (is Empty (mapEntry (mover ))) (is Friend (who (mapEntry (mover )))))}) (move (from (handSite (mover ))) (to (mapEntry (mover )))))} (then (if (or {(= (count Pips) 1) (= (count Pips) 5) (= (count Pips) 7)}) (moveAgain )))) (move Pass (then (if (or {(= (count Pips) 1) (= (count Pips) 5) (= (count Pips) 7)}) (moveAgain ))))))) (end (if (no Pieces Mover) (result Mover Win)))))

2x12 board, divided in half. Spaces on each side take the form of semi-circular sockets, into which the pieces fit. Fifteen pieces per player. Three six-sided dice. Players move according to the number on each die by moving one piece the value on one die then another piece the value on the other die, or by moving one piece the value of one die and then the value of the other. Both players begin in the same quadrant of the board. One player's pieces are arranged as follows: Eight on the first point of the quadrant to their left, four on the fifth, and three on the sixth. The other player places five on the second, third, and fourth space of the same quadrant. The track proceeds in a clockwise direction around the board. When a player's piece lands on a space occupied by a single piece of the opponent, it is sent back to the beginning of the quadrant to the right of the starting quadrant. Pieces bear off from the quadrant diagonal from the starting quadrant. The first player to bear off all their pieces wins.
(game "Seys Dos y As" (players 2) (equipment {(board (merge {(rectangle 1 6) (shift 7.0 0.0 (rectangle 1 6)) (shift 0.0 6.0 (rectangle 1 6)) (shift 7.0 6.0 (rectangle 1 6))}) {(track "Track1" {24 11 10 9 8 7 6 5 4 3 2 1 0 12 13 14 15 16 17} P1 true) (track "Track2" {25 11 10 9 8 7 6 5 4 3 2 1 0 12 13 14 15 16 17} P2 true)} Vertex) (dice 6 3) (piece "Disc" Each (forEach Die (!= (pips ) 0) (if (= (trackSite Move (from ) (pips )) -1) (move Remove (from )) (move (from (from )) (to (trackSite Move (from ) (pips )) (or (not (is Enemy (who (to )))) (= 1 (size Stack (to )))) (apply (is Enemy (who (to ))) (fromTo (from (to )) (to (handSite Next))))))) (then (if (not (all DiceUsed)) (moveAgain ))))) (hand Each)}) (rules (start {(place Stack "Disc1" 11 8) (place Stack "Disc1" 6 3) (place Stack "Disc1" 7 4) (place Stack "Disc2" (sites {10 9 8}) 5)}) (play (do (if (not (is Prev Mover)) (roll )) (or (forEach Piece true) (forEach Piece (mover ) true)))) (end (if (no Pieces Mover) (result Mover Win)))))

2x12 board, divided in half, where the spaces are rendered as points. Fifteen pieces per player. Two six-sided dice. Players move according to the number on each die by moving one piece the value on one die then another piece the value on the other die, or by moving one piece the value of one die and then the value of the other. The players enter their pieces on the board on the points corresponding to the throws of the dice. A player who rolls a number corresponding to a point on the opponent's side of the board that contains a piece should remove the piece from the opponent's point, which must be reentered. If the player fails to do so, they lose instantly. Otherwise, players continue to place their pieces until all are on the board, and they then bear the pieces off from the same quadrant of the board. The first player to bear off all their pieces wins.
(game "Ketch-Dolt" (players 2) (equipment {(board (rectangle 2 13) {(track "Track1" {26 12 11 10 9 8 7} P1 true) (track "Track2" {27 25 24 23 22 21 20} P2 true)} Vertex) (dice 6 2) (piece "Disc" Each (or (if (is Empty (handSite Mover)) (forEach Die (!= (pips ) 0) (if (= (trackSite Move (from ) "Track" (pips )) -1) (do (if (if (is Mover P1) (= 1 (size Stack (trackSite Move (mapEntry "Start" P2) "Track2" (- (pips ) 1)))) (= 1 (size Stack (trackSite Move (mapEntry "Start" P1) "Track1" (- (pips ) 1))))) (trigger "ShouldCapture" Mover)) (move Remove (from )))) (then (if (not (all DiceUsed)) (moveAgain ))))) (forEach Die (!= (pips ) 0) (or (if (if (is Mover P1) (= 1 (size Stack (trackSite Move (mapEntry "Start" P2) "Track2" (- (pips ) 1)))) (= 1 (size Stack (trackSite Move (mapEntry "Start" P1) "Track1" (- (pips ) 1))))) (move (from (if (is Mover P1) (trackSite Move (mapEntry "Start" P2) "Track2" (- (pips ) 1)) (trackSite Move (mapEntry "Start" P1) "Track1" (- (pips ) 1)))) (to (handSite Next)))) (move (from (from )) (to (trackSite Move (from ) "Track" (pips )) (apply (if (if (is Mover P1) (= 1 (size Stack (trackSite Move (mapEntry "Start" P2) "Track2" (- (pips ) 1)))) (= 1 (size Stack (trackSite Move (mapEntry "Start" P1) "Track1" (- (pips ) 1))))) (trigger "ShouldCapture" Mover)))))) (then (if (not (all DiceUsed)) (moveAgain )))))) (hand Each) (map "Start" {(pair P1 12) (pair P2 25)})}) (rules (start {(place Stack "Disc1" (handSite P1) 15) (place Stack "Disc2" (handSite P2) 15)}) (play (do (if (not (is Prev Mover)) (roll )) (or (forEach Piece) (forEach Piece (mover ))))) (end {(if (is Triggered "ShouldCapture" P1) (result P1 Loss)) (if (is Triggered "ShouldCapture" P2) (result P2 Loss)) (if (no Pieces Mover) (result Mover Win))})))

The game is played on a board with twelve points on either side. The points form a continuous track in a horseshoe shape; each player progresses in opposite directions (one from their bottom right to the top right, the other from their bottom left to their top left). Each player has 15 pieces. The starting position is as such, number the points from the origin of each player's track: Point six: five pieces Point 8: three pieces Point 13: five pieces Point 24: two pieces. Players move according to the number on each die by moving one piece the number on one die and other the number on the other die, or by moving one piece the total number of both die. Players cannot end their move on a point with multiple opposing pieces. If a player ends the turn on a point with one opposing piece, that piece is placed in the middle of the board (not on a point) and must reenter the board according the the next die roll, counting the origin point as a move of 1. They cannot reenter on a point with two or more pieces. No other pieces can move until all of the pieces belonging to that player are removed from the center. When all of a player's pieces are on their final 6 points, they may start removing pieces from the board. They can do so by rolling a 6 to move from the 6th point, and so on down to 1. Players must use all available moves presented by the dice. The first player to remove all of their pieces wins.
        
(game "Shuanglu" (players 2) (equipment {(board (merge {(rectangle 1 6) (shift 7.0 0.0 (rectangle 1 6)) (shift 0.0 6.0 (rectangle 1 6)) (shift 7.0 6.0 (rectangle 1 6))}) {(track "Track1" {24 11 10 9 8 7 6 5 4 3 2 1 0 12 13 14 15 16 17 18 19 20 21 22 23 -2} P1 true) (track "Track2" {25 23 22 21 20 19 18 17 16 15 14 13 12 0 1 2 3 4 5 6 7 8 9 10 11 -2} P2 true)} Vertex) (dice 6 2) (piece "Disc" Each (forEach Die (!= (pips ) 0) (if (= (trackSite Move (from ) (pips )) -2) (if (all Sites (sites Occupied Mover) (is In (site ) (sites Mover "FinalQuadrant"))) (move Remove (from ))) (move (from (from )) (to (trackSite Move (from ) (pips )) (or (not (is Enemy (who (to )))) (= 1 (size Stack (to )))) (apply (is Enemy (who (to ))) (fromTo (from (to )) (to (handSite Next))))))) (then (if (not (all DiceUsed)) (moveAgain ))))) (hand Each) (regions "FinalQuadrant" P1 (sites {18 19 20 21 22 23})) (regions "FinalQuadrant" P2 (sites {6 7 8 9 10 11}))}) (rules (start {(place Stack "Disc1" 6 5) (place Stack "Disc1" 4 3) (place Stack "Disc1" 12 5) (place Stack "Disc1" 23 2) (place Stack "Disc2" 18 5) (place Stack "Disc2" 16 3) (place Stack "Disc2" 0 5) (place Stack "Disc2" 11 2)}) (play (do (if (not (is Prev Mover)) (roll )) (priority {(if (is Occupied (handSite Mover)) (forEach Die (!= (pips ) 0) (move (from (handSite Mover)) (to (trackSite Move (handSite Mover) (pips )) (< (size Stack (to )) 2) (apply (is Enemy (who (to ))) (fromTo (from (to )) (to (handSite Next)))))) (then (if (not (all DiceUsed)) (moveAgain ))))) (if (is Empty (handSite Mover)) (max Distance (forEach Piece true)))}))) (end (if (no Pieces Mover) (result Mover Win)))))

Each player starts play on one of the top corners of the 3x4 grid, proceeding down that row to the opposite corner, and then up the central track, which both players use, and then turning back toward the original side of the track when reaching the top of the central track in the 2x3 grid. If a player lands on an opponent's spot, they are removed from the board and may reenter on a subsequent turn. A rosette in the center of the central track marks the spot where a player is safe from capture. Rosettes in the four corners allow a player to roll again. A player wins when they remove all seven of their pieces from the board by rolling the exact number of spaces left in the track, plus one.
(game "Royal Game of Ur" (players 2) (equipment {(board (hole (hole (rectangle 3 8) (poly {{4.0 0.0} {4.0 1.0} {6.0 1.0} {6.0 0.0}})) (poly {{4.0 2.0} {4.0 3.0} {6.0 3.0} {6.0 2.0}})) {(track "Track1" "20,3,W,N1,E,S1,W,End" P1 true) (track "Track2" "21,17,W,S1,E,N1,W,End" P2 true)}) (dice 2 0 4) (hand Each) (regions "Replay" (sites {"A1" "A3" "D2" "G1" "G3"})) (piece "UrPiece" Each (if (= (trackSite Move (count Pips)) -2) (move Remove (from )) (if (!= (trackSite Move (count Pips)) -1) (if (or (is Empty (trackSite Move (count Pips))) (and (not (is Friend (who (trackSite Move (count Pips))))) (not (is In (trackSite Move (count Pips)) (sites "Replay"))))) (move (from ) (to (trackSite Move (count Pips)) (apply (is Enemy (who (to ))) (fromTo (from (to )) (to (handSite Next))))) (then (if (is In (last To) (sites "Replay")) (moveAgain ))))))))}) (rules (start {(place "UrPiece1" (handSite P1) 7) (place "UrPiece2" (handSite P2) 7)}) (play (do (roll ) (if (!= (count Pips) 0) (or (forEach Piece) (forEach Piece (mover )))))) (end (if (no Pieces Mover) (result Mover Win)))))

2x12 board, with spaces as points, divided in two. Fifteen pieces per player, which start stacked, two on the players' first three points and three in the next three points. Two six-sided dice. Players unstack the pieces by moving pieces off of the stack, but remaining on the same point, according to the throws of the dice. The value of the throw indicates the number of the point which can be unstacked. For example, a throw of 1 and 4 allows the player to unstack the pieces on points 1 and 4.  When all of a player's pieces are unstacked, they must be restacked, in the same way. When they have been successfully restacked, the player then bears off the pieces from this quadrant of the board. When bearing off, players move according to the number on each die by moving one piece the value on one die then another piece the value on the other die, or by moving one piece the value of one die and then the value of the other. The first player to bear off all their pieces wins.
        
(game "Yahoudieh" (players 2) (equipment {(board (rectangle 2 13) {(track "Track1" {7 8 9 10 11 12} P1 true) (track "Track2" {18 17 16 15 14 13} P2 true)} Vertex) (dice 6 2) (piece "Disc" Each (forEach Die (!= (pips ) 0) (if (= (trackSite Move (pips )) -1) (move Remove (from )) (move (from ) (to (trackSite Move (pips ))))))) (map "StartTrack" {(pair P1 7) (pair P2 18)})}) (rules (start {(place Stack "Disc1" (sites {7 8 9}) 2) (place Stack "Disc1" (sites {10 11 12}) 3) (place Stack "Disc2" (sites {13 14 15}) 3) (place Stack "Disc2" (sites {16 17 18}) 2)}) {(phase "UnStacking" (play (do (if (not (is Prev Mover)) (roll )) (forEach Die (!= (pips ) 0) (or (if (= (state (trackSite Move (mapEntry "StartTrack" (mover )) (- (pips ) 1))) 0) (move Select (from (trackSite Move (mapEntry "StartTrack" (mover )) (- (pips ) 1))) (then (and (if (= 3 (size Stack (last To))) (forEach Level (last To) (set State (last To) (level ) 1)) (forEach Level (last To) (set State (last To) (level ) 2))) (if (not (all DiceUsed)) (moveAgain )))))) (if (= (state (trackSite Move (mapEntry "StartTrack" (mover )) (- (pips ) 1))) 1) (move Select (from (trackSite Move (mapEntry "StartTrack" (mover )) (- (pips ) 1))) (then (and (forEach Level (last To) (set State (last To) (level ) 2)) (if (not (all DiceUsed)) (moveAgain )))))))))) (nextPhase Mover (all Sites (sites Occupied Mover) (not (or (= (state (site )) 0) (= (state (site )) 1)))) "Stacking")) (phase "Stacking" (play (do (if (not (is Prev Mover)) (roll )) (forEach Die (!= (pips ) 0) (or (if (= (state (trackSite Move (mapEntry "StartTrack" (mover )) (- (pips ) 1))) 2) (move Select (from (trackSite Move (mapEntry "StartTrack" (mover )) (- (pips ) 1))) (then (and {(if (= 3 (size Stack (last To))) (forEach Level (last To) (set State (last To) (level ) 1)) (forEach Level (last To) (set State (last To) (level ) 0))) (if (not (all DiceUsed)) (moveAgain ))})))) (if (= (state (trackSite Move (mapEntry "StartTrack" (mover )) (- (pips ) 1))) 1) (move Select (from (trackSite Move (mapEntry "StartTrack" (mover )) (- (pips ) 1))) (then (and (forEach Level (last To) (set State (last To) (level ) 0)) (if (not (all DiceUsed)) (moveAgain )))))))))) (nextPhase Mover (all Sites (sites Occupied Mover) (not (= (state (site )) 2))) "BearingOff")) (phase "BearingOff" (play (do (if (or (all DiceEqual) (not (is Prev Mover))) (roll )) (forEach Piece true) (then (if (not (all DiceUsed)) (moveAgain ))))) (end (if (no Pieces Mover) (result Mover Win))))}))

3x14 board. Fourteen pieces per player, placed in the outer rows of the board. Two knucklebones used as dice. Players move their pieces according to the throws of the knucklebones. Pieces move in a boustrophedon path along the board. The first player to remove their pieces from the board wins.
(game "Had" (players 2) (equipment {(board (rectangle 3 14) {(track "Track1" "0,E,N1,W,N1,E" P1 true) (track "Track2" "41,W,S1,E,S1,W" P2 true)}) (dice 4 2) (piece "Marker" Each (if (= (trackSite Move (count Pips)) -1) (move Remove (from )) (move (from ) (to (trackSite Move (count Pips)) (is Empty (to ))))))}) (rules (start {(place "Marker1" (sites Bottom)) (place "Marker2" (sites Top))}) (play (do (roll ) (forEach Piece))) (end (if (no Pieces Mover) (result Mover Win)))))

2x12 board, with the spaces rendered as points, divided into half. Fifteen pieces per player. Two six-sided dice. Players move according to the number on each die by moving one piece the value on one die then another piece the value on the other die, or by moving one piece the value of one die and then the value of the other. A throw of doubles forces the player to play the throw twice. Each player's pieces begin in three stacks of five, on the leftmost point (with respect to the opponent) on the opponent's side of the board. Play proceeds (with respect to the player) from right to left on the opponent's side of the board, and then from left to right on the player's side of the board. A player cannot place two pieces on a single point on any of the first eleven points of the board, except for those pieces in the starting position, until one of the player's pieces has first landed on the twelfth point. However, a player may place two pieces on any point after the twelfth point, regardless of whether a piece has ever landed on the twelfth point. A player cannot move a piece onto a point containing two or more pieces belonging to the opponent. When a piece lands on a point occupied by a single piece belonging to the opponent, it is removed from the board and must be entered again, and can only do so using the value of one die, not both, with the starting point considered to be point 1, the next point 2, etc. Opponent's pieces can be removed from the board in this way when reentering the board. To win, a player must place their pieces in one of the following winning positions: five pieces on each of the final three points; three pieces on the final five points; seven on the final point, five on the penultimate point, and three on the antepenultimate point; fifteen on the final point. If none of these positions are possible, the player must bear off all of their pieces once all of their pieces have reached the final six points. The first player to reach a winning position or to bear off all of their pieces wins.
(game "Svensk Bradspel" (players 2) (equipment {(board (rectangle 2 13) {(track "Track1" {6 25 24 23 22 21 20 18 17 16 15 14 13 0 1 2 3 4 5 7 8 9 10 11 12 -2} P1 true) (track "Track2" {19 0 1 2 3 4 5 7 8 9 10 11 12 25 24 23 22 21 20 18 17 16 15 14 13 -2} P2 true)} Vertex) (dice 6 2) (piece "Disc" Each (forEach Die true (!= (pips ) 0) (if (= (trackSite Move (from ) (pips )) -2) (if (all Sites (sites Occupied Mover) (is In (site ) (sites Mover "FinalQuadrant"))) (move Remove (from ))) (move (from (from )) (to (trackSite Move (from ) (pips )) (and (or (not (is Enemy (who (to )))) (= 1 (size Stack (to )))) (if (not (is In (to ) (sites Mover "StartingSide"))) true (if (= (value Player Mover) 1) true (is Empty (to ))))) (apply (if (is Enemy (who (to ))) (fromTo (from (to )) (to (mapEntry "Bar" Next)))))))) (then (and (if (not (all DiceUsed)) (moveAgain )) (if (and (= (last To) (mapEntry "12thPoint" Mover)) (!= 1 (value Player Mover))) (set Value Mover 1)))))) (regions "FinalQuadrant" P1 (sites {7 8 9 10 11 12})) (regions "FinalQuadrant" P2 (sites {13 14 15 16 17 18})) (regions "StartingSide" P1 (sites {25 24 23 22 21 20 18 17 16 15 14})) (regions "StartingSide" P2 (sites {0 1 2 3 4 5 7 8 9 10 11})) (map "12thPoint" {(pair P1 13) (pair P2 12)}) (map "Bar" {(pair P1 6) (pair P2 19)})}) (rules (start {(place Stack "Disc1" 25 15) (place Stack "Disc2" 0 15)}) (play (do (if (not (is Prev Mover)) (roll )) (forEach Piece true))) (end {(if (no Pieces Mover) (result Mover Win)) (if (if (is Mover P1) (and {(is Friend (who 10)) (is Friend (who 11)) (is Friend (who 12)) (= 5 (size Stack 10)) (= 5 (size Stack 11)) (= 5 (size Stack 12))}) (and {(is Friend (who 13)) (is Friend (who 14)) (is Friend (who 15)) (= 5 (size Stack 13)) (= 5 (size Stack 14)) (= 5 (size Stack 15))})) (result Mover Win)) (if (if (is Mover P1) (and {(is Friend (who 8)) (is Friend (who 9)) (is Friend (who 10)) (is Friend (who 11)) (is Friend (who 12)) (= 3 (size Stack 8)) (= 3 (size Stack 9)) (= 3 (size Stack 10)) (= 3 (size Stack 11)) (= 3 (size Stack 12))}) (and {(is Friend (who 13)) (is Friend (who 14)) (is Friend (who 15)) (is Friend (who 17)) (is Friend (who 18)) (= 3 (size Stack 13)) (= 3 (size Stack 14)) (= 3 (size Stack 15)) (= 3 (size Stack 17)) (= 3 (size Stack 18))})) (result Mover Win)) (if (if (is Mover P1) (and {(is Friend (who 10)) (is Friend (who 11)) (is Friend (who 12)) (= 3 (size Stack 10)) (= 5 (size Stack 11)) (= 7 (size Stack 12))}) (and {(is Friend (who 13)) (is Friend (who 14)) (is Friend (who 15)) (= 7 (size Stack 13)) (= 5 (size Stack 14)) (= 3 (size Stack 15))})) (result Mover Win)) (if (if (is Mover P1) (and (is Friend (who 12)) (= 15 (size Stack 12))) (and (is Friend (who 13)) (= 15 (size Stack 13)))) (result Mover Win))})))

Five pieces per player. The goal is to reach hole thirty with all five of the player's pieces. Each player has either the left or the right track. Movement is decided by dice. If a piece lands on a space with a connecting line, the piece must move backward along that line, never forward. Holes 15 and 25 are special holes, which grant a second roll.
(game "58 Holes" (players 2) (equipment {(board (graph {{9.0 27.0} {9.0 24.0} {9.0 21.0} {9.0 18.0} {9.0 15.0} {9.0 12.0} {9.0 9.0} {9.0 6.0} {9.0 3.0} {9.0 0.0} {3.0 0.0} {3.0 2.0} {3.0 4.0} {3.0 6.0} {3.0 8.0} {3.0 10.0} {3.0 12.0} {3.0 14.0} {3.0 16.0} {3.0 18.0} {3.0 20.0} {3.0 22.0} {3.0 24.0} {3.0 26.0} {3.0 28.0} {4.0 30.0} {6.0 31.0} {8.0 32.0} {10.0 33.0} {15.0 27.0} {15.0 24.0} {15.0 21.0} {15.0 18.0} {15.0 15.0} {15.0 12.0} {15.0 9.0} {15.0 6.0} {15.0 3.0} {15.0 0.0} {21.0 0.0} {21.0 2.0} {21.0 4.0} {21.0 6.0} {21.0 8.0} {21.0 10.0} {21.0 12.0} {21.0 14.0} {21.0 16.0} {21.0 18.0} {21.0 20.0} {21.0 22.0} {21.0 24.0} {21.0 26.0} {21.0 28.0} {20.0 30.0} {18.0 31.0} {16.0 32.0} {14.0 33.0} {12.0 33.0}} {{0 1} {1 2} {2 3} {3 4} {4 5} {5 6} {6 7} {7 8} {8 9} {9 10} {10 11} {11 12} {12 13} {13 14} {14 15} {15 16} {16 17} {17 18} {18 19} {19 20} {20 21} {21 22} {22 23} {23 24} {24 25} {25 26} {26 27} {27 28} {28 58} {29 30} {30 31} {31 32} {32 33} {33 34} {34 35} {35 36} {36 37} {37 38} {38 39} {39 40} {40 41} {41 42} {42 43} {43 44} {44 45} {45 46} {46 47} {47 48} {48 49} {49 50} {50 51} {51 52} {52 53} {53 54} {54 55} {55 56} {56 57} {57 58}}) {(track "Track1" {59 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 58} P1 true) (track "Track2" {60 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58} P2 true)} Vertex) (hand Each) (dice 2 0 4) (regions "Replay" {14 24 43 53}) (piece "Marker" Each (if (= (trackSite Move (count Pips)) 58) (move Remove (from )) (if (!= (trackSite Move (count Pips)) -1) (if (is Empty (trackSite Move (count Pips))) (move (from ) (to (trackSite Move (count Pips))) (then (and (if (is In (last To) (sites "Replay")) (moveAgain )) (if (!= (last To) (mapEntry (last To))) (if (is Empty (mapEntry (last To))) (move (from (last To)) (to (mapEntry (last To))))))))))))) (map {(pair 19 5) (pair 9 7) (pair 48 34) (pair 38 36)})}) (rules (start {(place "Marker1" (handSite P1) 5) (place "Marker2" (handSite P2) 5)}) (play (do (roll ) (or (forEach Piece) (forEach Piece (mover ))))) (end (if (no Pieces Mover) (result Mover Win)))))

Four 3x8 rectangles, arranged in a cross shape around a large central square. The third space, counting from the outer corner, in the two outer rows of each arm of the board are marked with an \"X.\" Four pieces per player. Seven cowrie shells used as dice, the throws as follows: Zero mouths up = 7; one = 10; two = 2; three = 3; four = 4; five = 25; six =30; seven = 14. Throws of 7, 25, 30, and 14 receive an extra throw. Three total throws is the maximum allowed. Pieces begin the game on the top square of the central row of the player's arm of the board. Pieces progress down the central row, then anti-clockwise around the circumference of the board, then up the central row again, to the central space. When a player's piece lands on a spot occupied by an opponent's piece, the opponent's piece is sent back to the starting space. Pieces resting on a marked space cannot be sent back to start; in this case the player's piece as well as the opponent's piece may occupy this space. The first player to bring all four of their pieces to the central space wins. 
(game "Pachih" (players 4) (equipment {(board (add (hole (merge (shift 0.0 (/ (- 19.0 3.0) 2.0) (rectangle 3 19)) (shift (/ (- 19.0 3.0) 2.0) 0.0 (rectangle 19 3))) (poly {{8.0 8.0} {8.0 11.0} {11.0 11.0} {11.0 8.0}})) {{8 28 48 68 69 70 71 51 31 11 10 9}}) {(track "Track1" "96,9,S,E,N,11,E,N,W,53,N,W,S,42,W,S,E,8,S,E1,N7,End" P1 true) (track "Track2" "96,26,W,S,E,8,S,E,N,11,E,N,W,53,N,W,S,42,W,S1,E7,End" P2 true) (track "Track3" "96,52,N,W,S,42,W,S,E,8,S,E,N,11,E,N,W,53,N,W1,S7,End" P3 true) (track "Track4" "96,27,E,N,W,53,N,W,S,42,W,S,E,8,S,E,N,11,E,N1,W7,End" P4 true)}) (dice 2 0 7) (piece "Pawn" Each (if (= (trackSite Move (from ) (mapEntry "Throw" (count Pips))) -2) (move Remove (from ) (level )) (move (from (from ) (level )) (to (trackSite Move (from ) (mapEntry "Throw" (count Pips))) true (apply (if (and (not (is In (to ) (sites "SafeSites"))) (is Enemy (who (to )))) (forEach Level (to ) FromTop (fromTo (from (to ) (level )) (to (centrePoint )))))))))) (regions "SafeSites" (sites {60 62 2 37 87 89 16 48})) (map "Throw" {(pair 0 7) (pair 1 10) (pair 2 2) (pair 3 3) (pair 4 4) (pair 5 25) (pair 6 30) (pair 7 14)})}) (rules (start {(place Stack "Pawn1" 9 4) (place Stack "Pawn2" 26 4) (place Stack "Pawn3" 52 4) (place Stack "Pawn4" 27 4)}) (play (do (roll ) (forEach Piece) (then (if (and (< (value Player Mover) 2) (is In (mapEntry "Throw" (count Pips)) (sites {7 25 30 14}))) (and (moveAgain ) (set Value Mover (+ 1 (value Player Mover)))) (set Value Mover -1))))) (end (if (no Pieces Mover) (result Mover Win)))))

2x12 board, divided in half. Spaces on each side take the form of points. Fifteen pieces per player. Three six-sided dice. Players move according to the number on each die by moving one piece the value on one die then another piece the value on the other die, or by moving one piece the value of one die and then the value of the other. One player begins with all of their pieces on the space furthest to the left on their side, the other with their pieces on the point directly opposite it. Pieces move in opposite directions around the board, only on the left half of the board where the pieces begin, toward the point where the opponent's pieces begin, and bearing off the board from there. A player cannot have two of their pieces on the same spot in the starting quadrant. When a piece lands on the same space as an opponent's piece, the opponent's piece is sent back to where it began. The first person to bear off all their pieces wins. 
(game "Ludus Lombardorum" (players 2) (equipment {(board (rectangle 2 13) {(track "Track1" {6 0 1 2 3 4 5 18 17 16 15 14 13 12} P1 true) (track "Track2" {19 12 13 14 15 16 17 18 5 4 3 2 1 0} P2 true)} Vertex) (dice 3) (map {(pair 1 19) (pair 2 6)}) (piece "Disc" Each) (regions P1 {0 1 2 3 4 5}) (regions P2 {13 14 15 16 17 18})}) (rules (start {(place Stack "Disc1" 0 15) (place Stack "Disc2" 13 15)}) (play (do (if (not (is Prev Mover)) (roll )) (forEach Die (!= (pips ) 0) (forEach Site (sites Occupied Mover) (if (= (trackSite Move (site ) (pips )) -1) (move Remove (site )) (move (from (site )) (to (trackSite Move (site ) (pips )) (or (and (is Enemy (who (to ))) (= 1 (size Stack (to )))) (and (if (not (is In (to ) (sites Mover))) true (is Empty (to ))) (not (is Enemy (who (to )))))) (apply (is Enemy (who (to ))) (fromTo (from (to )) (to (mapEntry (mover ))))))))) (then (if (not (all DiceUsed)) (moveAgain )))))) (end (if (no Pieces Mover) (result Mover Win)))))

2x12 board, divided in half, where the spaces are rendered as points. Fifteen pieces per player. Two six-sided dice. Both players begin on the same side of the board, one player (who plays first) with five pieces on the rightmost point of the starting row, four on the fifth and sixth points and two in the eleventh point in the opposite row. The other player has three pieces each on the right five points in the second row. Players move according to the number on each die by moving one piece the value on one die then another piece the value on the other die, or by moving one piece the value of one die and then the value of the other. On each throw the player also plays a throw of 6 in addition to the throw presented by the dice. Pieces move in an anti-clockwise direction around the board. A piece cannot move to a point that is occupied by more than one of the opponent's pieces. If a piece lands on a point occupied by a single piece belonging to the opponent, the opponent's piece is removed from the board and must enter again from the leftmost point in the row where the pieces began. A piece may be borne off the board when a throw is greater than the number of points left on the board. The first player to bear all of their pieces off the board wins.
(game "Myles" (players 2) (equipment {(board (rectangle 2 13) {(track "Track1" {6 0 1 2 3 4 5 7 8 9 10 11 12 25 24 23 22 21 20 18 17 16 15 14 13} P1 true) (track "Track2" {19 0 1 2 3 4 5 7 8 9 10 11 12 25 24 23 22 21 20 18 17 16 15 14 13} P2 true)} Vertex) (dice 2) (map {(pair 1 19) (pair 2 6)}) (piece "Disc" Each)}) (rules (start {(place Stack "Disc1" 12 5) (place Stack "Disc1" 20 4) (place Stack "Disc1" 21 4) (place Stack "Disc1" 14 2) (place Stack "Disc2" 25 3) (place Stack "Disc2" 24 3) (place Stack "Disc2" 23 3) (place Stack "Disc2" 22 3) (place Stack "Disc2" 21 3)}) (play (do (if (not (is Prev Mover)) (roll )) (if (all DiceUsed) (forEach Site (sites Occupied Mover) (if (= (trackSite Move (site ) 6) -1) (move Remove (site )) (move (from (site )) (to (trackSite Move (site ) 6) (or (not (is Enemy (who (to )))) (= 1 (size Stack (to )))) (apply (is Enemy (who (to ))) (fromTo (from (to )) (to (mapEntry (mover ))))))))) (forEach Die (!= (pips ) 0) (forEach Site (sites Occupied Mover) (if (= (trackSite Move (site ) (pips )) -1) (move Remove (site )) (move (from (site )) (to (trackSite Move (site ) (pips )) (or (not (is Enemy (who (to )))) (= 1 (size Stack (to )))) (apply (is Enemy (who (to ))) (fromTo (from (to )) (to (mapEntry (mover ))))))))) (then (moveAgain )))))) (end (if (no Pieces Mover) (result Mover Win)))))

2x12 board, divided in half. Spaces on each side take the form of semi-circular sockets, into which the pieces fit. Fifteen pieces per player. Play begins with thirteen pieces on the seventh point of the track, and two pieces on the twelfth point. Three six-sided dice. Players move pieces according to the value of each individual die. Play moves around the board through starting from the quadrant where the pieces begin, through the one where the opponent's pieces begin, and then through the remaining quadrant on the opponent's side of the board, where the pieces are borne off the board. When a piece lands on a spot occupied by a single piece of the opponent, the opponent's piece is sent back to its starting quadrant. If a player's piece is sent back to start, but all of the spaces in their starting quadrant are occupied by the opponent's pieces, the player loses automatically. Also, any roll that allows the player to only move to spaces occupied by the opponent results in an automatic loss for the player. Otherwise, the first player to bear off all their pieces wins.
(game "Fallas" (players 2) (equipment {(board (merge {(rectangle 1 6) (shift 7.0 0.0 (rectangle 1 6)) (shift 0.0 6.0 (rectangle 1 6)) (shift 7.0 6.0 (rectangle 1 6))}) {(track "Track1" {0 1 2 3 4 5 6 7 8 9 10 11 23 22 21 20 19 18 17 16 15 14 13 12} P1 true) (track "Track2" {12 13 14 15 16 17 18 19 20 21 22 23 11 10 9 8 7 6 5 4 3 2 1 0} P2 true)} Vertex) (dice 6 3) (piece "Disc" Each (forEach Die (!= (pips ) 0) (if (= (trackSite Move (from ) (pips )) -1) (move Remove (from )) (move (from (from )) (to (trackSite Move (from ) (pips )) (or (not (is Enemy (who (to )))) (= 1 (size Stack (to )))) (apply (if (is Enemy (who (to ))) (if (= (count Sites (difference (sites Next "StartQuadrant") (union (sites {(to )}) (sites Occupied Mover)))) 0) (and (remove (to )) (trigger "StartQuadrantFull" Next)) (fromTo (from (to )) (to (if (and (!= (to ) (regionSite (sites Next "StartQuadrant") 0)) (not (is Friend (who (regionSite (sites Next "StartQuadrant") 0))))) (regionSite (sites Next "StartQuadrant") 0) (if (and (!= (to ) (regionSite (sites Next "StartQuadrant") 1)) (not (is Friend (who (regionSite (sites Next "StartQuadrant") 1))))) (regionSite (sites Next "StartQuadrant") 1) (if (and (!= (to ) (regionSite (sites Next "StartQuadrant") 2)) (not (is Friend (who (regionSite (sites Next "StartQuadrant") 2))))) (regionSite (sites Next "StartQuadrant") 2) (if (and (!= (to ) (regionSite (sites Next "StartQuadrant") 3)) (not (is Friend (who (regionSite (sites Next "StartQuadrant") 3))))) (regionSite (sites Next "StartQuadrant") 3) (if (and (!= (to ) (regionSite (sites Next "StartQuadrant") 4)) (not (is Friend (who (regionSite (sites Next "StartQuadrant") 4))))) (regionSite (sites Next "StartQuadrant") 4) (if (and (!= (to ) (regionSite (sites Next "StartQuadrant") 5)) (not (is Friend (who (regionSite (sites Next "StartQuadrant") 5))))) (regionSite (sites Next "StartQuadrant") 5) (regionSite (sites Next "StartQuadrant") 6))))))))))))))) (then (if (not (all DiceUsed)) (moveAgain ))))) (regions "StartQuadrant" P1 (sites {6 7 8 9 10 11})) (regions "StartQuadrant" P2 (sites {18 19 20 21 22 23}))}) (rules (start {(place Stack "Disc1" 7 13) (place Stack "Disc1" 11 2) (place Stack "Disc2" 19 13) (place Stack "Disc2" 23 2)}) (play (do (if (not (is Prev Mover)) (roll )) (forEach Piece))) (end {(if (no Pieces Mover) (result Mover Win)) (if (is Triggered "StartQuadrantFull" P1) (result P2 Win)) (if (is Triggered "StartQuadrantFull" P2) (result P1 Win)) (if (and (not (is Prev Mover)) (no Moves Mover)) (result Mover Loss))})))

Played on a standard Backgammon board. Each player starts with fifteen pieces on the starting point of their track. Two six-sided dice. The pieces move around the board in opposite directions in a horseshoe-shaped track.
            
            Each player rolls one die. The player who rolls highest goes first. The player then rolls two die to begin play.  The numbers on the two dice constitute separate moves; i.e. a piece must move the full value of an individual die. One piece may move the combined total of the two die. Doubles are played twice. A player must use both numbers of a roll if possible, or all four numbers in the case of doubles. 
            
            If a player lands on a point occupied by a single opposing piece, the opponent’s piece is trapped until the trapping player removes their piece.
            
            A piece may not be moved to a point occupied by two or more of the opponent's pieces. The player cannot move a piece to a point where the opponent has trapped another of the player's pieces. 
            
            Once a player has moved all fifteen of their pieces into the their home section of the board (that is, the six points at the end of the player's track), the player may begin bearing off. A player cannot bear off when the player has one or more pieces trapped inside the their home section. A player bears off by rolling a number equal to the number of points left in the track of a piece, plus one. If there is no piece on the point indicated by the roll, then the player must make a legal move using a piece that will not remove it from the board. If there are no pieces available to fulfill this condition, the player must remove a piece that is furthest from the goal. The first player to bear off all fifteen pieces wins the game.
            
            If the last piece belonging to player remains in the starting position is trapped by the opponent before it has left the starting position, the player loses. The only exception is if the opponent still has pieces on their starting position. A game in which both players' respective pieces in the starting position are trapped is a draw.
            
            In Tavli, in subsequent rounds, the winner of the previous round plays first.
            
        The game is also typically played with a point system, where points are lost based on the winning conditions. Players lose two points by losing if they haven't yet borne off any of their pieces, or one point if they have borne off at least one piece. A player who loses because their final piece in the starting position was trapped loses two points.
(game "Plakoto" (players 2) (equipment {(board (rectangle 2 13) {(track "Track1" {12 11 10 9 8 7 5 4 3 2 1 0 13 14 15 16 17 18 20 21 22 23 24 25} P1 true) (track "Track2" {25 24 23 22 21 20 18 17 16 15 14 13 0 1 2 3 4 5 7 8 9 10 11 12} P2 true)} Vertex) (dice 2) (regions P1 {20 21 22 23 24 25}) (regions P2 {7 8 9 10 11 12}) (piece "Disc" Each (forEach Die true (and {(!= (pips ) 0) (!= (trackSite Move (from ) (pips )) -1) (!= (trackSite Move (from ) (pips )) -2)}) (move (from (from )) (to (trackSite Move (from ) (pips )) (or (not (is Enemy (who (to )))) (= 1 (size Stack (to ))))))))}) (rules (start {(place Stack "Disc1" 12 15) (place Stack "Disc2" 25 15)}) (play (do (if (not (is Prev Mover)) (roll )) (if (all Sites (sites Occupied Mover) (is In (site ) (sites Mover))) (forEach Die true (!= (pips ) 0) (forEach Site (sites Occupied Mover) (if (and (is Occupied (site )) (!= (trackSite Move (site ) (pips )) -1)) (if (= (trackSite Move (site ) (pips )) -2) (move Remove (from )) (move (from (site )) (to (trackSite Move (site ) (pips )) (or (not (is Enemy (who (to )))) (= 1 (size Stack (to )))))))) (firstMoveOnTrack "Track" Mover (if (and (is Friend (who (site ))) (< (trackSite Move (site ) (pips )) 0)) (move Remove (from )))) (then (if (not (all DiceUsed)) (moveAgain ))))) (max Distance "Track" Mover (forEach Piece true (then (if (not (all DiceUsed)) (moveAgain )))))))) (end {(if (no Pieces Mover) (byScore {(score P1 (if (is Mover P1) (if (= (size Stack (sites Occupied P2)) 15) 2 1) 0)) (score P2 (if (is Mover P2) (if (= (size Stack (sites Occupied P1)) 15) 2 1) 0))})) (if (and (= (what 12 0) (id "Disc1" P1)) (= (what 12 1) (id "Disc2" P2))) (byScore {(score P1 0) (score P2 2)})) (if (and (= (what 25 0) (id "Disc2" P2)) (= (what 25 1) (id "Disc1" P1))) (byScore {(score P1 2) (score P2 0)}))})))

The game is played on a board with twelve points on either side. The points form a continuous track in a horseshoe shape; each player progresses in opposite directions (one from their bottom right to the top right, the other from their bottom left to their top left. Each player has 15 pieces. The starting position is as such, number the points from the origin of each player's track: Point six: five pieces Point 8: three pieces Point 13: five pieces Point 24: two pieces Play begins by each player rolling one die; the player with the highest roll plays first and plays the numbers on this first roll. Players move according to the number on each die by moving one piece the value on one die then another piece the value on the other die, or by moving one piece the value of one die and then the value of the other. If doubles are rolled, the player must play the number on each die twice. Players cannot end their move on a point with multiple opposing pieces. If a player ends the turn on a point with one opposing piece, that piece is placed in the middle of the board (not on a point) and must reenter the board according the the next die roll, counting the origin point as a move of 1. They cannot reenter on a point with two or more pieces. No other pieces can move until all of the pieces belonging to that player are removed from the center. When all of a player's pieces are on their final 6 points, they may start removing pieces from the board. They can do so by rolling a 6 to move from the 6th point, and so on down to 1. Players must use all available moves presented by the dice. The first player to remove all of their pieces wins.
(game "Backgammon" (players 2) (equipment {(board (rectangle 2 13) {(track "Track1" {6 12 11 10 9 8 7 5 4 3 2 1 0 13 14 15 16 17 18 20 21 22 23 24 25 -2} P1 true) (track "Track2" {19 25 24 23 22 21 20 18 17 16 15 14 13 0 1 2 3 4 5 7 8 9 10 11 12 -2} P2 true)} Vertex) (dice 2) (regions P1 {20 21 22 23 24 25}) (regions P2 {7 8 9 10 11 12}) (map {(pair 1 6) (pair 2 19)}) (piece "Disc" Each (forEach Die true (and {(!= (pips ) 0) (!= (trackSite Move (from ) (pips )) -1) (not (= (trackSite Move (from ) (pips )) -2))}) (move (from (from )) (to (trackSite Move (from ) (pips )) (or (not (is Enemy (who (to )))) (= 1 (size Stack (to )))) (apply (is Enemy (who (to ))) (fromTo (from (to )) (to (mapEntry (next )))))))))}) (rules (start {(place Stack "Disc1" 0 5) (place Stack "Disc1" 12 2) (place Stack "Disc1" 17 3) (place Stack "Disc1" 20 5) (place Stack "Disc2" 4 3) (place Stack "Disc2" 7 5) (place Stack "Disc2" 13 5) (place Stack "Disc2" 25 2)}) (play (do (if (not (is Prev Mover)) (roll )) (if (all Sites (sites Occupied Mover) (is In (site ) (sites Mover))) (forEach Die true (!= (pips ) 0) (forEach Site (sites Occupied Mover) (if (and (is Occupied (site )) (!= (trackSite Move (site ) (pips )) -1)) (if (= (trackSite Move (site ) (pips )) -2) (move Remove (site )) (move (from (site )) (to (trackSite Move (site ) (pips )) (or (not (is Enemy (who (to )))) (= 1 (size Stack (to )))) (apply (is Enemy (who (to ))) (fromTo (from (to )) (to (mapEntry (next ))))))))) (firstMoveOnTrack "Track" Mover (if (and (is Friend (who (site ))) (< (trackSite Move (site ) (pips )) 0)) (move Remove (site )))) (then (if (not (all DiceUsed)) (moveAgain ))))) (max Distance "Track" Mover (if (is Empty (mapEntry (mover ))) (forEach Piece true) (forEach Die true (!= (pips ) 0) (move (from (mapEntry (mover ))) (to (trackSite Move (mapEntry (mover )) (pips )) (or (not (is Enemy (who (to )))) (= 1 (size Stack (to )))) (apply (is Enemy (who (to ))) (fromTo (from (to )) (to (mapEntry (next )))))))) (then (if (not (all DiceUsed)) (if (can Move (if (is Empty (mapEntry (mover ))) (forEach Piece true) (forEach Die true (!= (pips ) 0) (move (from (mapEntry (mover ))) (to (trackSite Move (mapEntry (mover )) (pips )) (or (not (is Enemy (who (to )))) (= 1 (size Stack (to )))) (apply (is Enemy (who (to ))) (fromTo (from (to )) (to (mapEntry (next )))))))))) (moveAgain ))))))))) (end (if (no Pieces Mover) (result Mover Win)))))

One horizontal row of eleven squares, the central square marked with an X. From this central square, extending vertically, eleven more squares, making a row of twelve in total. The fifth square and the final square in this row are marked with an X. An arc of five squares extend left and down from the final square of the vertical row. From the fifth row of the vertical row, a square with twelve squares per side. The corner squares are marked with an X, the central two squares of the left, right, and top side are marked with one X across both squares. Two or four players; when there are four players they play on two teams of two. Three cowrie shells per player, used as pieces. Six cowrie shells used as dice; the throws = the number of mouths that land face up. Players move their pieces onto the board and around the circuit according to the throws of the cowries. Teams start on opposite ends of the bottom row of squares, up the vertical line to the square, in opposite directions around the square, then up the remaining part of the vertical row and down the arc, and off the board. When a piece lands on a space occupied by an opponent's piece, the opponent's piece is sent back and must enter the board again. Pieces are safe from being sent back if they rest on a marked square. The first team to remove all of their pieces from the board wins. 
(game "Kawade Kelia" (players 4) (equipment {(board (merge {(rectangle 1 12) (shift 3.5 3.25 (scale 1.0 1.5 (rotate 90.0 (rectangle 1 4)))) (shift 0.0 7.0 (rectangle 1 12)) (shift -5.5 12.5 (rotate 90.0 (rectangle 1 12))) (shift 2.5 10.5 (rotate 90.0 (rectangle 1 6))) (shift 5.5 12.5 (rotate 90.0 (rectangle 1 12))) (shift 0.0 18.0 (rectangle 1 11)) (shift 1.0 11.0 (rotate 45.0 (rectangle 1 4))) (shift 5.0 13.0 (graph {{0.0 0.0} {0.0 1.0} {-0.94 0.26} {-0.23 -0.44}} {{0 1} {1 2} {2 3} {3 0}}))}) {(track "Track1" "71,0,E5,N5,E,N,W,S,E5,N,WSW,SW,End" P1 true) (track "Track2" "72,11,W6,N5,W,N,E,S,W6,N,WSW,SW,End" P2 true) (track "Track3" "73,0,E5,N5,E,N,W,S,E5,N,WSW,SW,End" P3 true) (track "Track4" "74,11,W6,N5,W,N,E,S,W6,N,WSW,SW,End" P4 true)}) (piece "Paddle" Each (if (= (trackSite Move (count Pips)) -2) (move Remove (from )) (if (!= (trackSite Move (count Pips)) -1) (if (or {(is Empty (trackSite Move (count Pips))) (is Friend (who (trackSite Move (count Pips)))) (and (is Enemy (who (trackSite Move (count Pips)))) (not (is In (trackSite Move (count Pips)) (sites "Protect"))))}) (move (from (from ) (level )) (to (trackSite Move (count Pips)) (apply (is Enemy (who (to ))) (fromTo (from (to )) (to (handSite (who (to )))))))))))) (dice 2 0 6) (hand Each) (regions "Protect" (sites {5 17 19 27 41 57 46 62 63 34 35 51 52}))}) (rules (start {(place Stack "Paddle1" (handSite P1) 3) (place Stack "Paddle2" (handSite P2) 3) (place Stack "Paddle3" (handSite P3) 3) (place Stack "Paddle4" (handSite P4) 3) (set Team 1 {P1 P3}) (set Team 2 {P2 P4})}) (play (do (roll ) (or (forEach Piece) (forEach Piece (mover ) true)))) (end {(if (no Pieces TeamMover) (result TeamMover Win))})))

Four 3x8 rectangles, arranged in a cross. The third square in the outer rows of each arm, counting from the outer corners, are marked. Four players, each with four pieces. Pieces enter the board from the center of the board, down the central row of the player's arm, around the board in an anti-clockwise direction, and then back up the central row to the central space. Six cowries used as dice, the throws are as follows: one mouth up = 10; two mouths up = 2; three mouths up = 3; four mouths up = 4; five mouths up = 25; six mouths up = 12; zero mouths up = 6. Throws of 10 and 25 allow a player to enter a piece onto the board. When a piece lands on a space occupied by an opponent's piece, the opponent's piece is sent back to start. Pieces on the same spot as another piece belonging to the player and pieces on marked squares are safe from being sent to start. The player who moves all of their pieces off the board first wins.
(game "Barjis" (players 4) (equipment {(board (add (hole (merge (shift 0.0 (/ (- 19.0 3.0) 2.0) (rectangle 3 19)) (shift (/ (- 19.0 3.0) 2.0) 0.0 (rectangle 19 3))) (poly {{8.0 8.0} {8.0 11.0} {11.0 11.0} {11.0 8.0}})) {{8 28 48 68 69 70 71 51 31 11 10 9}}) {(track "Track1" "96,9,S,E1,N,11,E,N,W,53,N,W,S,42,W,S,E,8,S,E1,N8" P1 true) (track "Track2" "96,26,W,S,E,8,S,E,N,11,E,N,W,53,N,W,S,42,W,S1,E8" P2 true) (track "Track3" "96,52,N,W,S,42,W,S,E,8,S,E,N,11,E,N,W,53,N,W1,S8" P3 true) (track "Track4" "96,27,E,N,W,53,N,W,S,42,W,S,E,8,S,E,N,11,E,N1,W8" P4 true)}) (hand Each) (dice 2 0 6) (piece "Pawn" Each (if (= (trackSite Move (mapEntry "Throw" (count Pips))) -1) (move Remove (from )) (move (from (from )) (to (trackSite Move (mapEntry "Throw" (count Pips))) (or (is Empty (to )) (and (is Enemy (who (to ))) (not (is In (to ) (sites "SafeSites"))))) (apply (is Enemy (who (to ))) (fromTo (from (to )) (to (handSite (who (to )))))))))) (map "Throw" {(pair 0 6) (pair 1 10) (pair 2 2) (pair 3 3) (pair 4 4) (pair 5 25) (pair 6 12)}) (regions "SafeSites" (sites {60 62 16 48 87 89 37 2}))}) (rules (start (place "Pawn" "Hand" 4)) (play (do (roll ) (or (forEach Piece) (if (and (is In (mapEntry "Throw" (count Pips)) (array {10 25})) (is Occupied (handSite Mover))) (move (from (handSite Mover)) (to (centrePoint ) (not (is Friend (who (to )))) (apply (is Enemy (who (to ))) (fromTo (from (to )) (to (handSite (who (to )))))))))))) (end (if (no Pieces Mover) (result Mover Win)))))

2x12 board, with the spaces rendered as points, divided into half. Fifteen pieces per player, which begin on the rightmost point, with respect to the player, on the opposite side of the board from which they sit. Two six-sided dice. Players move according to the number on each die by moving one piece the value on one die then another piece the value on the other die, or by moving one piece the value of one die and then the value of the other. A throw of doubles forces the player to play the throw twice. More than two pieces of the same player may not occupy a point on the starting side of the board. The player cannot move past the penultimate point on the opposite side of the board until five pieces have been moved from the starting point. A single opponent's piece may be removed from the board when a player's piece lands on it, and the opponent's piece must reenter the board. Pieces cannot move to a point occupied by two opponent's piece. A piece cannot reenter then board on a point occupied by another piece, whether belonging to the player or the opponent. When all of a player's pieces have reached the final quadrant of the board, the player may begin to remove them from the table. The player who bears off their pieces scores two points. 
(game "Kotra" (players 2) (equipment {(board (merge {(rectangle 1 6) (shift 7.0 0.0 (rectangle 1 6)) (shift 0.0 6.0 (rectangle 1 6)) (shift 7.0 6.0 (rectangle 1 6))}) {(track "Track1" {11 10 9 8 7 6 5 4 3 2 1 0 12 13 14 15 16 17 18 19 20 21 22 23 -2} P1 true) (track "Track2" {12 13 14 15 16 17 18 19 20 21 22 23 11 10 9 8 7 6 5 4 3 2 1 0 -2} P2 true)} Vertex) (dice 6 2) (piece "Disc" Each (forEach Die true (!= (pips ) 0) (if (= (trackSite Move (from ) (pips )) -2) (if (all Sites (sites Occupied Mover) (is In (site ) (sites Mover "FinalQuadrant"))) (move Remove (from ))) (move (from (from )) (to (trackSite Move (from ) (pips )) (and {(or (not (is Enemy (who (to )))) (= 1 (size Stack (to )))) (if (not (is In (to ) (sites Mover "StartingSide"))) true (> 2 (size Stack (to )))) (if (not (is In (to ) (sites Mover "AfterPenultimate"))) true (>= 10 (count Pieces (sites {(handSite Mover) (mapEntry "Entry" Mover)}))))}) (apply (is Enemy (who (to ))) (fromTo (from (to )) (to (handSite Next))))))) (then (if (not (all DiceUsed)) (moveAgain ))))) (hand Each) (regions "FinalQuadrant" P1 (sites {18 19 20 21 22 23})) (regions "FinalQuadrant" P2 (sites {0 1 2 3 4 5})) (regions "StartingSide" P1 (sites {0 1 2 3 4 5 6 7 8 9 10 11})) (regions "StartingSide" P2 (sites {12 13 14 15 16 17 18 19 20 21 22 23})) (regions "AfterPenultimate" P1 (sites {23})) (regions "AfterPenultimate" P2 (sites {0})) (map "Entry" {(pair P1 11) (pair P2 12)})}) (rules (start {(place Stack "Disc1" 11 15) (place Stack "Disc2" 12 15)}) (play (do (if (not (is Prev Mover)) (roll )) (or (if (is Occupied (handSite Mover)) (forEach Die true (!= (pips ) 0) (move (from (handSite Mover)) (to (trackSite Move (mapEntry "Entry" Mover) (- (pips ) 1)) (is Empty (to )))) (then (if (not (all DiceUsed)) (moveAgain ))))) (forEach Piece true)) (then (if (no Pieces Mover) (set Score Mover 2))))) (end (if (no Pieces Mover) (result Mover Win)))))

Played on a board with 12 points per side, divided in half. Play occurs only in the top right quadrant of the board. Fifteen pieces per player. Two six-sided dice. A double throw grants the player another throw. Players enter their pieces according to the throws of the dice, and they must use the entire value of a die to place or to move a piece. When all of a player's pieces are on the board, they may bear off their pieces with throws equal to the number of remaining spaces, plus one. If a piece lands on a point with a single piece belonging to the opponent, the opponent's piece is removed from the board and must re-enter. The player who bears off all their pieces first wins.
(game "Paumecary" (players 2) (equipment {(board (merge {(rectangle 1 6) (shift 7.0 0.0 (rectangle 1 6)) (shift 0.0 6.0 (rectangle 1 6)) (shift 7.0 6.0 (rectangle 1 6))}) {(track "Track1" {24 23 22 21 20 19 18 -2} P1 true) (track "Track2" {25 23 22 21 20 19 18 -2} P2 true)} Vertex) (dice 6 2) (piece "Disc" Each (or (forEach Die true (!= (pips ) 0) (move (from (from )) (to (trackSite Move (from ) (pips )) (or (not (is Enemy (who (to )))) (= 1 (size Stack (to )))) (apply (is Enemy (who (to ))) (fromTo (from (to )) (to (handSite Next)))))) (then (if (not (all DiceUsed)) (moveAgain )))) (if (is Empty (handSite Mover)) (forEach Die true (and (!= (pips ) 0) (= (trackSite Move (from ) (pips )) -2)) (move Remove (from )) (then (if (not (all DiceUsed)) (moveAgain ))))))) (hand Each)}) (rules (start {(place Stack "Disc1" (handSite P1) 15) (place Stack "Disc2" (handSite P2) 15)}) (play (do (if (not (is Prev Mover)) (roll )) (or (forEach Piece) (forEach Piece (mover ))))) (end (if (no Pieces Mover) (result Mover Win)))))

2x12 board, divided in half. Spaces on each side take the form of semi-circular sockets, into which the pieces fit. Fifteen pieces per player. Two or three dice. Players move according to the number on each die by moving one piece the value on one die then another piece the value on the other die, or by moving one piece the value of one die and then the value of the other. Both players enter their pieces into the same quadrant of the board, and move pieces along a horseshoe-shaped track around the board toward the quadrant on the opposite side of the board.  When a piece lands on a space occupied by a single piece of the opponent, the opponent's piece is removed from the board and must enter again as before. When all of the dice present the same number, the player receives another turn. The player to bear off all of their pieces first wins.
        
(game "Pareia de Entrada" (players 2) (equipment {(board (merge {(rectangle 1 6) (shift 7.0 0.0 (rectangle 1 6)) (shift 0.0 6.0 (rectangle 1 6)) (shift 7.0 6.0 (rectangle 1 6))}) {(track "Track1" {24 0 1 2 3 4 5 6 7 8 9 10 11 23 22 21 20 19 18 17 16 15 14 13 12} P1 true) (track "Track2" {25 0 1 2 3 4 5 6 7 8 9 10 11 23 22 21 20 19 18 17 16 15 14 13 12} P2 true)} Vertex) (dice 6 3) (hand Each) (piece "Disc" Each (forEach Die (!= (pips ) 0) (if (= (trackSite Move (pips )) -1) (move Remove (from )) (if (or (not (is Enemy (who (trackSite Move (pips ))))) (= 1 (size Stack (trackSite Move (pips ))))) (move (from ) (to (trackSite Move (pips )) (apply (is Enemy (who (to ))) (fromTo (from (to )) (to (handSite Next))))))))))}) (rules (start {(place Stack "Disc1" (handSite P1) 15) (place Stack "Disc2" (handSite P2) 15)}) (play (do (if (or (is Pending) (not (is Prev Mover))) (roll )) (or (forEach Piece true) (forEach Piece (mover ) true) (then (and (if (not (all DiceUsed)) (moveAgain )) (if (and (all DiceUsed) (all DiceEqual)) (and (set Pending) (moveAgain )))))))) (end (if (no Pieces Mover) (result Mover Win)))))

Four 3x8 rectangles, arranged in a cross shape around a large central square space. Squares marked with \"X\" (counting from top of each row): fifth in each outer row, fourth in central row. Four players playing on two teams. Three pieces per player. Play begins in the central row of each player's arm of the board. Six cowrie shells used as dice. Values of the cowries are: 0=6, 1=10, 2=2, 3=3, 4=4, 5=25, 6=12. A roll of 10 or 25 adds an extra move of 1. This extra move must be used to enter a new piece on the board if possible, if not possible then it can be assigned to any piece. Pieces on a space marked \"x\" are safe from being captured. Players play until they throw a 2, 3, or 4. The value of an individual roll can only move one piece, but multiple pieces can be moved in turns with multiple rolls. Pieces enter the board with a throw of 10 or 25. Pieces enter the board from the central square onto the central row of their arm of the cross, and then anti-clockwise around the board, then back up the central row of their arm, entering the central square only with an exact throw. The first team to move all of their pieces into the central square wins.
(game "Sokkattan" (players 4) (equipment {(board (add (hole (merge (shift 0.0 (/ (- 19.0 3.0) 2.0) (rectangle 3 19)) (shift (/ (- 19.0 3.0) 2.0) 0.0 (rectangle 19 3))) (poly {{8.0 8.0} {8.0 11.0} {11.0 11.0} {11.0 8.0}})) {{8 28 48 68 69 70 71 51 31 11 10 9}}) {(track "Track1" "96,9,S,E,N,11,E,N,W,53,N,W,S,42,W,S,E,8,S,E1,N7,End" P1 true) (track "Track2" "96,26,W,S,E,8,S,E,N,11,E,N,W,53,N,W,S,42,W,S1,E7,End" P2 true) (track "Track3" "96,52,N,W,S,42,W,S,E,8,S,E,N,11,E,N,W,53,N,W1,S7,End" P3 true) (track "Track4" "96,27,E,N,W,53,N,W,S,42,W,S,E,8,S,E,N,11,E,N1,W7,End" P4 true)}) (hand Each) (dice 2 0 6) (piece "Pawn" Each (if (= (trackSite Move (from ) (mapEntry "Throw" (count Pips))) -2) (move Remove (from ) (level )) (move (from (from ) (level )) (to (trackSite Move (from ) (mapEntry "Throw" (count Pips))) (not (and (is In (to ) (sites "SafeSites")) (is Enemy (who (to ))))) (apply (if (is Enemy (who (to ))) (forEach Level (to ) FromTop (fromTo (from (to ) (level )) (to (handSite (who (to ) (level )))))))))))) (regions "SafeSites" (sites {67 63 65 23 38 3 82 84 86 30 47 15})) (map "Throw" {(pair 0 6) (pair 1 10) (pair 2 2) (pair 3 3) (pair 4 4) (pair 5 25) (pair 6 12)}) (map "Entry" {(pair P1 67) (pair P2 23) (pair P3 82) (pair P4 30)})}) (rules (start {(set Team 1 {P1 P3}) (set Team 2 {P2 P4}) (place Stack "Pawn1" (handSite P1) 3) (place Stack "Pawn2" (handSite P2) 3) (place Stack "Pawn3" (handSite P3) 3) (place Stack "Pawn4" (handSite P4) 3)}) (play (do (roll ) (if (= (var "ExtraOne") 1) (priority {(if (is Occupied (handSite Mover)) (move (from (handSite Mover)) (to (mapEntry "Entry" Mover)))) (forEach Piece (if (= (trackSite Move (from ) 1) -2) (move Remove (from ) (level )) (move (from (from ) (level )) (to (trackSite Move (from ) 1) (not (and (is In (to ) (sites "SafeSites")) (is Enemy (who (to ))))) (apply (if (is Enemy (who (to ))) (forEach Level (to ) FromTop (fromTo (from (to ) (level )) (to (handSite (who (to ) (level ))))))))))))} (then (and (moveAgain ) (set Var "ExtraOne" 0)))) (or (if (and (is Occupied (handSite Mover)) (is In (mapEntry "Throw" (count Pips)) (sites {10 25}))) (move (from (handSite Mover)) (to (mapEntry "Entry" Mover)))) (forEach Piece))) (then (if (not (is In (mapEntry "Throw" (count Pips)) (sites {2 3 4}))) (and (if (is In (mapEntry "Throw" (count Pips)) (sites {10 25})) (set Var "ExtraOne" 1)) (moveAgain )))))) (end (if (no Pieces TeamMover) (result TeamMover Win)))))

2x12 board, with the spaces rendered as points, divided into half. Fifteen pieces per player. Two six-sided dice. Players move according to the number on each die by moving one piece the value on one die then another piece the value on the other die, or by moving one piece the value of one die and then the value of the other. A throw of doubles forces the player to play the throw twice. Each player's pieces begin in three stacks of five, on the leftmost point (with respect to the opponent) on the opponent's side of the board. Play proceeds (with respect to the player) from right to left on the opponent's side of the board, and then from left to right on the player's side of the board. A player cannot place two pieces on a single point on any of the first twelve points of the board, except for those pieces in the starting position. A player cannot move a piece onto a point containing two or more pieces belonging to the opponent. When a piece lands on a point occupied by a single piece belonging to the opponent, it is removed from the board and must be entered again, and can only do so using the value of one die, not both, with the starting point considered to be point 1, the next point 2, etc. Opponent's pieces can be removed from the board in this way when reentering the board. If a player cannot reenter pieces on the board they lose their turn. When all of a player's pieces are on their final 6 points, they may start removing pieces from the board. They can do so by rolling a 6 to move from the 6th point, and so on down to 1. Players must use all available moves presented by the dice. The first player to remove all of their pieces wins.
(game "Verquere" (players 2) (equipment {(board (rectangle 2 13) {(track "Track1" {6 25 24 23 22 21 20 18 17 16 15 14 13 0 1 2 3 4 5 7 8 9 10 11 12 -2} P1 true) (track "Track2" {19 0 1 2 3 4 5 7 8 9 10 11 12 25 24 23 22 21 20 18 17 16 15 14 13 -2} P2 true)} Vertex) (dice 6 2) (piece "Disc" Each (forEach Die true (!= (pips ) 0) (if (= (trackSite Move (from ) (pips )) -2) (if (all Sites (sites Occupied Mover) (is In (site ) (sites Mover "FinalQuadrant"))) (move Remove (from ))) (move (from (from )) (to (trackSite Move (from ) (pips )) (and (or (not (is Enemy (who (to )))) (= 1 (size Stack (to )))) (if (not (is In (to ) (sites Mover "StartingSide"))) true (is Empty (to )))) (apply (is Enemy (who (to ))) (fromTo (from (to )) (to (mapEntry "Bar" Next))))))) (then (if (not (all DiceUsed)) (moveAgain ))))) (regions "FinalQuadrant" P1 (sites {7 8 9 10 11 12})) (regions "FinalQuadrant" P2 (sites {13 14 15 16 17 18})) (regions "StartingSide" P1 (sites {25 24 23 22 21 20 18 17 16 15 14 13})) (regions "StartingSide" P2 (sites {0 1 2 3 4 5 7 8 9 10 11 12})) (map "Bar" {(pair P1 6) (pair P2 19)})}) (rules (start {(place Stack "Disc1" 25 15) (place Stack "Disc2" 0 15)}) (play (do (if (not (is Prev Mover)) (roll )) (forEach Piece true))) (end (if (no Pieces Mover) (result Mover Win)))))

2x12 board, divided in half. Spaces on each side take the form of semi-circular sockets, into which the pieces fit. Fifteen pieces per player. One player places all of their pieces on the sixth point of one of the quadrants of the board, and the other player places all of their pieces on the fifth point of the same quadrant. Three six-sided dice. Players move according to the number on each die by moving one piece the value on one die then another piece the value on the other die, or by moving one piece the value of one die and then the value of the other. Players move the pieces along the same track around the board, which ends on the quadrant on the other side of the board from the starting quadrant. When a piece is moved to a space occupied by a piece belonging to the opponent, the opponent's piece is sent back to the starting point. The first player to bear off all of their pieces from the board wins.
(game "Cab e Quinal" (players 2) (equipment {(board (merge {(rectangle 1 6) (shift 7.0 0.0 (rectangle 1 6)) (shift 0.0 6.0 (rectangle 1 6)) (shift 7.0 6.0 (rectangle 1 6))}) {(track "Track1" {24 0 1 2 3 4 5 6 7 8 9 10 11 23 22 21 20 19 18 17 16 15 14 13 12} P1 true) (track "Track2" {25 0 1 2 3 4 5 6 7 8 9 10 11 23 22 21 20 19 18 17 16 15 14 13 12} P2 true)} Vertex) (dice 6 3) (hand Each) (piece "Disc" Each (forEach Die (!= (pips ) 0) (if (= (trackSite Move (pips )) -1) (move Remove (from )) (if (or (not (is Enemy (who (trackSite Move (pips ))))) (= 1 (size Stack (trackSite Move (pips ))))) (move (from ) (to (trackSite Move (pips )) (apply (is Enemy (who (to ))) (fromTo (from (to )) (to (handSite (who (to ))))))))))))}) (rules (start {(place Stack "Disc1" 5 15) (place Stack "Disc2" 4 15)}) (play (do (if (not (is Prev Mover)) (roll )) (or (forEach Piece true) (forEach Piece (mover ) true) (then (if (or (= (value Player Mover) -1) (not (all DiceUsed))) (moveAgain ) (if (and (all DiceUsed) (= (value Player Mover) 1)) (set Value Mover -1))))))) (end {(if (no Pieces Mover) (result Mover Win)) (if (and (no Moves P1) (no Moves P2)) (result Mover Draw))})))

Four 3x8 rectangles, arranged in a cross. The couting from the bottom of each arm, the spaces marked are the fourth square in the outer rows and the first in the central row. Four pieces per player. Seven cowrie shells, used as dice. The throws are as follows: one mouth up = 10; two mouths up = 2; three mouth up = 3; four mouths up = 4; five mouths up. = 25; six mouths up = 30, seven mouths up = 12, zero mouths up = 7. Pieces begin in the large central space of the board, and then proceed down the central row of their arm, then clockwise around the board, back to the central row, and then to the central space again. Pieces may enter the board on throws of 10, 25, or 30. When a player's piece lands on a space that is occupied by an opponent's piece, the opponent's piece is sent back to start. Pieces are safe from being sent to start when they rest on a marked space. To move off the board, a player must make an exact throw to arrive in the central square. When resting on the final square before the central one, a throw of 10, 25, or 30 is required. The first player to place all of their pieces in the central square wins. 
(game "Pachesi" (players 4) (equipment {(board (add (hole (merge (shift 0.0 (/ (- 19.0 3.0) 2.0) (rectangle 3 19)) (shift (/ (- 19.0 3.0) 2.0) 0.0 (rectangle 19 3))) (poly {{8.0 8.0} {8.0 11.0} {11.0 11.0} {11.0 8.0}})) {{8 28 48 68 69 70 71 51 31 11 10 9}}) {(track "Track1" "96,9,S,W,N,7,W,N,E,51,N,E,S,43,E,S,W,10,S,W1,N7,End" P1 true) (track "Track2" "96,26,W,N,E,51,N,E,S,43,E,S,W,10,S,W,N,7,W,N1,W7,End" P2 true) (track "Track3" "96,52,N,E,S,43,E,S,W,10,S,W,N,7,W,N,E,51,N,E1,S7,End" P3 true) (track "Track4" "96,27,E,S,W,10,S,W,N,7,W,N,E,51,N,E,S,43,E,S1,W7,End" P4 true)}) (dice 2 0 7) (piece "Pawn" Each (if (= (trackSite Move (from ) (mapEntry "Throw" (count Pips))) -2) (move Remove (from ) (level )) (if (and (= (trackSite Move (from ) 1) -2) (is In (mapEntry "Throw" (count Pips)) (sites {10 25 30}))) (move Remove (from ) (level )) (move (from (from ) (level )) (to (trackSite Move (from ) (mapEntry "Throw" (count Pips))) (not (and (is In (to ) (sites "SafeSites")) (is Enemy (who (to ))))) (apply (if (is Enemy (who (to ))) (forEach Level (to ) FromTop (fromTo (from (to ) (level )) (to (centrePoint ))))))))))) (hand Each) (regions "SafeSites" (sites {55 63 65 34 15 47 94 84 86 19 38 3})) (map "Throw" {(pair 0 7) (pair 1 10) (pair 2 2) (pair 3 3) (pair 4 4) (pair 5 25) (pair 6 30) (pair 7 12)})}) (rules (start {(place Stack "Pawn1" (handSite P1) 4) (place Stack "Pawn2" (handSite P2) 4) (place Stack "Pawn3" (handSite P3) 4) (place Stack "Pawn4" (handSite P4) 4)}) (play (do (roll ) (or (if (and (is Occupied (handSite Mover)) (is In (mapEntry "Throw" (count Pips)) (sites {10 25 30}))) (move (from (handSite Mover)) (to (centrePoint )))) (forEach Piece)))) (end (if (no Pieces Mover) (result Mover Win)))))

The rules are the same as for Halma. Pieces move one space orthogonally or diagonally. They may jump over a piece of any color. Multiple jumps in one turn are possible. Jumps do not capture. The player who first places all of their pieces in the opponent's starting position wins.
(game "Grasshopper" (players 2) (equipment {(board (square 8)) (piece "Counter" Each) (regions "Home" P1 (expand (coord "A1") 3 Orthogonal)) (regions "Home" P2 (expand (coord "H8") 3 Orthogonal)) (map {(pair P1 P2) (pair P2 P1)})}) (rules (start {(place "Counter1" (sites P1)) (place "Counter2" (sites P2))}) {(phase "Movement" (play (forEach Piece (or (move Hop (from (from )) (between (is Occupied (between ))) (to (and (and (is Empty (to )) (not (is Visited (to )))) (or (not (is In (from ) (sites (player (mapEntry (mover )))))) (is In (to ) (sites (player (mapEntry (mover )))))))) (then (if (can Move (move Hop (from (last To)) (between (is Occupied (between ))) (to (and (and (is Empty (to )) (not (is Visited (to )))) (or (not (is In (last To) (sites (player (mapEntry (mover )))))) (is In (to ) (sites (player (mapEntry (mover )))))))))) (moveAgain )))) (move Step (to (and (is Empty (to )) (or (not (is In (from ) (sites Next))) (is In (to ) (sites Next))))))))) (nextPhase (is Mover (next )) "MultiJump")) (phase "MultiJump" (play (or (move Hop (from (last To)) (between (is Occupied (between ))) (to (and (and (is Empty (to )) (not (is Visited (to )))) (or (not (is In (last To) (sites (player (mapEntry (mover )))))) (is In (to ) (sites (player (mapEntry (mover )))))))) (then (if (can Move (move Hop (from (last To)) (between (is Occupied (between ))) (to (and (and (is Empty (to )) (not (is Visited (to )))) (or (not (is In (last To) (sites (player (mapEntry (mover )))))) (is In (to ) (sites (player (mapEntry (mover )))))))))) (moveAgain )))) (move Pass))) (nextPhase (not (is Mover (next ))) "Movement"))} (end (if (= (sites Occupied Mover) (sites (player (mapEntry (mover ))))) (result Mover Win)))))

On each turn, each player must move two friendly stones to adjacent (diagonal or orthogonal) empty cells, both in the same direction. Stones cannot move into the restricted points on the game board.
            
        The player that first moves 5 stones to the last row wins the game.
(game "Tandems" (players 2) (equipment {(board (square 5)) (piece "Pawn" Each (move Step (to (and {(is Empty (to )) (not (is In (to ) (sites "RedDots"))) (can Move (do (set Var (to )) (forEach Site (difference (sites Occupied Mover) (from )) (step (from (site )) (directions Cell (from ) (var )) (to (and (is Empty (to )) (not (is In (to ) (sites "RedDots")))))))))})) (then (moveAgain )))) (regions "RedDots" (sites {"B2" "B4" "D2" "D4"}))}) (rules (start {(place "Pawn1" (sites Bottom)) (place "Pawn2" (sites Top))}) (play (if (is Prev Mover) (forEach Site (difference (sites Occupied Mover) (last To)) (move Step (from (site )) (directions Cell (last From) (last To)) (to (and (is Empty (to )) (not (is In (to ) (sites "RedDots"))))))) (forEach Piece))) (end {(if (and (is Mover P1) (all Sites (sites Occupied P1) (is In (site ) (sites Top)))) (result P1 Win)) (if (and (is Mover P2) (all Sites (sites Occupied P2) (is In (site ) (sites Bottom)))) (result P2 Win))})))

The game is played on a board with ten round pits arranged in a circle. Each player owns the semicircle closest to him. The game requires ten seeds and one standard six-faced die. At the start of the game, each pit contains one seed.
            
            During their turn, a player rolls a die. He then chooses one of his nonempty pits to sow. They take one seed from the sown pit, and move it counterclockwise according to the die value rolled. Then, they must roll to move each remaining seed from the sown pit. The turn only ends once the sown pit is empty. So, for example, if a player chooses to sow a pit with 4 seeds after his initial roll, 3 additional rolls will be needed.
            
        A player wins when all ten seeds are on their part of the board at the end of their turn.
(game "Lelac" (players 2) (equipment {(board (concentric {0 10}) (track "Track" {0 1 2 3 4 5 6 7 8 9} true) Vertex) (piece "Square" Shared) (dice 6 1) (regions P1 (expand (sites Bottom) 2)) (regions P2 (expand (sites Top) 2))}) (rules (start (set Count 1 (sites Board))) (play (do (roll ) (move (from (if (is Prev Mover) (sites {(last From)}) (forEach (sites Mover) (is Occupied (site ))))) (to (trackSite Move (from ) (count Pips))) (then (if (is Occupied (last From)) (moveAgain )))))) (end (forEach Player (all Sites (sites Player) (and (is Next Player) (is Empty (site )))) (result Player Loss)))))

6x6 board. Two or four players. Three pieces per player, which begin in opposite corners of the board. Players alternate turns moving one piece to an empty adjacent space, orthogonally or diagonally. The first player to place their pieces in the squares in the opposite corner where the opponent's pieces started wins. 
(game "Bajr" (players 2) (equipment {(board (square 6)) (piece "Counter" Each (move Step (to (is Empty (to ))))) (regions "Home" P1 (expand (intersection (sites Bottom) (sites Left)) 1 Orthogonal)) (regions "Home" P2 (expand (intersection (sites Top) (sites Right)) 1 Orthogonal)) (map {(pair P1 P2) (pair P2 P1)})}) (rules (start {(place "Counter1" (sites P1)) (place "Counter2" (sites P2))}) (play (forEach Piece)) (end (if (= (sites Occupied Mover) (sites (player (mapEntry (mover ))))) (result Mover Win)))))

Played on a 4x4 grid. Each player has seven pieces, placed on the intersections of the lines, five on the back row and one on each outer intersection of the second line. Pieces are moved diagonally across the squares. The object is to place one's pieces in the opponent's starting position. The first player to do so wins.
(game "O-Pat-Kono" (players 2) (equipment {(board (rectangle 5 5) Vertex) (piece "Marker" Each (move Step Diagonal (to (is Empty (to ))))) (regions "Home" P1 (union (sites Bottom) (sites {"A2" "E2"}))) (regions "Home" P2 (union (sites Top) (sites {"A4" "E4"})))}) (rules (start {(place "Marker1" (sites P1)) (place "Marker2" (sites P2))}) (play (forEach Piece)) (end (if (= (sites Occupied Mover) (sites Next)) (result Mover Win)))))

4x12 board. Twelve pieces per player. Pieces begin in the outer rows of the board. Four sticks serve as dice, painted on one side and blank on the other. The throws are as follows: one blank side up = 2; two blank sides up = 0; three blank sides up = 0; four blank sides up = 8; four painted sides up = 12. Throws of 2, 8, and 12 give the player another throw. Players must use each throw to move a piece. They may only subdivide a throw in half to move two pieces, otherwise they must use one full throw to move a piece. The first move for each piece must be a throw of 2. This can be divided into two throws of 1 to move two pieces. Play moves from left to right in the player's home row, from right to left in the second row, left to right in the third row, and right to left in the opponent's home row. When a piece enters the opponent's home row, it can no longer move. When a player's piece lands on a space occupied by an opponent's piece, the opponent's piece is captured. A player may not land on the same space as another of the player's pieces. The player which fills up the most of the opponent's home row wins.
(game "Tablan" (players 2) (equipment {(board (rectangle 4 12) {(track "Track1" "0,E,N1,W,N1,E,N1,W" P1 true) (track "Track2" "47,W,S1,E,S1,W,S1,E" P2 true)} Vertex) (piece "Stick" Each (if (and (not (is In (from ) (sites Next "Home"))) (!= 0 (mapEntry "Throw" (count Pips)))) (or (if (not (= 1 (var ))) (move (from (from ) (if (= (state (from )) 1) true (= 2 (mapEntry "Throw" (count Pips))))) (to (trackSite Move (mapEntry "Throw" (count Pips))) (not (is Friend (who (to )))) (apply (if (is Enemy (who (to ))) (remove (to ))))) (then (if (not (= (state (last To)) 1)) (set State (last To) 1))))) (move (from (from ) (if (= (state (from )) 1) true (= 2 (mapEntry "Throw" (count Pips))))) (to (trackSite Move (/ (mapEntry "Throw" (count Pips)) 2)) (not (is Friend (who (to )))) (apply (if (is Enemy (who (to ))) (remove (to ))))) (then (and (if (not (= (state (last To)) 1)) (set State (last To) 1)) (if (not (= 1 (var ))) (and (set Var 1) (moveAgain )) (set Var 0)))))))) (regions "Home" P1 (sites Bottom)) (regions "Home" P2 (sites Top)) (map "Throw" {(pair 0 8) (pair 1 0) (pair 2 0) (pair 3 2) (pair 4 12)}) (dice 2 0 4)}) (rules (start {(place "Stick1" (sites Bottom)) (place "Stick2" (sites Top))}) (play (do (if (not (= 1 (var ))) (roll )) (if (can Move (forEach Piece)) (forEach Piece) (move Pass (then (set Var 0)))) (then (if (is In (mapEntry "Throw" (count Pips)) (sites {2 8 12})) (moveAgain ))))) (end (if (and (= 0 (count Sites (forEach (sites Occupied P1) (not (is In (site ) (sites P2 "Home")))))) (= 0 (count Sites (forEach (sites Occupied P2) (not (is In (site ) (sites P1 "Home"))))))) (byScore {(score P1 (count Sites (forEach (sites P2 "Home") (= (who (site )) P1)))) (score P2 (count Sites (forEach (sites P1 "Home") (= (who (site )) P2))))})))))

The game is played on a 10x10 board. Four of the squares are marked and are considered to contain a watering hole.
            Each player has two elephants, two lions and two mice.
            
            Pieces do not take other pieces. Their movement is as follows: mice move like rooks, lions move like bishops, and elephants move like queens.
            
            Like their chess counterparts, the pieces cannot jump over other pieces.
            
            A mouse is afraid of a lion of the opponent; a lion is afraid of an elephant of the opponent, and an elephant is afraid of a mouse of the opponent.
            
            An animal may not move to a square that is adjacent (horizontally, vertically or diagonally) to an animal it is afraid of. In addition, if an animal is adjacent to an animal that it is afraid of, then it must be moved by its owner, i.e., the owner may not move another animal.
            
            In the special case that more than one animal is adjacent to an animal it is afraid of, the owner may choose which animal to move.
            
        One wins the game by occupying three of the watering holes with own pieces.
(game "Barca" (players 2) (equipment {(board (square 10)) (piece "Mouse" Each (move Slide Orthogonal (to (apply (all Sites (sites Around (to )) (!= (what (site )) (id "Lion" Next))))))) (piece "Elephant" Each (move Slide All (to (apply (all Sites (sites Around (to )) (!= (what (site )) (id "Mouse" Next))))))) (piece "Lion" Each (move Slide Diagonal (to (apply (all Sites (sites Around (to )) (!= (what (site )) (id "Elephant" Next))))))) (regions "Water" (sites {"D4" "D7" "G4" "G7"}))}) (rules (start {(place "Elephant1" (sites {"E1" "F1"})) (place "Lion1" (sites {"D2" "G2"})) (place "Mouse1" (sites {"E2" "F2"})) (place "Elephant2" (sites {"E10" "F10"})) (place "Lion2" (sites {"D9" "G9"})) (place "Mouse2" (sites {"E9" "F9"}))}) (play (priority {(and {(forEach Piece "Mouse" (if (is In (from ) (sites Around (sites Occupied Next "Lion"))) (move Slide Orthogonal (to (apply (all Sites (sites Around (to )) (!= (what (site )) (id "Lion" Next)))))))) (forEach Piece "Elephant" (if (is In (from ) (sites Around (sites Occupied Next "Mouse"))) (move Slide All (to (apply (all Sites (sites Around (to )) (!= (what (site )) (id "Mouse" Next)))))))) (forEach Piece "Lion" (if (is In (from ) (sites Around (sites Occupied Next "Elephant"))) (move Slide Diagonal (to (apply (all Sites (sites Around (to )) (!= (what (site )) (id "Elephant" Next))))))))}) (forEach Piece)})) (end (if (= 3 (count Sites (intersection (sites Occupied Mover) (sites "Water")))) (result Mover Win)))))

3x3 board. Each player plays with three Horse-shaped pieces, which begin on the row of squares closest to the player. Pieces move one space forward and one space diagonally, jumping over any intervening pieces. The first player to place their pieces in the squares where the opponent started wins.
(game "Aralzaa" (players 2) (equipment {(board (square 3)) (piece "Knight" Each (move Leap {{F F R F} {F F L F}} (to (is Empty (to ))))) (regions P1 (sites Bottom)) (regions P2 (sites Top))}) (rules (start {(place "Knight1" (sites P1)) (place "Knight2" (sites P2))}) (play (forEach Piece)) (end (if (= (sites Occupied Mover) (sites Next)) (result Mover Win)))))

Played on a 16x16 checkered board. Can be played with two or four players. It is played with nineteen pieces for a two-player game, thirteen for a four-player game. The pieces begin play in opposing corners of the board, called the \"camp.\" Pieces can move in any direction to an adjacent square. Players can also jump any adjacent piece, including the player's own. Jumping does not capture. Multiple jumps in one turn by the same piece are allowed. The goal is to move all of one's pieces into the opposing player's camp. Once a piece has moved into the camp, it cannot leave.
(game "Halma" (players 2) (equipment {(board (square 16)) (piece "Counter" Each) (regions "Home" P1 (difference (expand (intersection (sites Bottom) (sites Right)) (+ 1 (/ 16 4)) Orthogonal) (sites {(ahead (coord 0 (- 16 1)) (+ 1 (/ 16 4)) N) (ahead (coord 0 (- 16 1)) (+ 1 (/ 16 4)) W)}))) (regions "Home" P2 (difference (expand (intersection (sites Top) (sites Left)) (+ 1 (/ 16 4)) Orthogonal) (sites {(ahead (coord (- 16 1) 0) (+ 1 (/ 16 4)) E) (ahead (coord (- 16 1) 0) (+ 1 (/ 16 4)) S)}))) (map {(pair P1 P2) (pair P2 P1)})}) (rules (start {(place "Counter1" (sites P1)) (place "Counter2" (sites P2))}) {(phase "Movement" (play (forEach Piece (or (move Hop (from (from )) (between (is Occupied (between ))) (to (and (and (is Empty (to )) (not (is Visited (to )))) (or (not (is In (from ) (sites (player (mapEntry (mover )))))) (is In (to ) (sites (player (mapEntry (mover )))))))) (then (if (can Move (move Hop (from (last To)) (between (is Occupied (between ))) (to (and (and (is Empty (to )) (not (is Visited (to )))) (or (not (is In (last To) (sites (player (mapEntry (mover )))))) (is In (to ) (sites (player (mapEntry (mover )))))))))) (moveAgain )))) (move Step (to (and (is Empty (to )) (or (not (is In (from ) (sites (player (mapEntry (mover )))))) (is In (to ) (sites (player (mapEntry (mover )))))))))))) (nextPhase (is Mover (next )) "MultiJump")) (phase "MultiJump" (play (or (move Hop (from (last To)) (between (is Occupied (between ))) (to (and (and (is Empty (to )) (not (is Visited (to )))) (or (not (is In (last To) (sites (player (mapEntry (mover )))))) (is In (to ) (sites (player (mapEntry (mover )))))))) (then (if (can Move (move Hop (from (last To)) (between (is Occupied (between ))) (to (and (and (is Empty (to )) (not (is Visited (to )))) (or (not (is In (last To) (sites (player (mapEntry (mover )))))) (is In (to ) (sites (player (mapEntry (mover )))))))))) (moveAgain )))) (move Pass))) (nextPhase (not (is Mover (next ))) "Movement"))} (end (if (= (sites Occupied Mover) (sites (player (mapEntry (mover ))))) (result Mover Win)))))

DROP - Each stone is dropped on an empty cell, next to and below a stone of the same color
            
            MOVE - First player drops one stone at the first turn, then each player drops up to two stones (he may pass).
            
        GOAL - Wins the player with more stones on the bottom row.
(game "Cascades" (players 2) (equipment {(board (remove (hex Triangle 15) {92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119} {223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285})) (piece "Ball" Each) (hand Each)}) (rules (start {(place "Ball1" (forEach (sites Top) (is Even (site )))) (place "Ball2" (forEach (sites Top) (is Odd (site ))))}) {(phase "FirstMove" (play (move Add (to (union (sites Around (sites Occupied Mover) SSW) (sites Around (sites Occupied Mover) SSE)) (is Empty (to ))))) (nextPhase "Main")) (phase "Main" (play (or (move Add (to (union (sites Around (sites Occupied Mover) SSW) (sites Around (sites Occupied Mover) SSE)) (is Empty (to ))) (then (if (not (is Prev Mover)) (moveAgain )))) (if (is Prev Mover) (move Pass)))))} (end (if (and (no Moves P1) (no Moves P2)) (byScore {(score P1 (count Sites (forEach (sites Bottom) (= (who (site )) P1)))) (score P2 (count Sites (forEach (sites Bottom) (= (who (site )) P2))))})))))

Play begins with an empty board. Black goes first. Players alternate turns. The game proceeds in two phases: Drop phase: Players place one cone per turn on any vacant cell on the special 9×5 centre area of the board. Players may not move a cone until all their cones have been placed. After the drop phase is completed, the conspirateurs scatter to hide in sanctuaries. A sanctuary may hold at most one man. The first to bring all his conspirateurs to sanctuary wins the game. Move phase: If a conspirateur starts the turn already on a sanctuary then it can’t move. Players move one man per turn to a vacant point one step in any direction orthogonally or diagonally, or players may leap over an adjacent man (friend or foe; and whether the jumpee is on a sanctuary or not) and land on the vacant point immediately beyond. Multiple leaps are allowed in a single turn: a man may continue to leap in any direction as long as there are jumps to be made, and may stop jumping at any point (leaps are not compulsory). A jumped man is not captured (there is no capturing in Conspirateurs). GAME END The game ends when a player brings all her conspirateurs to shelter holes (sanctuaries), thus winning the game
(game "Conspirateurs" (players 2) (equipment {(board (square 17)) (piece "Pawn" Each) (hand Each) (regions "Secret Meeting Place" (sites {106 107 108 109 110 111 112 113 114 123 124 125 126 127 128 129 130 131 140 141 142 143 144 145 146 147 148 157 158 159 160 161 162 163 164 165 174 175 176 177 178 179 180 181 182})) (regions "Sanctuaries" (sites {"A1" "B1" "D1" "F1" "H1" "J1" "L1" "N1" "P1" "Q1" "A2" "Q2" "A4" "Q4" "A6" "Q6" "A8" "Q8" "A9" "Q9" "A10" "Q10" "A12" "Q12" "A14" "Q14" "A16" "Q16" "A17" "B17" "D17" "F17" "H17" "I17" "J17" "L17" "L17" "N17" "P17" "Q17"}))}) (rules (start {(place "Pawn1" (handSite P1) 21) (place "Pawn2" (handSite P2) 21)}) {(phase "Placement" (play (move (from (handSite Mover)) (to (forEach (sites "Secret Meeting Place") (is Empty (site )))))) (nextPhase (and (all Sites (sites Hand P1) (= 0 (count Cell (site )))) (all Sites (sites Hand P2) (= 0 (count Cell (site ))))) "Movement")) (phase "Movement" (play (if (is Prev Mover) (or (move Hop (from (last To)) (between (is Occupied (between ))) (to (and (is Empty (to )) (not (is Visited (to ))))) (then (if (and (not (is In (last To) (sites "Sanctuaries"))) (can Move (move Hop (from (last To)) (between (is Occupied (between ))) (to (and (is Empty (to )) (not (is Visited (to )))))))) (moveAgain )))) (move Pass)) (forEach Piece (if (not (is In (from ) (sites "Sanctuaries"))) (or (move Hop (from (from )) (between (is Occupied (between ))) (to (and (is Empty (to )) (not (is Visited (to ))))) (then (if (and (not (is In (last To) (sites "Sanctuaries"))) (can Move (move Hop (from (last To)) (between (is Occupied (between ))) (to (and (is Empty (to )) (not (is Visited (to )))))))) (moveAgain )))) (move Step (to (is Empty (to ))))))))) (end (if (all Sites (sites Occupied Mover) (is In (site ) (sites "Sanctuaries"))) (result Mover Win))))}))

5x5 intersecting lines. Two triangles on opposite sides of the square, with the apex intersecting with the midpoint of opposite sides. A line is drawn from the apex , bisecting the base, and another line bisecting this one and the opposite two sides of the triangle. Lines are drawn through the apex, extending the sides of the triangle to the midpoint of the adjacent side. Sixteen pieces per player, which begin on the points of the board closes to the player. Players alternate turns moving a piece to an empty adjacent spot orthogonally or diagonally, even when there are not lines connecting the adjacent points. A player's piece may hop over an opponent's piece to an empty space immediately on the opposite side of it to capture it. The player who occupies all of the points in the opponent's triangle wins. 
(game "Shanzak Kammar" (players 2) (equipment {(board (add (merge {(square 5 Alternating) (shift 0.0 4.0 (rotate 180.0 (wedge 3))) (shift 0.0 -2.0 (wedge 3))}) {{5 1} {1 7} {7 3} {3 9} {13 9} {7 13} {11 5} {15 11} {11 17} {7 11} {17 13} {13 19} {23 19} {23 17} {17 21} {15 21}}) Vertex) (piece "Marker" Each (or (move Step (to (is Empty (to )))) (move Hop (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to )))))) (regions "Goal" P1 (expand (sites Top))) (regions "Goal" P2 (expand (sites Bottom)))}) (rules (start {(place "Marker1" (expand (sites Bottom) 3)) (place "Marker2" (expand (sites Top) 3))}) (play (forEach Piece)) (end (if (= 6 (count Pieces Mover (sites Mover "Goal"))) (result Mover Win)))))

1. Agon is played on a hexagonal board made of 91 hexagonal playing spaces. Each concentric layer for hexagons is so coloured that it is easy to see a playing space's distance from the centre of the board.
            
            2. The players each start with a queen and six guards. They are placed in a set configuration at the edge of the board, as shown again in the diagram.
            
            3. In his turn a player moves a piece one space in any direction, except for any direction that leads away from the centre.
            
            5. A piece may not land on or jump over another.
            
            6. A piece may not move adjacent to two enemy pieces such that it is directly between them.
            
            7. Only a queen may move to the central space.
            
            8. If a piece becomes sandwiched between two enemies, it is captured.
            
            9. If the queen is captured, then its owner must, on his next turn, remove the queen from her predicament and place her on any other space on the board.
            
            10. Otherwise if one of his guards is captured, the player must remove the guard from his predicament, but the guard must be placed on a space at the edge of the board.
            
            11. Only one captured piece may be so removed each turn; so a player may arrest his opponent's strategy for a number of turns if he makes multiple captures at once or in quick succession.
            
            12. A player has won the game when his queen rests on the central space, and her six guards are on the six spaces adjacent to her.
            
        13. A player has lost the game if his six guards are adjacent to the central space but his queen is not between them, as this configuration prevents either player from ever winning the game.
(game "Agon" (players 2) (equipment {(board (hex 6)) (piece "Pawn" Each (move Step (to (and {(is Empty (to )) (>= (count Steps Orthogonal (from ) (centrePoint )) (count Steps Orthogonal (to ) (centrePoint ))) (!= (to ) (centrePoint ))})) (then (custodial (from (last To)) Orthogonal (between (max 1) (is Enemy (who (between ))) (apply (set State (between ) 1))) (to (is Friend (who (to )))))))) (piece "Queen" Each (move Step (to (and (is Empty (to )) (>= (count Steps Orthogonal (from ) (centrePoint )) (count Steps Orthogonal (to ) (centrePoint ))))) (then (custodial (from (last To)) Orthogonal (between (max 1) (is Enemy (who (between ))) (apply (set State (between ) 1))) (to (is Friend (who (to ))))))))}) (rules (start {(place "Pawn1" (sites {89 60 20 3 6 51})) (place "Pawn2" (sites {87 84 39 1 30 70})) (place "Queen1" 85) (place "Queen2" 5)}) (play (priority {(forEach Site (forEach (sites Occupied Mover "Queen") (!= 0 (state (site )))) (move (from (site )) (to (sites Board) (is Empty (to ))) (then (set State (last To) 0)))) (forEach Site (forEach (sites Occupied Mover "Pawn") (!= 0 (state (site )))) (move (from (site )) (to (sites Outer) (is Empty (to ))) (then (set State (last To) 0)))) (do (forEach Piece) (not (can Move (intervene (from (last To)) Orthogonal (to (is Enemy (who (to ))) (apply (remove (to ))))))))})) (end (if (all Sites (difference (sites Around (sites Centre)) (sites Centre)) (= (what (site )) (id "Pawn" Mover))) {(if (= (what (centrePoint )) (id "Queen" Mover)) (result Mover Win)) (if (not (= (what (centrePoint )) (id "Queen" Mover))) (result Mover Loss))}))))

The game can be played by two, three, four, or six people. It is played on a board that is shaped like a six-pointed star with 121 holes for the pieces. Each point of the star has ten colored spheres and the goal of the game is to move all of one's pieces into the opposite point of the star. Players can move a piece to one adjacent hole, or can jump either their own or opponent's pieces. This does not result in capturing, and jumping is not mandatory. When fewer than six people play, players can play with only one color of pieces, but if two or three people play they can use more than one color, but each player must use an equal number of pieces.
(game "Chinese Checkers" (players 6) (equipment {(board (hex Star 4)) (piece "Marker" Each) (regions "Home" P1 (expand (coord 0 4) (- 4 1))) (regions "Home" P2 (expand (coord 4 (* 4 3)) (- 4 1))) (regions "Home" P3 (expand (coord (* 4 3) (* 4 4)) (- 4 1))) (regions "Home" P4 (expand (coord (* 4 4) (* 4 3)) (- 4 1))) (regions "Home" P5 (expand (coord (* 4 3) 4) (- 4 1))) (regions "Home" P6 (expand (coord 4 0) (- 4 1))) (map {(pair 1 4) (pair 2 5) (pair 3 6) (pair 4 1) (pair 5 2) (pair 6 3)})}) (rules (start {(place "Marker1" (sites P1)) (place "Marker2" (sites P2)) (place "Marker3" (sites P3)) (place "Marker4" (sites P4)) (place "Marker5" (sites P5)) (place "Marker6" (sites P6))}) {(phase "Movement" (play (forEach Piece (or (move Hop (from (from )) (between (is Occupied (between ))) (to (and (and (is Empty (to )) (not (is Visited (to )))) (or (not (is In (from ) (sites (player (mapEntry (mover )))))) (is In (to ) (sites (player (mapEntry (mover )))))))) (then (if (can Move (move Hop (from (last To)) (between (is Occupied (between ))) (to (and (and (is Empty (to )) (not (is Visited (to )))) (or (not (is In (last To) (sites (player (mapEntry (mover )))))) (is In (to ) (sites (player (mapEntry (mover )))))))))) (moveAgain )))) (move Step (to (and (is Empty (to )) (or (not (is In (from ) (sites (player (mapEntry (mover )))))) (is In (to ) (sites (player (mapEntry (mover )))))))))))) (nextPhase (is Mover (next )) "MultiJump")) (phase "MultiJump" (play (or (move Hop (from (last To)) (between (is Occupied (between ))) (to (and (and (is Empty (to )) (not (is Visited (to )))) (or (not (is In (last To) (sites (player (mapEntry (mover )))))) (is In (to ) (sites (player (mapEntry (mover )))))))) (then (if (can Move (move Hop (from (last To)) (between (is Occupied (between ))) (to (and (and (is Empty (to )) (not (is Visited (to )))) (or (not (is In (last To) (sites (player (mapEntry (mover )))))) (is In (to ) (sites (player (mapEntry (mover )))))))))) (moveAgain )))) (move Pass))) (nextPhase (not (is Mover (next ))) "Movement"))} (end (if (= (sites Occupied Mover) (sites (player (mapEntry (mover ))))) (result Mover Win)))))

TURN - On each turn, each player drops a friendly stone on an empty cell. If a diagonal line is full (i.e., there are no empty cells on that diagonal), the player who dropped the last stone achieves so many points as the number of friendly stones on the finished line.
            
            Two lines can be finished on one turn, the player achieves points for both lines (the dropped stone counts twice, once for each diagonal).
            A diagonal line must have at least 2 stones. So, corner cells do not count as diagonals.
            
        GOAL - When all cells are occupied, wins the player with more points.
(game "Diagonals" (players 2) (equipment {(board (square 8) Vertex) (piece "Ball" Each)}) (rules (play (move Add (to (sites Empty)) (then (and (if (not (is In (last To) (sites {"A8" "H1"}))) (if (all Sites (union (sites Direction (last To) NE true) (sites Direction (last To) SW)) (is Occupied (site ))) (addScore Mover (count Sites (forEach (union (sites Direction (last To) NE true) (sites Direction (last To) SW)) (is Friend (who (site )))))))) (if (not (is In (last To) (sites {"A1" "H8"}))) (if (all Sites (union (sites Direction (last To) SE true) (sites Direction (last To) NW)) (is Occupied (site ))) (addScore Mover (count Sites (forEach (union (sites Direction (last To) SE true) (sites Direction (last To) NW)) (is Friend (who (site )))))))))))) (end (if (is Full) (byScore )))))

The board is a double-headed eagle, with two lines of ten holes. One seven-sided die. One side has a special mark, one is blank, and the others are numbered 1-5. The special mark scores 10, the blank side scores -10. Players roll the die, and add up their scores as they go, placing a peg in a hole to mark ten points. The player who reaches 100 points first wins.
(game "Pasa" (players 2) (equipment {(board (rectangle 10 2)) (piece "Disc" Each) (dice 7 0 1) (map {(pair 0 -10) (pair 1 1) (pair 2 2) (pair 3 3) (pair 4 4) (pair 5 5) (pair 6 6) (pair 7 10)})}) (rules (play (do (roll (then (addScore Mover (mapEntry (count Pips))))) (move Pass (then (and (remove (sites Column (- (mover ) 1))) (if (>= (score Mover) 10) (add (piece (id "Disc" Mover)) (to (intersection (sites Column (- (mover ) 1)) (sites Row (- (/ (score Mover) 10) 1))))))))))) (end (if (>= (score Mover) 100) (result Mover Win)))))

The abstract strategy game Quoridor is surprisingly deep for its simple rules. The object of the game is to advance your pawn to the opposite edge of the board. On your turn you may either move your pawn or place a wall. You may hinder your opponent with wall placement, but not completely block them off. Meanwhile, they are trying to do the same to you. The first pawn to reach the opposite side wins.
(game "Quoridor" (players 2) (equipment {(board (square 9)) (piece "Pawn" Each (or (move Step Orthogonal (to (and (is Empty (to )) (all Sites (sites Occupied Shared Edge) (not (is In (site ) (intersection (sites Incident Edge Cell (from )) (sites Incident Edge Cell (to ))))))))) (move Hop Orthogonal (between (is Enemy (who (between )))) (to (and {(is Empty (to )) (all Sites (sites Occupied Shared Edge) (not (is In (site ) (intersection (sites Incident Edge Cell (from )) (sites Incident Edge Cell (between )))))) (all Sites (sites Occupied Shared Edge) (not (is In (site ) (intersection (sites Incident Edge Cell (between )) (sites Incident Edge Cell (to ))))))}))))) (piece "Rectangle" Shared) (hand Each) (regions P1 (sites Top)) (regions P2 (sites Bottom))}) (rules (start {(place "Rectangle" (handSite P1) 10) (place "Rectangle" (handSite P2) 10) (place "Pawn1" (intersection (sites Bottom) (sites Column (column (centrePoint ))))) (place "Pawn2" (intersection (sites Top) (sites Column (column (centrePoint )))))}) (play (or (do (if (is Occupied (handSite Mover)) (move (from (handSite Mover)) (to Edge (difference (sites Empty Edge) (sites Outer Edge))))) (and {(!= 1000000000 (count Steps (step Orthogonal (to (and (is Empty (to )) (all Sites (sites Occupied Shared Edge) (not (is In (site ) (intersection (sites Incident Edge Cell (from )) (sites Incident Edge Cell (to ))))))))) (where "Pawn" P1) (sites P1))) (!= 1000000000 (count Steps (step Orthogonal (to (and (is Empty (to )) (all Sites (sites Occupied Shared Edge) (not (is In (site ) (intersection (sites Incident Edge Cell (from )) (sites Incident Edge Cell (to ))))))))) (where "Pawn" P2) (sites P2)))})) (forEach Piece))) (end (if (and (is LastTo Cell) (is In (last To) (sites Mover))) (result Mover Win)))))

Seven concentric circles. Three points outside the circles. The center contains a circle, the market. There are three balls, placed near the board. Each player plays with one piece, which begins in the outermost point. The first player holds something in their hand, and asks the second player to guess which hand it is in. If the guessing player guesses correctly, they move their piece to the next point, or to the next ring of the spiral toward the market. If the guessing player guesses incorrectly, the player holding the object moves one space forward. The guessing player now takes the object, and asks the next player to guess which hand the object is in, and so on. When a player reaches the market, they take one of the three balls next to the board. The player who fails to collect a ball loses.
(game "Aime" (players 4) (equipment {(board (merge {(concentric {4 4 4 4 4 4 4 4}) (shift -7.0 7.0 (square 1)) (shift -6.0 7.0 (square 1)) (shift -7.0 6.0 (square 1))}) {(track "Track1" {28 24 20 16 12 8 4 0} P1 true) (track "Track2" {29 25 21 17 13 9 5 1} P2 true) (track "Track3" {30 26 22 18 14 10 6 2} P3 true) (track "Track4" {31 27 23 19 15 11 7 3} P4 true)} Vertex) (piece "Marker" Each) (piece "Stick" Shared) (piece "Ball" Each) (piece "Ball" Shared) (hand Each 2)}) (rules (start {(place "Marker1" 28) (place "Marker2" 29) (place "Marker3" 30) (place "Marker4" 31) (place "Ball" (sites {32 33 34}))}) {(phase "Hiding" (play (move Add (piece (id "Stick" Shared)) (to Cell (sites Hand Mover)) (then (set Hidden Cell (last To) Next)))) (nextPhase "Guessing")) (phase "Guessing" (play (move Select (from Cell (sites Hand Prev)) (then (and (if (is Empty (last To)) (and (fromTo (from (where "Marker" Prev)) (to (if (is Prev P1) (trackSite Move (where "Marker" Prev) "Track1" 1) (if (is Prev P2) (trackSite Move (where "Marker" Prev) "Track2" 1) (if (is Prev P3) (trackSite Move (where "Marker" Prev) "Track3" 1) (trackSite Move (where "Marker" Prev) "Track4" 1)))))) (if (not (is In (if (is Prev P1) (trackSite Move (where "Marker" Prev) "Track1" 1) (if (is Prev P2) (trackSite Move (where "Marker" Prev) "Track2" 1) (if (is Prev P3) (trackSite Move (where "Marker" Prev) "Track3" 1) (trackSite Move (where "Marker" Prev) "Track4" 1)))) (sites {0 1 2 3}))) (set NextPlayer (player (prev ))) (if (= (what 32) (id "Ball" Shared)) (and (remove 32) (add (piece (id "Ball" Prev)) (to 32))) (if (= (what 33) (id "Ball" Shared)) (and (remove 33) (add (piece (id "Ball" Prev)) (to 33))) (and (remove 34) (add (piece (id "Ball" Prev)) (to 34))))))) (and {(moveAgain ) (fromTo (from (where "Marker" Mover)) (to (trackSite Move (where "Marker" Mover) 1))) (if (is In (trackSite Move (where "Marker" Mover) 1) (sites {0 1 2 3})) (if (= (what 32) (id "Ball" Shared)) (and (remove 32) (add (piece (id "Ball" Mover)) (to 32))) (if (= (what 33) (id "Ball" Shared)) (and (remove 33) (add (piece (id "Ball" Mover)) (to 33))) (and (remove 34) (add (piece (id "Ball" Mover)) (to 34))))))})) (remove Cell (sites Hand Prev)))))) (nextPhase "Hiding"))} (end (if (!= (- (count Players) (count Active)) (count Sites (difference (sites {0 1 2 3}) (sites Empty)))) {(if (and (is Active P1) (is In (where "Marker" P1) (sites {0 1 2 3}))) (result P1 Win)) (if (and (is Active P2) (is In (where "Marker" P2) (sites {0 1 2 3}))) (result P2 Win)) (if (and (is Active P3) (is In (where "Marker" P3) (sites {0 1 2 3}))) (result P3 Win)) (if (and (is Active P4) (is In (where "Marker" P4) (sites {0 1 2 3}))) (result P4 Win))}))))

Forty stones arranged in a circle, with a larger gap after every tenth stone. These gaps are known as doors. Any number of players, each player begins with one piece, which begins at the east door. Three sticks used as dice, black on one side, white on the other, with one stick notched on the white side. The throws are as follows: two black with one notched white side up = 15; three white sides up = 10; two black and one white, not notched = 3, two white and one black = 2, three black = 5. Throws of 10 and 15 grant the player another throw. Players may move in either direction around the circle. To win, the player must complete a circuit of the board and pass the east door.
(game "Owasokotz" (players 4) (equipment {(board (add (remove (concentric {44}) {43 21 0 22}) {{20 18} {0 1} {19 21} {38 39}}) {(track "TrackCW" {39 35 33 31 29 27 25 23 21 19 38 17 15 13 11 9 7 5 3 1 37 0 2 4 6 8 10 12 14 16 36 18 20 22 24 26 28 30 32 34} true) (track "TrackCCW" {39 34 32 30 28 26 24 22 20 18 36 16 14 12 10 8 6 4 2 0 37 1 3 5 7 9 11 13 15 17 38 19 21 23 25 27 29 31 33 35} true)} Edge) (regions "AllSites" (sites Board)) (piece "Stick" Each (if (= (state (from )) 0) (or (if (!= (trackSite Move "TrackCCW" (if (= (count Pips) 3) 5 (if (= (count Pips) 0) 10 (if (= (count Pips) 1) 2 (if (= (face 44) 1) 15 3))))) -1) (move (from (from ) (level )) (to (trackSite Move "TrackCCW" (if (= (count Pips) 3) 5 (if (= (count Pips) 0) 10 (if (= (count Pips) 1) 2 (if (= (face 44) 1) 15 3))))) (is Empty (trackSite Move "TrackCCW" (if (= (count Pips) 3) 5 (if (= (count Pips) 0) 10 (if (= (count Pips) 1) 2 (if (= (face 44) 1) 15 3)))))))) (then (set State (last To) 2))) (if (!= (trackSite Move "TrackCW" (if (= (count Pips) 3) 5 (if (= (count Pips) 0) 10 (if (= (count Pips) 1) 2 (if (= (face 44) 1) 15 3))))) -1) (move (from (from ) (level )) (to (trackSite Move "TrackCW" (if (= (count Pips) 3) 5 (if (= (count Pips) 0) 10 (if (= (count Pips) 1) 2 (if (= (face 44) 1) 15 3))))) (is Empty (trackSite Move "TrackCW" (if (= (count Pips) 3) 5 (if (= (count Pips) 0) 10 (if (= (count Pips) 1) 2 (if (= (face 44) 1) 15 3)))))))) (then (set State (last To) 1)))) (if (!= (if (= (state (from )) 1) (trackSite Move "TrackCW" (if (= (count Pips) 3) 5 (if (= (count Pips) 0) 10 (if (= (count Pips) 1) 2 (if (= (face 44) 1) 15 3))))) (trackSite Move "TrackCCW" (if (= (count Pips) 3) 5 (if (= (count Pips) 0) 10 (if (= (count Pips) 1) 2 (if (= (face 44) 1) 15 3)))))) -1) (move (from (from ) (level )) (to (if (= (state (from )) 1) (trackSite Move "TrackCW" (if (= (count Pips) 3) 5 (if (= (count Pips) 0) 10 (if (= (count Pips) 1) 2 (if (= (face 44) 1) 15 3))))) (trackSite Move "TrackCCW" (if (= (count Pips) 3) 5 (if (= (count Pips) 0) 10 (if (= (count Pips) 1) 2 (if (= (face 44) 1) 15 3)))))) (is Empty (if (= (state (from )) 1) (trackSite Move "TrackCW" (if (= (count Pips) 3) 5 (if (= (count Pips) 0) 10 (if (= (count Pips) 1) 2 (if (= (face 44) 1) 15 3))))) (trackSite Move "TrackCCW" (if (= (count Pips) 3) 5 (if (= (count Pips) 0) 10 (if (= (count Pips) 1) 2 (if (= (face 44) 1) 15 3)))))))))))) (dice 2 0 3) (hand Each)}) (rules (start (place Stack {"Stick4" "Stick3" "Stick2" "Stick1"} Edge 38)) (play (do (roll ) (forEach Piece))) (end (if (and (not (was Pass)) (if (= 1 (state (where "Stick" Mover))) (is In 38 (sites Track "TrackCW" (trackSite Move (last From) "TrackCW" 1) (last To))) (is In 38 (sites Track "TrackCCW" (trackSite Move (last From) "TrackCCW" 1) (last To))))) (result Mover Win)))))

Each side has a line of pawns. The pawns move as in chess i.e. The pawn moves forwards one square (optionally two squares on its first move) and captures diagonally forwards one square by replacing the opponent’s piece. The rule of En Passant is also allowed. White goes first. The first person to reach the other side is the winner. You also win if it is your opponent’s move and they have no moves left.
        In Ludii, options are also available to add each of the five other Chess piece types. In the variant with the king piece, if you capture the opponent king, you win as well.
(game "The Pawn Game" (players {(player N) (player S)}) (equipment {(board (square 8)) (piece "Pawn" Each (or {(move Step Forward (to (is Empty (to )))) (move Step (directions {FR FL}) (to (is Enemy (who (to ))) (apply (remove (to ))))) (or (if (is In (from ) (sites Start (piece (what (from ))))) (move Slide Forward (between (exact 2) (is Empty (between ))) (to (is Empty (to ))) (then (set Pending (ahead (last To) Backward))))) (move Step (directions {FR FL}) (to (and (is Pending) (= (to ) (value Pending)))) (then (remove (ahead (last To) Backward)))))})) (regions P1 (sites Top)) (regions P2 (sites Bottom))}) (rules (start {(place "Pawn1" (sites Row 1)) (place "Pawn2" (sites Row 6))}) (play (forEach Piece)) (end {(if (is In (last To) (sites Mover)) (result Mover Win)) (if (no Moves Next) (result Mover Win))})))

Pieces move as knights in Chess. The goal is to be the first player to reach the opposite side of the board from the starting position.
(game "Knightthrough" (players {(player N) (player S)}) (equipment {(board (square 8)) (piece "Knight" Each (move Leap {{F F R F} {F F L F}} true (to (not (is Friend (who (to )))) (apply (remove (to )))))) (regions P1 (sites Top)) (regions P2 (sites Bottom))}) (rules (start {(place "Knight1" (expand (sites Bottom))) (place "Knight2" (expand (sites Top)))}) (play (forEach Piece)) (end (if (is In (last To) (sites Mover)) (result Mover Win)))))

Take turns placing stones on a hexhex board of size 4, or a square board of an odd size not larger than 9. The winner is the player who places a stone on the center cell. A placement N steps away from the perimeter must have at least N friendly pieces in sight. On the square board, pieces see in all 8 directions.
(game "Center" (players 2) (equipment {(board (square 9) Vertex) (piece "Marker" Each)}) (rules (play (move Add (to (sites Empty) (<= (count Steps All (to ) (sites Perimeter)) (count Sites (intersection (sites LineOfSight (to ) All) (sites Occupied Mover))))))) (end (if (is Occupied (centrePoint )) (result Next Loss)))))

Forty stones, arranged in a circle, with a larger gap after every tenth stone. The gaps between the stones are the playing spaces. Two to four players. One stick per player. Three sticks, each with one flat marked side and one round side, used as dice. The throws are as follows: one marked side up = 2; two marked sides up = 3; all marked sides up = 5; no marked sides up =10. Throws of 10 grant the player another throw. Each player starts at one of the larger gaps, and any players facing each other play on a team. Teams play in opposite directions: The player starting from the left or right space moves in a clockwise direction; the player(s) sitting at the top or bottom play anticlockwise). When a player's piece moves past or onto the space occupied by a piece belonging to the opposing team, the opposing team's piece is sent back to the starting space. The first team to circle the board three times wins. 
(game "Set Dilth'" (players 4) (equipment {(board (add (remove (concentric {44}) {43 21 0 22}) {{20 18} {0 1} {19 21} {38 39}}) {(track "Track1" {39 34 32 30 28 26 24 22 20 18 36 16 14 12 10 8 6 4 2 0 37 1 3 5 7 9 11 13 15 17 38 19 21 23 25 27 29 31 33 35} true P1) (track "Track2" {39 35 33 31 29 27 25 23 21 19 38 17 15 13 11 9 7 5 3 1 37 0 2 4 6 8 10 12 14 16 36 18 20 22 24 26 28 30 32 34} true P2) (track "Track3" {39 34 32 30 28 26 24 22 20 18 36 16 14 12 10 8 6 4 2 0 37 1 3 5 7 9 11 13 15 17 38 19 21 23 25 27 29 31 33 35} true P3) (track "Track4" {39 35 33 31 29 27 25 23 21 19 38 17 15 13 11 9 7 5 3 1 37 0 2 4 6 8 10 12 14 16 36 18 20 22 24 26 28 30 32 34} true P4)} Edge) (regions "AllSites" (sites Board)) (map "Throw" {(pair 0 10) (pair 1 2) (pair 2 3) (pair 3 5)}) (map "Start" {(pair 1 37) (pair 2 38) (pair 3 39) (pair 4 36)}) (piece "Stick" Each (move (from (from ) (level )) (to (trackSite Move (mapEntry "Throw" (count Pips))) true (apply (is Enemy (who (to ))) (fromTo (from (to )) (to (mapEntry "Start" (who (to ))))))) (then (forEach Site (sites Track Mover "Track" (trackSite Move (last From) "Track" 1) (last To)) (if (is Enemy (who (site ))) (forEach Level (site ) (move (from (site ) (level )) (to (mapEntry "Start" (who (site ) (level ))))))))))) (dice 2 0 3)}) (rules (start {(set Team 1 {P1 P3}) (set Team 2 {P2 P4}) (place Stack "Stick1" 37) (place Stack "Stick2" 38) (place Stack "Stick3" 39) (place Stack "Stick4" 36)}) (play (do (roll ) (forEach Piece) (then (do (if (is In (mapEntry "Start" Mover) (sites Track Mover "Track" (trackSite Move (last From) "Track" 1) (last To))) (addScore Mover 1) (then (if (= (score Mover) 3) (remove (last To))))) (if (and (!= 3 (score Mover)) (= 10 (mapEntry "Throw" (count Pips)))) (moveAgain )))))) (end (if (>= (score Mover) 4) (result Mover Win)))))

5x5 board, with the central square on each side and the central square of the board marked with an X. Two to four players, each with four pieces, which start on one of the marked squares on the edge of the board. Four cowrie shells used as dice. The throws are as  follows, with the value of the throws equaling the number of mouths which land up, all mouths down = 8, and grants the player another throw. Pieces moves in a spiral track around the board in an anti-clockwise direction until they reach the space before the starting point, at which point they proceed around the inner circles in a clockwise direction, and then to the central space. When a player lands on a space occupied by an opponent's piece, the opponent's piece is sent back to their starting position. When a player reaches the central square by an exact throw, it is removed from the board. The first player to remove all four of their pieces from the board wins.
(game "Main Pacheh" (players 4) (equipment {(board (square 5) {(track "Track1" "2,E,N,W,S,E1,N3,E2,S2,W1,12" P1 true) (track "Track2" "22,W,S,E,N,W1,S3,W2,N2,E1,12" P2 true) (track "Track3" "14,N,W,S,E,N1,W3,N2,E2,S1,12" P3 true) (track "Track4" "10,S,E,N,W,S1,E3,S2,W2,N1,12" P4 true)}) (piece "Marker" Each (if (!= (trackSite Move (mapEntry "ThrowDiceValue" (count Pips))) -1) (if (or (is Empty (trackSite Move (mapEntry "ThrowDiceValue" (count Pips)))) (is Enemy (who (trackSite Move (mapEntry "ThrowDiceValue" (count Pips)))))) (move (from (from ) (level )) (to (trackSite Move (mapEntry "ThrowDiceValue" (count Pips))) (apply (is Enemy (who (to ))) (fromTo (from (to )) (to (mapEntry "StartingPoint" (who (to ))))))))) (then (if (= 12 (last To)) (remove (last To)))))) (map "ThrowDiceValue" {(pair 0 8) (pair 1 1) (pair 2 2) (pair 3 3) (pair 4 4)}) (map "StartingPoint" {(pair 1 2) (pair 2 22) (pair 3 14) (pair 4 10)}) (dice 2 0 4)}) (rules (start {(place Stack "Marker1" 2 4) (place Stack "Marker2" 22 4) (place Stack "Marker3" 14 4) (place Stack "Marker4" 10 4)}) (play (do (roll ) (if (can Move (forEach Piece)) (forEach Piece (then (if (= (mapEntry "ThrowDiceValue" (count Pips)) 8) (moveAgain )))) (move Pass (then (if (= (mapEntry "ThrowDiceValue" (count Pips)) 8) (moveAgain ))))))) (end (if (no Pieces Mover) (result Mover Win)))))

When a capture is made, the capturing piece is revealed to the opponent. If an orthogonal move is attempted to a spot with a hidden piece of the opponent, the move is not completed and the enemy piece is revealed. The goal is to reach the opposite side of the board like in Breakthrough.
(game "Sneakthrough" (players 2) (equipment {(board (square 8)) (piece "Pawn" P1 N (or {(move Step Forward (to (is Empty (to )))) (move Step Forward (to (and (is Enemy (who (to ))) (is Hidden (to ) Mover))) (then (fromTo (from (last To)) (to (last From)) (then (and {(add (piece (next )) (to (last To))) (set Hidden (last To) false Next) (set Hidden (last To) false Mover)}))))) (move Step (directions {FR FL}) (to (is Empty (to )) (apply (remove (to ))))) (move Step (directions {FR FL}) (to (is Enemy (who (to ))) (apply (remove (to )))) (then (set Hidden (last To) Next)))})) (piece "Pawn" P2 S (or {(move Step Forward (to (is Empty (to )))) (move Step Forward (to (and (is Enemy (who (to ))) (is Hidden (to ) Mover))) (then (fromTo (from (last To)) (to (last From)) (then (and {(add (piece (next )) (to (last To))) (set Hidden (last To) false Next) (set Hidden (last To) false Mover)}))))) (move Step (directions {FR FL}) (to (is Empty (to )) (apply (remove (to ))))) (move Step (directions {FR FL}) (to (is Enemy (who (to ))) (apply (remove (to )))) (then (set Hidden (last To) Next)))})) (regions P2 (sites Top)) (regions P1 (sites Bottom))}) (rules (start {(place "Pawn1" (expand (sites Bottom))) (place "Pawn2" (expand (sites Top))) (set Hidden (difference (sites Board) (sites Occupied P1)) P1) (set Hidden (difference (sites Board) (sites Occupied P2)) P2)}) (play (forEach Piece)) (end (if (not (= (count Sites (sites Occupied Mover)) (count Sites (difference (sites Occupied Mover) (sites Next))))) (result Mover Win)))))

Forty stones, arranged in a circle, with larger gaps (doors) between the stones after every ten. The gaps between the stones are the playing spaces. Any number of players. One stick per player. Three sticks used as dice, one marked with two notches, one marked with three notches, the other marked with ten notches. The value of the throw is the number of notches which land face up. Players move their sticks around the board, beginning at one of the doors. Players may choose in which direction to proceed around the board. When a player lands on the same space as an opponent, the opponent's piece is sent back to the starting door. The first player to complete the circuit of the board wins.
(game "Kawasukuts" (players 2) (equipment {(board (add (remove (concentric {44}) {43 21 0 22}) {{20 18} {0 1} {19 21} {38 39}}) {(track "TrackCW" {39 35 33 31 29 27 25 23 21 19 38 17 15 13 11 9 7 5 3 1 37 0 2 4 6 8 10 12 14 16 36 18 20 22 24 26 28 30 32 34} true) (track "TrackCCW" {39 34 32 30 28 26 24 22 20 18 36 16 14 12 10 8 6 4 2 0 37 1 3 5 7 9 11 13 15 17 38 19 21 23 25 27 29 31 33 35} true)} Edge) (regions "Gates" (sites {36 37 38 39})) (piece "Marker" Each (if (= (value Player Mover) -1) (or (if (!= (trackSite Move "TrackCW" (count Pips)) -1) (if (or (is In (trackSite Move "TrackCW" (count Pips)) (sites Empty)) (is Enemy (who (trackSite Move "TrackCW" (count Pips))))) (move (from (from ) (level )) (to (trackSite Move "TrackCW" (count Pips)) (apply (is Enemy (who (to ))) (fromTo (from (to )) (to (value Piece (to )))))))) (then (if (= (value Player Mover) -1) (set Value Mover 1)))) (if (!= (trackSite Move "TrackCCW" (count Pips)) -1) (if (or (is In (trackSite Move "TrackCCW" (count Pips)) (sites Empty)) (is Enemy (who (trackSite Move "TrackCCW" (count Pips))))) (move (from (from ) (level )) (to (trackSite Move "TrackCCW" (count Pips)) (apply (is Enemy (who (to ))) (fromTo (from (to )) (to (value Piece (to )))))))) (then (if (= (value Player Mover) -1) (set Value Mover 2))))) (if (!= (if (= (value Player Mover) 2) (trackSite Move "TrackCCW" (count Pips)) (trackSite Move "TrackCW" (count Pips))) -1) (if (or (is In (if (= (value Player Mover) 2) (trackSite Move "TrackCCW" (count Pips)) (trackSite Move "TrackCW" (count Pips))) (sites Empty)) (is Enemy (who (if (= (value Player Mover) 2) (trackSite Move "TrackCCW" (count Pips)) (trackSite Move "TrackCW" (count Pips)))))) (move (from (from ) (level )) (to (if (= (value Player Mover) 2) (trackSite Move "TrackCCW" (count Pips)) (trackSite Move "TrackCW" (count Pips))) (apply (is Enemy (who (to ))) (fromTo (from (to )) (to (value Piece (to ))))))))))) (dice 2 {{0 2} {0 3} {0 10}} 3) (hand Each)}) (rules (start (place "Marker" "Hand")) {(phase "Placement" (play (move (from (handSite Mover)) (to (sites "Gates")) (then (set Value (last To) (last To))))) (nextPhase Mover "Playing")) (phase "Playing" (play (do (roll ) (forEach Piece))) (end (if (and (!= 0 (count Pips)) (if (= 1 (value Player Mover)) (is In (value Piece (where "Marker" Mover)) (sites Track "TrackCW" (trackSite Move (last From) "TrackCW" 1) (last To))) (is In (value Piece (where "Marker" Mover)) (sites Track "TrackCCW" (trackSite Move (last From) "TrackCCW" 1) (last To))))) (result Mover Win))))}))

Nine concentric circles. Any number of players. Each player plays as one piece. Two nut shells, used as dice. The values are as follows: two round sides = 2; two hollow sides = 1; one of each side = 0. Players move their pieces from outside the circles into progressive rings until they reach Paradise at the center, at which point the piece goes back to the outside of the board. The first player to reach Paradise three times wins.
(game "Paradis" (players 8) (equipment {(board (concentric {8 8 8 8 8 8 8 8 8 8}) {(track "Track1" {72 64 56 48 40 32 24 16 8 0 8 16 24 32 40 48 56 64 72 64 56 48 40 32 24 16 8 0 8 16 24 32 40 48 56 64 72 64 56 48 40 32 24 16 8 0 8 16 24 32 40 48 56 64} P1 true) (track "Track2" {73 65 57 49 41 33 25 17 9 1 9 17 25 33 41 49 57 65 73 65 57 49 41 33 25 17 9 1 9 17 25 33 41 49 57 65 73 65 57 49 41 33 25 17 9 1 9 17 25 33 41 49 57 65} P2 true) (track "Track3" {74 66 58 50 42 34 26 18 10 2 10 18 26 34 42 50 58 66 74 66 58 50 42 34 26 18 10 2 10 18 26 34 42 50 58 66 74 66 58 50 42 34 26 18 10 2 10 18 26 34 42 50 58 66} P3 true) (track "Track4" {75 67 59 51 43 35 27 19 11 3 11 19 27 35 43 51 59 67 75 67 59 51 43 35 27 19 11 3 11 19 27 35 43 51 59 67 75 67 59 51 43 35 27 19 11 3 11 19 27 35 43 51 59 67} P4 true) (track "Track5" {76 68 60 52 44 36 28 20 12 4 12 20 28 36 44 52 60 68 76 68 60 52 44 36 28 20 12 4 12 20 28 36 44 52 60 68 76 68 60 52 44 36 28 20 12 4 12 20 28 36 44 52 60 68} P5 true) (track "Track6" {77 69 61 53 45 37 29 21 13 5 13 21 29 37 45 53 61 69 77 69 61 53 45 37 29 21 13 5 13 21 29 37 45 53 61 69 77 69 61 53 45 37 29 21 13 5 13 21 29 37 45 53 61 69} P6 true) (track "Track7" {78 70 62 54 46 38 30 22 14 6 14 22 30 38 46 54 62 70 78 70 62 54 46 38 30 22 14 6 14 22 30 38 46 54 62 70 78 70 62 54 46 38 30 22 14 6 14 22 30 38 46 54 62 70} P7 true) (track "Track8" {79 71 63 55 47 39 31 23 15 7 15 23 31 39 47 55 63 71 79 71 63 55 47 39 31 23 15 7 15 23 31 39 47 55 63 71 79 71 63 55 47 39 31 23 15 7 15 23 31 39 47 55 63 71} P8 true)} Vertex) (dice 2 0 2) (piece "Marker" Each (move (from (from )) (to (trackSite Move (mapEntry "Throw" (count Pips))) (apply (if (or (and (= 1 (mapEntry "Throw" (count Pips))) (= (mapEntry "Center" Mover) (to ))) (and (= 2 (mapEntry "Throw" (count Pips))) (or (= (mapEntry "Center" Mover) (to )) (= (mapEntry "Center" Mover) (trackSite Move 1))))) (addScore Mover 1)))))) (map "Throw" {(pair 0 2) (pair 1 0) (pair 2 1)}) (map "Center" {(pair P1 0) (pair P2 1) (pair P3 2) (pair P4 3) (pair P5 4) (pair P6 5) (pair P7 6) (pair P8 7)})}) (rules (start {(place "Marker1" 72) (place "Marker2" 73) (place "Marker3" 74) (place "Marker4" 75) (place "Marker5" 76) (place "Marker6" 77) (place "Marker7" 78) (place "Marker8" 79)}) (play (do (roll ) (if (!= (mapEntry "Throw" (count Pips)) 0) (forEach Piece)))) (end (if (= (score Mover) 3) (result Mover Win)))))

Forty stones arranged in a circle, with a larger gap after every tenth stone, the spaces between the stones are the playing spaces. Four or six players, played on two teams, with two sticks per team, starting in one of the gaps. Three sticks, round on one side and flat on the other, used as dice. The throws are as follows: three round sides = 10; two round sides = 2; one round side = 3; three flat sides = 5. A throw of 10 grants the player another throw. Pieces move according to the throws in opposite directions around the board. The team to get their pieces to the starting gap wins.
(game "Setichch" (players 6) (equipment {(board (add (remove (concentric {44}) {43 21 0 22}) {{20 18} {0 1} {19 21} {38 39}}) {(track "TrackCW" {39 35 33 31 29 27 25 23 21 19 38 17 15 13 11 9 7 5 3 1 37 0 2 4 6 8 10 12 14 16 36 18 20 22 24 26 28 30 32 34} true) (track "TrackCCW" {39 34 32 30 28 26 24 22 20 18 36 16 14 12 10 8 6 4 2 0 37 1 3 5 7 9 11 13 15 17 38 19 21 23 25 27 29 31 33 35} true)} Edge) (regions "AllSites" (sites Board)) (piece "Stick" P1) (piece "Stick" P2) (dice 2 0 3) (hand Each) (map "Throw" {(pair 0 5) (pair 1 3) (pair 2 2) (pair 3 10)})}) (rules (start {(place Stack "Stick1" Edge 36 2) (place Stack "Stick2" Edge 38 2) (set Team 1 {P1 P3 P5}) (set Team 2 {P2 P4 P6})}) (play (do (roll ) (if (is In (mover ) (players Team1)) (move (from (sites Occupied Team1)) (to (trackSite Move "TrackCW" (mapEntry "Throw" (count Pips))) (not (is Enemy (who (to )))))) (move (from (sites Occupied Team2)) (to (trackSite Move "TrackCCW" (mapEntry "Throw" (count Pips))) (not (is Enemy (who (to ))))))) (then (if (= 10 (mapEntry "Throw" (count Pips))) (moveAgain ))))) (end {(if (and {(is In (mover ) (players Team1)) (= 1 (count Sites (sites Occupied Team1))) (= 36 (where "Stick" Team1))}) (result Team1 Win)) (if (and {(is In (mover ) (players Team2)) (= 1 (count Sites (sites Occupied Team2))) (= 38 (where "Stick" Team2))}) (result Team2 Win))})))

On a player's turn he or she must perform one of the following actions:
            1) Move a tower (2-stack) by distributing its two stones into the two nearest cells in any one direction. Each destination cell must be empty or contain a single friendly stone. 
        2) Sacrifice a single tower stone to remove an adjacent enemy wall (1-stack). Sacrifice is not forced.
Goal: A player wins immediately by reaching any cell of his or her opponent's home row, or by stalemating his or her opponent.
(game "Murus Gallicus" (players {(player N) (player S)}) (equipment {(board (rectangle 7 8)) (piece "Counter_isometric" Each) (regions "RomanGoal1" P1 (sites Top)) (regions "GaulGoal2" P2 (sites Bottom))}) (rules (start {(place Stack "Counter_isometric1" (sites {0 1 2 3 4 5 6 7}) 2) (place Stack "Counter_isometric2" (sites {48 49 50 51 52 53 54 55}) 2)}) (play (if (is Prev Mover) (or (move (from (last From)) (to (last To)) true (then (and (remove (last To)) (remove (last To))))) (move Pass)) (forEach Piece "Counter_isometric" (or {(move Hop (from (and (is Mover (who (from ))) (= (size Stack (from )) 2))) (between (or (is Empty (between )) (and (is Mover (who (between ))) (< (size Stack (between )) 2))) (apply (fromTo (from ) (to (between ))))) (to (or (is Empty (to )) (and (is Mover (who (to ))) (< (size Stack (to )) 2)))) true) (move Step (from (and (is Mover (who (from ))) (= (size Stack (from )) 2))) (to (and (is Enemy (who (to ))) (= 1 (size Stack (to )))) (apply (remove (to )))) true (then (and (fromTo (from (last To)) (to (last From))) (remove (last To))))) (move Step (from (and (is Mover (who (from ))) (= (size Stack (from )) 2))) (to (and (is Enemy (who (to ))) (= (size Stack (to )) 3)) (apply (remove (to )))) true (then (and {(fromTo (from (last To)) (to (last From))) (remove (last To)) (moveAgain )}))) (move Hop (from (and (is Mover (who (from ))) (= (size Stack (from )) 3))) (difference All Backwards) (between (range 1 2) true) (to (and (not (is Enemy (who (to )))) (not (is Mover (who (to ))))))) (move Hop (from (and (is Mover (who (from ))) (= (size Stack (from )) 3))) (difference All Backwards) (between (range 1 2) true) (to (is Enemy (who (to )))) (then (and (remove (last To)) (remove (last To)))))}) true))) (end {(if (no Moves Next) (result Mover Win)) (if (and {(is In (last To) (sites Mover)) (not (is Enemy (who (last To)))) (is Mover (who (last To)))}) (result Mover Win))})))

Geister is a two-player board game on a 6×6 game board.
            Each player has four good ghosts and four evil ghosts, whose
            type is not revealed to the opponent player. In each turn
            a player can move one of his ghosts one step vertically or
            horizontally. Moving into a square containing an opponent's
            ghost will capture the opponent's ghost and move it off from
            the board. Moving into a square containing an ally ghost
            is not allowed. A player can also move off one of his good
            ghosts from one of the opponent's corner squares. A player
            wins when one of the three conditions is satisfied:
            • All the player's evil ghosts are captured.
            • All the opponent's good ghosts are captured.
            • One of the player's good ghosts is moved off the board
        from one of the opponent's corner squares.
(game "Geister" (players 2) (equipment {(board (square 6)) (hand Each 2) (piece "GhostGood" Each) (piece "GhostEvil" Each) (regions "HomeP1" P1 (difference (expand (sites Bottom) 1) (union (sites Side E) (sites Side W)))) (regions "HomeP2" P2 (difference (expand (sites Top) 1) (union (sites Side E) (sites Side W)))) (regions "EscapeP1" P1 {30 35}) (regions "EscapeP2" P2 {0 5}) (map "Where" {(pair (id "GhostGood" P1) (handSite P1)) (pair (id "GhostEvil" P1) (handSite P1 1)) (pair (id "GhostGood" P2) (handSite P2)) (pair (id "GhostEvil" P2) (handSite P2 1))})}) (rules (start {(place "GhostGood1" 36 4) (place "GhostEvil1" 37 4) (set Hidden (sites Hand P1) P2) (place "GhostGood2" 38 4) (place "GhostEvil2" 39 4) (set Hidden (sites Hand P2) P1)}) {(phase "Placement" (play (move (from (sites Occupied Mover (mover ))) (to (forEach (sites Mover "Home") (is Empty (site )))) (then (if (all Sites (sites Hand P2) (= 0 (count Cell (site )))) (and {(set Hidden (sites P2 "Home") false P1) (set Hidden (sites P1 "Home") false P2) (set Hidden What (sites P2 "Home") P1) (set Hidden What (sites P1 "Home") P2)}))))) (nextPhase (all Sites (sites Hand P2) (= 0 (count Cell (site )))) "Movement")) (phase "Movement" (play (forEach Piece {"GhostGood" "GhostEvil"} (or (move Step Orthogonal (to (not (is Friend (who (to )))) (apply (if (is Enemy (who (to ))) (add (piece (what (to ))) (to (mapEntry "Where" (what (to ))))))))) (move Select (from (intersection (sites Occupied Mover "GhostGood") (sites Mover "Escape"))) (then (trigger "Escaped" (mover ))))))) (end {(if (or {(no Pieces Mover "GhostEvil" (sites Board)) (no Pieces Next "GhostGood" (sites Board)) (is Triggered "Escaped" Mover)}) (result Mover Win)) (if (or (no Pieces Next "GhostEvil" (sites Board)) (no Pieces Mover "GhostGood" (sites Board))) (result Mover Loss))}))}))

5x5 board; the central row and column being slightly wider than the others. Two to four players. Four pieces per player. Pieces begin on one of the central squares around the perimeter of the squares; if there are two players, they begin from opposite sides. Four cowrie shells are used as dice, with the count of the throw determined by the number of mouths which land face-up, with none facing up equaling 8. A throw of 4 gives the player another throw. Only the first throw matters for winning extra throws. Pieces move anti-clockwise from their origin point around the perimeter of the square, until they come to the final square before returning to the origin point. They then turn left and proceed around the inner perimeter of squares in a clockwise direction, until the space directly between the origin point and the central square, from which the pieces proceed to the center. When a piece overtakes a piece owned by the opponent, and the opponent's piece is not on one of the central squares of the perimeter, the opponent's pieces are sent back to the origin point, and the player is awarded an extra throw for each piece sent back. The first player to place their four pieces in the center wins.
        
(game "Tamman" (players 4) (equipment {(board (merge {(add (merge {(square 2) (shift 4.0 0.0 (square 2)) (shift 0.0 4.0 (square 2)) (shift 4.0 4.0 (square 2))}) {{2 9} {5 12} {8 15} {6 18} {8 20} {15 27} {17 29} {20 27} {23 30} {26 33} {7 19} {16 28}})}) {(track "Track1" "2,E,N,W,S,E1,N3,E2,S2,W1,N1" P1 true) (track "Track2" "6,S,E,N,W,S1,E3,S2,W2,N1,E1" P2 true) (track "Track3" "20,W,S,E,N,W1,S3,W2,N2,E1,S1" P3 true) (track "Track4" "14,N,W,S,E,N1,W3,N2,E2,S1,W1" P4 true)}) (dice 2 0 4) (piece "Marker" Each (move (from (from ) (level )) (to (trackSite Move (from ) (mapEntry "Throw" (count Pips))) true (apply (if (< 1 (mapEntry "Throw" (count Pips))) (forEach Site (sites Track Mover "Track" (trackSite Move (from ) 1) (trackSite Move (from ) (- (mapEntry "Throw" (count Pips)) 1))) (if (not (is In (sites "SafeSites"))) (forEach Level (site ) FromTop (if (is Enemy (who (site ) (level ))) (fromTo (from (site ) (level )) (to (mapEntry "Entry" (who (site ) (level )))))))))))))) (regions "SafeSites" (sites {2 6 14 20})) (map "Throw" {(pair 0 8) (pair 1 1) (pair 2 2) (pair 3 3) (pair 4 4)}) (map "Entry" {(pair P1 2) (pair P2 6) (pair P3 20) (pair P4 14)})}) (rules (start {(place Stack "Marker1" 2 4) (place Stack "Marker2" 6 4) (place Stack "Marker3" 20 4) (place Stack "Marker4" 14 4)}) (play (do (roll ) (forEach Piece) (then (if (and (= (mapEntry "Throw" (count Pips)) 4) (not (is Prev Mover))) (moveAgain ))))) (end (if (all Sites (sites Occupied Mover) (is In (site ) (sites {(centrePoint )}))) (result Mover Win)))))

Seven concentric circles or squares. Four players. One piece per player. One player has a stick, which is hidden in their fist. The next player attempts to guess which hand holds the stick. If the player guessing guesses correctly, they enter their piece in the first circle or advances it to the next circle, and the stick is passed to them. If the guessing player guesses incorrectly, the player holding the stick moves their piece into the first circle or advances it to the next circle. The player with the stick keeps it until the next player guesses the hand holding the stick. The first player to reach the central circle wins. 
(game "Ashere" (players 4) (equipment {(board (concentric {4 4 4 4 4 4 4 4}) {(track "Track1" {28 24 20 16 12 8 4 0} P1 true) (track "Track2" {29 25 21 17 13 9 5 1} P2 true) (track "Track3" {30 26 22 18 14 10 6 2} P3 true) (track "Track4" {31 27 23 19 15 11 7 3} P4 true)} Vertex) (piece "Marker" Each) (piece "Stick" Shared) (hand Each 2)}) (rules (start {(place "Marker1" 28) (place "Marker2" 29) (place "Marker3" 30) (place "Marker4" 31)}) {(phase "Hiding" (play (move Add (piece (id "Stick" Shared)) (to Cell (sites Hand Mover)) (then (set Hidden Cell (last To) Next)))) (nextPhase "Guessing")) (phase "Guessing" (play (move Select (from Cell (sites Hand Prev)) (then (and (if (is Empty (last To)) (and (fromTo (from (where "Marker" Prev)) (to (if (is Prev P1) (trackSite Move (where "Marker" Prev) "Track1" 1) (if (is Prev P2) (trackSite Move (where "Marker" Prev) "Track2" 1) (if (is Prev P3) (trackSite Move (where "Marker" Prev) "Track3" 1) (trackSite Move (where "Marker" Prev) "Track4" 1)))))) (if (not (is In (if (is Prev P1) (trackSite Move (where "Marker" Prev) "Track1" 1) (if (is Prev P2) (trackSite Move (where "Marker" Prev) "Track2" 1) (if (is Prev P3) (trackSite Move (where "Marker" Prev) "Track3" 1) (trackSite Move (where "Marker" Prev) "Track4" 1)))) (sites Centre))) (set NextPlayer (player (prev ))))) (and {(moveAgain ) (fromTo (from (where "Marker" Mover)) (to (trackSite Move (where "Marker" Mover) 1)))})) (remove Cell (sites Hand Prev)))))) (nextPhase "Hiding"))} (end (if (!= (- (count Players) (count Active)) (count Sites (forEach (sites Centre) (is Occupied (site ))))) {(if (and (is Active P1) (is In (where "Marker" P1) (sites Centre))) (result P1 Win)) (if (and (is Active P2) (is In (where "Marker" P2) (sites Centre))) (result P2 Win)) (if (and (is Active P3) (is In (where "Marker" P3) (sites Centre))) (result P3 Win)) (if (and (is Active P4) (is In (where "Marker" P4) (sites Centre))) (result P4 Win))}))))

Each player starts off with 15 balls. Players take turns taking pieces from their reserve pile, and placing them on a 4x4 game board made up of 16 indentations. When four pieces are placed next to each other in a square, one piece can be put on top of the square. That piece can also be one of the player pieces on the board with no other piece on top of it. If the square is completed with all the same color, the player of that color may take two of their own pieces from the board (one or two that are not supporting anything) and put it back into their reserve pile. At the end of the game, the game board should have 4 levels. The first level with 16 pieces, the second level with 9 pieces, the third level with 4 pieces, and the fourth level with 1 piece. A player wins if they put the last piece on the 4th level.
(game "Pylos" (players 2) (equipment {(board (square 4 true) Vertex) (piece "Ball" Each) (hand Each)}) (rules (start (place "Ball" "Hand" 15)) (play (if (is Prev Mover) (move (from (sites Occupied Mover) (and {(if (!= (from ) (ahead (from ) UNE)) (is Empty (ahead (from ) UNE)) true) (if (!= (from ) (ahead (from ) USE)) (is Empty (ahead (from ) USE)) true) (if (!= (from ) (ahead (from ) USW)) (is Empty (ahead (from ) USW)) true) (if (!= (from ) (ahead (from ) UNW)) (is Empty (ahead (from ) UNW)) true)})) (to (handSite Mover)) (then (if (= (var ) 1) (and (set Var 0) (moveAgain ))))) (or (do (move (from (sites Occupied Mover) (and {(if (!= (from ) (ahead (from ) UNE)) (is Empty (ahead (from ) UNE)) true) (if (!= (from ) (ahead (from ) USE)) (is Empty (ahead (from ) USE)) true) (if (!= (from ) (ahead (from ) USW)) (is Empty (ahead (from ) USW)) true) (if (!= (from ) (ahead (from ) UNW)) (is Empty (ahead (from ) UNW)) true)})) (to (sites Empty) (and (is Flat) (< (layer (from )) (layer (to )))))) (is Flat (last To))) (move (from (sites Occupied Mover (mover ))) (to (sites Empty) (is Flat))) (then (if (is Pattern {F R F R F} {(id "Ball" Mover)}) (and (set Var 1) (moveAgain ))))))) (end (if (= (layer (last To)) 3) (result Mover Win)))))

9x9 board, with the central square of each side marked, as well as the central space of the board. Two to four players, each player with two pieces. Played with two four-sided dice, marked 1, 3, 4, 6. Throws may be divided as the players see fit between their pieces. Doubles allow another throw. Players start with their pieces on the marked square on their side of the board. Pieces move along a spiraling track, starting in an anti-clockwise direction around the outer edges of the board, then changing to a clockwise direction when reaching the 32nd space in the track, and continuing in this direction in a spiral pattern until reaching the central square. If a player lands on a space occupied by an opponent's piece, the opponent's piece is removed from the board, and the player must throw a double 1 to enter it again on their starting square. Pieces resting on a marked space are safe from being sent to the start. The goal is to reach the central square with both pieces, which must be reached by an exact throw. If a piece is 1, 3, or 4 spaces from the center, the player must throw doubles of that number to reach the goal.
        
(game "Saturankam" (players 4) (equipment {(board (square 9) {(track "Track1" "81,4,E,N,W,S,E3,N1,W2,N6,E6,S5,W5,N4,E4,S3,W3,N2,E2,S1,W1" P1 true) (track "Track2" "82,36,S,E,N,W,S3,E1,N2,E6,S6,W5,N5,E4,S4,W3,N3,E2,S2,W1,N1" P2 true) (track "Track3" "83,76,W,S,E,N,W3,S1,E2,S6,W6,N5,E5,S4,W4,N3,E3,S2,W2,N1,E1" P3 true) (track "Track4" "84,44,N,W,S,E,N3,W1,S2,W6,N6,E5,S5,W4,N4,E3,S3,W2,N2,E1,S1" P4 true)}) (dice 4 {1 3 4 6} 2) (piece "Marker" Each (if (and (or {(= (trackSite Move (from ) 1) (centrePoint )) (= (trackSite Move (from ) 3) (centrePoint )) (= (trackSite Move (from ) 4) (centrePoint ))}) (= (value Player Mover) (count Pips))) (if (and (all DiceEqual) (= (trackSite Move (from ) (/ (count Pips) 2)) (centrePoint ))) (move (from (from )) (to (centrePoint )) (then (and (moveAgain ) (set Var "Double" 1))))) (forEach Value 1 (value Player Mover) (move (from (from ) (level )) (to (trackSite Move (from ) (value )) true (apply (and (if (and (not (is In (to ) (sites "SafeSites"))) (is Enemy (who (to )))) (forEach Level (to ) FromTop (fromTo (from (to ) (level )) (to (handSite (who (to ) (level ))))))) (if (< 0 (- (value Player Mover) (value ))) (and (moveAgain ) (set Value Mover (- (value Player Mover) (value )))) (and (set Value Mover 0) (if (all DiceEqual) (and (moveAgain ) (set Var "Double" 1)))))))))))) (hand Each) (regions "SafeSites" (sites {4 44 76 36 40})) (map "Entry" {(pair P1 4) (pair P2 36) (pair P3 76) (pair P4 44)})}) (rules (start {(place Stack "Marker1" 4 2) (place Stack "Marker2" 36 2) (place Stack "Marker3" 76 2) (place Stack "Marker4" 44 2)}) (play (if (or (= 1 (var "Double")) (not (is Prev Mover))) (do (roll ) (move Pass (then (and {(set Value Mover (count Pips)) (if (= 1 (var "Double")) (set Var "Double" 0)) (moveAgain )})))) (if (can Move (or (if (and {(is Occupied (handSite Mover)) (all DiceEqual) (= 2 (value Player Mover))}) (move (from (handSite Mover)) (to (mapEntry "Entry" Mover)) (then (and (moveAgain ) (set Var "Double" 1))))) (forEach Piece))) (or (if (and {(is Occupied (handSite Mover)) (all DiceEqual) (= 2 (value Player Mover))}) (move (from (handSite Mover)) (to (mapEntry "Entry" Mover)) (then (and (moveAgain ) (set Var "Double" 1))))) (forEach Piece)) (move Pass (then (and (set Var "Double" 0) (set Value Mover 0))))))) (end (if (= 2 (count Pieces Mover (sites Centre))) (result Mover Win)))))

Buffalos move one step forward to a free space. Dogs move like a chess queen but cannot capture. The villager moves like a chess king, and can capture buffalos. Dogs and the villager cannot enter the top or bottom rows of the board. Buffalos start, and win by reaching the top row. They lose if they cannot move anymore.
(game "Bison" (players 2) (equipment {(board (rectangle 7 11)) (piece "Bull" P1 (move Step Forward (to (is Empty (to ))))) (piece "Colonel" P2 (move Step Adjacent (to (and (and (not (is In (to ) (sites Top))) (not (is In (to ) (sites Bottom)))) (not (is Friend (who (to ))))) (apply (if (is Enemy (who (to ))) (remove (to ))))))) (piece "Dog" P2 (move Slide (between (and (and (not (is In (to ) (sites Top))) (not (is In (to ) (sites Bottom)))) (is Empty (to ))))))}) (rules (start {(place "Bull1" (sites Bottom)) (place "Colonel2" {"F6"}) (place "Dog2" {"D6" "E6" "G6" "H6"})}) (play (forEach Piece)) (end {(if (is In (last To) (sites Top)) (result P1 Win)) (if (no Moves Next) (result Mover Win))})))

Played on a Backgammon board. Three pieces per player. Two dice. Only the lower value of the dice is used. One player plays from their let toward their right, and the other player from their right to their left. Pieces begin on the outer edge of the board. Pieces move according to the throw of the dice toward the point on the opposite side of their side of the board. No more than one piece can be on a point (except the final point) at any time. Pieces cannot pass each other. When a piece lands on an empty point that is opposite an opponent's point with a piece on it, the opponent's piece is sent back to start. The first player to place all three of their pieces on the final point wins.
(game "Tourne-Case" (players 2) (equipment {(board (rectangle 2 13) {(track "Track1" {6 0 1 2 3 4 5 7 8 9 10 11 12 25 24 23 22 21 20 18 17 16 15 14 13} P1 true) (track "Track2" {19 13 14 15 16 17 18 20 21 22 23 24 25 12 11 10 9 8 7 5 4 3 2 1 0} P2 true)} Vertex) (dice 6 2) (piece "Disc" Each (move (from (from )) (to (trackSite Move (from ) (min (face 26) (face 27))) (and (or (is Empty (to )) (and (= (to ) (mapEntry "FinalPoint" Mover)) (no Pieces Next (sites {(mapEntry "FinalPoint" Mover)})))) (if (< 1 (min (face 26) (face 27))) (no Pieces Mover (sites Track Mover (trackSite Move (from ) 1) (trackSite Move (from ) (- (min (face 26) (face 27)) 1)))) true)) (apply (if (and (is Enemy (who (mapEntry "Opposite" (to )))) (= 1 (size Stack (mapEntry "Opposite" (to ))))) (fromTo (from (mapEntry "Opposite" (to ))) (to (mapEntry "Bar" Next)))))))) (map "FinalPoint" {(pair P1 13) (pair P2 0)}) (map "Bar" {(pair P1 6) (pair P2 19)}) (map "Opposite" {(pair 0 13) (pair 1 14) (pair 2 15) (pair 3 16) (pair 4 17) (pair 5 18) (pair 7 20) (pair 8 21) (pair 9 22) (pair 10 23) (pair 11 24) (pair 12 25) (pair 13 0) (pair 14 1) (pair 15 2) (pair 16 3) (pair 17 4) (pair 18 5) (pair 20 7) (pair 21 8) (pair 22 9) (pair 23 10) (pair 24 11) (pair 25 12)})}) (rules (start {(place Stack "Disc1" 6 3) (place Stack "Disc2" 19 3)}) (play (do (roll ) (forEach Piece true))) (end (if (= 3 (count Pieces Mover (sites {(mapEntry "FinalPoint" Mover)}))) (result Mover Win)))))

MOVING
            Each player moves one ship each turn. A ship moves any number of empty squares in a straight line, either vertically, horizontally, or diagonally (that is, like a chess queen). However, a ship may never end its turn in its home port.
            
            DESTROYING SHIPS
            Two opposing ships \"attack\" each other if they face each other along a straight line with no other ships between them (so that each could move to the other's square). A ship that is under attack from three or more enemy ships is \"vulnerable.\" At the end of your move, you must destroy all vulnerable enemy ships by removing them from the board. In the example below, the white ship on b3 is under attack from black ships on
            a2, b1, and d3, and can be destroyed. You can only destroy enemy ships after your move. Sometimes, if an enemy ship
            is vulnerable at the beginning of your turn, your move in that turn will make it no longer vulnerable. When this happens, you cannot destroy the ship. If the destruction of one ship makes another ship vulnerable that wasn't vulnerable before, both ships must be destroyed. In the example below, destroying the white ship on f8 makes the ship on g8 vulnerable. Both are destroyed.
            
            REBUILDING SHIPS
            At the beginning of your turn, you may rebuild one of your destroyed ships. The ship is placed in your home port, and since ships may not end a turn in their own port, you must use your turn to move the ship out of port. Therefore, you cannot rebuild a ship until you have a vacant square to move the ship to.
            
            WINNING
            You win the game by moving one of your ships into the enemy port, provided that
            your opponent cannot destroy it on his or her next turn. (If your opponent can
        destroy it, the game continues.)
(game "Archimedes" (players 2) (equipment {(board (square 8)) (piece "Ball" Each (move Slide (between (and (is Empty (between )) (!= (between ) (mapEntry "Port" Mover)))))) (map "Port" {(pair P1 "H8") (pair P2 "A1")}) (hand Each)}) (rules (start {(place "Ball1" (difference (expand (mapEntry "Port" P1) 4 Orthogonal) (sites {"D8" "H4" "H8"}))) (place "Ball2" (difference (expand (mapEntry "Port" P2) 4 Orthogonal) (sites {"A5" "A1" "E1"})))}) (play (if (is Prev Mover) (move Slide (from (mapEntry "Port" Mover))) (or (forEach Piece (then (forEach Site (sites Occupied Next) (if (<= 3 (count Sites (forEach (sites LineOfSight (site )) (= (who (site )) Mover)))) (fromTo (from (site )) (to (handSite Next))))))) (if (and {(is Occupied (handSite Mover)) (is Empty (mapEntry "Port" Mover)) (not (all Sites (difference (expand (mapEntry "Port" P1)) (mapEntry "Port" Mover)) (is Occupied (site ))))}) (move (from (handSite Mover)) (to (mapEntry "Port" Mover)) (then (moveAgain ))))))) (end (if (and (is Friend (who (if (is Mover P1) (mapEntry "Port" P2) (mapEntry "Port" P1)))) (> 3 (count Sites (forEach (sites LineOfSight (if (is Mover P1) (mapEntry "Port" P2) (mapEntry "Port" P1))) (if (is Mover P1) (= (who (site )) P1) (= (who (site )) P2)))))) (result Mover Win)))))

Played on an 8x8 board with a double contingent of chess pawns. Pieces move forward one orthogonally or diagonally. Pieces can capture by moving diagonally. The first player to reach the opponent's edge of the board wins. A player also can win if they capture all of the opponent's pieces.
(game "Breakthrough" (players {(player N) (player S)}) (equipment {(board (square 8)) (piece "Pawn" Each (or {(move Step Forward (to (is Empty (to )))) (move Step (directions {FR FL}) (to (or (is Empty (to )) (is Enemy (who (to )))) (apply (remove (to )))))})) (regions P1 (sites Top)) (regions P2 (sites Bottom))}) (rules (start {(place "Pawn1" (expand (sites Bottom))) (place "Pawn2" (expand (sites Top)))}) (play (forEach Piece)) (end (if (is In (last To) (sites Mover)) (result Mover Win)))))

Spiral board of any number of spaces, rendered as holes in the sand. The first space is a mound. Any number of players. One piece per player, and one piece, the \"bankor,\" all of which begin on the first space on the outer ring of the spiral. Four sticks, with one green and one white side, used as dice. The throws are as follows: One white side up = 1; two white sides up = 0, or 8 when playing as the bankor; three white sides up = 3; four white sides up = 4; four green sides up = 6. A player must throw a 1 to begin moving their piece. Pieces proceed along the spiral toward the central spot. The first player to reach the spot allows the other players three turns, and then begins playing as  the bankor. When the bankor overtakes another player's piece, it drags them with it. When the bankor reaches the penultimate spot, the players it is dragging with them loses. 
(game "Sik" (players 4) (equipment {(board (spiral 5 86) {(track "Track" {85 84 83 82 81 80 79 78 77 76 75 74 73 72 71 70 69 68 67 66 65 64 63 62 61 60 59 58 57 56 55 54 53 52 51 50 49 48 47 46 45 44 43 42 41 40 39 38 37 36 35 34 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0} true)} Vertex) (dice 2 0 4) (map "Throw" {(pair 0 4) (pair 1 3) (pair 2 0) (pair 3 1) (pair 4 6)}) (piece "Stick" Each (move (from (from ) (level ) (or (= 1 (state (from ) (level ))) (= (mapEntry "Throw" (count Pips)) 1))) (to (trackSite Move "Track" (mapEntry "Throw" (count Pips))) true) (then (if (!= 1 (state (last To) (last LevelTo))) (set State (last To) (last LevelTo) 1))))) (piece "Bankor" Neutral)}) (rules (start {(place Stack {"Stick4" "Stick3" "Stick2" "Stick1"} 85) (place Stack "Bankor0" 85)}) (play (do (roll ) (if (= 0 (where "Stick" Mover)) (if (< (value Player Mover) 2) (move Pass (then (set Value Mover (+ 1 (value Player Mover))))) (if (or (= (mover ) (state (where "Bankor" Neutral) (where Level "Bankor" Neutral (where "Bankor" Neutral)))) (= 0 (state (where "Bankor" Neutral) (where Level "Bankor" Neutral (where "Bankor" Neutral))))) (if (!= 0 (mapEntry "Throw" (count Pips))) (move (from (where "Bankor" Neutral) (where Level "Bankor" Neutral (where "Bankor" Neutral))) (to (trackSite Move (where "Bankor" Neutral) "Track" (mapEntry "Throw" (count Pips)))) (then (and (if (!= (mover ) (state (where "Bankor" Neutral) (where Level "Bankor" Neutral (where "Bankor" Neutral)))) (set State (where "Bankor" Neutral) (where Level "Bankor" Neutral (where "Bankor" Neutral)) (mover ))) (if (= (last To) 0) (forEach Site (sites Track "Track" (last From) (last To)) (if (!= (site ) (last To)) (forEach Level (site ) FromTop (remove (site ) (level ))))) (forEach Site (sites Track "Track" (last From) (last To)) (if (!= (site ) (last To)) (forEach Level (site ) FromTop (fromTo (from (site ) (level )) (to (last To))))))))))))) (if (!= 0 (mapEntry "Throw" (count Pips))) (forEach Piece))))) (end {(forEach Player (no Pieces Player) (result Player Loss)) (forEach Player (or (= (where "Bankor" Neutral) 0) (and (is Occupied 0) (>= 1 (count Sites (difference (sites Occupied All) (where "Bankor" Neutral)))))) (result Player Win))})))

Five pieces per player. One six-sided die. Players move their pieces onto the board using the throws of the dice. A piece must be brought onto the board if it is possible. Pieces move in an anti-clockwise direction around the board. Only one piece may be placed on a point at a time, except for the central line, which is the \"sacred line.\" The first person to collect all of their pieces on the sacred line by reaching it on the opponent's side of the board by an exact throw wins.
(game "Pente Grammai" (players 2) (equipment {(board (add (scale 1.5 (merge {(shift 2.0 0.0 (rectangle 2 1)) (shift 1.5 0.0 (rectangle 2 1)) (shift 1.0 0.0 (rectangle 2 1)) (shift 0.5 0.0 (rectangle 2 1)) (rectangle 2 1)})) {{1.5 0.75}}) {(track "Track1" "8,6,4,2,0,1,3,5,7,9" true P1) (track "Track2" "1,3,5,7,9,8,6,4,2,0" true P2)} Vertex) (piece "Marker" Each (if (and (!= (from ) 10) (is Empty (trackSite Move (count Pips)))) (move (from ) (to (trackSite Move (count Pips)))))) (hand Each) (dice 6 1) (map "Goal" {(pair P1 5) (pair P2 4)})}) (rules (start {(place Stack "Marker1" (handSite P1) 5) (place Stack "Marker2" (handSite P2) 5)}) (play (do (roll ) (priority {(if (and (not (all Sites (sites Hand Mover) (= 0 (count Cell (site ))))) (is Empty (trackSite Move (handSite Mover) (- (count Pips) 1)))) (move (from (handSite Mover)) (to (trackSite Move (handSite Mover) (- (count Pips) 1))))) (forEach Piece)} (then (if (= (mapEntry "Goal" Mover) (last To)) (fromTo (from (last To)) (to 10))))))) (end (if (all Sites (sites Occupied Mover) (= (site ) 10)) (result Mover Win)))))

Forty stones, placed in a circle with a larger space after every tenth stone. The spaces between the stones are the playing spaces. Two to four players, each with one counter. Three sticks, round on one side and flat on the other, used as dice. The throws are as follows: three round sides = 10; three flat sides up = 5; one round and two flat = 3; two round and one flat = 1 or 2. Players move from one of the wider spaces around the board in opposite directions. When a player lands on the same spot as the opponent's piece, the opponent's piece is sent back to the beginning. The first player to complete a circuit of the board wins.
        
(game "Tsaydithl" (players 2) (equipment {(board (add (remove (concentric {44}) {43 21 0 22}) {{20 18} {0 1} {19 21} {38 39}}) {(track "TrackCW" {39 35 33 31 29 27 25 23 21 19 38 17 15 13 11 9 7 5 3 1 37 0 2 4 6 8 10 12 14 16 36 18 20 22 24 26 28 30 32 34} true) (track "TrackCCW" {39 34 32 30 28 26 24 22 20 18 36 16 14 12 10 8 6 4 2 0 37 1 3 5 7 9 11 13 15 17 38 19 21 23 25 27 29 31 33 35} true)} Edge) (piece "Stick" Each (or (if (= 2 (mapEntry "ThrowDiceValue" (count Pips))) (if (!= (if (= (state (from )) 1) (trackSite Move "TrackCCW" (- (mapEntry "ThrowDiceValue" (count Pips)) 1)) (trackSite Move "TrackCW" (- (mapEntry "ThrowDiceValue" (count Pips)) 1))) -1) (if (or (is Empty (if (= (state (from )) 1) (trackSite Move "TrackCCW" (- (mapEntry "ThrowDiceValue" (count Pips)) 1)) (trackSite Move "TrackCW" (- (mapEntry "ThrowDiceValue" (count Pips)) 1)))) (is Enemy (who (if (= (state (from )) 1) (trackSite Move "TrackCCW" (- (mapEntry "ThrowDiceValue" (count Pips)) 1)) (trackSite Move "TrackCW" (- (mapEntry "ThrowDiceValue" (count Pips)) 1)))))) (move (from (from ) (level )) (to (if (= (state (from )) 1) (trackSite Move "TrackCCW" (- (mapEntry "ThrowDiceValue" (count Pips)) 1)) (trackSite Move "TrackCW" (- (mapEntry "ThrowDiceValue" (count Pips)) 1))) (apply (is Enemy (who (to ))) (fromTo (from (to )) (to (value Piece (to )))))))))) (if (!= (if (= (state (from )) 1) (trackSite Move "TrackCCW" (mapEntry "ThrowDiceValue" (count Pips))) (trackSite Move "TrackCW" (mapEntry "ThrowDiceValue" (count Pips)))) -1) (if (or (is Empty (if (= (state (from )) 1) (trackSite Move "TrackCCW" (mapEntry "ThrowDiceValue" (count Pips))) (trackSite Move "TrackCW" (mapEntry "ThrowDiceValue" (count Pips))))) (is Enemy (who (if (= (state (from )) 1) (trackSite Move "TrackCCW" (mapEntry "ThrowDiceValue" (count Pips))) (trackSite Move "TrackCW" (mapEntry "ThrowDiceValue" (count Pips))))))) (move (from (from ) (level )) (to (if (= (state (from )) 1) (trackSite Move "TrackCCW" (mapEntry "ThrowDiceValue" (count Pips))) (trackSite Move "TrackCW" (mapEntry "ThrowDiceValue" (count Pips)))) (apply (is Enemy (who (to ))) (fromTo (from (to )) (to (value Piece (to ))))))))))) (regions "Gates" (sites {36 37 38 39})) (map "ThrowDiceValue" {(pair 0 5) (pair 1 3) (pair 2 2) (pair 3 10)}) (dice 2 0 3) (hand Each)}) (rules (start {(place "Stick1" 36 1 36) (place "Stick2" 38 2 38)}) (play (do (roll ) (forEach Piece))) (end (if (if (= 1 (state (where "Stick" Mover))) (is In (value Piece (where "Stick" Mover)) (sites Track "TrackCCW" (trackSite Move (last From) "TrackCCW" 1) (last To))) (is In (value Piece (where "Stick" Mover)) (sites Track "TrackCW" (trackSite Move (last From) "TrackCW" 1) (last To)))) (result Mover Win)))))

10x10 board. Each player has one piece and move according to the roll of one die. Representations of snakes and ladders are scattered throughout the board, connecting two spaces. If a player lands at the bottom of the ladder at the end of their move, they advance to the space at the top of the ladder. If a player ends their turn on a space with the head of a snake, they move down to the space with the tail of the snake. The first player to move off the last space of the board wins.
(game "Gyan Chaupar" (players 4) (equipment {(board (square 10) (track "Track" "0,E,N1,W,N1,E,N1,W,N1,E,N1,W,N1,E,N1,W,N1,E,N1,W" true)) (piece "Pawn" Each (move (from (from ) (level )) (to (mapEntry (trackSite Move (count Pips)))))) (dice 1) (map {(pair "B1" "C4") (pair "D1" "G2") (pair "H1" "J4") (pair "A3" "B5") (pair "E4" "D5") (pair "H3" "D9") (pair "J8" "J10") (pair "A8" "A10") (pair "J6" "G7") (pair "B7" "C2") (pair "G5" "F3") (pair "E2" "F1") (pair "D7" "A6") (pair "C10" "C8") (pair "H10" "H8") (pair "E10" "E8") (pair "G9" "D3") (pair "H6" "E6") (pair "I5" "J2")})}) (rules (start (place Stack {"Pawn4" "Pawn3" "Pawn2" "Pawn1"} "A1")) (play (do (roll ) (forEach Piece))) (end (if (is In (last To) (sites {(trackSite EndSite)})) (result Mover Win)))))

Forty stones, arranged in a circle, with a larger gap (called a door) after every tenth stone. Two or four players, each player playing with one piece. Each piece begins in one of the doors: north/winter is yellow, west/spring is blue, south/summer is red, east/autumn is white. North and west move anti-clockwise around the circle, south and east move clockwise. Three sticks, red on one side and black on the other, used as dice, the throws are as follows: three red = 10, three black = 5, two red and one black = 3, two black and one red = 2. A throw of 10 grants the player another throw. When a player lands on a spot occupied by an opponent, the opponent's piece is sent back to start. The first player to complete four circuits of the board wins. Circuits are usually counted with beans or corn.
(game "Tasholiwe" (players 4) (equipment {(board (add (remove (concentric {44}) {43 21 0 22}) {{20 18} {0 1} {19 21} {38 39}}) {(track "TrackCW" {39 35 33 31 29 27 25 23 21 19 38 17 15 13 11 9 7 5 3 1 37 0 2 4 6 8 10 12 14 16 36 18 20 22 24 26 28 30 32 34} true) (track "TrackCCW" {39 34 32 30 28 26 24 22 20 18 36 16 14 12 10 8 6 4 2 0 37 1 3 5 7 9 11 13 15 17 38 19 21 23 25 27 29 31 33 35} true)} Edge) (map "Throw" {(pair 0 10) (pair 1 3) (pair 2 2) (pair 3 5)}) (map "Start" {(pair 1 39) (pair 2 36) (pair 3 37) (pair 4 38)}) (regions "AllSites" (sites Board Vertex)) (piece "Stick" Each) (dice 2 0 3) (hand Each)}) (rules (start {(place "Stick1" Edge (mapEntry "Start" P1)) (place "Stick2" Edge (mapEntry "Start" P2)) (place "Stick3" Edge (mapEntry "Start" P3)) (place "Stick4" Edge (mapEntry "Start" P4))}) (play (do (roll ) (if (or (is Mover P1) (is Mover P2)) (forEach Piece (move (from (from ) (level )) (to (trackSite Move "TrackCCW" (mapEntry "Throw" (count Pips))) (not (is Friend (who (to )))) (apply (is Enemy (who (to ))) (fromTo (from (to )) (to (mapEntry "Start" (who (to ))))))))) (forEach Piece (move (from (from ) (level )) (to (trackSite Move "TrackCW" (mapEntry "Throw" (count Pips))) (not (is Friend (who (to )))) (apply (is Enemy (who (to ))) (fromTo (from (to )) (to (mapEntry "Start" (who (to )))))))))) (then (do (if (if (or (is Mover P1) (is Mover P2)) (is In (mapEntry "Start" Mover) (sites Track "TrackCCW" (trackSite Move (last From) "TrackCCW" 1) (last To))) (is In (mapEntry "Start" Mover) (sites Track "TrackCW" (trackSite Move (last From) "TrackCW" 1) (last To)))) (addScore Mover 1) (then (if (= (score Mover) 4) (remove (last To))))) (if (and (!= 4 (score Mover)) (= 10 (mapEntry "Throw" (count Pips)))) (moveAgain )))))) (end (if (>= (score Mover) 4) (result Mover Win)))))

MOVE - On each turn, each player must do one of the following actions:
            - Move one friendly stone (the missiles) one cell forward (orthogonally or diagonally)
            - Explode one friendly stone, i.e., capture all stones of either color orthogonally and diagonally adjacent including itself.
            
        GOAL - Wins the player that move a stone into the last row, or is the only with stones in the board.
(game "Bombardment" (players {(player N) (player S)}) (equipment {(board (square 8)) (piece "NuclearBomb" Each (or (move Step Forwards (to (is Empty (to )))) (move Select (from (from )) (then (forEach Site (sites Around (last To) true) (if (is Occupied (site )) (remove (site )))))))) (regions P1 (sites Top)) (regions P2 (sites Bottom))}) (rules (start {(place "NuclearBomb1" (expand (sites Bottom))) (place "NuclearBomb2" (expand (sites Top)))}) (play (forEach Piece)) (end (if (or (is In (last To) (sites Mover)) (no Pieces Next)) (result Mover Win)))))

Four 3x8 rectangles, arranged in a cross-shaped board. the fourth square, counting from the outer corners, in the outer rows of each arm are marked. Four pieces per player. Six cowrie shells are used as dice. The value of the throws is as follows: one mouth up = 10; two mouths up = 2, three mouths up = 3; four mouths up = 5; five mouths up = 25; six mouths up = 12; all mouths down = 6. On the first turn, players get three throws, and enter a piece for every throw of 10 or 25. On the top left square in their arm. Players move their pieces around the board in an anti-clockwise direction. When a piece lands on a space occupied by an opponent's piece, the opponent's piece is removed from the board and must enter again. Pieces resting on marked squares are safe from being removed from the board. When a piece completes a circuit of the board. It moves toward the central row in the player's arm, and progresses up the central row into the large square in the center of the board. The player who moves all of their pieces into the center first wine.
(game "Pasit" (players 4) (equipment {(board (add (hole (merge (shift 0.0 (/ (- 19.0 3.0) 2.0) (rectangle 3 19)) (shift (/ (- 19.0 3.0) 2.0) 0.0 (rectangle 19 3))) (poly {{8.0 8.0} {8.0 11.0} {11.0 11.0} {11.0 8.0}})) {{8 28 48 68 69 70 71 51 31 11 10 9}}) {(track "Track1" "8,S,E,N,11,E,N,W,53,N,W,S,42,W,S,E,8,S,E1,N8" P1 true) (track "Track2" "42,W,S,E,8,S,E,N,11,E,N,W,53,N,W,S,42,W,S1,E8" P2 true) (track "Track3" "53,N,W,S,42,W,S,E,8,S,E,N,11,E,N,W,53,N,W1,S8" P3 true) (track "Track4" "11,E,N,W,53,N,W,S,42,W,S,E,8,S,E,N,11,E,N1,W8" P4 true)}) (hand Each) (dice 2 0 6) (piece "Pawn" Each (if (= (trackSite Move (from ) (mapEntry "Throw" (count Pips))) -1) (move (from (from ) (level )) (to (centrePoint ))) (move (from (from ) (level )) (to (trackSite Move (from ) (mapEntry "Throw" (count Pips))) true (apply (if (and (not (is In (to ) (sites "SafeSites"))) (is Enemy (who (to )))) (forEach Level (to ) FromTop (fromTo (from (to ) (level )) (to (handSite (who (to ) (level )))))))))))) (map "Throw" {(pair 0 6) (pair 1 10) (pair 2 2) (pair 3 3) (pair 4 5) (pair 5 25) (pair 6 12)}) (map "Entry" {(pair P1 8) (pair P2 42) (pair P3 53) (pair P4 11)}) (regions "SafeSites" (sites {63 65 15 47 84 86 38 3}))}) (rules (start {(place Stack "Pawn1" (handSite P1) 4) (place Stack "Pawn2" (handSite P2) 4) (place Stack "Pawn3" (handSite P3) 4) (place Stack "Pawn4" (handSite P4) 4)}) {(phase "Opening" (play (do (roll ) (if (is In (mapEntry "Throw" (count Pips)) (sites {10 25 30})) (move (from (handSite Mover)) (to (mapEntry "Entry" Mover))) (move Pass) (then (and (if (!= 1 (value Player Mover)) (moveAgain )) (set Value Mover (+ 1 (value Player Mover)))))))) (nextPhase Mover (= 2 (value Player Mover)) "Moving")) (phase "Moving" (play (do (roll ) (or (if (and (is Occupied (handSite Mover)) (is In (mapEntry "Throw" (count Pips)) (sites {10 25 30}))) (move (from (handSite Mover)) (to (mapEntry "Entry" Mover)))) (forEach Piece)))))} (end (if (and (= 1 (count Sites (sites Occupied Mover false))) (is In (centrePoint ) (sites Occupied Mover false))) (result Mover Win)))))

9x9 board. Nine horse-shaped pieces per player. Pieces begin in the spaces along opposite sides of the board. Pieces move orthogonally one space and then diagonally another, jumping over any intervening pieces. A player may capture one of the opponent's pieces by moving onto a space occupied by the opponent's piece. The goal is to move to the central space on the board.
(game "Jeson Mor" (players 2) (equipment {(board (square 9)) (piece "Knight" Each (move Leap {{F F R F} {F F L F}} (to (not (is Friend (who (to )))) (apply (if (is Enemy (who (to ))) (remove (to )))))))}) (rules (start {(place "Knight1" (sites Bottom)) (place "Knight2" (sites Top))}) (play (forEach Piece)) (end {(if (no Pieces Next) (result Mover Win)) (if (is In (last To) (sites Centre)) (result Mover Win))})))

4x4 board, with an extension of four squares extending from the left of the bottom row. Two or more players, each with one piece. A piece of charcoal plays the part of the Ghoula. Four sticks, with one green side and one white side, used as dice. The throws are as follows: One white side up = 1, this throw is known as \"sig\"; two white sides up = 0; three white sides up = 3; four white sides up = 4; all green sides up = 6. Throws of sig, 6, and 4 grant the player another throw. All pieces begin on the top left square of the grid, proceed in a boustrophedon path down the grid, toward the space at the end of the extension, the Ka'aba. Players must throw a sig to move from the first space. When a player reaches the fifteenth space in the track, they must make seven throws of sig before moving on, moving to the sixteenth spot on the seventh throw. After reaching the sixteenth spot, only throws of sig and 3 are used; sig to move one space, and 3 to move the Ghoula three spaces. The goal for each player is to reach the Ka'aba. Upon reaching the Ka'aba, the player continues to throw, all throws used to control the Ghoula, but throws of 0 now counts as 2. The Ghoula, when reaching a space occupied by a player, continues their turn dragging the player back to the starting space. If the Ghoula succeeds in bringing the piece back to the starting space, that player loses. The Ghoula cannot move past the fifteenth space in the track.
(game "Sig wa Duqqan (Houmt al-Arbah)" (players 4) (equipment {(board (merge {(shift -4.0 0.0 (rectangle 1 4)) (square 4) (shift -4.0 3.0 (square 1))}) {(track "Track" "16,E,S1,W,S1,E,S1,W2" true) (track "ExtensionTrack" "4,W" true) (track "GhoulaTrack" "20,16,E,S1,W,S1,E,S1,W2" true) (track "ReverseGhoulaTrack" "6,E,N1,W,N1,E,N1,W" true)}) (piece "Ghoula" Neutral) (piece "Stick" Each (if (= (from ) 6) (if (= (state (from ) (level )) 8) (move (from (from ) (level )) (to 4)) (if (= (mapEntry "Throw" (count Pips)) 1) (move Select (from (from ) (level )) (then (set State (last To) (last LevelTo) (+ 1 (state (last To) (last LevelTo)))))))) (if (is In (from ) (sites Track "Track")) (move (from (from ) (level ) (if (<= 1 (state (from ) (level ))) true (= (mapEntry "Throw" (count Pips)) 1))) (to (trackSite Move "Track" (mapEntry "Throw" (count Pips))) true) (then (if (not (<= 1 (state (last To) (topLevel (last To))))) (set State (last To) (topLevel (last To)) 1)))) (if (is In (from ) (sites Track "ExtensionTrack")) (or {(if (and (!= (from ) 0) (= (mapEntry "Throw" (count Pips)) 1)) (move (from (from ) (level )) (to (trackSite Move "ExtensionTrack" 1)))) (if (= (from ) 0) (move Pass (then (and (if (= 0 (mapEntry "Throw" (count Pips))) (set Var 2) (set Var (mapEntry "Throw" (count Pips)))) (moveAgain )))) (if (= 3 (mapEntry "Throw" (count Pips))) (move Pass (then (and (set Var 3) (moveAgain ))))))})))) 8) (dice 2 0 4) (map "Throw" {(pair 0 4) (pair 1 3) (pair 2 0) (pair 3 1) (pair 4 6)})}) (rules (start {(place Stack "Ghoula0" 20) (place Stack {"Stick4" "Stick3" "Stick2" "Stick1"} 16)}) (play (do (if (<= (var ) 0) (roll )) (if (> (var ) 0) (if (= 1 (size Stack (where "Ghoula" Neutral))) (move (from (where "Ghoula" Neutral) (where Level "Ghoula" Neutral (where "Ghoula" Neutral))) (to (trackSite Move (where "Ghoula" Neutral) "GhoulaTrack" 1))) (move (from (where "Ghoula" Neutral) (where Level "Ghoula" Neutral (where "Ghoula" Neutral))) (to (trackSite Move (where "Ghoula" Neutral) "ReverseGhoulaTrack" 1)) (then (if (= (last From) 17) (forEach Level (last From) FromTop (remove (last From) (level ))) (forEach Level (last From) FromTop (fromTo (from (last From) (level )) (to (last To))))))) (then (if (and (= 1 (size Stack (where "Ghoula" Neutral))) (= 6 (where "Ghoula" Neutral))) (set Var 0) (and (if (> (var ) 1) (moveAgain )) (set Var (- (var ) 1)))))) (if (!= 0 (mapEntry "Throw" (count Pips))) (forEach Piece))) (then (if (is In (mapEntry "Throw" (count Pips)) (sites {1 6 4})) (moveAgain ))))) (end {(forEach Player (no Pieces Player) (result Player Loss)) (forEach Player (and (= 1 (size Stack (where "Ghoula" Neutral))) (= 6 (where "Ghoula" Neutral))) (result Player Win))})))

5x5 square. Nine squares are marked: the four central squares of each side, the central square of the board, and the squares which are diagonally between them. Two or four players; each player begins on one of the marked outer squares, beginning on opposite sides if two are playing. Players use one or two cowries as pieces. Four or five cowries are used as dice, with the value of the throw equalling the number of mouths which land face up. Players proceed in a clockwise direction around the board, until they reach the space before the one in which they began, moving to the marked square to the right of the direction of play, and proceeding around the inner square of spaces in an anti-clockwise direction, until arriving at the central space. When a player's piece lands on a space occupied by the opposing player, the opponent's piece is sent back to the starting point. The first player to bring all their pieces to the central square wins.
(game "Gavalata" (players 4) (equipment {(board (square 5) {(track "Track1" "2,W,N,E,S,W1,N3,W2,S2,E1,N1" P1 true) (track "Track2" "22,E,S,W,N,E1,S3,E2,N2,W1,S1" P2 true) (track "Track3" "14,S,W,N,E,S1,W3,S2,E2,N1,W1" P3 true) (track "Track4" "10,N,E,S,W,N1,E3,N2,W2,S1,E1" P4 true)}) (dice 2 0 4) (piece "Paddle" Each (if (!= (trackSite Move (count Pips)) -1) (move (from (from ) (level )) (to (trackSite Move (count Pips)) (apply (is Enemy (who (to ))) (fromTo (from (to )) (to (mapEntry (who (to )))))))) (then (if (= 12 (last To)) (remove (last To)))))) (map {(pair 1 "C1") (pair 2 "C5") (pair 3 "E3") (pair 4 "A3")})}) (rules (start {(place Stack "Paddle1" (mapEntry 1) 2) (place Stack "Paddle2" (mapEntry 2) 2) (place Stack "Paddle3" (mapEntry 3) 2) (place Stack "Paddle4" (mapEntry 4) 2)}) (play (do (roll ) (if (!= 0 (count Pips)) (forEach Piece) (move Pass)))) (end (if (no Pieces Mover) (result Mover Win)))))

The game is played on a 5x5 grid where each turn players build a town by placing building pieces up to four levels high. To win the game, players must move one of their two workers to the third level of the town.
            
            Beginning turns :
            The first player places his two workers on the board, then the second does the same.
            
            Normal turns :
            Each turn, the current player moves one of his two workers in an adjacent position (in horizontal, vertical or diagonal, i.e. king chess move) then he places a building tile adjacent to the moved worker (in a horizontal, vertical or diagonal adjacent position). The level of a position (i.e. a grid square) is the number of tiles.
            Workers can move onto a position with zero, one, two, or three tiles (but not with four tiles) only if the level of the destination position is less than or equal to the level of departure destination plus one. There can be no more than 4 tiles per position.
        The primary winning condition is to get one of his workers onto the third level (i.e. on a position with three tiles), though players may also win if their opponent is unable to make a move.
(game "Santorini" (players 2) (equipment {(board (square 5)) (hand Each) (map {(pair 0 "SquareLarge0") (pair 1 "SquareSmall0") (pair 2 "Octagon0") (pair 3 "Marker0")}) (piece "Pawn3d" Each (move Step (to (and (<= (- (size Stack (to )) (topLevel (from ))) 1) (= (who (to )) 0))) (then (moveAgain )))) (piece "SquareLarge" Neutral) (piece "SquareSmall" Neutral) (piece "Octagon" Neutral) (piece "Marker" Neutral)}) (rules (start {(place Stack "Pawn3d1" (handSite P1) 2) (place Stack "Pawn3d2" (handSite P2) 2)}) {(phase "Placement" (play (move (from (handSite Mover)) (to (sites Empty)) (then (if (not (all Sites (sites Hand Mover) (= 0 (count Cell (site ))))) (moveAgain ))))) (nextPhase Mover (all Sites (sites Hand Mover) (= 0 (count Cell (site )))) "Movement")) (phase "Movement" (play (if (is Prev Mover) (move Select (from (sites Around (last To) (and (< (size Stack (to )) 4) (= (who (to )) 0)))) (then (add (piece (mapEntry (size Stack (last To)))) (to (last To)) true))) (forEach Piece))))} (end {(if (and (= 3 (topLevel (last To))) (= (what (last To) (topLevel (last To))) (id "Pawn3d" Mover))) (result Mover Win)) (if (no Moves P1) (result P2 Win)) (if (no Moves P2) (result P1 Win))})))

King's Valley is a very simple and easy game to play. This is because all the pieces move the same. Any piece can move straight horizontal, vertical or diagonal, but always as far as possible. Pieces always stop their movement either at the sides of the board or before another piece in the same row, column, or diagonal.
        The winner is the first player that manages to move his king piece to the central square of the board, which represents the King's Valley.
(game "King's Valley" (players 2) (equipment {(board (square 5)) (piece "Disc" Each (move (from ) (to (sites LineOfSight Farthest (from ))))) (piece "King" Each (move (from ) (to (sites LineOfSight Farthest (from )))))}) (rules (start {(place "King1" (intersection (sites Bottom) (sites Column 2))) (place "King2" (intersection (sites Top) (sites Column 2))) (place "Disc1" (difference (sites Bottom) (sites Column 2))) (place "Disc2" (difference (sites Top) (sites Column 2)))}) (play (forEach Piece)) (end (if (is In (where "King" Mover) (sites Centre)) (result Mover Win)))))

5x5 board, with an X in the central square of each side of the board, as well as the central square of the board. Two players. Two pieces per player. Four cowrie shells used as dice. Throws have the value of the number of mouths that land face up, with no mouths up = 8. Players start on opposite sides of the board, the first point on their track being the marked square on that side. Players move in an anti-clockwise direction around the board, until reaching the space before the starting space, at which point they move into the space above it, and proceed around the inner part of the board in a clockwise direction, until below the central square. Players enter a piece with a throw of 1. Throws of 1 or 8 give the player another turn. When a player's piece lands on the same space as a space with an opponent's piece, the opponent's piece is removed from the board and must enter again, and the player causing this receives another throw. Pieces resting on a marked square cannot be sent back to start. To reach the central space, the player must throw the exact number required. The first player to move both pieces to the central space first wins.
(game "Siga (Sri Lanka)" (players 2) (equipment {(board (square 5) {(track "Track1" "2,E,N,W,S,E1,N3,E2,S2,W1,N1" P1 true) (track "Track2" "22,W,S,E,N,W1,S3,W2,N2,E1,S1" P2 true)}) (piece "Marker" Each (move (from (from ) (level )) (to (trackSite Move (from ) (mapEntry "Throw" (count Pips))) true (apply (if (and (not (is In (to ) (sites "SafeSites"))) (is Enemy (who (to )))) (and (forEach Level (to ) FromTop (fromTo (from (to ) (level )) (to (handSite (who (to ) (level )))))) (moveAgain ))))))) (hand Each) (dice 2 0 4) (map "Throw" {(pair 0 8) (pair 1 1) (pair 2 2) (pair 3 3) (pair 4 4)}) (map "Entry" {(pair P1 2) (pair P2 22)}) (regions "SafeSites" (sites {2 10 12 14 22}))}) (rules (start {(place Stack "Marker1" (handSite P1) 2) (place Stack "Marker2" (handSite P2) 2)}) (play (do (roll ) (or (if (and (is Occupied (handSite Mover)) (= (mapEntry "Throw" (count Pips)) 1)) (move (from (handSite Mover)) (to (mapEntry "Entry" (mover ))))) (forEach Piece)) (then (if (is In (mapEntry "Throw" (count Pips)) (sites {1 8})) (moveAgain ))))) (end (if (and (= 1 (count Sites (sites Occupied Mover false))) (is In (centrePoint ) (sites Occupied Mover false))) (result Mover Win)))))

First, the giant takes place on one of the top sites. Centre site in the opening move for the giant is not allowed. In any subsequent moves, the giant is allowed to enter the centre.
                
                The Giant piece can step to an empty site, the dwarves can step only forward to the top of the board.
                
        The giant wins if it reaches the bottom sites and the dwarves win if they block the giant to move.
(game "Ratio" (players {(player S) (player N)}) (equipment {(board (add (remove (merge {(rectangle 3 3 Alternating) (shift 0.0 2.0 (wedge 2)) (shift 0.0 -1.0 (rotate 180.0 (wedge 2)))}) {3 5 1}) {{0 3} {1 5} {2 7} {0 1}}) Vertex) (piece "Foot" P1 (move Step Adjacent (to (and (if (= 1 (count Turns)) (!= (centrePoint ) (to )) true) (is Empty (to )))))) (piece "Gnome" P2 (move Step (directions {Forwards Rightward Leftward}) (to (is Empty (to ))))) (hand P1) (regions "Home" P2 (intersection (sites Outer) (expand (sites Bottom)))) (regions "Home" P1 (sites Top))}) (rules (start {(place "Gnome2" (intersection (sites Outer) (expand (sites Bottom)))) (place "Foot1" (handSite P1))}) {(phase "Opening" (play (move (from (handSite Mover)) (to (expand (sites Top))) (then (moveAgain )))) (nextPhase "Main")) (phase "Main" (play (forEach Piece)))} (end {(if (no Moves P1) (result P2 Win)) (if (is In (where "Foot" P1) (sites P2)) (result P1 Win))})))

Use Options to select a board size.
            Goal: Be the last to play.
            
            Then the first player (Maroon) places a stone, after which the players alternate, taking up to two moves per turn.
            To move, either:
            
            1. Add a stone to an empty space that is not in line-of-sight of any opponent's stone. -Or,
            2. Slide a stone along a straight line to a new position, with the following restriction:
            
            Either
            -- A. The new location must have a greater number of opponent's stones adjacent to it, or
            -- B. The new location must have more sight-lines to opponent's stones than the old location, while keeping number of adjacent opponent's stones the same.  
            
            To avoid forfeiting the game, a player must move at least once on a turn.  The second move can be voluntarily skipped.
            The winner is last to play.
            
        The score shown is a count of the available moves at the beginning of a player's turn for use by the AI.
(game "Epoxy" (players 2) (equipment {(board (dual (remove (hex 4 5) {0 1 15 20 25 32 36 39 44})) Vertex) (piece "Ball" Each (move Slide))}) (rules (start (set Score Each 0)) (play (or {(move Add (piece (mover )) (to (difference (sites Empty) (sites (results (sites Occupied Next) (sites LineOfSight Empty (from ) Orthogonal) (to )))))) (forEach Piece (do (and (set Var "LoSFrom" (count Pieces Next (sites LineOfSight Piece (from ) Orthogonal))) (set Var "QtyAroundFrom" (count Pieces Next (sites Around (from ) Orthogonal)))) (move Slide Orthogonal) (or (> (count Pieces Next (sites Around (last To) Orthogonal)) (var "QtyAroundFrom")) (and (= (count Pieces Next (sites Around (last To) Orthogonal)) (var "QtyAroundFrom")) (> (count Pieces Next (sites LineOfSight Piece (last To) Orthogonal)) (var "LoSFrom"))))) Mover) (if (and (not (is Prev Next)) (< 0 (counter ))) (move Pass))} (then (if (is Prev Next) (moveAgain ) (and (set Score Mover (+ (size Array (array (sites From (forEach Piece (do (and (set Var "LoSFrom" (count Pieces Next (sites LineOfSight Piece (from ) Orthogonal))) (set Var "QtyAroundFrom" (count Pieces Next (sites Around (from ) Orthogonal)))) (move Slide Orthogonal) (or (> (count Pieces Next (sites Around (last To) Orthogonal)) (var "QtyAroundFrom")) (and (= (count Pieces Next (sites Around (last To) Orthogonal)) (var "QtyAroundFrom")) (> (count Pieces Next (sites LineOfSight Piece (last To) Orthogonal)) (var "LoSFrom"))))) Mover)))) (count Sites (difference (sites (results (sites Occupied Mover) (sites LineOfSight Empty (from ) Orthogonal) (to ))) (sites (results (sites Occupied Next) (sites LineOfSight Empty (from ) Orthogonal) (to ))))))) (set Score Next (+ (size Array (array (sites From (forEach Piece (do (and (set Var "LoSFrom" (count Pieces Next (sites LineOfSight Piece (from ) Orthogonal))) (set Var "QtyAroundFrom" (count Pieces Next (sites Around (from ) Orthogonal)))) (move Slide Orthogonal) (or (> (count Pieces Next (sites Around (last To) Orthogonal)) (var "QtyAroundFrom")) (and (= (count Pieces Next (sites Around (last To) Orthogonal)) (var "QtyAroundFrom")) (> (count Pieces Next (sites LineOfSight Piece (last To) Orthogonal)) (var "LoSFrom"))))) Next)))) (count Sites (difference (sites (results (sites Occupied Next) (sites LineOfSight Empty (from ) Orthogonal) (to ))) (sites (results (sites Occupied Mover) (sites LineOfSight Empty (from ) Orthogonal) (to )))))))))))) (end (if (and (is Prev Mover) (no Moves Next)) (result Mover Win)))))

The board is a square with diagonals drawn, with the bottom side of the square marked with an X. Two pieces per player, which begin on opposite corners of the square, one player on the side with the X and the other to the opposite side. Players alternate  turns moving  one of their pieces along the lines of the board to an empty adjacent point. Players cannot move along the line marked with an X. When one player  cannot move, the opponent wins.
(game "Co Chan Cho" (players 2) (equipment {(board (square 2 Solid) Vertex) (piece "Disc" Each (move Step (to (and {(or {(and (!= (from ) (coord "A1")) (!= (from ) (coord "C1"))) (and (= (from ) (coord "C1")) (!= (to ) (coord "A1"))) (and (= (from ) (coord "A1")) (!= (to ) (coord "C1")))}) (is Empty (to ))}))))}) (rules (start {(place "Disc1" (sites Top)) (place "Disc2" (sites Bottom))}) (play (forEach Piece)) (end (if (no Moves Next) (result Next Loss)))))

MOVEMENT - A stone must move as far as it can (no jumps) in a forward direction (orthogonal or diagonal). 
            - At the first move, a player may choose any of his stones to move.
            - After that, a player must move a stone that is adjacent to the last moved enemy stone. If that is not possible, the player may choose any unblocked of his stones to move. 
            - There is no capturing.
            
        GOAL  - Wins the player that moved the last stone.
(game "Forge" (players {(player N) (player S)}) (equipment {(board (rectangle 8 6) Vertex) (piece "Ball" Each (move Slide (directions Forwards All)))}) (rules (start {(place "Ball1" (expand (sites Bottom))) (place "Ball2" (expand (sites Top)))}) {(phase "Opening" (play (forEach Piece)) (nextPhase "Main")) (phase "Main" (play (priority {(forEach Piece (move Slide (from (from ) (is In (from ) (sites Around (last To) All))) (directions Forwards All))) (forEach Piece)})))} (end (if (no Moves Next) (result Mover Win)))))

Played on a hexagonal board with five spaces per side. Players take turns placing stones on an empty space. The stone must be adjacent to the last stone played but cannot be adjacent to any other. The last player to be able to make a legal move wins.
(game "Blue Nile" (players 2) (equipment {(board (hex 5)) (piece "Marker" Neutral)}) (rules {(phase "start" P1 (play (move Add (piece (id "Marker0")) (to (sites Empty)))) (nextPhase "play")) (phase "play" (play (move Add (piece "Marker0") (to (sites Around (last To) (and (is Empty (to )) (= (count Sites (difference (sites Around (to ) (not (is In (to ) (sites Empty)))) (last To))) 0)))))))} (end (if (no Moves Next) (result Next Loss)))))

A player may remove one or more adjacent pieces from a row or column. The loser is the person who takes the last piece off the board.
(game "TacTix" (players 2) (equipment {(board (square 4)) (piece "Ball" Shared)}) (rules (start (place "Ball" (sites Board))) (play (if (is Prev Mover) (or (if (= 1 (count MovesThisTurn)) (move Select (from (last To)) (to (intersection (sites Around (last To) Orthogonal) (sites Occupied Shared))) (then (and (remove (last To)) (if (and (is Occupied (ahead (last To) (directions Cell (last From) (last To)))) (!= (last To) (ahead (last To) (directions Cell (last From) (last To))))) (moveAgain ))))) (move Select (from (last To)) (to (ahead (last To) (directions Cell (last From) (last To)))) (then (and (remove (last To)) (if (and (is Occupied (ahead (last To) (directions Cell (last From) (last To)))) (!= (last To) (ahead (last To) (directions Cell (last From) (last To))))) (moveAgain )))))) (move Pass)) (move Remove (sites Board) (then (if (not (all Sites (sites Around (last To) Orthogonal) (is Empty (site )))) (moveAgain )))))) (end (if (no Moves Next) (result Next Win)))))

Play begins with the supply of pieces (30 of each colour) randomly distributed on the board, so each cell contains only one stone and there is one free space left. This free space can be anywhere except the centre space. Each player has an allocated colour. Before the game starts, Black can swap the positions of any two stones on the board. White then starts the game. Players alternate turns during the game until one of them cannot make a valid move, thereby losing the game. On a turn, a player must make one capture. A player makes a capture by leaping in a straight line in any of the 6 directions exactly as many spaces as friendly pieces surround its original position, and landing on an enemy piece, which is removed from the game. The player who cannot make a capture loses.
(game "Quantum Leap" (players 2) (equipment {(board (hex 5)) (piece "Marker" Each (move Hop Orthogonal (between (exact (- (count Sites (sites Around (from ) Orthogonal (is Friend (who (to ))))) 1)) true) (to (is Enemy (who (to ))) (apply (remove (to ))))))}) (rules (start {(place "Marker2" (centrePoint )) (place Random {"Marker2"} 29) (place Random {"Marker1"} 30)}) {(phase "Swap" (play (or (move Pass) (move Select (from (sites Occupied Mover)) (to (sites Occupied Next)) (then (swap Pieces (last From) (last To)))))) (nextPhase "Play")) (phase "Play" (play (forEach Piece)))} (end (if (no Moves Next) (result Next Loss)))))

Square grid of 36, 64, 100, or 144 squares. Each player has one piece lined up in each square on opposite sides of the square. Players may move their piece forward or backwards orthogonally. The player who blocks the opponent from being able to move wins.
(game "T'uk T'uk" (players 2) (equipment {(board (square 6)) (piece "Marker" Each (move Step Orthogonal (to (is Empty (to )))))}) (rules (start {(place "Marker1" (sites Bottom)) (place "Marker2" (sites Top))}) (play (forEach Piece)) (end (if (no Moves Next) (result Mover Win)))))

The board is a square, with the diagonals drawn. A circle is drawn around the midpoint of the top side of the square. Two pieces per player, the pieces for one player on the top corners and the other on the remaining corners. Players alternate turns moving along the lines on the board, the player on the top corners moving first, but can never move along the line with the circle. The player who blocks their opponent from being able to move wins.
(game "Oumoul Kono" (players 2) (equipment {(board (square 2 Solid) Vertex) (piece "Disc" Each (move Step (to (and {(or {(and (!= (from ) (coord "A3")) (!= (from ) (coord "C3"))) (and (= (from ) (coord "C3")) (!= (to ) (coord "A3"))) (and (= (from ) (coord "A3")) (!= (to ) (coord "C3")))}) (is Empty (to ))}))))}) (rules (start {(place "Disc1" (sites Bottom)) (place "Disc2" (sites Top))}) (play (forEach Piece)) (end (if (no Moves Next) (result Next Loss)))))

Players take turns placing one of their stones on an empty square. It is not legal to place orthogonally adjacent to only enemy stones and it is not legal to place orthogonally adjacent to more than 1 friendly stone. All other placements onto empty squares are legal. Put differently: You may place adjacent to no stone or to exactly 1 friendly and any number of enemy stones.
        The first player unable to place a stone has won the game.
(game "Pathway" (players 2) (equipment {(board (square 6)) (piece "Disc" Each)}) (rules (play (move Add (to (sites Empty) (or (all Sites (sites Around (to ) Orthogonal) (is Empty (site ))) (= 1 (count Sites (sites Around (to ) Own Orthogonal))))))) (end (if (no Moves Next) (result Next Win)))))

3x3 intersecting lines, with triangles extending on opposite ends of the large square and the central line extending to the apices. One player plays as three notched sticks, called hares, and the other as three sharp sticks, known as the hounds. Players alternate turns placing a piece on the board. When the players have placed all of their pieces on the board, they move one of their pieces to an empty adjacent spot along the lines. The first player to block their opponent from being able to move wins.
(game "Janes Soppi (Symmetrical)" (players 2) (equipment {(board (remove (merge {(rectangle 3 3 Alternating) (shift 1.5 0.5 (rotate -90.0 (wedge 2))) (shift -1.5 0.5 (rotate 90.0 (wedge 2)))}) {{6 4} {4 2} {0 4} {4 8}}) Vertex) (hand Each) (piece "Hound" P1 (move Step (to (is Empty (to ))))) (piece "Hare" P2 (move Step (to (is Empty (to )))))}) (rules (start {(place "Hound1" (handSite P1) 3) (place "Hare2" (handSite P2) 3)}) {(phase "Placement" (play (move (from (handSite Mover)) (to (sites Empty)))) (nextPhase Mover (all Sites (sites Hand Mover) (= 0 (count Cell (site )))) "Movement")) (phase "Movement" (play (forEach Piece)))} (end (if (no Moves Next) (result Mover Win)))))

Board starts empty. 
            Place on an empty location, unless it is next to more of your own pieces. 
            Passing is not allowed.
        You lose if at the end of your turn, one of your stones is surrounded.
(game "Claustro" (players 2) (equipment {(board (tri Limping (- 4 1)) Vertex) (piece "Ball" P1) (piece "Ball" P2)}) (rules (start (set Score Each 0)) (play (move Add (piece (mover )) (to (sites Empty) (<= 0 (- (count Pieces Next (sites Around (to ) Orthogonal)) (count Pieces Mover (sites Around (to ) Orthogonal))))) (then (if (not (all Sites (sites Occupied Mover) (can Move (step (from (site )) Orthogonal (to (is Empty (to ))))))) (trigger "End" Mover) (if (not (all Sites (sites Occupied Next) (can Move (step (from (site )) Orthogonal (to (is Empty (to ))))))) (trigger "End" Next)))))) (end (if (or (is Triggered "End" Mover) (is Triggered "End" Next)) (if (is Triggered "End" Mover) (result Mover Loss)) (result Mover Win)))))

Players move their pieces to an adjacent empty point. The goal is to block the other player from being able to move.
(game "Madelinette" (players 2) (equipment {(board (add (remove (rectangle 3 3 Alternating) {7 1}) {{0 1}}) Vertex) (piece "Counter" Each (move Step (to (is Empty (to )))))}) (rules (start {(place "Counter1" (sites {"A1" "C2" "A3"})) (place "Counter2" (sites {"C1" "A2" "C3"}))}) (play (forEach Piece)) (end (if (no Moves Next) (result Next Loss)))))

TURN - On each turn, each player drops a neutral stone on an empty cell provided that it does not share the same row, column or diagonal with all the stones already on board.
            
        GOAL - Wins the last player to move
(game "First Attack" (players 2) (equipment {(board (square 8)) (piece "Ball" Shared)}) (rules (play (move Add (piece "Ball") (to (sites Empty) (all Sites (sites Direction (to ) Adjacent) (is Empty (site )))))) (end (if (no Moves Next) (result Mover Win)))))

Each turn a player places a stone of their color on an empty hex. The placement is subject to the following restriction: After your placement you may not have a group containing more stones than the number of groups you have on the board. The first player unable to place a stone loses the game.
(game "Bamboo" (players 2) (equipment {(board (hex 5)) (piece "Disc" Each) (piece "Disc" Neutral)}) (rules (play (do (move Add (to (sites Empty))) (<= (max (results (sites Occupied Mover) 1 (* 1 (size Group (from ))))) (count Groups (= (who (to )) (mover )))))) (end (if (no Moves Next) (result Next Loss)))))

An X, with a rounded line connecting the four endpoints of the X, but leaving two unconnected. A circle is drawn between these two unconnected endpoints. Two pieces per player. Players alternate turns placing one of their pieces on an empty point on the board. When all of the pieces are placed, players alternate turns moving one of the pieces to an empty adjacent point on the board, moving along the lines. The player who blocks their opponent from being able to move wins.
(game "Temeen Tavag" (players 2) (equipment {(board (remove (rotate 45.0 (concentric {1 4})) {{1 4}}) Vertex) (hand Each) (piece "Disc" Each (move Step (to (is Empty (to )))))}) (rules (start (place "Disc" "Hand" 2)) {(phase "Placement" (play (move (from (handSite Mover)) (to (sites Empty)))) (nextPhase Mover (all Sites (sites Hand Mover) (= 0 (count Cell (site )))) "Movement")) (phase "Movement" (play (forEach Piece)))} (end (if (no Moves Next) (result Mover Win)))))

Movement is the same as regular amazons. You can move or shoot as many spaces as you want in any orthogonal or diagonal direction. With a hex board you have 6 orthogonal lines of movement (green) as well as 6 diagonal lines of movement (blue).
            
            Like in the original, Amazons still cannot move or shoot through other arrows or other amazons. However the diagonals are a little bit more tricky than the original. If the two orthogonal spaces next to the diagonal line are blocked, than the amazon can no longer use (or continue along) this diagonal. This is important because it reduces the movement capabilities of the amazons and allows a wall of connected arrows to become impenetrable.
            
            One final rule, in order to balance the game (white has first move advantage). On whites first turn he/she can only move an amazon but not shoot an arrow afterwards. This prevents potential too strong opening moves.
            
        The first player to block the opponent wins.
(game "Hex Amazons" (players 2) (equipment {(board (hex 7)) (piece "Queen" Each (or (move Slide) (move Slide Diagonal (between (is Empty (between ))) (to (and (is Empty (to )) (= 2 (count Sites (forEach (intersection (sites Incident Cell Cell (if (!= (between ) -1) (between ) (from ))) (sites Incident Cell Cell (to ))) (is Occupied (site )))))) (apply (or (= (between ) (to )) (!= 2 (count Sites (forEach (intersection (sites Incident Cell Cell (if (!= (between ) -1) (between ) (from ))) (sites Incident Cell Cell (to ))) (is Occupied (site ))))))))) (then (moveAgain )))) (piece "Dot" Neutral)}) (rules (start {(place "Queen1" {"B2" "G2" "E5" "B7"}) (place "Queen2" {"L12" "G12" "L7" "I9"})}) {(phase "Opening" P1 (play (forEach Piece (or (move Slide) (move Slide Diagonal (between (is Empty (between ))) (to (and (is Empty (to )) (= 2 (count Sites (forEach (intersection (sites Incident Cell Cell (if (!= (between ) -1) (between ) (from ))) (sites Incident Cell Cell (to ))) (is Occupied (site )))))) (apply (or (= (between ) (to )) (!= 2 (count Sites (forEach (intersection (sites Incident Cell Cell (if (!= (between ) -1) (between ) (from ))) (sites Incident Cell Cell (to ))) (is Occupied (site )))))))))))) (nextPhase Mover "Playing")) (phase "Playing" (play (if (is Prev Mover) (or (move Shoot (piece "Dot0")) (move Shoot (piece "Dot0") Diagonal (between (is Empty (between ))) (to (and (is Empty (to )) (!= 2 (count Sites (forEach (intersection (sites Incident Cell Cell (if (!= (between ) -1) (between ) (from ))) (sites Incident Cell Cell (to ))) (is Occupied (site ))))))))) (forEach Piece))))} (end (if (no Moves Next) (result Mover Win)))))

Played on a board of 4x4 squares. Each player controls a 3x2 L-shaped piece, and there are two 1x1 pieces which either player can manipulate. On a turn, a player moves the L piece to a new available position, and then has the option to move one of the 1x1 pieces. When a player cannot move their L piece, they lose.
(game "L Game" (players 2) (equipment {(board (square 4)) (piece "Dot" Neutral) (tile "L" Each {{L F R F F} {R F L F F}})}) (rules (start {(place "Dot0" {"A4" "D1"}) (place "L1" "C1" 0) (place "L2" "B4" 2)}) (play (if (is Prev Mover) (or (move Pass) (move (from (sites Occupied Neutral)) (to (sites Empty)))) (move (from (sites Occupied Mover)) (to (union (sites Empty) (sites Occupied Mover))) (then (moveAgain ))))) (end (if (and (not (is Mover (next ))) (no Moves Next)) (result Mover Win)))))

One player has three dwarfs and the other has one giant.
            Firstly, the giant is placed on one of the top sites. After this first move of the giant, it is the dwarfs' move.
            Each piece can move between the different sites only if they are connected by an edge. The dwarfs can move only forwards or sideways, the giant can move in all the directions.
            
            The goal of the dwarfs is to block the giant on the top site. The giant has to break through the line of dwarfs to get 2 points and win. In case of a repetition of moves, the giant is winning with one point.
            
        
(game "Game of Dwarfs" (players {(player S) (player N)}) (equipment {(board (add (remove (rotate 90.0 (merge {(rectangle 3 3 Alternating) (shift 1.5 0.5 (rotate -90.0 (wedge 2))) (shift -1.5 0.5 (rotate 90.0 (wedge 2)))})) {3 7 1}) {{0 1} {4 5} {2 7} {0 4}}) Vertex) (piece "Foot" P1 (move Step Adjacent (to (and (if (= 1 (count Turns)) (!= (centrePoint ) (to )) true) (is Empty (to )))))) (piece "Gnome" P2 (move Step (directions {Forwards Rightward Leftward}) (to (is Empty (to ))))) (hand P1) (regions "Home" P2 (intersection (sites Outer) (expand (sites Bottom)))) (regions "Home" P1 (sites Top))}) (rules (start {(place "Gnome2" (intersection (sites Outer) (expand (sites Bottom)))) (place "Foot1" (handSite P1))}) {(phase "Opening" P1 (play (move (from (handSite Mover)) (to (expand (sites Top))))) (nextPhase P1 "MainP1")) (phase "MainP1" P1 (play (forEach Piece (then (if (is In (where "Foot" P1) (sites P2)) (set Score P1 2) (if (is Cycle) (set Score P1 1))))))) (phase "MainP2" P2 (play (forEach Piece (then (if (no Moves Next) (set Score P2 1) (if (is Cycle) (set Score P1 1)))))))} (end (forEach Player (!= 0 (score Player)) (result Player Win)))))

Overflow is played on a checkered board initially filled with neutral stackable pieces, one per square.
            The dark squares make up the house of the Dark player, and the light squares make up the house of the Light player. The goal is to empty your opponent's house.
            
            There are two types of moves in Overflow, both of which are sowing moves, somewhat akin to what you see in mancalas. All moves are bound by the restriction that there must always be exactly one orthodiagonally connected group of stacks on the board. The one kind of sowing only drops pieces onto already occupied squares and the other kind spills out of both the group of already occupied squares and out of the board itself, hence the names: contained moves and overflow moves.
            
            Sowing in general:
            Sowing in general is picking up a stack from any square and distributing its pieces along one of the 8 directions onto a contiguous line of squares – usually placing one of the N pieces from the chosen stack in each of the N or so squares in the sowing direction. The details are given below.
            
            Overflow moves:
            An overflow move involves sowing into empty squares – possibly in addition to occupied squares – and over the edge of the board. It's important to remember that these two things always go together in this game, namely (1) sowing over the edge and (2) sowing into empty squares. That is to say, if you are to sow into one or more empty squares, the number of squares in the chosen sowing direction must be smaller than the number of stones in the chosen stack. The pieces that end up outside the board are removed from the game.
            
            Contained moves:
            Contained moves only sow onto already occupied squares. A contained move must sow the chosen stack as far as possible. If it's impossible to sow each of the pieces in the stack into an occupied square of its own, you place the remainder of the pieces on the last occupied square you reached. You are not obligated to chose the stack that can be sown the farthest, but whatever stack you chose, if you do not make an overflow move move with it, you must chose a sowing direction that allows you to sow onto as many occupied squares as possible.
            
            You may always chose freely between contained moves and overflow moves when both kinds are available.
            
        Note that no stack will have both a contained move and an overflow move available in the same direction. All moves are completely determined by the choice of stack and direction.
(game "Overflow" (players 2) (equipment {(board (square 6)) (piece "Disc" P1)}) (rules (start {(place "Disc1" (sites Board)) (set Score P1 (count Sites (sites Phase 1))) (set Score P2 (count Sites (sites Phase 0)))}) (play (do (or (move Select (from (sites Occupied P1)) (to (sites Around (from ) NotEmpty) (and (or (<= (size Stack (from )) (count Sites (sites Direction (from ) (directions Cell (from ) (to )) (size Stack (from ))))) (= 0 (count Sites (intersection (sites Empty) (sites Direction (from ) (directions Cell (from ) (to )) (size Stack (from ))))))) (all Sites (sites Around (from ) NotEmpty) (not (and (< (count Sites (sites Direction (from ) (directions Cell (from ) (to )) (is Empty (to )) (size Stack (from )))) (count Sites (sites Direction (from ) (directions Cell (from ) (site )) (is Empty (to )) (size Stack (from ))))) (or (<= (size Stack (from )) (count Sites (sites Direction (from ) (directions Cell (from ) (site )) (size Stack (from ))))) (= 0 (count Sites (intersection (sites Empty) (sites Direction (from ) (directions Cell (from ) (site )) (size Stack (from )))))))))))) (then (forEach Site (sites Direction (last From) (directions Cell (last From) (last To)) (is Empty (to )) (size Stack (last From))) (if (= (count Sites (sites Direction (last From) (directions Cell (last From) (last To)) (is Empty (to )) (size Stack (last From)))) (count Steps (last From) (site ))) (add (piece "Disc1") (to (site )) (- (size Stack (last From)) (- (count Sites (sites Direction (last From) (directions Cell (last From) (last To)) (is Empty (to )) (size Stack (last From)))) 1)) true) (add (piece "Disc1") (to (site )) true))))) (move Select (from (sites Occupied P1)) (to (sites Around (from )) (and (not (<= (size Stack (from )) (count Sites (sites Direction (from ) (directions Cell (from ) (to )) (size Stack (from )))))) (not (= 0 (count Sites (intersection (sites Empty) (sites Direction (from ) (directions Cell (from ) (to )) (size Stack (from ))))))))) (then (forEach Site (sites Direction (last From) (directions Cell (last From) (last To)) (size Stack (last From))) (add (piece "Disc1") (to (site )) true)))) (then (remove (last From) (size Stack (last From))))) (= 1 (count Groups)) (then (and (set Score P1 (count Sites (forEach (sites Phase 1) (is Occupied (site ))))) (set Score P2 (count Sites (forEach (sites Phase 0) (is Occupied (site ))))))))) (end (if (= 0 (* (score P1) (score P2))) (byScore )))))

A circle, with four points equally spaced along the circumference, as well as a point in the center. A diameter is drawn between two of the outer points and through the center. Two players. Two pieces per player. Players alternate turns placing a piece on the board. When all of the pieces are placed, players alternate turns moving a piece to an empty adjacent point along the lines. The player who blocks the other player from being able to move wins.
(game "Dorvon Cag" (players 2) (equipment {(board (remove (concentric {1 4}) {{1 0} {0 3}}) Vertex) (hand Each) (piece "Disc" Each (move Step (to (is Empty (to )))))}) (rules (start (place "Disc" "Hand" 2)) {(phase "Placement" (play (move (from (handSite Mover)) (to (sites Empty)))) (nextPhase Mover (all Sites (sites Hand Mover) (= 0 (count Cell (site )))) "Movement")) (phase "Movement" (play (forEach Piece)))} (end (if (no Moves Next) (result Mover Win)))))

The first player begins the game by placing a stone anywhere on the board. Then, starting with the second player, players take turns placing a stone orthogonally adjacent to exactly one enemy stone and no friendly stones.
(game "Gopher" (players 2) (equipment {(board (hex 6)) (piece "Disc" Each)}) (rules (play (if (= 0 (count Moves)) (move Add (to (sites Empty))) (move Add (to (sites Empty) (and (= 0 (count Sites (sites Around (to ) Own))) (= 1 (count Sites (sites Around (to ) Enemy)))))))) (end (if (no Moves Next) (result Next Loss)))))

Each player has a pawn, that can move to any neighboring cell. After moving, the player places a block to the cell he came from. First player who cannot move loses.
(game "Snailtrail" (players 2) (equipment {(board (rectangle 7 7)) (piece "Pawn" Each (move Step (to (is Empty (to ))) (then (moveAgain )))) (piece "Square" Neutral)}) (rules (start {(place "Pawn1" {"A1"}) (place "Pawn2" {"G7"})}) (play (if (is Even (count Moves)) (forEach Piece) (move Add (piece "Square0") (to (last From))))) (end (if (no Moves Next) (result Mover Win)))))

OBJECT OF THE GAME The last player to make a move wins.
            
            FRIENDLY AND ENEMY CONNECTIONS A connection, i.e. an orthogonal
            adjacency between two checkers, is friendly if the two checkers are the same color and enemy if the two checkers are oppositely colored. 
            
            CHECKER VALUE A checker’s value is its number of friendly connections minus
            its number of enemy connections.
            
            MOVES A checker’s value must increase when it‘s moved. Move a checker to an
            unoccupied, orthogonally adjacent square.
            
        There is no capturing in Jostle, only jostling.
(game "Jostle" (players 2) (equipment {(board (square 10)) (piece "Marker" Each (move Step Orthogonal (to (and (is Empty (to )) (< (+ (results (sites {(from )}) (sites Around (from ) Orthogonal) (if (= (from ) (to )) 0 (if (is Friend (who (to ))) 1 (if (is Enemy (who (to ))) -1 0))))) (+ (results (sites {(from )}) (sites Around (to ) Orthogonal) (if (= (from ) (to )) 0 (if (is Friend (who (to ))) 1 (if (is Enemy (who (to ))) -1 0))))))))))}) (rules (start {(place "Marker1" (sites {23 25 27 32 34 36 43 47 52 63 72 74 76 65 67 56})) (place "Marker2" (sites {22 24 26 33 35 37 42 46 53 57 62 64 66 73 75 77}))}) (play (forEach Piece)) (end (if (no Moves Next) (result Mover Win)))))

On your turn you move one of your pieces one step onto an empty cell in one of the three forwards directions. Black's pieces move towards the bottom of the board, while White's pieces move towards the top. If, at the beginning of your turn, none of your pieces can move, you win.
(game "Dodo" (players {(player N) (player S)}) (equipment {(board (rotate 30.0 (hex 4))) (piece "Disc" Each (move Step Forwards (to (is Empty (to )))))}) (rules (start {(place "Disc1" {0 1 2 3 4 5 6 7 9 10 11 15 16}) (place "Disc2" {20 21 25 26 27 29 30 31 32 33 34 35 36})}) (play (forEach Piece)) (end (if (no Moves Mover) (result Mover Win)))))

A square, with diagonals, but one side of the square has been removed. Two pieces per player. Players alternate turns placing a piece on an empty spot on the board. When the pieces are placed, players alternate turns moving one of their pieces to an empty adjacent spot along the lines. The player who blocks the other from being able to move wins.
(game "Do Guti" (players 2) (equipment {(board (add (remove (rectangle 3 3 Alternating) {1 3 5 7}) {{3 0} {0 1} {1 4}}) Vertex) (hand Each) (piece "Disc" Each (move Step (to (is Empty (to )))))}) (rules (start (place "Disc" "Hand" 2)) {(phase "Placement" (play (move (from (handSite Mover)) (to (sites Empty)))) (nextPhase Mover (all Sites (sites Hand Mover) (= 0 (count Cell (site )))) "Movement")) (phase "Movement" (play (forEach Piece)))} (end (if (no Moves Next) (result Next Loss)))))

Players take turns marking any unmarked cell with no marked neighbour. Player who can’t move loses.
(game "Spots" (players 2) (equipment {(board (hex 5)) (piece "Marker" Neutral)}) (rules (play (move Add (piece "Marker0") (to (sites Empty) (= (count Sites (sites Around (to ) Orthogonal (is In (to ) (sites Occupied Neutral)))) 0)))) (end (if (no Moves Next) (result Next Loss)))))

Three vertical lines, and two horizontal lines intersecting them along their top end points and their midpoints. The ends of the lines which are not connected to one another are the calves' pens. Three pieces per player, one playing as calves (black), and the other as guardians (white), arranged on the intersections of opposite vertical lines. Players alternate turns moving one of their pieces to an adjacent spot. The guardians attempt to trap the calves into the three pens, the calves attempt to block the guardians from being able to move.
(game "Gurvan Xudag" (players 2) (equipment {(board (remove (square 3) {{0 1} {1 2}}) Vertex) (piece "Human" P1 (move Step (to (is Empty (to ))))) (piece "Cow" P2 (move Step (to (is Empty (to )))))}) (rules (start {(place "Human1" (sites Left)) (place "Cow2" (sites Right))}) (play (forEach Piece)) (end {(if (no Moves P1) (result P2 Win)) (if (and (all Sites (difference (sites Occupied P2) (sites Bottom)) (= 0 (count (site )))) (no Moves P2)) (result P1 Win))})))

In the game, played on a grid of any size, two players move their pieces simultaneously, which leave a trail behind them. The first player to run into one of the trails or the edge of the board loses.
(game "Tron" (players 2) (equipment {(board (square 10)) (piece "King" Each (move Step Orthogonal (to (apply (if (is Occupied (to )) (trigger "Collision" (mover ))))) (then (add (piece (id "Square" Mover)) (to (last From)))))) (piece "Square" Each)}) (rules (start {(place "King1" "E5") (place "King2" "F6")}) (play (forEach Piece)) (end (if (is Triggered "Collision" Mover) (result Next Win)))))

Each player has a pawn, that can move to any neighboring cell. After moving, the player places a block on the board to try to block the opponent's pawn. First player who cannot move loses.
(game "Isolation" (players 2) (equipment {(board (rectangle 7 7)) (piece "Pawn" Each (move Step (to (is Empty (to ))) (then (moveAgain )))) (piece "Square" Neutral)}) (rules (start {(place "Pawn1" {"A4"}) (place "Pawn2" {"G4"})}) (play (if (is Even (count Moves)) (forEach Piece) (move Add (piece "Square0") (to (sites Empty))))) (end (if (no Moves Next) (result Mover Win)))))

Played on a 10x10 board. Each player has four Amazons (chess queens), with other pieces used as arrows. Two things happen on a turn: an amazon moves like a Chess queen, but cannot cross or enter a space occupied by another amazon or arrow. Then, it shoots an arrow to any space on the board that is along the path of a queen's move from that place. The last player able to make a move wins.
(game "Amazons" (players 2) (equipment {(board (square 10)) (piece "Queen" Each (move Slide (then (moveAgain )))) (piece "Dot" Neutral)}) (rules (start {(place "Queen1" {"A4" "D1" "G1" "J4"}) (place "Queen2" {"A7" "D10" "G10" "J7"})}) (play (if (is Even (count Moves)) (forEach Piece) (move Shoot (piece "Dot0")))) (end (if (no Moves Next) (result Mover Win)))))

Two players, black and white, take turns dropping pieces onto empty squares (that are not orthogonally adjacent to another enemy's piece) until no more moves are available. The last player to make a move wins the game.
(game "Snort" (players 2) (equipment {(board (square 8)) (piece "Cat" P1) (piece "Dog" P2)}) (rules (play (move Add (to (difference (sites Empty) (sites Around (sites Occupied Next) Orthogonal))))) (end (if (no Moves Next) (result P1 Win)))))

Player 1 marks a cell. Then Players take turns marking any unmarked cell with exactly one marked neighbour. Player who can't move loses.
(game "Snowpaque" (players 2) (equipment {(board (hex 5)) (piece "Marker" Neutral)}) (rules {(phase "start" P1 (play (move Add (piece (id "Marker0")) (to (sites Empty)))) (nextPhase "play")) (phase "play" (play (move Add (piece "Marker0") (to (sites Empty) (= (count Sites (sites Around (to ) Orthogonal (is In (to ) (sites Occupied Neutral)))) 1)))))} (end (if (no Moves Next) (result Next Loss)))))

This game is played on an empty 1row x n coloumn board with m stones on each side. At each turn, each player must do one of the following actions. Move a stone forward (i.e., left to one player, right to the other) or jump over one enemy stone, landing on the immediate empty cell. The player who makes the last move wins the game.
(game "Toads and Frogs" (players 2) (equipment {(board (rectangle 1 5)) (piece "Toad" P1 E (or (move Hop Forward (between (is Enemy (who (between )))) (to (is Empty (to )))) (move Step Forward (to (is Empty (to )))))) (piece "Frog" P2 W (or (move Hop Forward (between (is Enemy (who (between )))) (to (is Empty (to )))) (move Step Forward (to (is Empty (to ))))))}) (rules (start {(place "Toad1" (expand (sites Left) (- 2 1))) (place "Frog2" (expand (sites Right) (- 2 1)))}) (play (forEach Piece)) (end (if (no Moves Next) (result Mover Win)))))

The game is played on a sheet of graph paper, with any set of designs traced out. It is most commonly played on rectangular board like a 6×6 square.
            
            Two players have a collection of dominoes which they place on the grid in turn. A player can place a domino either horizontally or vertically. Contrary to the related game of Domineering, the possible moves are the same for the two players, and Cram is then an impartial game.
            
        As for all impartial games, there are two possible conventions for victory: in the normal game, the first player who cannot move loses, and on the contrary, in the misere version, the first player who cannot move wins.
(game "Cram" (players 2) (equipment {(board (rectangle 6 6)) (tile "Tile" P1 {F} 4) (tile "Tile" P2 {F} 4)}) (rules (play (or (move Add (piece (mover ) 0) (to (sites Empty))) (move Add (piece (mover ) 1) (to (sites Empty))))) (end (if (no Moves Next) (result Next Loss)))))

Players alternate turns. A player's turn consists on either placing piece on an empty field on board, or sliding one of their pieces into an empty one on the board. Players cannot pass. If each player performs three slides in a row then the game ends immediately as a draw. A player wins when any of the opponent's pieces are surrounded and cannot move. If one of a player's own pieces is surrounded on their turn, they lose even if an opponent's stone is surrounded at the same time.
(game "Susan" (players 2) (equipment {(board (hex 5)) (piece "Marker" Each (move Step Orthogonal (to (is Empty (to )))))}) (rules (play (or (move Add (to (sites Empty)) (then (set Counter))) (forEach Piece) (then (priority (surround (from (last To)) Orthogonal (between (is Friend (who (between ))) (apply (trigger "Surrounded" (mover )))) (to (is Occupied (to )))) (surround (from (last To)) Orthogonal (between (is Enemy (who (between ))) (apply (trigger "Surrounded" (next )))) (to (is Occupied (to )))))))) (end {(if (= (counter ) 5) (result Mover Draw)) (if (= (count Sites (sites Around (last To) (is Empty (to )))) 0) (result Next Win)) (if (is Triggered "Surrounded" P1) (result P2 Win)) (if (is Triggered "Surrounded" P2) (result P1 Win))})))

Each player has three pieces.
            Players take turns moving a piece to an empty dot. 
            Players cannot return to their starting three dots.
            Pieces that move into the opponent’s starting three dots cannot exit them. 
        A player wins by blocking the other player from being able to move.
(game "Ho-Bag Gonu" (players 2) (equipment {(board (add (merge {(rectangle 1 3) (shift 1.0 1.0 (scale 0.5 (concentric {1 4}))) (shift 0.0 2.0 (rectangle 1 3))}) {{5 1} {9 7}}) Vertex) (piece "Disc" Each (move Step (to (or (and {(is In (from ) (sites Next)) (is In (to ) (sites Next)) (is Empty (to ))}) (and (not (is In (from ) (sites Next))) (if (not (is In (from ) (sites Mover))) (is In (to ) (difference (sites Empty) (sites Mover))) (is Empty (to )))))))) (regions "Home" P1 (sites {"A1" "C1" "E1"})) (regions "Home" P2 (sites {"A5" "C5" "E5"}))}) (rules (start {(place "Disc1" (sites P1)) (place "Disc2" (sites P2))}) (play (forEach Piece)) (end (if (no Moves Next) (result Next Loss)))))

TURNS - At each turn, each player slides (vertically or horizontally) a stone into the only empty cell.
            
        GOAL - Wins the player who made the last move.
(game "Lewthwaite's Game" (players 2) (equipment {(board (square 5) Vertex) (piece "Ball" Each (move Slide))}) (rules (start {(place "Ball1" (sites Phase 1)) (place "Ball2" (difference (sites Phase 0) (sites Centre)))}) (play (forEach Piece)) (end (if (no Moves Next) (result Mover Win)))))

Pieces begin on opposite sides of the square. Players take turns moving the piece to an empty spot either orthogonally or diagonally, but one orthogonal direction is forbidden. The player who blocks the other player from being able to move wins.
(game "Pong Hau K'i" (players 2) (equipment {(board (add (remove (rectangle 3 3 Alternating) {1 3 5 7}) {{3 0} {0 1} {1 4}}) Vertex) (hand Each) (piece "Disc" Each (move Step (to (is Empty (to )))))}) (rules (start {(place "Disc1" {"A3" "C3"}) (place "Disc2" {"A1" "C1"})}) (play (forEach Piece)) (end (if (no Moves Next) (result Next Loss)))))

Two players have a collection of dominoes which they place on the grid in turn, covering up squares. One player places tiles vertically, while the other places them horizontally. The first player who cannot move loses.
(game "Pentomino" (players 2) (equipment {(board (rectangle 6 10)) (tile "Z" Shared {F R F F L F}) (tile "Y" Shared {F R F R R F R F F}) (tile "X" Shared {F L F L L F F L L F R F}) (tile "W" Shared {F L F R F L F}) (tile "V" Shared {F F R F F}) (tile "U" Shared {F L F F L F}) (tile "T" Shared {F F R F R R F F}) (tile "P" Shared {F F R F R F}) (tile "N" Shared {F R F L F F}) (tile "L" Shared {F R F F F}) (tile "I" Shared {F F F F}) (tile "F" Shared {F L F L L F L F R F}) (hand Shared 12)}) (rules (start {(place "F" (handSite Shared 0)) (place "I" (handSite Shared 1)) (place "L" (handSite Shared 2)) (place "N" (handSite Shared 3)) (place "P" (handSite Shared 4)) (place "T" (handSite Shared 5)) (place "U" (handSite Shared 6)) (place "V" (handSite Shared 7)) (place "W" (handSite Shared 8)) (place "X" (handSite Shared 9)) (place "Y" (handSite Shared 10)) (place "Z" (handSite Shared 11))}) (play (move (from (sites Hand Shared)) (to (sites Empty)))) (end (if (no Moves Next) (result Next Loss)))))

Three vertical lines, and two horizontal lines intersecting them along their top end points and their midpoints. Three pieces per player, arranged on the intersections of opposite vertical lines. Players alternate turns moving one of their pieces to an adjacent spot. The object of the game is to block the opponent's pieces from moving.
(game "Tugul Shodra" (players 2) (equipment {(board (remove (square 3) {{0 1} {1 2}}) Vertex) (piece "Disc" Each (move Step (to (is Empty (to )))))}) (rules (start {(place "Disc1" {2 5 8}) (place "Disc2" {0 3 6})}) (play (forEach Piece)) (end (if (no Moves Next) (result Next Loss)))))

Two players have a collection of dominoes which they place on the grid in turn, covering up squares. One player places tiles vertically, while the other places them horizontally. The first player who cannot move loses.
(game "Domineering" (players 2) (equipment {(board (rectangle 6 6)) (tile "Horz" P1 {R F} 4) (tile "Vert" P2 {F} 4)}) (rules (play (move Add (piece (mover ) 0) (to (sites Empty)))) (end (if (no Moves Next) (result Next Loss)))))

Play begins with the pieces on the kewai, each player on half of the circle. Players move by moving one piece to an empty adjacent space. Players can only move to the putahi when the piece being moved is next to an opponent's piece. The player that blocks the other from moving is the winner.
(game "Mu Torere" (players 2) (equipment {(board (concentric {1 8}) Vertex) (piece "Marker" Each (move Step (to (and (is Empty (to )) (or (not (= (to ) (centrePoint ))) (is Related Adjacent (from ) (sites Occupied Next)))))))}) (rules (start {(place "Marker1" {1 2 3 8}) (place "Marker2" {4 5 6 7})}) (play (forEach Piece)) (end (if (no Moves Next) (result Next Loss)))))

MOVE - Each player inserts a stone onto the board from an edge. Black inserts from top and pushes from top to bottom, White inserts from left and pushes from left to right.
            - Black starts with a stone on the top-left corner.
            - Passing is not allowed 
            - If a stone, when pushed meets another stone, this too is pushed on the same direction, and so on...
            
            EDGE - A stone pushed off the edge during a push is returned to the player (there are no captures). If it is an opponent stone, this row/column cannot be used on the next turn (friendly stones do not have such restriction). 
            
        GOAL - Wins the player which makes a path between the edges (top-bottom for Black, right-left for White). Stones may be connected orthogonal or diagonal.
(game "Tara" (players 2) (equipment {(board (square 5) Vertex) (piece "Ball" Each) (regions P1 {(sites Top) (sites Bottom)}) (regions P2 {(sites Left) (sites Right)})}) (rules {(phase "Opening" (play (move Add (to (intersection (sites Top) (sites Left))))) (nextPhase "Main")) (phase "Main" (play (if (is Mover P1) (move Select (from (sites Top) (not (is In (column (from )) (sites Pending)))) (then (and {(if (is Enemy (who (coord 0 (column (last From))))) (set Pending (row (coord 0 (column (last From)))))) (push (from (last To)) S) (add (piece (id "Ball" Mover)) (to (last To)))}))) (move Select (from (sites Left) (not (is In (row (from )) (sites Pending)))) (then (and {(if (is Enemy (who (coord (row (last From)) (- (count Columns) 1)))) (set Pending (column (coord (row (last From)) (- (count Columns) 1))))) (push (from (last To)) E) (add (piece (id "Ball" Mover)) (to (last To)))}))))))} (end {(if (!= 0 (count Sites (forEach (sites Occupied P1) (is Connected (site ) All P1)))) (result P1 Win)) (if (!= 0 (count Sites (forEach (sites Occupied P2) (is Connected (site ) All P2)))) (result P2 Win))})))

Crossway is played with a Go set. The board starts out empty. Each player takes possession of all of the stones of one color. Players take turns adding their stones to the board, one stone per turn. A player must never create a crosscut formation. Black makes the first placement of the game. If you have no more available placements, you forfeit your turn and your opponent can continue making placements until completing his goal connection. For White to win, White must form a contiguous sequence of white stones connecting the West edge to the East edge of the board. Each stone in the sequence must be connected to neighboring stones in the sequence by horizontal, vertical, or diagonal adjacencies. Likewise for Black and the North and South edges. A corner is considered to be part of both adjoining edges. Crossway makes use of the pie rule. This means Black makes the first placement, and White has the option of switching colors with Black, and claiming Black's first move as his own. If White chooses to exercise the pie rule, Black then becomes White and now makes the second placement of the game. The pie rule can only be used once and on the second move of the game.
(game "Crossway" (players 2) (equipment {(board (square 19) Vertex) (piece "Marker" Each) (regions P1 {(sites Side N) (sites Side S)}) (regions P2 {(sites Side W) (sites Side E)})}) (rules (meta (swap )) (play (do (move Add (to (sites Empty))) (not (is Pattern {F R F R F} {(mover ) (next )})))) (end (if (is Connected All Mover) (result Mover Win)))))

Played on a Hex board. Players may play a piece of any color piece. The goal is to form a line connecting the player's two sides with either color.
(game "Chameleon" (players 2) (equipment {(board (hex Diamond 11)) (piece "Marker" Each) (hand Shared 2) (regions P1 {(sites Side NE) (sites Side SW)}) (regions P2 {(sites Side NW) (sites Side SE)})}) (rules (meta (swap )) (start {(place "Marker1" (handSite Shared)) (place "Marker2" (handSite Shared 1))}) (play (move (from (sites Hand Shared)) (to (sites Empty)) true)) (end {(if (is Connected Mover) (result Mover Win)) (if (is Connected Next) (result Next Win))})))

This game is played on a hexagonal board made up of hexagonal squares, usually 6 squares per side, although other sizes are possible. Initially the board is empty and black pieces are placed in turns until one player passes. The player who passed becomes Black. The other player becomes White and takes the next turn. Play continues, with each player in turn placing pieces of their colour on unoccupied squares on the board. White wins if they manage to connect two opposite sides of the board. Black wins if they manage to connect three non-adjacent sides of the board. To avoid ties, if a player meets the opponent's goal with their pieces, they lose the game.
(game "Unlur" (players 2) (equipment {(board (hex 6)) (piece "Disc" Each)}) (rules {(phase "Opening" (play (or (move Add (piece (id "Disc" P2)) (to (intersection (sites Empty) (sites Inner)))) (move Pass (then (if (is Mover P1) (swap Players P1 P2 (then (note "Player 1 is now Black. Player 2 is now White." All))) (note "Player 1 remains White. Player 2 remains Black." All) (then (do (set NextPlayer (player 1)) (set Var 1)))))))) (nextPhase (= 1 (var )) "Playing")) (phase "Playing" (play (move Add (to (sites Empty)))))} (end {(if (and {(= 1 (var )) (= (id P1) (mover )) (or (is Connected {(sites Side S) (sites Side NW) (sites Side NE)}) (is Connected {(sites Side N) (sites Side SW) (sites Side SE)})) (not (or {(is Connected {(sites Side S) (sites Side N)}) (is Connected {(sites Side SW) (sites Side NE)}) (is Connected {(sites Side SE) (sites Side NW)})}))}) (result P1 Loss)) (if (and {(= 1 (var )) (= (id P2) (mover )) (or {(is Connected {(sites Side S) (sites Side N)}) (is Connected {(sites Side SW) (sites Side NE)}) (is Connected {(sites Side SE) (sites Side NW)})}) (not (or (is Connected {(sites Side S) (sites Side NW) (sites Side NE)}) (is Connected {(sites Side N) (sites Side SW) (sites Side SE)})))}) (result P2 Loss)) (if (and {(= 1 (var )) (= (id P1) (mover )) (or {(is Connected {(sites Side S) (sites Side N)}) (is Connected {(sites Side SW) (sites Side NE)}) (is Connected {(sites Side SE) (sites Side NW)})})}) (result P1 Win)) (if (and {(= 1 (var )) (= (id P2) (mover )) (or (is Connected {(sites Side S) (sites Side NW) (sites Side NE)}) (is Connected {(sites Side N) (sites Side SW) (sites Side SE)}))}) (result P2 Win))})))

Three-Player Hex is played on the Hex board, typically with five cells per side. As in standard Hex, players take turn placing a piece of their color on an empty cell, and the first player to connect the opposite sides of the board marked his color with a chain of his pieces wins. As soon as it it no longer possible for a player to connect his edges, that player is eliminated from the game and may not place any more stones.
(game "Three-Player Hex" (players 3) (equipment {(board (hex 4)) (piece "Marker" Each) (regions P1 {(sites Side N) (sites Side S)}) (regions P2 {(sites Side NW) (sites Side SE)}) (regions P3 {(sites Side SW) (sites Side NE)})}) (rules (play (move Add (to (sites Empty)))) (end {(forEach NonMover (is Blocked Player) (result Player Loss)) (if (is Connected Mover) (result Mover Win))})))

A player wins by connecting three non-adjacent board sides with a chain of their pieces. A player loses by connecting two opposite board sides with a chain of their pieces (without also connecting three non-adjacent sides).
(game "Cross" (players 2) (equipment {(board (hex 5)) (piece "Marker" Each)}) (rules (play (move Add (to (sites Empty)))) (end {(if (is Connected {(sites Side S) (sites Side NW) (sites Side NE)}) (result Mover Win)) (if (is Connected {(sites Side N) (sites Side SW) (sites Side SE)}) (result Mover Win)) (if (is Connected {(sites Side N) (sites Side S)}) (result Mover Loss)) (if (is Connected {(sites Side NW) (sites Side SE)}) (result Mover Loss)) (if (is Connected {(sites Side NE) (sites Side SW)}) (result Mover Loss))})))

All the rules of Go apply, except that passing is not allowed. A player loses if he has no legal move. A player wins if they successfully connect two opposite sides of the board.
(game "Gonnect" (players 2) (equipment {(board (square 13) Vertex) (piece "Marker" Each) (regions P1 {(sites Side N) (sites Side S)}) (regions P2 {(sites Side W) (sites Side E)})}) (rules (meta {(swap ) (no Repeat)}) (play (do (move Add (to (sites Empty)) (then (enclose (from (last To)) Orthogonal (between (is Enemy (who (between ))) (apply (remove (between ))))))) (> (count Liberties Orthogonal) 0))) (end {(if (is Connected Mover) (result Mover Win)) (if (no Moves Next) (result Mover Win))})))

This game is played on a square grid board of any size, though 13x13 or 19x19 are recommended. Then the players take it in turns to place 1-3 White stones each turn until one decides to pass; that player then becomes White, and the other becomes Black.  After that, Black places two stones per turn on any empty point, while White places just one White stone per turn.  If Black connects any two sides of the board with a single orthogonally-connected group, they win; White wins if they connect all four sides with a group connected either orthogonally or diagonally.
            
        During the initial chicken ballot phase, you may add stones by clicking on available spaces, or skip the rest of your placements (by choosing the Next Player action).  Alternatively, you may Pass at the start of your turn to take White.  After that, play continues with White playing one stone and Black playing two, until one player forms a connection (draws are impossible).
(game "Pippinzip (Zipline variant)" (players 2) (equipment {(board (square 13) Vertex) (piece "Disc" Each)}) (rules {(phase "Opening" (play (or (or (move Add (piece (id "Disc" P2)) (to (sites Empty)) (then (if (< (count MovesThisTurn) 2) (moveAgain )))) (move Set NextPlayer (player (next )))) (if (= (count MovesThisTurn) 0) (move Pass (then (if (is Mover P1) (swap Players P1 P2 (then (note "Player 1 is now White. Player 2 is now Black." All))) (note "Player 1 is now Black. Player 2 is now White." All) (then (do (set NextPlayer (player 1)) (set Var 1))))))))) (nextPhase (= 1 (var )) "Playing")) (phase "Playing" (play (or (move Add (to (sites Empty) (= (id P1) (mover ))) (then (if (= 0 (count MovesThisTurn)) (moveAgain )))) (move Add (to (sites Empty) (= (id P2) (mover )))))))} (end {(if (and (not (= 1 (var ))) (is Connected All {(sites Side N) (sites Side S) (sites Side E) (sites Side W)})) (result Mover Win)) (if (and {(= (id P1) (mover )) (or (is Connected Orthogonal {(sites Side N) (sites Side S)}) (is Connected Orthogonal {(sites Side E) (sites Side W)}))}) (result P1 Win)) (if (and {(= (id P2) (mover )) (is Connected All {(sites Side N) (sites Side S) (sites Side E) (sites Side W)})}) (result P2 Win))})))

Resolve is a connection game for two players: a player with Black stones who wins by connecting the East/West sides, and a player with White stones who wins by connecting the North/South sides. Players take turns placing and swapping stones on the intersections of a square grid which is initially empty. Passing is forbidden. Same-colored stones with orthogonal adjacency are connected. The game is over when a player wins by connecting their designated sides of the board with a single group of connected stones of their color, at any time during their turn or their opponent's turn. Cutting stones are any four stones in a generic crosscut configuration.  
            
            OX
            XO
            
            On your turn you must select the following one of two actions. 
            1. Place a stone of your color on an empty point. If that stone creates a crosscut, swap it with different adjacent enemy stones that share a crosscut with it, until that stone is no longer part of a crosscut. 
        2. Choose a stone of your color that is part of a crosscut, and use it to resolve crosscuts as in 1. Then place a stone of your color on an empty point, if possible.
(game "Resolve" (players 2) (equipment {(board (square 9) Vertex) (regions P1 {(sites Side N) (sites Side S)}) (regions P2 {(sites Side W) (sites Side E)}) (piece "Ball" P1) (piece "Ball" P2)}) (rules (play (if (not (is Prev Mover)) (or (move Add (to (sites Empty)) (then (if (and (not (is Prev Mover)) (< 0 (count Sites (sites (results (last To) (sites Around (from ) Diagonal (and (is Mover (who (to ))) (= 2 (count Pieces Next (intersection (sites Around (to ) Orthogonal) (sites Around (from ) Orthogonal)))))) (to )))))) (set Var "LT" (last To) (then (moveAgain ))) (set Var "LT" -1)))) (forEach Site (sites Occupied Mover) (do (set Var "LT" (site )) (forEach Site (intersection (sites Around (var "LT") Orthogonal) (sites Around (sites (results (var "LT") (sites Around (from ) Diagonal (and (is Mover (who (to ))) (= 2 (count Pieces Next (intersection (sites Around (to ) Orthogonal) (sites Around (from ) Orthogonal)))))) (to ))) Orthogonal)) (move (from (var "LT")) (to (site ) (!= (last From) (to )) (apply (remove (site )))) (then (and (add (piece (id "Ball" Next)) (to (var "LT"))) (set Var "LT" (last To) (then (if (< 0 (count Sites (sites (results (var "LT") (sites Around (from ) Diagonal (and (is Mover (who (to ))) (= 2 (count Pieces Next (intersection (sites Around (to ) Orthogonal) (sites Around (from ) Orthogonal)))))) (to ))))) (set NextPlayer (player (mover ))) (set Var "LT" -1))))))))))) (if (<= 0 (var "LT")) (forEach Site (intersection (sites Around (var "LT") Orthogonal) (sites Around (sites (results (var "LT") (sites Around (from ) Diagonal (and (is Mover (who (to ))) (= 2 (count Pieces Next (intersection (sites Around (to ) Orthogonal) (sites Around (from ) Orthogonal)))))) (to ))) Orthogonal)) (move (from (var "LT")) (to (site ) (!= (last From) (to )) (apply (remove (site )))) (then (and (add (piece (id "Ball" Next)) (to (var "LT"))) (set Var "LT" (last To) (then (if (< 0 (count Sites (sites (results (var "LT") (sites Around (from ) Diagonal (and (is Mover (who (to ))) (= 2 (count Pieces Next (intersection (sites Around (to ) Orthogonal) (sites Around (from ) Orthogonal)))))) (to ))))) (set NextPlayer (player (mover ))) (set Var "LT" -1)))))))) (move Add (to (sites Empty)) (then (if (and (not (is Prev Mover)) (< 0 (count Sites (sites (results (last To) (sites Around (from ) Diagonal (and (is Mover (who (to ))) (= 2 (count Pieces Next (intersection (sites Around (to ) Orthogonal) (sites Around (from ) Orthogonal)))))) (to )))))) (set Var "LT" (last To) (then (moveAgain ))) (set Var "LT" -1))))))) (end {(if (is Connected Orthogonal Mover) (result Mover Win))})))

The aim of Abak is to be the first player to connect one of the orange squares in the centre of the board to any one orange squares in the corners by forming a continuous row of counters of one colour. 
            
            In the first phase, each player places one counter on one of the orange squares in the centre of the board. 
            
            They continue to take turns to place their counters on a free adjacent square (squares are adjacent if they touch on the sides or diagonally by the points).
            
            The counter may be placed beside counters of any colour. Once placed, a counter may not be moved. 
            
            During the game, if a counter is surrounded by more than 4 occupied squares, that counter is removed. 
            
        Moreover, if then a counter becomes isolated, it is also removed from the board.
(game "Abak" (players 2) (equipment {(board (square 11)) (piece "Disc" Each) (regions "Centre" (sites Centre)) (regions "CentreRing" (difference (expand (sites Centre)) (sites Centre))) (regions "OuterGoals" (expand (sites Corners)))}) (rules {(phase "Placement" (play (move Add (to (intersection (sites "CentreRing") (sites Empty))))) (nextPhase (= (count Pieces All) 2) "Movement")) (phase "Movement" (play (move Add (to (difference (sites Playable) (sites Centre))) (then (forEach Site (sites Occupied All) (if (<= 4 (count Sites (intersection (sites Around (to )) (sites Occupied All)))) (remove (to ))) (then (forEach Site (sites Occupied All) (if (= 0 (count Sites (intersection (sites Around (to )) (sites Occupied All)))) (remove (to ))))))))))} (end (if (is Connected {(sites "CentreRing") (sites "OuterGoals")}) (result Mover Win)))))

Players take turns placing two pieces of their colour on empty cells. White places only one stone on their first turn. A player wins by connecting all three board sides with a connected group of their pieces.
(game "Master Y" (players 2) (equipment {(board (hex Triangle 13)) (piece "Disc")}) (rules {(phase "Opening" P1 (play (move Add (to (sites Empty)))) (nextPhase "Playing")) (phase "Playing" (play (move Add (to (sites Empty)) (then (if (= 0 (count MovesThisTurn)) (moveAgain ))))))} (end (if (is Connected 3 Sides) (result Mover Win)))))

This game is played on a hexagonal board made up of hexagonal cells, usually 7 cells per side, although bigger sizes may also be used. Initially the board is empty except for the six corner cells, upon which black stones are placed.  Then the players take it in turns to place 1-3 black stones each turn until one decides to pass; that player then becomes Black, and the other becomes White.  After that, players take it in turns to place one stone of their colour on the board on any empty hex.  If Black forms a continuous loop composed of their pieces, they win; if the board fills up with no loop of Black pieces being formed, White wins.
            
        During the initial chicken ballot phase, you may add stones by clicking on available spaces, or skip the rest of your placements (by choosing the Next Player action).  Alternatively, you may Pass at the start of your turn to take Black.  After that, you and your opponent will alternate playing one stone of your colour per turn, until the board is full or Black forms a loop.
(game "Coil" (players 2) (equipment {(board (hex Hexagon 7)) (piece "Disc" Each)}) (rules (start {(place "Disc2" {0 (- (/ (- (* {3 7 7}) 7) 2) 1) (+ 1 (- (* {3 7 7}) (* 4 7)))}) (place "Disc2" {(- 7 1) (+ 1 (/ (- (* {3 7 7}) (* 5 7)) 2)) (- (* {3 7 7}) (* 3 7))})}) {(phase "Opening" (play (or (or (move Add (piece (id "Disc" P2)) (to (sites Empty) (not (is Within (id "Disc" P2) (sites Around (to ))))) (then (if (< (count MovesThisTurn) 2) (moveAgain )))) (move Set NextPlayer (player (next )))) (if (= (count MovesThisTurn) 0) (move Pass (then (if (is Mover P1) (swap Players P1 P2 (then (note "Player 1 is now Black. Player 2 is now White." All))) (note "Player 1 remains White. Player 2 remains Black." All) (then (do (set NextPlayer (player 1)) (set Var 1))))))))) (nextPhase (= 1 (var )) "Playing")) (phase "Playing" (play (move Add (to (sites Empty)))))} (end (forEach Player (and {(= 1 (var )) (= (id Player) (mover )) (is Loop)}) (result Player Win)))))

STONE PLACEMENT Players take turns adding their stones to the board, one stone per turn. Black makes the first placement of the game. Each player will always have a placement available on his turn and must
            make one.
            
        OBJECT OF THE GAME To win you must connect two of your islands, which are exactly opposite each other, with a contiguous sequence of your stones. The stones of your islands can be included in the sequence. 
(game "Atoll" (players 2) (equipment {(board (remove (rotate 90.0 (hex Rectangle 13 12)) {138 139 148 149 0 1 10 11 69 80})) (piece "Marker" Each)}) (rules (start {(place "Marker1" (sites {132 133 134 135 131 120 108 97 85 7 6 5 4 8 19 31 42 54})) (place "Marker2" (sites {136 137 138 139 64 53 41 30 18 3 2 1 0 121 109 98 86 75}))}) (play (move Add (to (sites Empty)))) (end (if (is Mover P1) {(if (or (is Connected {(sites {132 133 134 135}) (sites {4 5 6 7})}) (is Connected {(sites {131 120 108 97 85}) (sites {54 42 31 19 8})})) (result Mover Win)) (if (or (is Connected {(sites {121 109 98 86 75}) (sites {64 53 41 30 18})}) (is Connected {(sites {136 137 138 139}) (sites {0 1 2 3})})) (result Mover Win))}))))

Players take turns placing their pieces on one space on the board, with the goal of connecting the opposite sides of the board corresponding to the color of their pieces with a line of pieces.
(game "Diagonal Hex" (players 2) (equipment {(board (hex Diamond 11)) (piece "Marker" Each) (regions P1 {(sites Side NE) (sites Side SW)}) (regions P2 {(sites Side NW) (sites Side SE)})}) (rules (meta (swap )) (play (move Add (to (sites Empty)))) (end (if (is Connected Diagonal Mover) (result Mover Win)))))

A player wins by connecting opposite sides of the square board with a chain of their pieces.
(game "Gale" (players 2) (equipment {(board (square 13)) (piece "Square" Each) (regions P1 {(sites Top) (sites Bottom)}) (regions P2 {(sites Left) (sites Right)})}) (rules (start {(place "Square1" (forEach (sites Board) (and (is Even (column (site ))) (is Odd (row (site )))))) (place "Square2" (forEach (sites Board) (and (is Even (row (site ))) (is Odd (column (site ))))))}) (play (move Add (to (sites Empty)))) (end (if (is Connected Mover) (result Mover Win)))))

The initial setup has four black pieces and four white pieces pre-placed. Black moves first by placing a black piece on any empty point of the board. White follows suit. Turns continue to alternate. A piece can be placed on the midpoint of a square only if all four corners of that square are currently unoccupied. Once placed, pieces do not move. Captured pieces are immediately removed from the game.
            
            The rule for capturing allows a player to capture two enemy pieces in a single turn. All of the following conditions must be met:
            - the two enemy pieces occupy opposite corners of a square;
            - a third corner of the square is already occupied by a piece owned by the capturing player;
            - the square's midpoint is unoccupied.
            
            The capture is executed by placing a piece on the remaining unoccupied corner of the square. If the capturing move also simultaneously completes a second square on the board where the same conditions prevail, then the move results in the capture of four enemy pieces instead of two.
            
        Black tries to connect the two horizontal (black) sides with an unbroken chain of black pieces, while White tries to connect the two vertical (white) sides with an unbroken chain of white pieces. The first to do so wins the game.
(game "Onyx" (players 2) (equipment {(board (keep (rotate -45.0 (subdivide (tiling T33434 7 7) 4)) (poly {{-6.5 1.75} {-6.5 12.75} {4.5 12.75} {4.5 1.75}})) Vertex) (piece "Disc" Each) (regions P1 {(sites Side W) (sites Side E)}) (regions P2 {(sites Side N) (sites Side S)})}) (rules (start {(place "Disc1" (sites {15 24 119 128})) (place "Disc2" (sites {20 27 116 123}))}) (play (move Add (to (forEach (sites Empty) (if (is In (site ) (forEach (sites Board) (and (= 4 (count Sites (sites Around (site )))) (not (is In (site ) (sites Outer)))))) (all Sites (sites Around (site )) (is Empty (site ))) true))) (then (forEach Site (forEach (sites Board) (and (= 4 (count Sites (sites Around (site )))) (not (is In (site ) (sites Outer))))) (if (and {(is Empty (site )) (is In (last To) (sites Around (site ))) (all Sites (sites Around (site )) (is Occupied (site ))) (= 2 (count Sites (forEach (sites Around (site )) (is Enemy (who (site )))))) (= 2 (count Sites (forEach (sites Around (site )) (and (is In (site ) (sites Around (last To))) (is Enemy (who (site )))))))}) (remove (forEach (sites Around (site )) (is Enemy (who (site )))))))))) (end (if (is Connected Mover) (result Mover Win)))))

The rules are similar to Hex.
            
            Players take turns placing their pieces on one space on the board, with the goal of connecting the opposite sides of the board corresponding to the color of their pieces with a line of pieces.
            
        However, in the first turn, P1 places a piece of their colour as first move. Then, players alternate placing two pieces of their colour per turn. No swap rule is needed.
(game "Esa Hex" (players 2) (equipment {(board (hex Diamond 11)) (piece "Marker" Each) (regions P1 {(sites Side NE) (sites Side SW)}) (regions P2 {(sites Side NW) (sites Side SE)})}) (rules {(phase "Opening" P1 (play (move Add (to (sites Empty)))) (nextPhase "Playing")) (phase "Playing" (play (move Add (to (sites Empty)) (then (if (= 0 (count MovesThisTurn)) (moveAgain ))))))} (end (if (is Connected Mover) (result Mover Win)))))

Players take turns placing one piece of their colour on empty cells; the piece they place may not be adjacent to the last piece placed by their opponent. A player wins by connecting all three board sides with a connected group of their pieces.
(game "Tabu Y" (players 2) (equipment {(board (hex Triangle 11)) (piece "Disc")}) (rules (play (move Add (to (sites Empty) (not (is In (to ) (sites Around (last To))))))) (end (if (is Connected 3 Sides) (result Mover Win)))))

Players take turns placing their pieces on a space on the board, with the goal of connecting all three sides of the triangle with their pieces. Corners count as belonging to both sides they touch.
(game "Y (Hex)" (players 2) (equipment {(board (tri Hexagon 7) Vertex) (piece "Marker" Each) (regions "SSW" {(sites Side S) (sites Side SW)}) (regions "NNW" {(sites Side NW) (sites Side N)}) (regions "NESE" {(sites Side NE) (sites Side SE)})}) (rules (play (move Add (to (sites Empty)))) (end (if (is Connected {(sites "SSW") (sites "NNW") (sites "NESE")}) (result Mover Win)))))

Definitions
            Group: Either a single stone (a group of one) or any number of stones of the same color connected through a continuous series of orthogonal adjacencies.
            
            Rules
            Scaffold is a drawless connection game played on the intersections of a square grid using stones (as in Go). Black is trying to connect N-S edges of the board, White E-W with an orthogonally connected group.
            
            First player places a single black stone on any grid intersection, after which the second player decides which color they will play (pie rule). Players then alternate taking turns.
            
        On your turn, place a stone of your color on an empty point. Then, if possible, place a stone of your color on an empty point that is orthogonally adjacent to two groups of your color, and keep making such placements until no more are possible.
(game "Scaffold" (players 2) (equipment {(board (square 12) Vertex) (piece "Marker" Each) (regions P1 {(sites Side N) (sites Side S)}) (regions P2 {(sites Side W) (sites Side E)})}) (rules (meta (swap )) (play (if (< 0 (count MovesThisTurn)) (do (move Add (to (sites Around (sites Occupied Mover) Empty) (apply (set Var "NumberOfFriendlyGroupsBeforePlacement" (count Groups Orthogonal (is Mover (who (to )))))))) (< (count Groups Orthogonal (is Mover (who (to )))) (var "NumberOfFriendlyGroupsBeforePlacement"))) (move Add (to (sites Empty))) (then (if (can Move (do (move Add (to (sites Around (sites Occupied Mover) Empty) (apply (set Var "NumberOfFriendlyGroupsBeforePlacement" (count Groups Orthogonal (is Mover (who (to )))))))) (< (count Groups Orthogonal (is Mover (who (to )))) (var "NumberOfFriendlyGroupsBeforePlacement")))) (moveAgain ))))) (end (if (is Connected Orthogonal Mover) (result Mover Win)))))

Players take turns placing a piece of their colour on an empty cell. A player wins by connecting all three board sides with a connected group of their pieces.
(game "Y" (players 2) (equipment {(board (hex Triangle 11)) (piece "Disc")}) (rules (play (move Add (to (sites Empty)))) (end (if (is Connected 3 Sides) (result Mover Win)))))

Players take turns placing a stone on an empty cell. A player wins as soon as some or all of their stones form a group with the following property: If all the cells of that group where removed (imagined away) from the board, none of the resulting partitions of the board would contain a majority of the set of cells comprising both the center cell and the perimeter cells (a majority relative to the entire intact board, that is, not of the imagined result of partitioning it).
(game "Gyre" (players 2) (equipment {(board (hex 7)) (piece "Disc" Each)}) (rules (meta (swap )) (play (move Add (to (sites Empty)))) (end (if (>= (count Sites (union (sites Outer) (sites {(centrePoint )}))) (max (results (difference (sites Board) (sites Group (last To))) 2 (* (to ) (count Sites (intersection (union (sites Outer) (sites {(centrePoint )})) (sites Group (from ) (not (is In (to ) (sites Group (last To))))))))))) (result Mover Win)))))

White starts by placing one disc or ring on any cell of the board. 
            
            Then, each player in turn must perform two actions: 
            
            1. add one of her discs to an empty cell or move one of her discs on the board into any ring located in a neighbor cell, and 
            
            2. add one of her rings to an empty cell or move one of her rings on the board to a neighbor cell occupied by a disc. 
            
        The disc-ring pair (a disc inside a ring) cannot be modified for the rest of the game.
(game "DuploHex" (players 2) (equipment {(board (hex Diamond 7)) (piece "DoubleCounter" Each) (piece "Disc" Each (move Step (to (or (= (what (to )) (id "Ring1")) (= (what (to )) (id "Ring2")))) (then (promote (last To) (piece "DoubleCounter") Mover)))) (piece "Ring" Each (move Step (to (or (= (what (to )) (id "Disc1")) (= (what (to )) (id "Disc2")))) (then (promote (last To) (piece "DoubleCounter") Mover)))) (hand Each 2) (regions P1 {(sites Side NE) (sites Side SW)}) (regions P2 {(sites Side NW) (sites Side SE)})}) (rules (start {(place "Disc1" (handSite P1 0) 25) (place "Ring1" (handSite P1 1) 25) (place "Disc2" (handSite P2 0) 25) (place "Ring2" (handSite P2 1) 25)}) {(phase "Placement" (play (move (from (sites Hand P1)) (to (sites Empty)) (then (moveAgain )))) (nextPhase "Game")) (phase "Game" (play (if (is Odd (count Moves)) (or (move (from (handSite Mover 0)) (to (sites Empty)) (then (moveAgain ))) (forEach Piece "Disc")) (or (move (from (handSite Mover 1)) (to (sites Empty))) (forEach Piece "Ring")))))} (end (if (is Connected Mover) (result Mover Win)))))

This game is played on a square grid board of any size, though 13x13 or 19x19 are recommended. Then the players take it in turns to place 1-3 black stones each turn until one decides to pass; that player then becomes Black, and the other becomes White.  After that, players take it in turns to place one stone of their colour on the board on any empty point.  If Black connects any two sides of the board with a single orthogonally-connected group, they win; White wins if they connect all four sides with a group connected either orthogonally or diagonally.
            
        During the initial chicken ballot phase, you may add stones by clicking on available spaces, or skip the rest of your placements (by choosing the Next Player action).  Alternatively, you may Pass at the start of your turn to take Black.  After that, you and your opponent will alternate playing one stone of your colour per turn, until one player forms a connection (draws are impossible in Pippinzip).
(game "Pippinzip" (players 2) (equipment {(board (square 13) Vertex) (piece "Disc" Each)}) (rules {(phase "Opening" (play (or (or (move Add (piece (id "Disc" P2)) (to (sites Empty)) (then (if (< (count MovesThisTurn) 2) (moveAgain )))) (move Set NextPlayer (player (next )))) (if (= (count MovesThisTurn) 0) (move Pass (then (if (is Mover P1) (swap Players P1 P2 (then (note "Player 1 is now Black. Player 2 is now White." All))) (note "Player 1 remains White. Player 2 remains Black." All) (then (do (set NextPlayer (player 1)) (set Var 1))))))))) (nextPhase (= 1 (var )) "Playing")) (phase "Playing" (play (move Add (to (sites Empty)))))} (end {(if (and (not (= 1 (var ))) (or (is Connected Orthogonal {(sites Side N) (sites Side S)}) (is Connected Orthogonal {(sites Side E) (sites Side W)}))) (result Mover Win)) (if (and {(= (id P2) (mover )) (or (is Connected Orthogonal {(sites Side N) (sites Side S)}) (is Connected Orthogonal {(sites Side E) (sites Side W)}))}) (result P2 Win)) (if (and {(= (id P1) (mover )) (is Connected All {(sites Side N) (sites Side S) (sites Side E) (sites Side W)})}) (result P1 Win))})))

EDGES - Each player owns two opposite edges, say, the first player has top and bottom edges, while the second player has left and right edges.
            
            DROP - Each player drops one of his stones on an empty cell.
            - If at least one opponent stone is between that stone and another friendly stone (orthogonal or diagonal), then all opponent stones that were between those stones flip their colour.
            - Stones cannot be dropped on the opponent's edges (including corners).
            
            GOAL - Wins the first player who manages to do a path connecting his two opposite edges.
            - Two tiles diagonally aside are not continuous in a path.
        - The corners belong to both edges.
(game "Troll" (players 2) (equipment {(board (square 8)) (piece "Ball" Each) (regions P1 {(sites Top) (sites Bottom)}) (regions P2 {(sites Left) (sites Right)})}) (rules (play (move Add (to (if (is Mover P1) (difference (sites Empty) (union (sites Left) (sites Right))) (difference (sites Empty) (union (sites Top) (sites Bottom))))) (then (custodial (from (last To)) (between (is Enemy (who (between ))) (apply (and (remove (between )) (add (piece (id "Ball" Mover)) (to (between )))))) (to (is Friend (who (to )))))))) (end {(if (!= 0 (count Sites (forEach (sites Occupied P1) (is Connected (site ) Orthogonal P1)))) (result P1 Win)) (if (!= 0 (count Sites (forEach (sites Occupied P2) (is Connected (site ) Orthogonal P2)))) (result P2 Win))})))

Each player has an allocated colour. The game is played in turns. On his first move, the second player may elect to swap colours (swap option). This is to prevent overly strong opening moves.
            
            Each turn the current player places one of their pegs on an empty hole, which may conquer one or more cells. A cell is conquered by the first player to occupy at least half of its surrounding holes. A blue rectangle is placed on cells conquered by Blue, and a red rectangle is placed on cells conquered by Red.
            The central cell, which has five holes, is conquered by the player who has occupied any three of these holes. 
        The first player that completes a contiguous chain of connected cells of his colour between the 2 sides of his colour wins the game.  
(game "ConHex" (players 2) (equipment {(board (add (keep (splitCrossings (merge (rotate 45.0 (dual (square 12 Concentric))) (shift 3.0 3.0 (scale 6.0 (square 1))))) (poly {{3.0 3.0} {3.0 9.0} {9.0 9.0} {9.0 3.0}})) {{6.0 6.0}})) (piece "Marker" Each) (piece "Rectangle" Each) (regions "Holes" (union (difference (sites Board Vertex) (sites Outer Vertex)) (sites Corners Vertex))) (regions P1 {(sites Side N) (sites Side S)}) (regions P2 {(sites Side W) (sites Side E)})}) (rules (meta (swap )) (play (move Add (to Vertex (sites Empty Vertex) (is In (to ) (sites "Holes"))) (then (forEach Site (sites Incident Cell Vertex (last To)) (if (if (is In (site ) (sites Centre)) (>= (+ (count Sites (intersection (intersection (sites Incident Vertex Cell (site )) (sites "Holes")) (sites Occupied Mover Vertex))) (if (= (mover ) (who Vertex (centrePoint Vertex))) 1 0)) 3) (>= (count Sites (intersection (intersection (sites Incident Vertex Cell (site )) (sites "Holes")) (sites Occupied Mover Vertex))) (if (is Even (count Sites (intersection (sites Incident Vertex Cell (site )) (sites "Holes")))) (/ (count Sites (intersection (sites Incident Vertex Cell (site )) (sites "Holes"))) 2) (+ (/ (count Sites (intersection (sites Incident Vertex Cell (site )) (sites "Holes"))) 2) 1)))) (claim (piece (id "Rectangle" Mover)) (to Cell (site )))) (then (forEach Site (forEach (sites Incident Cell Vertex (last To)) (is Mover (who Cell (site )))) (if (is Connected (site ) Mover) (trigger "Connected" Mover)))))))) (end {(if (is Triggered "Connected" Mover) (result Mover Win)) (if (<= 52 (count Moves)) (result Mover Draw))})))

Players take turns placing a piece of their colour at an empty cell, and win by connecting their board sides with a chain of their pieces.
(game "Hex" (players 2) (equipment {(board (hex Diamond 11)) (piece "Marker" Each) (regions P1 {(sites Side NE) (sites Side SW)}) (regions P2 {(sites Side NW) (sites Side SE)})}) (rules (meta (swap )) (play (move Add (to (sites Empty)))) (end (if (is Connected Mover) (result Mover Win)))))

Players take turns placing pieces on the board. There are three winning conditions: 1. Connect any three edges (without corner points), or 2. Make a bridge connection between any two corners, or 3. loop around any site.
(game "Havannah" (players 2) (equipment {(board (hex 8)) (piece "Marker" Each)}) (rules (play (move Add (to (sites Empty)))) (end (if (or {(is Loop) (is Connected 3 SidesNoCorners) (is Connected 2 Corners)}) (result Mover Win)))))

Goal: 
            You try to both reduce the number of your own groups as much as possible, and also to block your opponent's ability to reduce his groups down to fewer than yours. Whoever decides to end the game must fill the empty spaces with opponent's pieces, and only then, wins by having equal or fewer groups.
            
            Play:
            Starting with the board empty, player's take turns placing a piece of their color on an empty position that does not abut any friendly piece. If it is impossible to place a piece, the player, instead, moves a piece to the first empty position in any direction. But whenever a new opportunity for placement is available, the turn must be used for placement.
            
            Ending the Game:
            
            The game ends at the choice of the player about to move, but only at the beginning of a turn in which there is no forced placement. 
            
            Before scoring, the empty spaces are filled with the opponent's pieces. The player who ended the game wins unless the opponent has fewer groups. Because the empty spaces are filled with opponent's pieces, a player who ends the game too soon will lose. On the other hand, since ties go to the player who ends the game, it is important to end the game as soon as you can actually win.
            
            Variations: 
        Options are available to select the board size, and also to use other movement rules, instead of the standard one.
(game "Abrobad" (players 2) (equipment {(board (hex Limping 2)) (piece "Hex" Each)}) (rules (play (priority (move Add (to (sites Empty) (= 0 (count Sites (sites Around (to ) Own))))) (or (forEach Piece (move Hop (between (range 0 18) (is Occupied (between ))) (to (is Empty (to ))))) (move Propose "Conclude" (then (if (is Proposed "Conclude") (add (piece (next )) (to (sites Empty)) (then (and (set Score Mover (count Groups (= (who (to )) (mover )))) (set Score Next (count Groups (= (who (to )) (next ))))))))))))) (end (if (is Proposed "Conclude") (if (<= (score Mover) (score Next)) (result Mover Win)) (result Next Win)))))

DEFINITIONS
            Group: like-colored stones adjacent to each other. Singletons are considered groups of size 1.
            Path: an empty point, or an uninterrupted straight line of empty points that have a pair of like-colored stones on both ends, which are not part of the same group. Such a pair is said to have a path.
            Dead group: a group in which all stones belonging to it have no path. If any stone belonging to a group has a path, the group is said to have a path.
            
            GAME PLAY (Overview)
            Decide which player plays as which color (Light or Dark) in any adequate way.
            Light goes first, then alternate turns.
            On each player's first turn, players place a stone of their own color on any empty point.
            On each player's second turn, players place another stone of their color so that their own two stones have a path.
            
            Then players take actions below on each turn, in this order.
            1. Remove all opponent’s dead groups. This happens automatically in Ludii.
            2. Place a stone of their own color on an empty point that is on at least one same straight line with an existing friendly stone, and no opponent's stone in between. Passing is not allowed.
            
        After the second turn, the player with no stones of their color on the board at the beginning of their turn loses.
(game "Meridians" (players 2) (equipment {(board (dual (hex Prism 7 6)) Vertex) (piece "Disc" Each)}) (rules {(phase "Opening" (play (move Add (to (if (< 0 (count Sites (sites Occupied Mover))) (forEach (sites Empty) (and (> (count Pieces Mover (sites LineOfSight (site ))) 0) (= (count Sites (sites Around (site ) Own)) 0))) (sites Empty))))) (nextPhase (= 4 (count Moves)) "Play")) (phase "Play" (play (if (can Move (move Add (to (forEach (sites Empty) (> (count Pieces Mover (sites LineOfSight (site ))) 0))))) (move Add (to (forEach (sites Empty) (> (count Pieces Mover (sites LineOfSight (site ))) 0))) (then (forEach Group (if (all Sites (sites ) (= 0 (count Sites (difference (intersection (sites Occupied Mover) (sites Direction (site ) (is Occupied (to )) true)) (sites ))))) (remove (sites )))))) (move Pass (then (forEach Group (if (all Sites (sites ) (= 0 (count Sites (difference (intersection (sites Occupied Mover) (sites Direction (site ) (is Occupied (to )) true)) (sites ))))) (remove (sites )))))))))} (end (if (and (< 4 (count Moves)) (or (= 0 (count Sites (sites Occupied P1))) (= 0 (count Sites (sites Occupied P2))))) (result Mover Loss)))))

Omny is played on the cells of any hexagonal grid where some or all of the cells are designated star cells. Players take turns placing a stone of one's own color on an empty cell. A group is a set of connected stones of the same color. A cut of a group X is any set of connected cells (empty or occupied by either player) including no stones in X. You win by making a group such that none of its cuts include more than half the cells of the board. For serious play it is advised to play with a balance rule in force.
            
        In Misère Omny you lose if you make a group whose cuts each contain no more than half of the star cells.
(game "Omny" (players 2) (equipment {(board (hex 7)) (piece "Disc" Each)}) (rules (play (if (= 1 (var )) (or (move Swap Players P1 P2) (move Add (to (sites Empty)) (then (set Var 0)))) (move Add (to (sites Empty)) (then (if (= 1 (count Moves)) (set Var 1)))))) (end (if (>= (count Sites (sites Board)) (max (results (difference (sites Board) (sites Group (last To))) 2 (* (to ) (count Sites (intersection (sites Board) (sites Group (from ) (not (is In (to ) (sites Group (last To))))))))))) (result Mover Win)))))

On your turn, place a single piece of your color on an empty position that is not next to another friendly piece. This is compulsory whenever it is possible to do so.
            
            When it is not possible to place a piece; then instead, step one of your pieces to an adjacent empty position. 
            
            You win either:
            -- when all your pieces become connected, or
        -- when you cut-off your opponent from being able to connect theirs.
(game "Make Muster" (players 2) (equipment {(board (rotate (- 90.0 62.0) (square (poly {{1.0 5.0} {2.0 4.0} {8.0 1.0} {9.0 2.0} {12.0 8.0} {11.0 9.0} {5.0 12.0} {4.0 11.0}}))) Cell) (piece "Disc" Each (move Step (to (is Empty (to )))))}) (rules (play (priority (move Add (to (sites Empty) (no Pieces Mover (sites Around (to ) Adjacent)))) (forEach Piece))) (end (if (or (and {(= 1 (count Groups All (= (who (to )) Mover))) (< 1 (count Pieces Mover))}) (< 1 (count Groups All (!= (mover ) (who (to )))))) (result Mover Win)))))

A player wins by connecting all of one's pieces into a contiguous body so that they are connected orthogonally or diagonally. Players alternate moves. Pieces move orthogonally or diagonally. A piece moves exactly as many spaces as there are pieces (belonging to both the player and their opponent) on the line in which it is moving. A piece may jump over the player's own pieces, but not over one belonging to the opponent. A piece can capture piece belonging to the opponent by landing on it.
(game "Lines of Action" (players 2) (equipment {(board (square 8)) (piece "Disc" Each (or {(move Hop (directions {N S}) (between (exact (- (count Sites (difference (sites Column (column (from ))) (sites Empty))) 1)) (not (is Enemy (who (between ))))) (to (not (is Friend (who (to )))) (apply (if (is Enemy (who (to ))) (remove (to )))))) (move Hop (directions {W E}) (between (exact (- (count Sites (difference (sites Row (row (from ))) (sites Empty))) 1)) (not (is Enemy (who (between ))))) (to (not (is Friend (who (to )))) (apply (if (is Enemy (who (to ))) (remove (to )))))) (move Hop (directions {NE SW}) (between (exact (- (count Sites (difference (sites Direction (from ) (directions {NE SW}) true) (sites Empty))) 1)) (not (is Enemy (who (between ))))) (to (not (is Friend (who (to )))) (apply (if (is Enemy (who (to ))) (remove (to )))))) (move Hop (directions {NW SE}) (between (exact (- (count Sites (difference (sites Direction (from ) (directions {NW SE}) true) (sites Empty))) 1)) (not (is Enemy (who (between ))))) (to (not (is Friend (who (to )))) (apply (if (is Enemy (who (to ))) (remove (to ))))))}))}) (rules (start {(place "Disc1" (difference (union (sites Top) (sites Bottom)) (sites Corners))) (place "Disc2" (difference (union (sites Right) (sites Left)) (sites Corners)))}) (play (forEach Piece)) (end {(if (and (= 1 (count Groups (= (who (to )) P1))) (= 1 (count Groups (= (who (to )) P2)))) (result Mover Draw)) (if (= 1 (count Groups (= (who (to )) P1))) (result P1 Win)) (if (= 1 (count Groups (= (who (to )) P2))) (result P2 Win))})))

Players take turns placing pieces of any colour. They can't  create groups of more than five pieces which are adjacent to each other. 
            
            A group of 4 pieces is called a quart. A group of 5 pieces is called a quint.
            
            Players win if they finish their turn with a friendly quint, but lose if they finish their turn with a friendly quart on the board.
            
            Note: The winning and losing conditions for a player are checked after their move, only on their own turn.
            
        An end condition (win or loss) is effective when it occurred first and cannot be averted.
(game "Manalath" (players 2) (equipment {(board (rotate 90.0 (hex 5))) (piece "Marker" Each) (hand Shared 2)}) (rules (start {(place "Marker1" (handSite Shared)) (place "Marker2" (handSite Shared 1))}) (play (do (move (from (sites Hand Shared)) (to (sites Empty)) true) (< (size Group (last To)) 6) (then (forEach Site (sites Occupied Mover "Board") (if (= (size Group (site )) 5) (set Var "Group5" 1) (if (= (size Group (site )) 4) (set Var "Group4" 1))))))) (end {(if (= (var "Group4") 1) (result Mover Loss)) (if (= (var "Group5") 1) (result Mover Win))})))

Players take turns placing a stone of their own color on any empty cell of a hexagonal grid of hexagons (a hexhex board). 
            The game is over when the board is full, and the player with the lower score wins. 
            If both players have the same number of groups, your score is your number of odd-sized groups, otherwise it is simply your number of groups.
            
            The running score only shows the number of odd groups (with a minus sign in front of it, for technical reasons).
            
        Groups of odd size is marked with a red outline.
(game "Mono" (players 2) (equipment {(board (hex 5)) (piece "Disc" Each)}) (rules (meta (swap )) (play (move Add (to (sites Empty)) (then (and (set Score Mover 0) (forEach Group Orthogonal (is Mover (who (to ))) (if (is Odd (count Sites (sites ))) (and (addScore Mover -1) (forEach Site (sites ) (set State (site ) 1))) (forEach Site (sites ) (set State (site ) 0)))))))) (end (if (is Full) {(if (= (count Groups (= (id P1) (who (to )))) (count Groups (= (id P2) (who (to ))))) (byScore )) (if true (byScore {(score P1 (- (count Groups (= (id P1) (who (to )))))) (score P2 (- (count Groups (= (id P2) (who (to ))))))}))}))))

Pieces move to any adjacent empty square or jumping one of their pieces over an adjacent piece to the empty point immediately beyond. The game is won by the first player to move all six pieces into a single orthogonally connected group
(game "Groups" (players 2) (equipment {(board (square 8)) (piece "Disc" Each (or (move Step (to (is Empty (to )))) (move Hop (between (is Occupied (between ))) (to (is Empty (to ))))))}) (rules (start {(place "Disc1" {"D3" "C4" "E4" "D5" "F5" "E6"}) (place "Disc2" {"E3" "D4" "F4" "C5" "E5" "D6"})}) (play (forEach Piece)) (end (if (= 1 (count Groups Orthogonal (= (who (to )) Mover))) (result Mover Win)))))

Definitions
            A group is a stone along with all other stones one could reach from it through a series of steps between adjacent stones of its color.
            
            The size of a group is the number of stones in it.
            
            Play
            Black plays first, then turns alternate. On your turn, place a stone of your color on an empty cell. When the board is full, the winner is determined as follows:
            
            (1) Let n equal 0.
            (2) The player with fewer groups bigger than n stones wins.
            (3) If no winner is found, increase n by 1 and go back to (2).
            
        The pie rule is used in order to make the game fair. This means White will have the option, on their first turn only, to swap sides with their opponent instead of making a regular move.
(game "Yoin" (players 2) (equipment {(board (hex 7)) (piece "Disc" Each)}) (rules (meta (swap )) (play (move Add (to (sites Empty)) (then (if (is Full) (do (set Var "CutOff" 0) (do (while (and (= 0 (- (count Groups (= (id P1) (who (to ))) (var "CutOff")) (count Groups (= (id P2) (who (to ))) (var "CutOff")))) (!= 0 (+ (count Groups (= (id P1) (who (to ))) (var "CutOff")) (count Groups (= (id P2) (who (to ))) (var "CutOff"))))) (set Var "CutOff" (+ 1 (var "CutOff")))) (and (set Score P1 (count Groups (= (id P1) (who (to ))) (var "CutOff"))) (set Score P2 (count Groups (= (id P2) (who (to ))) (var "CutOff")))))))))) (end (if (is Full) {(if (< (score P1) (score P2)) (result P1 Win)) (if (> (score P1) (score P2)) (result P2 Win))}))))

Hermit is a two player abstract game in which players drop stones to create edgewise connected, owned groups of odd sizes 1, 3 and 5 exclusively. 
            The game ends when neither player can legally place a stone. 
            The player with the most groups on the board at game's end wins. 
            Ties are broken by the most groups of size 1 (hermits), then by the most groups of size 3, and finally, the last player to place a stone wins.
            
            Scores are formatted 'aa1133', where aa = count of all groups, 11 = count of size 1 groups, and 33 = count of size 3 groups.
            
        It is helpful to turn on 'Show Legal Moves' (Alt-M).
(game "Hermit" (players 2) (equipment {(board (tri Hexagon 5) Vertex) (piece "Marker" Each) (piece "Marker" Neutral)}) (rules (start {(set Score P1 0) (set Score P2 0)}) (play (do (move Add (to (sites Empty))) (or {(= 1 (size Group (last To) Orthogonal)) (= 3 (size Group (last To) Orthogonal)) (= 5 (size Group (last To) Orthogonal))}) (then (addScore Mover (- (+ {(* 10000 (count Groups Orthogonal (= (who (to )) (mover )))) (* 100 (- (count Groups Orthogonal (= (who (to )) (mover ))) (count Groups Orthogonal (= (who (to )) (mover )) 3))) (- (- (count Groups Orthogonal (= (who (to )) (mover ))) (count Groups Orthogonal (= (who (to )) (mover )) 5)) (- (count Groups Orthogonal (= (who (to )) (mover ))) (count Groups Orthogonal (= (who (to )) (mover )) 3)))}) (score Mover)))))) (end (if (all Passed) {(if (> (+ {(* 10000 (count Groups Orthogonal (= (who (to )) P1))) (* 100 (- (count Groups Orthogonal (= (who (to )) P1)) (count Groups Orthogonal (= (who (to )) P1) 3))) (- (- (count Groups Orthogonal (= (who (to )) P1)) (count Groups Orthogonal (= (who (to )) P1) 5)) (- (count Groups Orthogonal (= (who (to )) P1)) (count Groups Orthogonal (= (who (to )) P1) 3)))}) (+ {(* 10000 (count Groups Orthogonal (= (who (to )) P2))) (* 100 (- (count Groups Orthogonal (= (who (to )) P2)) (count Groups Orthogonal (= (who (to )) P2) 3))) (- (- (count Groups Orthogonal (= (who (to )) P2)) (count Groups Orthogonal (= (who (to )) P2) 5)) (- (count Groups Orthogonal (= (who (to )) P2)) (count Groups Orthogonal (= (who (to )) P2) 3)))})) (result P1 Win)) (if (< (+ {(* 10000 (count Groups Orthogonal (= (who (to )) P1))) (* 100 (- (count Groups Orthogonal (= (who (to )) P1)) (count Groups Orthogonal (= (who (to )) P1) 3))) (- (- (count Groups Orthogonal (= (who (to )) P1)) (count Groups Orthogonal (= (who (to )) P1) 5)) (- (count Groups Orthogonal (= (who (to )) P1)) (count Groups Orthogonal (= (who (to )) P1) 3)))}) (+ {(* 10000 (count Groups Orthogonal (= (who (to )) P2))) (* 100 (- (count Groups Orthogonal (= (who (to )) P2)) (count Groups Orthogonal (= (who (to )) P2) 3))) (- (- (count Groups Orthogonal (= (who (to )) P2)) (count Groups Orthogonal (= (who (to )) P2) 5)) (- (count Groups Orthogonal (= (who (to )) P2)) (count Groups Orthogonal (= (who (to )) P2) 3)))})) (result P2 Win))} (result Mover Win)))))

Goal: Score the most points: 
            -- One point for each stone in one's largest group.
            -- Bonus points are also added to the scores according to the selected option.
            
            The board starts empty. 
            
            Players take turns in alternation, placing one of their own stones onto an empty site. 
            
            Restriction on placement:
            Every site of the board must remain connected to an empty perimeter site via a continuous path of empty sites.
            
            There is no passing. 
            
            The game ends when no more placements can be made.  
            
            Players score one point for every stone in their largest group, then, if applicable, score bonus points according to the selected option.
            
            Bonus Options are:
            -- Count of one's own groups. Standard
            -- Count of the opponent's groups
            -- No Bonus
            
            The player with the higher score wins. 
            
            If the scores are tied, the game is decided by the tiebreaker option used: 
            A: Cascading largest group LOSES -- i.e. negative scores -- This excludes tied pairs; If all groups are paired, last to place. 
        B: Last player to have placed a stone.
(game "Brain Coral" (players 2) (equipment {(board (hex Limping (- 5 1)) Cell) (piece "Ball" Each) (piece "Disc" Each)}) (rules (start (set Score Each 0)) (play (do (move Add (to (sites Empty))) (all Sites (sites Around (last To) Orthogonal true) (or (and (is Empty (site )) (is In (site ) (sites Outer))) (!= 1000000000 (count Steps (step Orthogonal (to (is Empty (to )))) (site ) (difference (sites Outer) (site )))))) (then (set Var "MoverScore" (+ (max 0 (max (sizes Group Orthogonal Mover))) (count Groups Orthogonal (= (who (to )) (mover )))) (then (set Var "NextScore" (+ (max 0 (max (sizes Group Orthogonal Next))) (count Groups Orthogonal (= (who (to )) (next )))) (then (if (= (var "MoverScore") (var "NextScore")) (and (set Score Mover (* -1 (max 0 (max (difference (sizes Group Orthogonal Mover) (sizes Group Orthogonal Next)))))) (set Score Next (* -1 (max 0 (max (difference (sizes Group Orthogonal Next) (sizes Group Orthogonal Mover))))))) (and (set Score Mover (var "MoverScore")) (set Score Next (var "NextScore"))))))))))) (end (if (no Moves Next) {(if (= (score Mover) (score Next)) (result Mover Win)) (if (!= (score Mover) (score Next)) (byScore ))}))))

Players take turns placing one stone of either color on the board, until it is full. Player One wins if there is an odd number of groups with at least five pieces on the board, Player Two wins otherwise.
(game "Odd" (players 2) (equipment {(board (rotate 90.0 (hex 5))) (piece "Marker" Each) (hand Shared 2)}) (rules (start {(place "Marker1" (handSite Shared)) (place "Marker2" (handSite Shared 1))}) (play (move (from (sites Hand Shared)) (to (sites Empty)) true)) (end (if (is Full) (if (is Odd (+ (count Groups (= (who (to )) P1) 5) (count Groups (= (who (to )) P2) 5))) (result P1 Win)) (result P2 Win)))))

Players take turns placing a stone of their own color on any empty cell of a hexagonal grid of hexagons (a hexhex board). 
            The game is over when the board is full, and the player with the lower score wins. 
            Your score is 1 point per odd-sized group and 2 points even-sized group.
            
        In this implementation, you get -1 per odd-sized group and -2 per even-sized group, so the winner will be the player with the higher score.
(game "Elea" (players 2) (equipment {(board (hex 5)) (piece "Disc" Each)}) (rules (meta (swap )) (play (move Add (to (sites Empty)) (then (and (set Score Mover 0) (forEach Group Orthogonal (is Mover (who (to ))) (if (is Odd (count Sites (sites ))) (and (addScore Mover -1) (forEach Site (sites ) (set State (site ) 0))) (and (addScore Mover -2) (forEach Site (sites ) (set State (site ) 1))))))))) (end (if (is Full) (byScore )))))

Goal: Scoring is based on your largest group (x2), with an extra point given to the first player to create a given size. 
            The player with the largest group at the end of the game thus wins, and ties go to the first player to achieve this goal.
            
            Setup: 
            Yellow starts by creating a set-up, then Orange begins actual play - Pass to skip this phase
            
            To create a set-up, Yellow first places a black blocking stone on any intersection and then a Yellow stone on an empty edge position. Orange then either begins play, or else exchanges the yellow piece with his own.
            
            Play:
            Players take turns placing their piece on an empty intersection that is either along the edge or next to another fiendly piece, but never adjacent to an enemy position.
            
            These placements are subject to 2 possible additional restrictions selected by the players before starting:
            
        A) The number range of friendly neighbors the piece being placed may have: (Standard is to play with no restriction.)
        
        and/or
        
    B) The maximum number of neighbors that are allowed for the pieces against which the piece may be placed, with 2 being standard play.
    
    Ending the game.
Play continues until both players pass consecutively, and then the final scores are compared.
(game "RootZone" (players 2) (equipment {(board (tri {4 6 4 7 4}) Vertex) (piece "Disc" Each) (piece "Disc" Neutral)}) (rules (play (if (= -1 (counter )) (or (move Pass) (move Add (piece "Disc0") (to (sites Board)))) (or {(if (= 1 (counter )) (move Select (from (sites Occupied Enemy)) (then (remove (last To) (then (add (to (last To)))))))) (move Pass) (move Add (to (difference (union (sites Outer) (sites Around (sites Occupied Mover))) (union {(sites Around (sites Occupied Enemy)) (sites Around (forEach (sites Occupied Mover) (<= 3 (count Pieces Mover (sites Around (site )))))) (sites Around (sites Occupied Neutral))})) (and (is Empty (to )) (>= 6 (count Pieces Mover (sites Around (to )))))) (then (if (> (* 2 (size Group (last To))) (score Mover)) (if (> (* 2 (size Group (last To))) (score Next)) (set Score Mover (+ 1 (* 2 (size Group (last To))))) (set Score Mover (* 2 (size Group (last To))))))))}))) (end (if (all Passed) (byScore )))))

GROUP - A connected chain of friendly stones.
            
            TURN - Initially, Black drops one stone of either color, then for the remaining turns players drop two stones of either color.
            
        GOAL - After the board is full, wins the player with the higher product between its two largest groups. If both products are equal, wins the player with less stones on board (note: draws are impossible).
(game "Product" (players 2) (equipment {(board (hex 5)) (piece "Marker" Each)}) (rules (play (move Add (to (sites Empty)))) (end (if (is Full) (byScore {(score P1 (* (max (sizes Group P1)) (max (difference (sizes Group P1) (max (sizes Group P1)))))) (score P2 (* (max (sizes Group P2)) (max (difference (sizes Group P2) (max (sizes Group P2))))))})))))

Players take turns placing a piece of each color in an empty site. Play ends at the start of the first players turn, if all the players would not be able to complete their turn. Example: for 2 players less than 4 empty sites.
            
        Scores are awarded based on the sizes of the groups of each color on the board, which are multiplied. The player with the highest score wins.
(game "Omega" (players 2) (equipment {(board (hex 5)) (piece "Marker" Each)}) (rules (play (move Add (piece (+ 1 (% (count Moves) (count Players)))) (to (sites Empty)) (then (if (!= (count MovesThisTurn) (- (count Players) 1)) (moveAgain ))))) (end (if (and {(not (is Mover P1)) (is Next P1) (> (^ (count Players) 2) (count Sites (sites Empty)))}) (byScore {(score P1 (* (sizes Group P1))) (score P2 (* (sizes Group P2)))})))))

Each turn you must perform exactly one of the following two actions: 
            
            1. Add a friendly piece orthogonally adjacent to one of your pieces. 
            2. Remove an enemy group.
            
        As soon as one player only has 1 group, the game is over and that player is the winner.
(game "Gygoreg" (players 2) (equipment {(board (square Diamond 10)) (piece "Disc" Each)}) (rules (start {(place "Disc1" (forEach (sites Phase 0) (is Odd (site )))) (place "Disc2" (forEach (sites Phase 0) (is Even (site ))))}) (play (or (move Add (to (sites Around (sites Occupied Mover) Empty Orthogonal))) (move Select (from (sites Occupied Enemy)) (then (forEach Site (sites Group (last From) Orthogonal) (remove (site ))))))) (end {(if (= 1 (count Groups Orthogonal (= (who (to )) P1))) (result P1 Win)) (if (= 1 (count Groups Orthogonal (= (who (to )) P2))) (result P2 Win))})))

The game is played in turns. White starts by placing the breadcrumb on any empty space on the board. Now, any and every duck in the six lines radiating out from the breadcrumb move straight toward the breadcrumb as far as they can. There will never be more than one duck in a space, and the ducks stop just before they reach the breadcrumb (a fish gets it first). Then the turn passes to the next player. From now on, on your turn, you must take the breadcrumb and place it on an empty space of the board that is not on any of the six lines radiating from the breadcrumb's previous location and then move the ducks toward the breadcrumb as usual. The game ends when all the ducks of one colour have gathered into a single connected group. In case of both groups (White and Black) are created simultaneously, the player who placed the game-ending breadcrumb wins.
(game "Feed the Ducks" (players 2) (equipment {(board (hex 5)) (piece "Marker" Each) (piece "Disc" Neutral)}) (rules (start {(place "Marker1" {"A5" "C7" "D8" "F9" "H9" "I9" "I7" "I5" "F2" "C1" "A1" "A2"}) (place "Marker2" {"A4" "A3" "B1" "D1" "E1" "G3" "H4" "I6" "I8" "G9" "E9" "B6"})}) {(phase "Throw Bread" (play (move Add (piece "Disc0") (to (sites Empty)) (then (attract (from (last To)))))) (nextPhase "Move Bread")) (phase "Move Bread" (play (move (from (sites Occupied Neutral)) (to (difference (sites Empty) (sites Direction (last To)))) (then (attract (from (last To)))))))} (end {(if (= 1 (count Groups (= (who (to )) P1))) (result P1 Win)) (if (= 1 (count Groups (= (who (to )) P2))) (result P2 Win))})))

Play: Players take turns placing one stone of their color on any empty hex.
            
            Goal: When the board is full, the game is over and the player with the higher score is the winner.
            
            Scoring: Each stone is worth 1 point for its owner if it is part of a group connecting opposite sides of the board, and -1 point otherwise.
            
        The scoring trick that gave the game its name – namely that each stone is worth either +1 point or -1 point – was (unbeknownst to the inventor of Signum) discovered by Brian Wittmann (the inventor of Loops) 9 years earlier.
(game "Signum" (players 2) (equipment {(board (hex 6)) (piece "Disc" Each)}) (rules (meta (swap )) (play (move Add (to (sites Empty)))) (end (if (is Full) (byScore {(score P1 (+ (results (sites Occupied P1) 0 (if (or {(is Connected (from ) {(sites Side N) (sites Side S)}) (is Connected (from ) {(sites Side NW) (sites Side SE)}) (is Connected (from ) {(sites Side NE) (sites Side SW)})}) 1 -1)))) (score P2 (+ (results (sites Occupied P2) 0 (if (or {(is Connected (from ) {(sites Side N) (sites Side S)}) (is Connected (from ) {(sites Side NW) (sites Side SE)}) (is Connected (from ) {(sites Side NE) (sites Side SW)})}) 1 -1))))})))))

Players alternate making a move. White plays with the white stones and makes the first move, Black plays with the black stones. On his turn, a player may choose either a) to place a stone on the board without contact to other stones of his color in order to start a new group, or b) to grow all possible groups by one stone. When you grow your groups in this implementation, you place grey stones adjacent to your groups until each of your groups is adjacent to exactly one grey stone. At no point may a group of yours be adjacent to more than one grey stone. When your turn ends, all grey stones are replaced with stones of your color.
    
    For balancing, there is an extra rule: Black is allowed to grow all his groups and place a single stone as long as neither player has not yet grown any groups.
    
The game ends when the board is filled in. The score is the number of stones each player has on the board minus 'P' times the number of groups he has, where 'P' is en even number of 4 or higher (the Ludii implementation also allows 0 and 2 as values of 'P'). With an even penalty and an odd boardsize, draws are not possible.
(game "Symple" (players 2) (equipment {(board (square 19) Vertex) (piece "Marker" Each) (piece "Marker" Neutral)}) (rules (play (if (= (count Moves) (var "MoveThatMustBePlant")) (move Add (to (sites Empty) (= 0 (count Sites (sites Around (to ) Own Orthogonal)))) (then (set Score Mover (- (count Sites (sites Occupied Mover)) (* 10 (count Groups Orthogonal (is Mover (who (to ))))))))) (if (= 0 (count MovesThisTurn)) (or (move Add (to (sites Empty) (= 0 (count Sites (sites Around (to ) Own Orthogonal)))) (then (set Score Mover (- (count Sites (sites Occupied Mover)) (* 10 (count Groups Orthogonal (is Mover (who (to ))))))))) (do (move Add (piece "Marker0") (to (sites Empty) (< 0 (count Sites (sites Around (to ) Own Orthogonal))))) (all Groups Orthogonal (is Mover (who (to ))) (> 2 (count Sites (intersection (sites Around (sites ) NotEmpty Orthogonal) (sites Occupied Neutral))))) (then (if (can Move (do (move Add (piece "Marker0") (to (sites Empty) (< 0 (count Sites (sites Around (to ) Own Orthogonal))))) (all Groups Orthogonal (is Mover (who (to ))) (> 2 (count Sites (intersection (sites Around (sites ) NotEmpty Orthogonal) (sites Occupied Neutral))))))) (moveAgain ) (do (add (to (sites Occupied Neutral) (apply (remove (to )))) (then (if (!= 1 (var "HasGrown")) (and (set Var "HasGrown" 1) (if (= (id P2) (mover )) (and (set Var "MoveThatMustBePlant" (count Moves)) (moveAgain ))))))) (set Score Mover (- (count Sites (sites Occupied Mover)) (* 10 (count Groups Orthogonal (is Mover (who (to )))))))))))) (do (move Add (piece "Marker0") (to (sites Empty) (< 0 (count Sites (sites Around (to ) Own Orthogonal))))) (all Groups Orthogonal (is Mover (who (to ))) (> 2 (count Sites (intersection (sites Around (sites ) NotEmpty Orthogonal) (sites Occupied Neutral))))) (then (if (can Move (do (move Add (piece "Marker0") (to (sites Empty) (< 0 (count Sites (sites Around (to ) Own Orthogonal))))) (all Groups Orthogonal (is Mover (who (to ))) (> 2 (count Sites (intersection (sites Around (sites ) NotEmpty Orthogonal) (sites Occupied Neutral))))))) (moveAgain ) (do (add (to (sites Occupied Neutral) (apply (remove (to )))) (then (if (!= 1 (var "HasGrown")) (and (set Var "HasGrown" 1) (if (= (id P2) (mover )) (and (set Var "MoveThatMustBePlant" (count Moves)) (moveAgain ))))))) (set Score Mover (- (count Sites (sites Occupied Mover)) (* 10 (count Groups Orthogonal (is Mover (who (to )))))))))))))) (end (if (is Full) (byScore )))))

19x19 intersecting lines. The central, as well as every third spot, in a square with the corners at the fourth point from the corners of the board, are marked. Players alternate turns placing a piece on the board on one of the marked spaces. When all of the marked spaces have been occupied, players may place a piece on any empty spot on the board. If a player surrounds one or more of the opponent's pieces orthogonally, they capture the opponent's pieces. The edge of the board can be included in such an enclosure. A group of pieces which contain two empty or more enclosures cannot be captured by the opponent. Pieces cannot be placed in an enclosure. When no further pieces can be placed, the players count the number of their pieces on the board and the number of empty spaces they enclose, and the player with the higher score wins.
(game "Patok" (players 2) (equipment {(board (square 19) Vertex) (piece "Marker" Each) (regions "MarkedSites" (sites {"D4" "D7" "D10" "D13" "D16" "G4" "G16" "J4" "J10" "J16" "M4" "M16" "P4" "P7" "P10" "P13" "P16"}))}) (rules {(phase "MarkedPlacement" (play (move Add (to (intersection (sites Empty) (sites "MarkedSites"))))) (nextPhase (= 0 (count Sites (intersection (sites "MarkedSites") (sites Empty)))) "Playing")) (phase "Playing" (play (do (move Add (to (sites Empty)) (then (enclose (from (last To)) Orthogonal (between (is Enemy (who (between ))) (apply (and (addScore Mover 1) (remove (between ))))) 1))) (> (count Liberties Orthogonal) 0))) (end (if (no Moves Next) (byScore {(score P1 (+ (score P1) (size Territory P1))) (score P2 (+ (score P2) (size Territory P2)))}))))}))

Played on a 19x19 board. The board begins empty. One player plays as black, the other as white. The black player begins by placing a piece on one of the intersections on the board. Players alternate turns placing a piece on the board. A player may pass at any time. A piece or a group of pieces are captured when they are completely surrounded on all sides on adjacent intersections by the opposing player. Stones cannot be placed to recreate a previous position. The game ends when both players pass consecutively. Players total the number of intersections their pieces occupy or surround. The player with the highest total wins. 
(game "Go" (players 2) (equipment {(board (square 19) Vertex) (piece "Marker" Each)}) (rules (meta (no Repeat)) (play (or (do (move Add (to (sites Empty)) (then (enclose (from (last To)) Orthogonal (between (is Enemy (who (between ))) (apply (and (addScore Mover 1) (remove (between )))))))) (> (count Liberties Orthogonal) 0)) (move Pass))) (end (if (all Passed) (byScore {(score P1 (+ (score P1) (size Territory P1))) (score P2 (+ (score P2) (size Territory P2)))})))))

17x17 intersecting lines. 151 pieces per player. Each player begins with six larger pieces on the board, on the third line from the perimeter on all four sides, one piece on every fourth intersection, alternating between black and white. These pieces are never moved from the  board. There is a star marking at each of these points. Players alternate turns placing one of their pieces on an empty intersection of the board. When a player encloses an area with their pieces, it becomes their territory, and any pieces of the opponent inside it are captured. The opponent cannot place one of their pieces inside a territory won on the previous turn. White plays first. When players can no longer play, the number of  counters and each territory are counted to determine the winner.
(game "Mig Mang" (players 2) (equipment {(board (square 17) Vertex) (piece "Ball" Each)}) (rules (start {(place "Ball1" (sites {"C7" "K15" "C15" "G3" "O11" "O3"}) 1) (place "Ball2" (sites {"C3" "K3" "C11" "G15" "O15" "O7"}) 1)}) (play (move Add (to (sites Empty) (= (state (to )) 0)) (then (and (forEach Site (sites Empty) (if (!= 0 (state (site ))) (set State (site ) 0))) (enclose (from (last To)) Orthogonal (between (or (is Enemy (who (between ))) (is Empty (between ))) (apply (and (if (is Enemy (who (between ))) (remove (between ))) (set State (between ) (mover )))))))))) (end (if (and (no Moves P1) (no Moves P2)) (byScore {(score P1 (+ (count Pieces P1) (size Territory P1))) (score P2 (+ (count Pieces P2) (size Territory P2)))})))))

The rules are identical to Go, except the winning condition is to be the first to capture a stone.
(game "Atari Go" (players 2) (equipment {(board (square 19) Vertex) (piece "Marker" Each)}) (rules (play (do (move Add (to (sites Empty)) (then (enclose (from (last To)) Orthogonal (between (is Enemy (who (between ))) (apply (and (trigger "CaptureMade" Next) (remove (between )))))))) (> (count Liberties Orthogonal) 0))) (end (if (is Triggered "CaptureMade" Next) (result Mover Win)))))

One-Eyed Go follows the same rules as go (e.g. Japanese Rules) with the exception that it is never allowed to place a stone such that your own group has no liberties, even when they would capture other stones. This renders the ko rule superfluous.
(game "One-Eyed Go" (players 2) (equipment {(board (square 19) Vertex) (piece "Marker" Each)}) (rules (play (or (do (move Add (to (sites Empty))) (> (count Liberties Orthogonal) 0) (then (enclose (from (last To)) Orthogonal (between (is Enemy (who (between ))) (apply (and (addScore Mover 1) (remove (between )))))))) (move Pass))) (end (if (all Passed) (byScore {(score P1 (+ (score P1) (size Territory P1))) (score P2 (+ (score P2) (size Territory P2)))})))))

The game is played on the board of Kensington. It follows the rules of Go except when a capture is made, the pieces captured are flipped.
(game "Lotus" (players 2) (equipment {(board (rotate 90.0 (tiling T3464 2)) Vertex) (piece "Marker" Each)}) (rules (play (or (do (move Add (to (sites Empty)) (then (enclose (from (last To)) Orthogonal (between (is Enemy (who (between ))) (apply (and (remove (between )) (add (to (between ))))))))) (> (count Liberties) 0)) (move Pass (then (addScore Mover 1))))) (end (if (all Passed) (byScore {(score P1 (+ {(score P1) (size Territory P1) (count Sites (sites Occupied P1))})) (score P2 (+ {(score P2) (size Territory P2) (count Sites (sites Occupied P2))}))})))))

Play on a hexagonal grid composed of hexagons. Use a neutral pawn and black/white checkers. Players take turns moving a neutral pawn around on the board (passing is not allowed). The neutral pawn can move any number of empty points, in any direction in a straight line, but cannot move onto, or jump over occupied points. When a player moves the pawn, first they place a checker of their own color, onto the destination point. Then they move the pawn on top of it. When the pawn is trapped, the game is over. At the end of the game, each player gets a point for each checker of their own color adjacent to the pawn; if the number of adjacent checkers is equal, the checker under the trapped pawn breaks the tie. The person with the highest score wins.
(game "HexTrike" (players 2) (equipment {(board (hex Hexagon 7)) (piece "Ball" Each)}) (rules (meta (swap )) {(phase "Opening" P1 (play (move Add (to (sites Empty)) (then (set Var (last To))))) (nextPhase )) (phase "Play" (play (move Add (to (sites LineOfSight Empty (var ))) (then (set Var (last To))))))} (end {(if (no Moves Next) {(if (> (count Sites (intersection (sites Around (last To)) (sites Occupied P1))) (count Sites (intersection (sites Around (last To)) (sites Occupied P2)))) (result P1 Win)) (if (> (count Sites (intersection (sites Around (last To)) (sites Occupied P2))) (count Sites (intersection (sites Around (last To)) (sites Occupied P1)))) (result P2 Win)) (if (and (= (count Sites (intersection (sites Around (last To)) (sites Occupied P1))) (count Sites (intersection (sites Around (last To)) (sites Occupied P2)))) (is Mover P1)) (result P1 Win)) (if (and (= (count Sites (intersection (sites Around (last To)) (sites Occupied P1))) (count Sites (intersection (sites Around (last To)) (sites Occupied P2)))) (is Mover P2)) (result P2 Win))})})))

Reversi is played on a hexhex-6 board with some cells removed. Pieces are double-sided, with each side distinct in some way from the other. Each side designates ownership of that pieces to a certain player when face-up. In Reversi Mode, play begins with the players taking turns placing pieces into the central six hexagons until they are full; in Othello mode, the central six hexagons are pre-filled with alternating Black and White discs. Then players may place their pieces next to an opponent's piece, as long as a straight line can be drawn between the new piece and an existing piece belonging to that player that goes through the opponent's piece. The opponent's pieces between the new piece and the old piece are then flipped and now belong to the player who just played. If a player cannot make a legal move, they pass. Play continues until the board is full or neither player can make a legal move. The player with the most pieces on the board wins.
(game "MacBeth" (players 2) (equipment {(board (remove (hex 6) {7 9 11 22 24 26 28 41 43 45 47 49 62 64 66 68 79 81 83})) (piece "Disc" Neutral (flips 1 2))}) (rules {(phase "Placement" (play (move Add (piece "Disc0" (mover )) (to (intersection (sites Empty) (sites Centre))))) (nextPhase Mover (>= (count Moves) 5) "Playing")) (phase "Playing" (play (forEach Site (sites Empty) (append (custodial (from (site )) (between (is Enemy (state (between ))) (apply (allCombinations (add (piece "Disc0" (mover )) (to (site ))) (flip (between ))))) (to (is Friend (state (to ))))) (then (and (set Score P1 (count Sites (sites State 1))) (set Score P2 (count Sites (sites State 2)))))))))} (end (if (all Passed) (byScore )))))

17x17 intersecting lines, with alternating black and white points, four equally spaced along the third and fifteenth rank and two along the seventh and eleventh rows, forming a large square. Each player has two kinds of piece, six bull-shaped pieces and 144 round pieces. To begin, players place their bull-shaped pieces on the opposite-color marked points on the board. Then, players alternate turns placing one of their pieces in an adjacent space next to one of their bull pieces. Once all of the bull pieces have been surrounded, the main phase of play begins. Players alternate turns placing one of their pieces on the board. The player who encloses the greatest number of empty spaces wins.
(game "Dorvolz" (players 2) (equipment {(board (square 17) Vertex) (hand Each 2) (piece "Bull" Each) (piece "Marker" Each) (regions "BullSites" P1 (sites {"C3" "K3" "O7" "C11" "G15" "O15"})) (regions "BullSites" P2 (sites {"G3" "O3" "C7" "O11" "C15" "K15"}))}) (rules (start {(place "Bull1" (handSite P1) 6) (place "Bull2" (handSite P2) 6) (place "Marker1" (handSite P1 1) 144) (place "Marker2" (handSite P2 1) 144)}) {(phase "BullPlacement" (play (move (from (handSite Mover)) (to (intersection (sites Empty) (sites Mover))))) (nextPhase Mover (= 6 (count Sites (intersection (sites Board) (sites Occupied Mover)))) "MarkerPlacementAroundBull")) (phase "MarkerPlacementAroundBull" (play (move (from (handSite Mover 1)) (to (intersection (sites Empty) (sites Around (sites Mover) All))))) (nextPhase Mover (= 54 (count Sites (intersection (sites Board) (sites Occupied Mover)))) "Playing")) (phase "Playing" (play (move (from (handSite Mover 1)) (to (sites Empty)))) (end (if (and (all Sites (sites Hand P1) (= 0 (count Cell (site )))) (all Sites (sites Hand P2) (= 0 (count Cell (site ))))) (byScore {(score P1 (size Territory P1 All)) (score P2 (size Territory P2 All))}))))}))

Each player begins with two pieces on the four corners of the board, with each player's pieces in opposite corners. Players move one piece one or two spaces in any direction orthogonally or diagonally. If the piece is moved on space, another piece is added on the origin space. All of the opponent's pieces adjacent to the space to which the player moved now belong to the player who moved. Play ends when all spaces have been filled or one of the players has no remaining pieces. The player with the most pieces wins.
(game "Ataxx" (players 2) (equipment {(board (square 7)) (piece "Marker" Each (or (move (from ) (to (sites Around (from )) (is Empty (to ))) true) (move (from ) (to (difference (expand (from ) 2) (expand (from ))) (is Empty (to )))) (then (forEach Site (intersection (sites Around (last To)) (sites Occupied Next)) (and (remove (site )) (add (piece (id "Marker" Mover)) (to (site ))))))))}) (rules (start {(set Score Each 2) (place "Marker1" {"A1" "G7"}) (place "Marker2" {"A7" "G1"})}) (play (forEach Piece (then (and (set Score P1 (count Sites (sites Occupied P1))) (set Score P2 (count Sites (sites Occupied P2))))))) (end (if (or (= (count Sites (sites Occupied Next)) 0) (is Full)) (byScore )))))

Play on an equilateral triangular hexagon-tessellated grid. Use a neutral pawn and black/white checkers. Players take turns moving a neutral pawn around on the board (passing is not allowed). The neutral pawn can move any number of empty points, in any direction in a straight line, but cannot move onto, or jump over occupied points. When a player moves the pawn, first they place a checker of their own color, onto the destination point. Then they move the pawn on top of it. When the pawn is trapped, the game is over. At the end of the game, each player gets a point for each checker of their own color adjacent to, or underneath, the pawn. The person with the highest score wins.
(game "Trike" (players 2) (equipment {(board (hex Triangle 13)) (piece "Marker" Each)}) (rules (meta (swap )) {(phase "Opening" P1 (play (move Add (to (sites Empty)) (then (set Var (last To))))) (nextPhase )) (phase "Play" (play (move Add (to (sites LineOfSight Empty (var ))) (then (set Var (last To))))))} (end (if (no Moves Next) (byScore {(score P1 (+ (if (is Mover P1) 1 0) (count Sites (intersection (sites Around (last To)) (sites Occupied P1))))) (score P2 (+ (if (is Mover P2) 1 0) (count Sites (intersection (sites Around (last To)) (sites Occupied P2)))))})))))

Tumbleweed is played with stackable tokens on a hexhex board.
            
            A stack is said to be seen from a hex when they are connected by a straight line, with no stacks in between.
            
            The players take turns settling hexes by placing a stack of their tokens on a hex of their choice. The height of a new stack is equal to the number of friendly stacks seen from the settled hex. Removing a stack occupying a hex and re-settling it with a new stack is possible, only as long as the new stack is taller than the previous one. This works with opponent stacks (to capture), or your own stacks (to reinforce).
            
            The board is initially empty, except for a central neutral (blue) two-stack. The first player sets up initial one-stacks: White and Red. The second player then chooses which side he wants to play, by clicking on a stone. Red goes first.
            
        The game ends when no more moves can be made by either player, or after two successive passes. The player who occupies over half the board wins. The program automatically scores indirectly controlled territory.
(game "Tumbleweed" (players 2) (equipment {(board (hex 8)) (piece "Disc" Each) (piece "Disc" Neutral)}) (rules (start (place Stack "Disc0" (centrePoint ) 2)) {(phase "Opening" (play (if (= 0 (count Moves)) (move Add (piece "Disc1") (to (sites Empty)) (then (moveAgain ))) (if (= 1 (count Moves)) (move Add (piece "Disc2") (to (sites Empty))) (move Select (from (union (sites Occupied P1) (sites Occupied P2))) (then (if (= 1 (who (last From))) (do (swap Players 1 2) (set NextPlayer (player 1))) (pass ))))))) (nextPhase (= 3 (count Moves)) "Play")) (phase "Play" (play (or (move Select (from (forEach (sites Board) (> (count Sites (intersection (sites Occupied Mover) (sites LineOfSight (site )))) (size Stack (site ))))) (then (add (to (last From)) (- (count Sites (intersection (sites Occupied Mover) (sites LineOfSight (last From)))) (size Stack (last From))) true))) (move Pass))))} (end (if (all Passed) (byScore {(score P1 (+ (count Sites (sites Occupied P1)) (count Sites (forEach (sites Empty) (> (count Sites (intersection (sites Occupied P1) (sites LineOfSight (site )))) (count Sites (intersection (sites Occupied P2) (sites LineOfSight (site ))))))))) (score P2 (+ (count Sites (sites Occupied P2)) (count Sites (forEach (sites Empty) (> (count Sites (intersection (sites Occupied P2) (sites LineOfSight (site )))) (count Sites (intersection (sites Occupied P1) (sites LineOfSight (site )))))))))})))))

--- Goal: Have the warmest goats at end.  The warmth of you goats is the total number of contacts they have with other goats. To find the winner, it is only necessary to count goat-to-goat contacts between their own kind.
            
            The game start on an empty board. Play alternates.
            
            On a turn either: 
            1. Pass (sometimes this is forced); or 
            
            2. Place a goat on an empty cell that is not too close to another goat of its color: 
            -- If they are in line, they need gap of 2 or 3 spaces (as selected in Options.)
            
            3. Move one of your goats one step with the following condition:
            -- the goat must gain more contacts with adjacent goats of its own kind than before; or 
            
            4. Use the following alternate condition to step-move a goat that cannot move using the previous rule: 
            -- the step must reduce your goat's net contact with enemy goats.  
            
            Exception: Moves using rule 4. are not allowed immediately after the previous player has passed.
            
            Capture
            -- After moving, simultaneously remove all individual enemy goats that have no adjacent space empty.
            -- Capturing does not happen on a passing turn: to capture one must play a piece. 
            
            Ending the game 
            -- The game ends with 2 passes. Then the number of connections are compared. 
            -- In the case of a tie, the last to pass loses.
            
        Variants not implemented: No capture. / Score simple goat count.
(game "Goats Wintering" (players 2) (equipment {(board (hex Limping 3) Cell) (piece "Disc" P1) (piece "Disc" P2)}) (rules (start (set Score Each 0)) (play (or {(move Pass) (move Add (to (sites Empty) (not (is Within (id "Disc" Mover) (intersection (sites LineOfSight Piece (to )) (sites Direction (to ) 3))))) (then (do (forEach Site (sites Board) (apply (and (is Next (who (site ))) (= 0 (count Sites (intersection (sites Empty) (sites Around (site ) true))))) (remove (site )))) (and (set Score Mover (/ (+ (results (sites Occupied Mover) (sites Around (from ) (is Mover (who (to )))) 1)) 2)) (set Score Next (/ (+ (results (sites Occupied Next) (sites Around (from ) (is Next (who (to )))) 1)) 2)))))) (forEach Piece (or (move Step (to (and (is Empty (to )) (< (count Pieces Mover (sites Around (from ))) (- (count Pieces Mover (sites Around (to ))) 1)))) (then (do (forEach Site (sites Board) (apply (and (is Next (who (site ))) (= 0 (count Sites (intersection (sites Empty) (sites Around (site ) true))))) (remove (site )))) (and (set Score Mover (/ (+ (results (sites Occupied Mover) (sites Around (from ) (is Mover (who (to )))) 1)) 2)) (set Score Next (/ (+ (results (sites Occupied Next) (sites Around (from ) (is Next (who (to )))) 1)) 2)))))) (if (and (not (was Pass)) (not (can Move (move Step (to (and (is Empty (to )) (< (count Pieces Mover (sites Around (from ))) (- (count Pieces Mover (sites Around (to ))) 1)))) (then (do (forEach Site (sites Board) (apply (and (is Next (who (site ))) (= 0 (count Sites (intersection (sites Empty) (sites Around (site ) true))))) (remove (site )))) (and (set Score Mover (/ (+ (results (sites Occupied Mover) (sites Around (from ) (is Mover (who (to )))) 1)) 2)) (set Score Next (/ (+ (results (sites Occupied Next) (sites Around (from ) (is Next (who (to )))) 1)) 2))))))))) (move Step (to (and (is Empty (to )) (> (count Pieces Next (sites Around (from ))) (count Pieces Next (sites Around (to )))))) (then (do (forEach Site (sites Board) (apply (and (is Next (who (site ))) (= 0 (count Sites (intersection (sites Empty) (sites Around (site ) true))))) (remove (site )))) (and (set Score Mover (/ (+ (results (sites Occupied Mover) (sites Around (from ) (is Mover (who (to )))) 1)) 2)) (set Score Next (/ (+ (results (sites Occupied Next) (sites Around (from ) (is Next (who (to )))) 1)) 2)))))))))})) (end {(if (and (all Passed) (> (score Mover) (score Next))) (result Mover Win)) (if (and (all Passed) (<= (score Mover) (score Next))) (result Next Win))})))

Starting with Black, the two players take turns placing stones onto unoccupied points on the board, subject to restrictions, one stone per turn.
            Passing is not allowed in Redstone. Players will always have a placement available and must make one.
            
            GROUPS AND LIBERTIES: 
            A group is an orthogonally interconnected collection of one or more like-colored stones. 
            Only black groups and white groups will be discussed here, not red groups. 
            A liberty is an unoccupied point adjacent to a (black or white) group
            
            CAPTURES:
            A capturing placement results in one or more groups, of either or both colors, having no liberties. 
            Such a placement can only be made with a red stone. 
            Conversely, a red stone can only be placed if it bounds (completely deprives of liberties) one or more groups of either or both colors. Red stones are permanent. They cannot themselves be captured.
            Self capture is allowed.
            
            When multiple groups without liberties result from a placement, all such groups are removed immediately following said placement, regardless of the groups' colors. Unlike Go, if you unbound your own temporarily bounded group by removing a neighboring enemy group, you must still remove your own temporarily bounded group.
            
            PIE RULE:
            Since Redstone is a game of annihilation, not of point score, Go’s komi can’t be used.
            Instead, Redstone uses the pie rule for balance. 
            
            OBJECT OF THE GAME:
            You must annihilate your opponent, removing all of his stones from the board. 
            If your placement eliminates all black and white stones from the board, you win. 
        If your placement eliminates all of your own stones while enemy stones remain on the board, you lose.
(game "Redstone" (players 2) (equipment {(board (square 13) Vertex) (piece "Disc" Each) (piece "Disc" Neutral)}) (rules (meta (swap )) (play (or (do (move Add (piece "Disc0") (to (sites Empty))) (or (not (all Sites (sites Around (last To) Enemy Orthogonal) (not (= 0 (count Liberties (site ) Orthogonal (is Next (who (to )))))))) (not (all Sites (sites Around (last To) Own Orthogonal) (not (= 0 (count Liberties (site ) Orthogonal (is Mover (who (to ))))))))) (then (and (forEach Site (sites Around (last To) Enemy Orthogonal) (if (= 0 (count Liberties (site ) Orthogonal (is Next (who (to ))))) (remove (sites Group (site ) Orthogonal (is Next (who (to ))))))) (forEach Site (sites Around (last To) Own Orthogonal) (if (= 0 (count Liberties (site ) Orthogonal (is Mover (who (to ))))) (remove (sites Group (site ) Orthogonal (is Mover (who (to )))))))))) (do (move Add (to (sites Empty))) (not (or (not (all Sites (sites Around (last To) Enemy Orthogonal) (not (= 0 (count Liberties (site ) Orthogonal (is Next (who (to )))))))) (not (all Sites (sites Around (last To) Own Orthogonal true) (not (= 0 (count Liberties (site ) Orthogonal (is Mover (who (to ))))))))))))) (end {(if (and (> (count Moves) 2) (no Pieces Next)) (result Next Loss)) (if (and {(> (count Moves) 2) (no Pieces Mover) (not (no Pieces Next))}) (result Mover Loss))})))

Flower Shop is played on a hexhex board and uses the 12* placement protocol, that is: barring the first player's first placement, which must be a single piece, players make two placements in a turn. There are two types of pieces: impartial *stalks* (green) and partial *flowers* (pink and yellow). A maximal set of connected stalks is called a *plant*.
            
            Rules
            There are two placement restrictions:
            1. Each flower may be adjacent to no more than one stalk and no other flowers.
            2. Each plant can only be adjacent to at most one colour of flowers.
            
            The game ends when no legal placements can be made. The *worth* of each plant is the number of stalks in it times the number of flowers adjacent to it. The *score* of each player is the total worth of all the plants adjacent to his flowers. Highest score wins. In case of equal scores, no player wins.
            
        (Description taken - but slighlty adapted - from mindsports.nl.)
(game "Flower Shop" (players 2) (equipment {(board (hex 7)) (tile "Hex" Each) (piece "Disc" Neutral)}) (rules (play (do (or (move Add (piece (mover )) (to (sites Empty) (= 0 (count Sites (intersection (sites Occupied All "Hex") (sites Around (to ) Orthogonal)))))) (move Add (piece "Disc0") (to (sites Empty)))) (and (all Sites (sites Occupied All "Hex") (> 2 (count Sites (intersection (sites Around (site ) Orthogonal) (sites Occupied Neutral))))) (all Sites (sites Occupied Neutral) (not (and (< 0 (count Sites (sites Around (sites Group (site )) Own Orthogonal))) (< 0 (count Sites (sites Around (sites Group (site )) Enemy Orthogonal))))))) (then (if (= 1 (% (+ 1 (count Moves)) 2)) (moveAgain ))))) (end (if (all Passed) (byScore {(score P1 (+ (results (intersection (sites Occupied P1) (sites Around (sites Occupied Neutral) Orthogonal)) 1 (* (to ) (size Group (+ (results (intersection (sites Around (from ) Orthogonal) (sites Occupied Neutral)) 1 (* (from ) (to )))) Orthogonal (= (id "Disc0") (what (to )))))))) (score P2 (+ (results (intersection (sites Occupied P2) (sites Around (sites Occupied Neutral) Orthogonal)) 1 (* (to ) (size Group (+ (results (intersection (sites Around (from ) Orthogonal) (sites Occupied Neutral)) 1 (* (from ) (to )))) Orthogonal (= (id "Disc0") (what (to ))))))))})))))

Play on an equilateral hexagonal triangle-tessellated grid. The board is seeded randomly with a black stone, a white stone, and a neutral stone. Players take turn seeding new groups. Every placement triggers growth of all enemy groups, where growth is defined as adding a stone to all empty cells adjacent to a group. When the board fills up, the person who has more pieces on the board wins.
(game "Inkblots" (players 2) (equipment {(board (tri Hexagon 7)) (tile "Triangle" Each) (tile "Triangle" Neutral)}) (rules (meta (swap )) (start (place Random {"Triangle1" "Triangle2" "Triangle0"})) (play (move Add (to (sites Empty)) (then (add (piece (id "Triangle" Next)) (to (intersection (expand (sites Occupied Next) Orthogonal) (sites Empty))))))) (end (if (no Moves Next) (byScore {(score P1 (count Pieces P1)) (score P2 (count Pieces P2))})))))

This is basically 4-player Othello, albeit more \"friendly\", since you can place a piece of your color even if you have none on the board. It features unique ball-shaped objects that have four colors. You \"roll\" them to the proper color when converting them, as opposed to flipping in 2-player Othello. The game adds a higher chaos factor in the 3 and 4 player game since you don't have any control over what your opponents do.
(game "Rolit" (players 4) (equipment {(board (square 8)) (piece "Ball" Neutral)}) (rules (start {(place "Ball0" "D5" 1) (place "Ball0" "E5" 2) (place "Ball0" "E4" 3) (place "Ball0" "D4" 4)}) (play (priority (forEach Site (sites Empty) (append (custodial (from (site )) (between (is Enemy (state (between ))) (apply (allCombinations (add (piece "Ball0" (mover )) (to (site ))) (set State (between ) (mover ))))) (to (is Friend (state (to ))))))) (move Add (piece "Ball0" (mover )) (to (sites Around (sites Occupied Neutral) Empty))) (then (forEach Player (set Score Player (count Sites (sites State (player )))))))) (end (if (all Passed) (byScore )))))

Like Go, Cavity is played on the points of a square grid, and groups (chains, more precisely) and liberties are defined the same way. 
            An empty region is a group (chain) of empty points, and it is said to be adjacent to a stone if any of its points are.
            
            Setup: 
            Starting with Black, place one stone each on any empty point. 
            The setup is over as soon as the players have one stone each on the board.
            
            Play: 
            On your turn, place a stone of your color on any point in an empty region that's adjacent to a stone of your color.
            After placement, first remove all enemy groups that have no liberties, then remove all friendly groups that have no liberties.
            In this phase, as soon as one player is the only one with stones on the board, the game is over and that player is the winner.
            
        The game is balanced with the pie rule.
(game "Cavity" (players 2) (equipment {(board (square 11) Vertex) (piece "Marker" Each)}) (rules (meta (swap )) {(phase "Opening" (play (move Add (to (sites Empty)))) (nextPhase (and (= 1 (count Sites (sites Occupied P1))) (= 1 (count Sites (sites Occupied P2)))) "Play")) (phase "Play" (play (move Add (to (sites Empty) (> 1000000000 (count Steps Orthogonal (step (to (or (is Empty (to )) (is In (to ) (sites Occupied Mover))))) (to ) (sites Occupied Mover)))) (then (if (can Move (enclose (from (last To)) Orthogonal (between (is Enemy (who (between ))) (apply (remove (between )))))) (enclose (from (last To)) Orthogonal (between (is Enemy (who (between ))) (apply (remove (between ))))) (enclose (from (last To)) Orthogonal (between (is Mover (who (between ))) (apply (remove (between ))))))))))} (end (forEach Player (and (< 2 (count Moves)) (no Pieces Player)) (result Player Loss)))))

2 players. Each plays Discs. - 
            
            --- Goal: Most friendly-stone adjacencies at the end of the game. Ties are broken by comparing piece counts. If it is still a tie, the last player to move loses. 
            
            --- Play.
            On your turn you may do one of the following:
            1. Pass
            
            2. Place one of your stones on an empty cell of the board is not adjacent to your existing stones.
            
            3. Move to a location with fewer adjacent enemies than the starting location.
            
            Moves are made in one of the following ways while keeping the above restriction:
            -- A. Step to an adjacent empty location.
            -- B. Hop your opponent's stone and replace it with a mutual enemy piece.
            -- C. Hop a mutual enemy piece and replace it with a stone from your supply.
            
        Note that the number of enemies is based on a count of both the opponent's stones and the mutual-enemy stones combined.  
(game "Refugia" (players 2) (equipment {(board (hex {3 4 3 4 3})) (piece "Disc" P1) (piece "Disc" P2) (piece "Fan" Neutral)}) (rules (start (set Score Each 0)) (play (or {(forEach Piece (move Step (to (sites Around (from )) (and (is Empty (to )) (< (count Sites (intersection (sites Around (to )) (union (sites Occupied Next) (sites Occupied Neutral)))) (count Sites (intersection (sites Around (from )) (union (sites Occupied Next) (sites Occupied Neutral))))))) (then (set Score Mover (/ (+ (results (sites Occupied Mover) (sites Around (from ) (is Mover (who (to )))) 1)) 2)))) Mover) (forEach Piece (move Hop (between (is Within (id "Fan" Neutral) (between )) (apply (and (remove (between )) (add (piece (id "Disc" Mover)) (to (between )))))) (to (and (is Empty (to )) (< (count Sites (intersection (sites Around (to )) (union (sites Occupied Next) (sites Occupied Neutral)))) (count Sites (intersection (sites Around (from )) (union (sites Occupied Next) (sites Occupied Neutral))))))) (then (and (set Score Mover (/ (+ (results (sites Occupied Mover) (sites Around (from ) (is Mover (who (to )))) 1)) 2)) (set Score Next (/ (+ (results (sites Occupied Next) (sites Around (from ) (is Next (who (to )))) 1)) 2))))) Mover) (forEach Piece (move Hop (between (is Next (who (between ))) (apply (and (remove (between )) (add (piece (id "Fan" Neutral)) (to (between )))))) (to (and (is Empty (to )) (< (count Sites (intersection (sites Around (to )) (union (sites Occupied Next) (sites Occupied Neutral)))) (count Sites (intersection (sites Around (from )) (union (sites Occupied Next) (sites Occupied Neutral))))))) (then (and (set Score Mover (/ (+ (results (sites Occupied Mover) (sites Around (from ) (is Mover (who (to )))) 1)) 2)) (set Score Next (/ (+ (results (sites Occupied Next) (sites Around (from ) (is Next (who (to )))) 1)) 2))))) Mover) (move Add (piece (id "Disc" Mover)) (to (sites Empty) (not (is Within (id "Disc" Mover) (sites Around (to )))))) (move Pass)})) (end (if (all Passed) {(if (> (score Mover) (score Next)) (result Mover Win)) (if (< (score Mover) (score Next)) (result Next Win)) (if (> (count Pieces Mover) (count Pieces Next)) (result Mover Win)) (if (< (count Pieces Mover) (count Pieces Next)) (result Next Win))} (result Next Win)))))

Start on an empty board. 
            
            On a turn either enter a piece not in line of sight of your own pieces, or move a piece a number of independant single steps not to exceed the count of that piece's enemy neighbors. 
            
            If one player passes, to avoid ending the game with a 2nd pass, the opponent must place a piece if possible, or if unable to place, he may move in a way that enables his future placement. Otherwise, he must pass and the game ends.
            
        The winner is the player with the most pieces in play. If equal, the last to pass loses.
(game "Infuse" (players 2) (equipment {(board (hex Limping 5) Cell) (piece "Disc" Each)}) (rules (start (set Score Each 0)) (play (if (was Pass) (or (move Pass) (priority (move Add (to (sites Empty) (not (is Within (id "Disc" Mover) (sites LineOfSight Piece (to ))))) (then (addScore Mover 1))) (forEach Piece (do (or {(if (<= 1 (count Pieces Next (sites Around (from )))) (move (from (from )) (to (intersection (sites Empty) (sites Around (from )))))) (if (<= 2 (count Pieces Next (sites Around (from )))) (move (from (from )) (to (intersection (sites Empty) (sites Around (intersection (sites Empty) (sites Around (from )))))))) (if (<= 3 (count Pieces Next (sites Around (from )))) (move (from (from )) (to (intersection (sites Empty) (sites Around (intersection (sites Empty) (sites Around (intersection (sites Empty) (sites Around (from )))))))))) (if (<= 4 (count Pieces Next (sites Around (from )))) (move (from (from )) (to (intersection (sites Empty) (sites Around (intersection (sites Empty) (sites Around (intersection (sites Empty) (sites Around (intersection (sites Empty) (sites Around (from )))))))))))) (if (<= 5 (count Pieces Next (sites Around (from )))) (move (from (from )) (to (intersection (sites Empty) (sites Around (intersection (sites Empty) (sites Around (intersection (sites Empty) (sites Around (intersection (sites Empty) (sites Around (intersection (sites Empty) (sites Around (from ))))))))))))))}) (can Move (add (to (sites Empty) (not (is Within (id "Disc" Mover) (sites LineOfSight Piece (to ))))))))))) (or {(move Add (to (sites Empty) (not (is Within (id "Disc" Mover) (sites LineOfSight Piece (to ))))) (then (addScore Mover 1))) (forEach Piece (or {(if (<= 1 (count Pieces Next (sites Around (from )))) (move (from (from )) (to (intersection (sites Empty) (sites Around (from )))))) (if (<= 2 (count Pieces Next (sites Around (from )))) (move (from (from )) (to (intersection (sites Empty) (sites Around (intersection (sites Empty) (sites Around (from )))))))) (if (<= 3 (count Pieces Next (sites Around (from )))) (move (from (from )) (to (intersection (sites Empty) (sites Around (intersection (sites Empty) (sites Around (intersection (sites Empty) (sites Around (from )))))))))) (if (<= 4 (count Pieces Next (sites Around (from )))) (move (from (from )) (to (intersection (sites Empty) (sites Around (intersection (sites Empty) (sites Around (intersection (sites Empty) (sites Around (intersection (sites Empty) (sites Around (from )))))))))))) (if (<= 5 (count Pieces Next (sites Around (from )))) (move (from (from )) (to (intersection (sites Empty) (sites Around (intersection (sites Empty) (sites Around (intersection (sites Empty) (sites Around (intersection (sites Empty) (sites Around (intersection (sites Empty) (sites Around (from ))))))))))))))})) (move Pass)}))) (end {(if (and (all Passed) (> (score Mover) (score Next))) (result Mover Win)) (if (and (all Passed) (<= (score Mover) (score Next))) (result Next Win))})))

Lava is a territorial stacking game for two players, Red and Black. Play using a Hexhex board size 4 or 5, and a sufficient supply of Red/Black stacking checkers. To setup, place one Red and one Black checker in opposite corners of the hex hex board.
            
            Definitions:
            Stack: One or more checkers occupying the same cell.
            Control: You control a stack if your color is on top of it.
            
            Players take turns, with Black moving first.
            
            Each turn, take N checkers (where N is any number from 1 to stack size) from the top of a stack you control and move them N spaces in a straight line to a destination containing N or less checkers. Then, add a new checker of your color to the destination. Stacks may not jump over enemies, but may land on enemy or friendly stacks, thereby burying them.
            
            If you at any point cannot make a move, you must pass. This does not end the game, only your turn.
            
        When the board is full, the player controlling more stacks wins the game.
(game "Lava" (players 2) (equipment {(board (rotate 30.0 (hex 4))) (piece "Disc" Each)}) (rules (start {(place "Disc1" (min (array (sites Board)))) (place "Disc2" (max (array (sites Board))))}) (play (move Select (from (sites Occupied Mover true)) (to (sites Direction (from ) Orthogonal (= (next ) (who (to ))) true (size Stack (from ))) (>= (count Steps (from ) (to )) (size Stack (to )))) (then (and (fromTo (from (last From)) (to (last To)) (count Steps (last From) (last To)) true) (add (to (last To)) true))))) (end (if (is Full) (byScore {(score P1 (count Sites (sites Occupied P1 true))) (score P2 (count Sites (sites Occupied P2 true)))})))))

Played on a square grid. The board begins empty. One player plays as Black, the other as White. Players alternate turns placing a piece of their colour on the board; Black plays first. Passing is not allowed. After a move, all opposing pieces without liberties are captured (a stone or group of stones has no liberties if all adjacent points to that stone are occupied).  Stones cannot be placed to recreate a previous position. The game ends when one player captures a number of stones equal to a winning threshold agreed upon at the start of the game.  Despite not having an explicit territorial goal, this variant produces final positions quite reminiscent of standard Go.
(game "BlooGo" (players 2) (equipment {(board (square 9) Vertex) (piece "Ball" Each)}) (rules (meta (no Repeat)) (play (move Add (to (sites Empty)) (then (forEach Site (sites Occupied Next) (if (= (count Liberties (site ) Orthogonal) 0) (move Remove (site ) (then (addScore Mover 1)))))))) (end {(if (>= (score Mover) 5) (result Mover Win))})))

Paintscape is a game for two players – Black and White – played on the squares (cells/faces) of a square grid with 8 squares per side (e.g. a Chess board). 
            You also need a large supply of black and white stones and 5 distinguishable (e.g. by color) shared sets of 12 tiles. That is, each of the 5 sets contain 12 tiles, for 60 tiles in total.
            
            Setup:
            Before play begins, all 60 tiles and 2 white and 2 black stones are distributed randomly on the 64 squares of the board.
            A short balancing phase then ensues:
            
            One player swaps the position of any number of stones with a tile. That is, for 0, 1, 2, 3, or 4 of the stones, swap its position with any tile.
            When all stones have been swapped, or the swapping player passes, indicating that they do not wish to swap any more stones, the other player choses to play first as Black or second as White in the proper playing phase.
            (To show the button for swapping in Ludii, you might have to click the three dots next to the pass button.)
            
            The balancing phase can be skipped by new players, or you can agree on a fixed setup for the 4 initial stones.
            
            Play:
            In this phase (the proper playing phase), players take turns, starting with Black, placing stones of their own color.
            On your turn, place a stone of your color on a square adjacent to one of your stones already on the board.
            You may not place a stone on a square occupied by a stone. I.e. the square you place at must be empty or only occupied by a tile.
            Stones placed on tiles normally just stack on top of them, however:
            If a placement makes you have a stone on half of the tiles of a certain color, remove all tiles of that color along with the stones stacked on top of them (regardless of whether they're friendly or enemy).
            
            The goal:
        You win if you remove 3 of the 5 colors.
(game "Paintscape" (players 2) (equipment {(board (square 8)) (piece "Disc" Each) (piece "Square" Shared 5)}) (rules (start {(place Random (sites Empty) {"Disc1" "Disc2"} 2) (place Random (sites Empty) {"Square"} 12 1) (place Random (sites Empty) {"Square"} 12 2) (place Random (sites Empty) {"Square"} 12 3) (place Random (sites Empty) {"Square"} 12 4) (place Random (sites Empty) {"Square"} 12 5)}) {(phase "Swapping" (play (or (move Pass (then (set Var "Passed" 1))) (move Select (from (sites Board) (and (!= 3 (who (from ))) (not (is In (from ) (values Remembered))))) (to (sites Board) (= 3 (who (to )))) (then (and {(remember Value (last To)) (do (add (piece (who (last From))) (to (last To) (apply (do (set Var "StateToBeAtLastFrom" (state (to ))) (remove (to )))))) (add (piece 3 (var "StateToBeAtLastFrom")) (to (last From) (apply (remove (to )))))) (if (!= 3 (size Array (values Remembered))) (moveAgain ))}))))) (nextPhase (or (= 1 (var "Passed")) (= 4 (size Array (values Remembered)))) "Choose")) (phase "Choose" (play (or (move Swap Players P1 P2 (then (set NextPlayer (player 1)))) (move Pass))) (nextPhase "Play")) (phase "Play" (play (move Add (to (sites Around (sites Occupied Mover) Orthogonal) (not (or (= (mover ) (who (to ))) (= (next ) (who (to )))))) true (then (if (and (= 3 (who (last To) 0)) (= 6 (count Sites (forEach (sites Occupied Mover) (= (state (last To) 0) (state (site ) 0)))))) (and (remove (forEach (sites Board) (= (state (last To) 0) (state (site ) 0))) 2) (addScore Mover 1)))))))} (end (if (or (= 3 (score P1)) (= 3 (score P2))) (byScore )))))

Played on a 19x19 board. The board begins empty. One player plays as black, the other as white. The black player begins by placing a piece on one of the intersections on the board. Players alternate turns placing a piece on the board. A player may pass at any time. A piece or a group of pieces are captured when they are completely surrounded on all sides on adjacent intersections by the opposing player. Stones may be placed in a position where they are surrounded. Stones cannot be placed to recreate a previous position. The game ends when both players pass consecutively. Players then fill in the spaces in their captured territory with their own pieces. Players total the number of intersections their pieces occupy. The player with the highest total wins.
        
(game "Weiqi" (players 2) (equipment {(board (square 19) Vertex) (piece "Marker" Each)}) (rules (meta (no Repeat)) (play (or (move Add (to (sites Empty)) (then (enclose (from (last To)) Orthogonal (between (is Enemy (who (between ))) (apply (remove (between ))))))) (move Pass))) (end (if (all Passed) (byScore {(score P1 (+ (count Pieces P1) (size Territory P1))) (score P2 (+ (count Pieces P2) (size Territory P2)))})))))

Players take turns placing stones of their color on empty squares. If you place orthogonally adjacent to more than 2 stones, regardless of their color, you must place again. You continue until you place orthogonally adjacent to 2 or fewer stones. When the board is full, the player with the most stones on the board is the winner.
(game "Flume" (players 2) (equipment {(board (square 9)) (piece "Disc" Each) (piece "Disc" Neutral)}) (rules (meta (swap )) (start (place "Disc0" (sites Outer))) (play (move Add (to (sites Empty)) (then (and (addScore Mover 1) (if (< 2 (count Sites (sites Around (last To) NotEmpty Orthogonal))) (moveAgain )))))) (end (if (is Full) (byScore )))))

Reversi is played on an 8x8 board. Pieces are double-sided, with each side distinct in some way from the other. Each side designates ownership of that pieces to a certain player when face-up. Play begins with the players taking turns placing pieces into the central four squares until they are full. Then players may place their pieces next to an opponent's piece, a long as a straight line can be drawn between the new piece and an existing piece belonging to that player that goes through the opponent's piece. The opponent's pieces between the new piece and the old piece are then flipped and now belong to the player who just played. If a player cannot make a legal move, they pass. Play continues until the board is full or neither player cannot make a legal move. The player with the most pieces on the board wins.
(game "Reversi" (players 2) (equipment {(board (square 8)) (piece "Disc" Neutral (flips 1 2))}) (rules (start {(place "Disc0" (difference (sites Centre) (sites Phase 1)) 1) (place "Disc0" (difference (sites Centre) (sites Phase 0)) 2)}) {(phase "Playing" (play (forEach Site (sites Empty) (append (custodial (from (site )) (between (is Enemy (state (between ))) (apply (allCombinations (add (piece "Disc0" (mover )) (to (site ))) (flip (between ))))) (to (is Friend (state (to ))))) (then (and (set Score P1 (count Sites (sites State 1))) (set Score P2 (count Sites (sites State 2)))))))))} (end (if (all Passed) (byScore )))))

On your turn, you place a hexagonal tile of your color that covers three mutually orthogonally adjacent rhombuses. In Ludii this is done by first selecting one of the rhombuses the tile will cover, then another. The third one is determined by these two selections. When no more placements  are possible, the game is over and the winner is the player with the higher score.
            
            The general idea behind the scoring is simple: You get 1 point per empty rhombus that ends up adjacent to more of your hexagons than your opponent's hexagons. However, two slight complications are necessary to exclude all draws in as fair a manner as possible:
            
            1: You score 1 point every time you make a placement that closes off an odd number of tied rhombuses. (A rhombus is closed off when it is adjacent to no rhombus that can be filled in on a future turn.) This is equivalent to dividing tied cells between you in a \"one for me, one for you, one for me\"-fashion as they are closed off.
            
            2: You get 1 bonus point if your opponent has made more placements than you at the end of the game.
            
        All scoring is automatic in Ludii.
(game "Residuel" (players 2) (equipment {(board (remove (rotate 30.0 (dual (tiling T3636 5))) {0 4 5 73 81 97 142 143 152})) (tile "Rhombus" Each)}) (rules (play (move Select (from (sites Empty) (not (all Sites (sites Around (from ) Empty Orthogonal) (not (not (all Sites (sites Around (site ) Empty Orthogonal) (not (is Related Orthogonal (site ) (from ))))))))) (to (sites Around (from ) Empty Orthogonal) (not (all Sites (sites Around (to ) Empty Orthogonal) (not (is Related Orthogonal (site ) (from )))))) (then (do (forEach Site (forEach (sites Empty) (and {(= (count Sites (sites Around (site ) Own Orthogonal)) (count Sites (sites Around (site ) Enemy Orthogonal))) (not (can Move (move Select (from (sites Around (site ) Empty Orthogonal) (not (all Sites (sites Around (from ) Empty Orthogonal) (not (not (all Sites (sites Around (site ) Empty Orthogonal) (not (is Related Orthogonal (site ) (from ))))))))))))})) (set State (site ) 1)) (do (add (to (intersection (sites Around (last From) Orthogonal true) (sites Around (last To) Orthogonal true)))) (addScore Mover (% (count Sites (forEach (forEach (sites Empty) (and {(= (count Sites (sites Around (site ) Own Orthogonal)) (count Sites (sites Around (site ) Enemy Orthogonal))) (not (can Move (move Select (from (sites Around (site ) Empty Orthogonal) (not (all Sites (sites Around (from ) Empty Orthogonal) (not (not (all Sites (sites Around (site ) Empty Orthogonal) (not (is Related Orthogonal (site ) (from ))))))))))))})) (!= 1 (state (site ))))) 2))))))) (end (if (no Moves Next) (byScore {(score P1 (+ {(score P1) (- (max (/ (count Sites (sites Occupied P1)) 3) (/ (count Sites (sites Occupied P2)) 3)) (/ (count Sites (sites Occupied P1)) 3)) (count Sites (forEach (sites Empty) (> (count Sites (intersection (sites Around (site ) Orthogonal) (sites Occupied P1))) (count Sites (intersection (sites Around (site ) Orthogonal) (sites Occupied P2))))))})) (score P2 (+ {(score P2) (- (max (/ (count Sites (sites Occupied P1)) 3) (/ (count Sites (sites Occupied P2)) 3)) (/ (count Sites (sites Occupied P2)) 3)) (count Sites (forEach (sites Empty) (> (count Sites (intersection (sites Around (site ) Orthogonal) (sites Occupied P2))) (count Sites (intersection (sites Around (site ) Orthogonal) (sites Occupied P1))))))}))})))))

Each player has his own board, set up so that the opponent cannot see it. The referee has a board of his own on which he plays the moves of both players. He can see both player's boards.
            
            To make a move, a player plays a stone on his own board. The referee then checks on his board whether the move is legal and informs both players about the tried move. How exactly the refereee comments on the move depends on the rule variant.
            
        As long as a player tries to play an illegal move, it's still his turn and he may try another move. After the player has made a legal move, the referee copies the move to his own board. Then, it's the other player's turn.
(game "Phantom Go" (players 2) (equipment {(board (square 9) Vertex) (piece "Marker" Each)}) (rules (play (or (move Select (from (union (sites Empty) (sites Hidden Mover))) (then (priority {(if (not (is In (last To) (sites Empty))) (and {(note Mover "made an illegal move") (note Mover "to play") (moveAgain )})) (do (add (to (last To)) (then (and {(enclose (from (last To)) Orthogonal (between (is Enemy (who (between ))) (apply (and (addScore Mover 1) (remove (between )))))) (set Hidden (last To) Next) (note Mover "has moved") (note Next "to play")}))) (> (count Liberties Orthogonal) 0)) (and {(note Mover "made an illegal move") (note Mover "to play") (moveAgain )})}))) (move Pass))) (end (if (all Passed) (byScore {(score P1 (+ (score P1) (size Territory P1))) (score P2 (+ (score P2) (size Territory P2)))})))))

DEFINITION: A group is a maximal set of orthogonally adjacent like-colored pieces.
            GAMEPLAY: On your turn, flip an enemy group.
        OBJECTIVE: Eliminate the enemy pieces.
(game "Paintbucket" (players 2) (equipment {(board (square 8)) (tile "Square" Each)}) (rules (start {(place "Square1" (sites Phase 0)) (place "Square2" (sites Phase 1))}) (play (move Select (from (sites Occupied Next)) (then (add (to (sites Group (last From) Orthogonal) (apply (remove (to )))))))) (end (if (no Pieces Next) (result Next Loss)))))

Lifeline is a territorial strategy game for two players (Black and White) that is played on the cells of an initially empty hexhex board. The recommended board sizes are between 3 and 12 cells per side.
            
            Definitions:
            
            A group is an entire set of connected stones of the same color. A single stone, not connected to others of its color, is also a group.
            A group is dead if there is no path of connected empty cells between that group and any other of its color.
            
            Play:
            
            On your turn, perform the following actions in the stated order:
            
            1. Place a stone of your color on an empty cell. If it is your first turn of the game, perform this action twice.
            2. Remove all dead enemy groups.
            3. Remove all dead friendly groups.
            
            The board positions at the start and at the end of your turn must be different.
            
            The last player to make a placement wins. Note that, after your first turn, you will always have a placement available unless you have no groups on the board.
            
            To make the game fair, White will have the option, on their first turn only, to swap sides with Black instead of making a regular move.
            
            Note that, in this implementation, the two stones you place on your first turn are only visible after both cells to place on have been selected.
            
            Alternative balancing methods:
            
            The balancing method described above is what is called 'strong pie' in the options. 
            This implementation also offers two other methods, for players who would like to explore alternatives.
            
            Weak pie: Just like with strong pie, White will have the option, on their first turn only, to swap sides with Black instead of making a regular move.
            But instead of placing twice on their first move, players alternate placing one piece each (with no removals) until 4 setup stones are placed.
            Consequently, White's choice will be made after Black has placed only one stone.
            
            Komi pie: The first player chooses a whole number of komi (between 1 and 12) and the second player chooses whether to play as White (pass) or as Black (place a stone).
            The first 4 stones are placed in the same order as with weak pie (Black, White, Black, White).
            Throughout the game proper, White will have the option to spend a point of komi instead of making a placement.
        A point of komi is spent by clicking the shield icon next to White's name.
(game "Lifeline" (players 2) (equipment {(board (dual (tri Hexagon 7))) (piece "Disc" Each) (piece "Shi_Western" P2) (hand P2)}) (rules (meta (swap )) {(phase "Opening" (play (move Select (from (sites Empty)) (to (sites Empty) (not (is In (from ) (sites Around (to ) true)))) (then (and (add (to (last To))) (add (to (last From))))))) (nextPhase (and (= 2 (count Sites (sites Occupied P1 "Disc"))) (= 2 (count Sites (sites Occupied P2 "Disc")))) "Play")) (phase "Play" (play (or (if (and {(< 0 (size Stack (handSite P2))) (= (mover ) (id P2)) (< 0 (count Pieces Mover (sites Board)))}) (move Remove (handSite P2))) (move Add (to (sites Empty) (and (not (no Pieces Mover (sites Board))) (> 1000000000 (count Steps Orthogonal (step (to (or (is Empty (to )) (is Mover (who (to )))))) (to ) (sites Occupied Mover))))) (then (forEach Group Orthogonal (is Enemy (who (to ))) (if (not (and (< 0 (count Sites (difference (sites Occupied Enemy "Disc") (sites )))) (not (all Sites (sites ) (not (> 1000000000 (count Steps Orthogonal (step (to (or (is Empty (to )) (is Enemy (who (to )))))) (site ) (difference (sites Occupied Enemy) (sites ))))))))) (remove (sites )) (pass )) (then (forEach Group Orthogonal (is Mover (who (to ))) (if (not (and (< 0 (count Sites (difference (sites Occupied Mover "Disc") (sites )))) (not (all Sites (sites ) (not (> 1000000000 (count Steps Orthogonal (step (to (or (is Empty (to )) (is Mover (who (to )))))) (site ) (difference (sites Occupied Mover) (sites ))))))))) (remove (sites )) (pass ))))))))))} (end (if (and (no Moves Next) (< 2 (count Moves))) (result Next Loss)))))

The board begins empty. One player plays as black, the other as white. The black player begins by placing a piece on one of the intersections on the board. Players alternate turns placing a piece on the board. A player may pass at any time. A piece or a group of pieces are captured when they are completely surrounded on all sides on adjacent intersections by the opposing player. Stones cannot be placed to recreate a previous position. The game ends when both players pass consecutively. Players total the number of intersections their pieces occupy or surround. The player with the highest total wins. For more info on this version please google Hexagonal Go.
(game "HexGo" (players 2) (equipment {(board (tri Hexagon 6) Vertex) (piece "Ball" P1) (piece "Ball" P2)}) (rules (meta (no Repeat)) (play (or (do (move Add (to (sites Empty)) (then (enclose (from (last To)) Orthogonal (between (is Enemy (who (between ))) (apply (and (addScore Mover 1) (remove (between )))))))) (> (count Liberties Orthogonal) 0)) (move Pass))) (end (if (all Passed) (byScore {(score P1 (+ (score P1) (size Territory P1))) (score P2 (+ (score P2) (size Territory P2)))})))))

Pente is played on a 19x19 Go board.  White goes first, and plays their first move on the centre point (unless playing Freestyle).  In the Pro Pente variation, White's second move must be at least 3 points away from the centre.  After the opening, players alternate playing one stone of their colour onto any empty point.  If their placement results in a pair of enemy stones being sandwiched between two of their own stones, those enemy stones are captured.  The first player to form an orthogonal or diagonal line of five (or more) of their stones, or to capture 10 enemy stones, wins the game.
(game "Pente" (players 2) (equipment {(board (square 19) Vertex) (piece "Ball" Each)}) (rules (start (set Score Each 0)) {(phase "Opening" (play (move Add (to (sites "J10")))) (nextPhase "General")) (phase "General" (play (move Add (to (sites Empty)) (then (custodial (from (last To)) All (between (is Next (who (between ))) (apply (remove (between )))) (to (and (= 3 (count Steps Vertex All (last To) (to ))) (is Mover (who (to ))))) (then (addScore Mover 1)))))))} (end {(if (is Line 5 All) (result Mover Win)) (if (> (score Mover) 9) (result Mover Win))})))

Three concentric squares, with lines connecting the diagonals and the midpoints of the sides. Twelve pieces per player. Players alternate turns placing one of their pieces on one of the empty intersections of the board. If a player places three of their stones in a straight line, the player may remove one of the opponent's pieces. When all of the pieces have been placed, the players alternate turns moving one of their pieces to an empty adjacent point along the lines of the board. When a player is reduced to three pieces, they may move one of their stone to any empty space on the board. The player who reduces their opponent to two pieces wins.
(game "Tsoro Yemutwelve" (players 2) (equipment {(board (concentric Square 3 true) Vertex) (hand Each) (piece "Marker" Each (move Step (to (is Empty (to ))) (then (if (is Line 3 Orthogonal true) (moveAgain )))))}) (rules (start (place "Marker" "Hand" 12)) {(phase "Placement" (play (if (is Prev Mover) (if (can Move (move Remove (forEach (sites Occupied Enemy "Board") (not (is Line 3 Orthogonal (site )))))) (move Remove (forEach (sites Occupied Enemy "Board") (not (is Line 3 Orthogonal (site ))))) (move Remove (sites Occupied Enemy "Board"))) (move (from (handSite Mover)) (to (sites Empty)) (then (if (is Line 3 Orthogonal true) (moveAgain )))))) (nextPhase Mover (all Sites (sites Hand Mover) (= 0 (count Cell (site )))) "Movement")) (phase "Movement" (play (if (is Prev Mover) (if (can Move (move Remove (forEach (sites Occupied Enemy "Board") (not (is Line 3 Orthogonal (site )))))) (move Remove (forEach (sites Occupied Enemy "Board") (not (is Line 3 Orthogonal (site ))))) (move Remove (sites Occupied Enemy "Board"))) (if (> (count Pieces Mover) 3) (forEach Piece) (move (from (sites Occupied Mover)) (to (sites Empty)))))))} (end (if (<= (count Pieces Next) 2) (result Next Loss)))))

Play occurs on a 4x4x4 grid. One player places an X, the other places an O and players take turns placing their marks in the grid, attempting to get four in a row of their color. For the lines between levels, the diagonals are not taken in account.
(game "3D Tic-Tac-Toe" (players 2) (equipment {(board (rectangle (+ (^ 3 2) (- 3 1)) 3)) (piece "Disc" P1) (piece "Cross" P2) (piece "Dot" Neutral)}) (rules (start (place "Dot0" (union {(sites Row 3) (sites Row 7)}))) (play (move Add (to (sites Empty)))) (end {(if (is Line 3) (result Mover Win)) (if (!= 0 (count Sites (forEach (expand (sites Bottom) (- 3 1)) (all Sites (sites {(site ) (ahead (site ) 4 N) (ahead (site ) 8 N)}) (= (mover ) (who (site ))))))) (result Mover Win))})))

Keryo-Pente is played on a 19x19 Go board.  White goes first, and plays their first move on the centre point (unless playing Freestyle).  After the opening, players alternate playing one stone of their colour onto any empty point.  If their placement results in a pair or a line of three enemy stones being sandwiched between two of their own stones, those enemy stones are captured.  The first player to form an orthogonal or diagonal line of five (or more) of their stones, or to capture 15 enemy stones, wins the game.
(game "Keryo-Pente" (players 2) (equipment {(board (square 19) Vertex) (piece "Ball" Each)}) (rules (start (set Score Each 0)) {(phase "Opening" (play (move Add (to (sites "J10")))) (nextPhase "General")) (phase "General" (play (move Add (to (sites Empty)) (then (custodial (from (last To)) All (between (is Next (who (between ))) (apply (remove (between )))) (to (and (or (= 3 (count Steps Vertex All (last To) (to ))) (= 4 (count Steps Vertex All (last To) (to )))) (is Mover (who (to ))))) (then (addScore Mover 1)))))))} (end {(if (is Line 5 All) (result Mover Win)) (if (> (score Mover) 14) (result Mover Win))})))

Two triangles, which form a six-pointed star, with lines connecting the corner of one triangle with the corner of the other triangle which is opposite it. Nine pieces per player. Players alternate turns placing a piece on an empty point on the board. Players cannot place a piece in the central point during this phase. When all of the pieces are placed, players alternate turns moving a piece to an empty adjacent point on the board. During either phase, when a player places three of their pieces in a row, they remove one of the opponent's pieces. When three pieces are in a three-in-a-row pattern, they cannot be removed. The player who removes all of the opponent's pieces from the board wins.
(game "Jeson Zam" (players 2) (equipment {(board (add (remove (add (merge {(rotate 30.0 (tri 2)) (shift 0.2 0.0 (rotate -30.0 (tri 2)))}) {{0.6 0.3}}) {{0 2} {0 1} {1 2} {3 5} {5 4} {4 3}}) {{0.6 0.625} {0.915 0.3} {0.285 0.3} {0.6 -0.01} {0.285 0.1725} {0.285 0.4375} {0.915 0.4375} {0.915 0.1725} {0.75 0.075} {0.45 0.075} {0.75 0.535} {0.45 0.535}} {{1 13} {13 17} {17 7} {7 2} {2 12} {12 9} {9 11} {11 0} {5 13} {13 8} {8 14} {14 4} {1 14} {14 15} {15 10} {10 0} {5 7} {7 18} {18 12} {12 3} {3 11} {11 16} {16 10} {10 4} {0 16} {16 6} {6 17} {17 5} {4 15} {15 6} {6 18} {18 2} {3 9} {9 6} {6 8} {8 1}}) Vertex) (hand Each) (piece "Marker" Each (move Step (to (is Empty (to ))) (then (if (is Line 3) (moveAgain )))))}) (rules (start (place "Marker" "Hand" 9)) {(phase "Placement" (play (if (is Prev Mover) (move Remove (forEach (sites Occupied Enemy "Board") (not (is Line 3 Orthogonal (site ))))) (move (from (handSite Mover)) (to (difference (sites Empty) (sites Centre))) (then (if (is Line 3) (moveAgain )))))) (nextPhase Mover (all Sites (sites Hand Mover) (= 0 (count Cell (site )))) "Movement")) (phase "Movement" (play (if (is Prev Mover) (move Remove (forEach (sites Occupied Enemy "Board") (not (is Line 3 Orthogonal (site ))))) (forEach Piece))))} (end (if (no Pieces Next) (result Next Loss)))))

MOVE - On each turn, each player move one of his stones into an adjacent orthogonal empty cell.
        GOAL - Wins the player that makes a (orthogonal or diagonal) 3 in-a-row.
(game "A Simple Game" (players 2) (equipment {(board (square 4) Vertex) (piece "Ball" Each (move Step Orthogonal (to (is Empty (to ))))) (hand Each)}) (rules (start {(place "Ball1" (intersection (sites Phase 0) (union (sites Top) (sites Bottom)))) (place "Ball2" (intersection (sites Phase 1) (union (sites Top) (sites Bottom))))}) (play (forEach Piece)) (end (if (is Line 3 All) (result Mover Win)))))

A circle with eight radii. Three pieces per player. Each player has three pieces, which must start on the outer ring adjacent to each other. Players alternate turns moving a piece to an empty point along the lines of the board. The player who makes a line of three through the center of the circle wins.
(game "Ring" (players 2) (equipment {(board (concentric {1 8}) Vertex) (hand Each) (piece "Marker" Each (move Step (to (is Empty (to )))))}) (rules (start (place "Marker" "Hand" 3)) {(phase "Placement" (play (move (from (handSite Mover)) (to (difference (sites Empty) (sites Centre))))) (nextPhase Mover "PlacementAdjacent")) (phase "PlacementAdjacent" (play (move (from (handSite Mover)) (to (difference (sites Empty) (sites Centre)) (is In (to ) (sites Around (sites Occupied Mover)))))) (nextPhase (all Sites (sites Hand P2) (= 0 (count Cell (site )))) "Movement")) (phase "Movement" (play (forEach Piece)))} (end (if (is Line 3 (centrePoint ) (mover )) (result Mover Win)))))

The board is initially empty. Each player chooses a colour: White or Black. White starts by placing a stone on a vacant square. Black does the same.
            
        Players continue taking turns; however, your turn goes as follows: 1. Mark one of your exposed stones for removal from the board (i.e. it cannot be under an enemy stone). 2. Add one of your stones to the board. 3. Add another one of your stones to the board, at which point the marked stone is removed. The following rules constrain where you can add each stone: It must be a “knight’s move” away from the marked stone. That is to say, either 2 spaces vertically and 1 horizontally, or 2 spaces horizontally, and 1 vertically away from the marked stone. The space on which you place it must have none of your stones, and either: be vacant, or have an enemy stone, in which case you will place yours on top, creating a stack that you control.
(game "Callanish" (players 2) (equipment {(board (square 9)) (piece "Disc" Each (move Select (from (and (= (topLevel (from )) (level )) (<= 2 (count Sites (sites To (move Leap (from (from )) {{F F R F} {F F L F} {F R F F} {F L F F}} (to (or (is Empty (to )) (and (is Enemy (who (to ))) (= (topLevel (to )) 0)))))))))) (then (do (set Var "CondemnedSite" (last From)) (do (set State (var "CondemnedSite") 1) (moveAgain ))))))}) (rules {(phase "Opening" (play (move Add (to (sites Empty)))) (nextPhase (>= (count Turns) 2) "Playing")) (phase "Playing" (play (if (is Prev Mover) (if (is Pending) (move Add (to (sites To (move Leap (from (var "CondemnedSite")) {{F F R F} {F F L F} {F R F F} {F L F F}} (to (or (is Empty (to )) (and (is Enemy (who (to ))) (= (topLevel (to )) 0))))))) true (then (remove (var "CondemnedSite")))) (move Add (to (sites To (move Leap (from (var "CondemnedSite")) {{F F R F} {F F L F} {F R F F} {F L F F}} (to (or (is Empty (to )) (and (is Enemy (who (to ))) (= (topLevel (to )) 0))))))) true (then (do (set Pending) (moveAgain ))))) (forEach Piece))))} (end {(if (and (= (% (- (count Moves) 2) 3) 0) (or {(<= 5 (count Sites (intersection (sites Row 0) (sites Occupied Next "Board")))) (<= 5 (count Sites (intersection (sites Row 1) (sites Occupied Next "Board")))) (<= 5 (count Sites (intersection (sites Row 2) (sites Occupied Next "Board")))) (<= 5 (count Sites (intersection (sites Row 3) (sites Occupied Next "Board")))) (<= 5 (count Sites (intersection (sites Row 4) (sites Occupied Next "Board")))) (<= 5 (count Sites (intersection (sites Row 5) (sites Occupied Next "Board")))) (<= 5 (count Sites (intersection (sites Row 6) (sites Occupied Next "Board")))) (<= 5 (count Sites (intersection (sites Row 7) (sites Occupied Next "Board")))) (<= 5 (count Sites (intersection (sites Row 8) (sites Occupied Next "Board")))) (<= 5 (count Sites (intersection (sites Column 0) (sites Occupied Next "Board")))) (<= 5 (count Sites (intersection (sites Column 1) (sites Occupied Next "Board")))) (<= 5 (count Sites (intersection (sites Column 2) (sites Occupied Next "Board")))) (<= 5 (count Sites (intersection (sites Column 3) (sites Occupied Next "Board")))) (<= 5 (count Sites (intersection (sites Column 4) (sites Occupied Next "Board")))) (<= 5 (count Sites (intersection (sites Column 5) (sites Occupied Next "Board")))) (<= 5 (count Sites (intersection (sites Column 6) (sites Occupied Next "Board")))) (<= 5 (count Sites (intersection (sites Column 7) (sites Occupied Next "Board")))) (<= 5 (count Sites (intersection (sites Column 8) (sites Occupied Next "Board"))))})) (result Mover Loss)) (if (no Moves Mover) (result Mover Loss))})))

5x5 intersecting lines, with diagonals in each quadrant. Six pieces per player. Players alternate turns placing one of their pieces on an empty spot on the board. When all of the pieces are placed, they alternate turns moving one of their pieces to an empty adjacent spot along the lines of the board. During either phase, when a player places three of their pieces in a row, they may remove one of the opponent's pieces from the board. Pieces which are in a three-in-a-row arrangement cannot be removed from the board. The player who captures all of the opponent's pieces wins. 
(game "Altan Xaraacaj" (players 2) (equipment {(board (rectangle 5 5 Alternating) Vertex) (hand Each) (piece "Marker" Each (move Step (to (is Empty (to ))) (then (if (is Line 3 Orthogonal true) (moveAgain )))))}) (rules (start (place "Marker" "Hand" 6)) {(phase "Placement" (play (if (is Prev Mover) (move Remove (forEach (sites Occupied Enemy "Board") (not (is Line 3 Orthogonal (site ))))) (move (from (handSite Mover)) (to (sites Empty)) (then (if (is Line 3 Orthogonal true) (moveAgain )))))) (nextPhase Mover (all Sites (sites Hand Mover) (= 0 (count Cell (site )))) "Movement")) (phase "Movement" (play (if (is Prev Mover) (move Remove (forEach (sites Occupied Enemy "Board") (not (is Line 3 Orthogonal (site ))))) (forEach Piece))))} (end (if (no Pieces Next) (result Next Loss)))))

6x6 board. Twelve pieces per player. Players alternate turns placing a piece on an empty space on the board. No captures may be made in the placement phase. When all of the pieces have been placed, players alternate turns moving a piece orthogonally to an empty adjacent space on the board. When a player places three of their pieces in an orthogonal row, they remove one of the opponent's pieces. Lines of four or more do not capture. Moving a piece out of a line  of four or more, making it now a line of three, does not capture. Lines of three made during the placement phase also do not result in capture. The player who captures all of the opponent's pieces wins.
(game "Wari (Alignment)" (players 2) (equipment {(board (square 6)) (hand Each) (piece "Marker" Each (if (is Line 4 Orthogonal (from )) (move Step Orthogonal (to (is Empty (to )))) (move Step Orthogonal (to (is Empty (to ))) (then (if (is Line 3 Orthogonal true) (moveAgain ))))))}) (rules (start (place "Marker" "Hand" 12)) {(phase "Placement" (play (move (from (handSite Mover)) (to (sites Empty)))) (nextPhase Mover (all Sites (sites Hand Mover) (= 0 (count Cell (site )))) "Movement")) (phase "Movement" (play (if (is Prev Mover) (move Remove (sites Occupied Enemy "Board")) (forEach Piece))))} (end (if (no Pieces Next) (result Next Loss)))))

3x3 intersecting lines, with diagonal lines of the board. Three pieces per player. players alternate turns placing a piece on one of the empty spots. The player who places their pieces in a line wins.
(game "Alquerque de Tres" (players 2) (equipment {(board (rectangle 3 3 Alternating) Vertex) (hand Each) (piece "Marker" Each)}) (rules (start (place "Marker" "Hand" 3)) (play (move (from (handSite Mover)) (to (sites Empty)))) (end (if (is Line 3) (result Mover Win)))))

Three concentric triangles, with lines connecting their corners. Six pieces per player. Pieces can move or be placed where the lines intersect, or in the center of the sides of the triangles. Players alternate turns placing their pieces on an empty space on the board.When all the pieces have been placed, players alternate turns moving their pieces to an empty adjacent space along the lines. During either phase, when a player places three pieces in a row along one of the sides of one of the lines, they remove one of the pieces belonging to the other player. The player who removes all of the opponent's pieces wins.
(game "Six-Penny Madell" (players 2) (equipment {(board (concentric Triangle 3 false true) Vertex) (hand Each) (piece "Marker" Each (move Step (to (is Empty (to ))) (then (if (is Line 3 Orthogonal true) (moveAgain )))))}) (rules (start (place "Marker" "Hand" 6)) {(phase "Placement" (play (if (is Prev Mover) (move Remove (sites Occupied Enemy "Board")) (move (from (handSite Mover)) (to (sites Empty)) (then (if (is Line 3 Orthogonal true) (moveAgain )))))) (nextPhase Mover (all Sites (sites Hand Mover) (= 0 (count Cell (site )))) "Movement")) (phase "Movement" (play (if (is Prev Mover) (move Remove (sites Occupied Enemy "Board")) (forEach Piece))))} (end (if (no Pieces Next) (result Next Loss)))))

6x6 board. Each player has twelve sticks. One player's sticks are without bark to distinguish them. Players placing their sticks in empty spaces, filling the central four first. Once all of the sticks have been placed, the players may move their sticks orthogonally one space. If a player can bring three of their sticks in a row, they may then remove one of the opponent's sticks during either phase of the game. During the movement phase, if a player has a row of four pieces and moves one away, leaving a row of three spaces, this also allows the player to capture an opponent's piece. The player who can no longer play loses.
(game "Dala" (players 2) (equipment {(board (square 6)) (hand Each) (piece "Stick" Each (if (is Line 4 Orthogonal (from ) true) (move Step Orthogonal (to (is Empty (to ))) (then (and {(if (and (!= (last From) (ahead (last From) N)) (= (mover ) (who (ahead (last From) N)))) (if (is Line 3 Orthogonal (ahead (last From) N) true) (and (moveAgain ) (addScore Mover 1)))) (if (and (!= (last From) (ahead (last From) S)) (= (mover ) (who (ahead (last From) S)))) (if (is Line 3 Orthogonal (ahead (last From) S) true) (and (moveAgain ) (addScore Mover 1)))) (if (and (!= (last From) (ahead (last From) E)) (= (mover ) (who (ahead (last From) E)))) (if (is Line 3 Orthogonal (ahead (last From) E) true) (and (moveAgain ) (addScore Mover 1)))) (if (and (!= (last From) (ahead (last From) W)) (= (mover ) (who (ahead (last From) W)))) (if (is Line 3 Orthogonal (ahead (last From) W) true) (and (moveAgain ) (addScore Mover 1))))}))) (move Step Orthogonal (to (is Empty (to ))) (then (if (is Line 3 Orthogonal true) (and (moveAgain ) (addScore Mover 1)))))))}) (rules (start (place "Stick" "Hand" 12)) {(phase "PlacementCenter" (play (move (from (handSite Mover)) (to (forEach (sites Centre) (is Empty (site )))))) (nextPhase (= (count Moves) 4) "Placement")) (phase "Placement" (play (if (!= 0 (score Mover)) (move Remove (sites Occupied Next "Board") (then (and (set Score Mover (- (score Mover) 1)) (if (< 1 (score Mover)) (moveAgain ))))) (move (from (handSite Mover)) (to (sites Empty)) (then (if (is Line 3 Orthogonal true) (and (moveAgain ) (addScore Mover 1))))))) (nextPhase (all Sites (sites Hand P2) (= 0 (count Cell (site )))) "Movement")) (phase "Movement" (play (if (!= 0 (score Mover)) (move Remove (sites Occupied Next "Board") (then (and (set Score Mover (- (score Mover) 1)) (if (< 1 (score Mover)) (moveAgain ))))) (forEach Piece))) (end (if (<= (count Pieces Next) 2) (result Next Loss))))}))

5x6 board, made in the sand. One player plays with twelve sticks and the other with twelve pebbles. The player with the sticks plays first. Players alternate turns placing one of their pieces on an empty space on the board. Players are not permitted to place more than two of their own pieces in an orthogonal row on the board. When all of the pieces are placed, players alternate turns moving one of their pieces orthogonally one space. When a player successfully places three of their pieces in an orthogonal row of three, the player captures one of the opponent's pieces. The player who captures all of their opponent's pieces wins.
(game "Wali" (players 2) (equipment {(board (rectangle 5 6)) (hand Each) (piece "Stick" P1 (move Step Orthogonal (to (is Empty (to ))) (then (if (is Line 3 Orthogonal) (moveAgain ))))) (piece "Ball" Each (move Step Orthogonal (to (is Empty (to ))) (then (if (is Line 3 Orthogonal) (moveAgain )))))}) (rules (start {(place "Stick1" (handSite P1) 12) (place "Ball2" (handSite P2) 12)}) {(phase "Placement" (play (do (move (from (handSite Mover)) (to (sites Empty))) (not (is Line 3 Orthogonal)))) (nextPhase (all Sites (sites Hand P2) (= 0 (count Cell (site )))) "Movement")) (phase "Movement" (play (if (is Prev Mover) (move Remove (sites Occupied Enemy "Board")) (forEach Piece))))} (end (if (no Pieces Next) (result Next Loss)))))

Players alternate turns placing pieces on one of the spaces. The first player to place four in a row without first making three in a row wins.
(game "Yavalath" (players 2) (equipment {(board (rotate 90.0 (hex 5))) (piece "Marker" Each)}) (rules (meta (swap )) (play (move Add (to (sites Empty)))) (end {(if (is Line 4) (result Mover Win)) (if (is Line 3) (result Mover Loss))})))

The game starts with a tile of each color touching one another. Players take turns placing tiles which must touch at least two other tiles. A player wins by either completely surrounding one or more of the opponent's tiles, or by creating a straight line of five tiles.
(game "Andantino" (players 2) (equipment {(boardless Hexagonal) (tile "Hex" Each 6)}) (rules (start {(place "Hex1" (centrePoint )) (place "Hex2" (ahead (centrePoint ) E))}) (play (move Add (to (sites Playable) (<= 2 (count Sites (sites Around (to ) NotEmpty)))))) (end {(if (or (is Loop Next) (is Line 5)) (result Mover Win)) (if (= (count Moves) (* (count Players) 24)) (result Mover Draw))})))

5x5 board. Twelve pieces per player. Players alternate turns placing two pieces on the board. When all of the pieces are placed, players alternate turns moving one piece orthogonally any distance. The first player to place five of their pieces in an orthogonal or diagonal line wins.
        
(game "Fart (5x5)" (players 2) (equipment {(board (square 5)) (piece "Marker" Each (move Slide Orthogonal)) (hand Each)}) (rules (start (place "Marker" "Hand" 12)) {(phase "Placement" (play (move (from (handSite Mover)) (to (difference (sites Board) (centrePoint )) (is Empty (to ))) (then (if (not (is Prev Mover)) (moveAgain ))))) (nextPhase Mover (is Empty (handSite Mover)) "Move")) (phase "Move" (play (forEach Piece)))} (end (if (is Line 5) (result Mover Win)))))

3x3 intersecting lines. Three pieces per player. Players alternate turns placing a piece on the board. When all of the pieces have been placed, the players alternate turns moving a piece to an empty adjacent spot. A piece which is surrounded on opposite sides by pieces belonging to the opponent cannot be moved. The player who places three of their stones in a row along one of the lines wins.
(game "Triodi (Chios)" (players 2) (equipment {(board (square 3) Vertex) (hand Each) (piece "Marker" Each (if (not (or (if (and (!= (ahead (from ) N) (from )) (!= (ahead (from ) S) (from ))) (and (= (next ) (who (ahead (from ) N))) (= (next ) (who (ahead (from ) S))))) (if (and (!= (ahead (from ) E) (from )) (!= (ahead (from ) W) (from ))) (and (= (next ) (who (ahead (from ) E))) (= (next ) (who (ahead (from ) W))))))) (move Step (to (is Empty (to ))))))}) (rules (start (place "Marker" "Hand" 3)) {(phase "Placement" (play (move (from (handSite Mover)) (to (sites Empty)))) (nextPhase Mover (all Sites (sites Hand Mover) (= 0 (count Cell (site )))) "Movement")) (phase "Movement" (play (forEach Piece)))} (end (if (is Line 3) (result Mover Win)))))

5x5 intersecting lines, with diagonals in the quadrants. Five pieces per player. Players alternate turns placing a piece on the board. Once all of the pieces are placed on the board, players alternate turns moving a piece to an empty adjacent spot on the board. The player who places all five of their pieces in a line wins.
(game "Marelle Quadruple" (players 2) (equipment {(board (rectangle 5 5 Alternating) Vertex) (hand Each) (piece "Marker" Each (move Step (to (is Empty (to )))))}) (rules (start (place "Marker" "Hand" 5)) {(phase "Placement" (play (move (from (handSite Mover)) (to (sites Empty)))) (nextPhase (all Sites (sites Hand P2) (= 0 (count Cell (site )))) "Movement")) (phase "Movement" (play (forEach Piece)))} (end (if (is Line 5) (result Mover Win)))))

3x3 intersecting lines. Three sticks per player, the sticks angled toward the player to indicate ownership. Players alternate turns placing sticks on the board. Once all of the sticks are placed, players alternate turns moving a stick to any empty spot on the board. The first player to place three sticks in an orthogonal row along the lines wins.
(game "Akidada" (players 2) (equipment {(board (square 3) Vertex) (hand Each) (piece "Stick" Each (move (from ) (to (sites Empty))))}) (rules (start (place "Stick" "Hand" 3)) {(phase "Placement" (play (move (from (handSite Mover)) (to (sites Empty)))) (nextPhase (all Sites (sites Hand P2) (= 0 (count Cell (site )))) "Movement")) (phase "Movement" (play (forEach Piece)))} (end (if (is Line 3 Orthogonal) (result Mover Win)))))

A board is dead if it contains at least one set of three stones in a straight orthogonal or diagonal line.
            
            A board that is not dead is alive.
            
            On their turn, a player must place a piece on an empty square of a living board.
            
        When all boards are dead, the player who made the last placement loses.
(game "Notakto" (players 2) (equipment {(board (union {(square 3) (shift 0.0 4.0 (square 3)) (shift 0.0 8.0 (square 3)) (shift 0.0 12.0 (square 3)) (shift 4.0 0.0 (square 3)) (shift 4.0 4.0 (square 3)) (shift 4.0 8.0 (square 3)) (shift 4.0 12.0 (square 3)) (shift 8.0 0.0 (square 3)) (shift 8.0 4.0 (square 3)) (shift 8.0 8.0 (square 3)) (shift 8.0 12.0 (square 3)) (shift 12.0 0.0 (square 3)) (shift 12.0 4.0 (square 3)) (shift 12.0 8.0 (square 3)) (shift 12.0 12.0 (square 3))})) (piece "Marker" Each)}) (rules (play (move Add (to (sites Empty) (= 0 (state (to )))) (then (if (is Line 3) (forEach Site (expand (last To) 2) (set State (site ) 1)))))) (end (if (no Moves Next) (result Mover Loss)))))

Each player has three pieces. Pieces are initially placed three-in a row on side nearest the player. Pieces can move to an adjacent space connected to it by a line. The goal is to create three in a row through the central space.
(game "Shisima" (players 2) (equipment {(board (concentric {1 8}) Vertex) (piece "Marker" Each (move Step (to (is Empty (to )))))}) (rules (start {(place "Marker1" {1 8 7}) (place "Marker2" {3 4 5})}) (play (forEach Piece)) (end (if (and (= (what (centrePoint )) (mover )) (is Line 3)) (result Mover Win)))))

Same rules as Six Men's Morris.
(game "Symbol S.2" (players 2) (equipment {(board (graph {{1.0 0.0} {2.0 0.0} {0.0 1.0} {1.0 1.0} {2.0 1.0} {3.0 1.0} {0.0 2.0} {1.0 2.0} {2.0 2.0} {3.0 2.0} {1.0 3.0} {2.0 3.0}} {{0 2} {0 3} {3 2} {3 4} {1 4} {4 5} {1 5} {3 7} {4 8} {6 7} {7 8} {8 9} {6 10} {11 9} {10 7} {11 8}}) Vertex) (hand Each) (piece "Marker" Each (move Step (to (is Empty (to ))) (then (if (is Line 3) (moveAgain )))))}) (rules (start (place "Marker" "Hand" 4)) {(phase "Placement" (play (if (is Prev Mover) (move Remove (sites Occupied Enemy "Board")) (move (from (handSite Mover)) (to (sites Empty)) (then (if (is Line 3) (moveAgain )))))) (nextPhase Mover (all Sites (sites Hand Mover) (= 0 (count Cell (site )))) "Movement")) (phase "Movement" (play (if (is Prev Mover) (move Remove (sites Occupied Enemy "Board")) (forEach Piece))))} (end (if (<= (count Pieces Next) 2) (result Next Loss)))))

Three concentric squares, with lines connecting the diagonals and the midpoints of the sides. Twelve pieces per player. Players alternate turns placing a piece on an empty spot on the board. When a player places three pieces in a row along one of the lines on the board, they remove one of the pieces belonging to the opponent. When all of the pieces have been placed, players alternate turns moving a piece to an empty adjacent spot along the lines. The first player to capture all of the opponent's pieces wins.
(game "Tule Paid" (players 2) (equipment {(board (concentric Square 3 true) Vertex) (hand Each) (piece "Marker" Each (move Step (to (is Empty (to ))) (then (if (is Line 3) (moveAgain )))))}) (rules (start (place "Marker" "Hand" 12)) {(phase "Placement" (play (if (is Prev Mover) (move Remove (sites Occupied Enemy "Board")) (move (from (handSite Mover)) (to (sites Empty)) (then (if (is Line 3) (moveAgain )))))) (nextPhase Mover (all Sites (sites Hand Mover) (= 0 (count Cell (site )))) "Movement")) (phase "Movement" (play (if (is Prev Mover) (move Remove (sites Occupied Enemy "Board")) (forEach Piece))))} (end (if (no Pieces Next) (result Next Loss)))))

Play occurs on a 3x3 grid. One player places an X, the other places an O and players take turns placing their marks in the grid, attempting to get three in a row of their colour.
(game "Tic-Tac-Toe" (players 2) (equipment {(board (square 3)) (piece "Disc" P1) (piece "Cross" P2)}) (rules (play (move Add (to (sites Empty)))) (end (if (is Line 3) (result Mover Win)))))

Three concentric triangles, with lines connecting their midpoints and corners. Eight pieces per player. Players alternate turns placing a piece on an empty spot on the board. When all of the pieces are placed, players alternate turns moving a piece to an empty adjacent spot along the lines. When a player places three of their pieces in a row, they remove one of the opponent's pieces from the board. A piece that is in a three-in-a-row pattern cannot be removed. The player who removes all of the opponent's pieces wins.
(game "Gurgaldaj" (players 2) (equipment {(board (concentric Triangle 3 true) Vertex) (hand Each) (piece "Marker" Each (move Step (to (is Empty (to ))) (then (if (is Line 3 Orthogonal) (moveAgain )))))}) (rules (start (place "Marker" "Hand" 8)) {(phase "Placement" (play (if (is Prev Mover) (move Remove (forEach (sites Occupied Enemy "Board") (not (is Line 3 Orthogonal (site ))))) (move (from (handSite Mover)) (to (sites Empty)) (then (if (is Line 3 Orthogonal) (moveAgain )))))) (nextPhase Mover (all Sites (sites Hand Mover) (= 0 (count Cell (site )))) "Movement")) (phase "Movement" (play (if (is Prev Mover) (move Remove (forEach (sites Occupied Enemy "Board") (not (is Line 3 Orthogonal (site ))))) (forEach Piece))))} (end (if (no Pieces Next) (result Next Loss)))))

Three concentric squares, with lines connecting the midpoints and diagonals of the squares. Twelve pieces per player. Players alternate turns placing one of their pieces on the board. When all of the pieces are placed, the pieces may be moved to an empty adjacent spot on the board. One player wins  by placing three of their pieces in a row. The other player wins by blocking their opponent from being able to move.
(game "Niranchy" (players 2) (equipment {(board (concentric Square 3 true) Vertex) (hand Each) (piece "Marker" Each (move Step (to (is Empty (to )))))}) (rules (start (place "Marker" "Hand" 12)) {(phase "Placement" (play (move (from (handSite Mover)) (to (sites Empty)))) (nextPhase Mover (all Sites (sites Hand Mover) (= 0 (count Cell (site )))) "Movement")) (phase "Movement" (play (forEach Piece)))} (end {(if (no Moves P2) (result P1 Win)) (if (is Line 3 P2) (result P2 Win))})))

Players take turns placing their pieces on one empty space on the board, with the goal of making a line with stones connected diagonally of at least length 4.
(game "Broken Line" (players 2) (equipment {(board (hex Diamond 11)) (piece "Marker" Each)}) (rules (meta (swap )) (play (move Add (to (sites Empty)))) (end (if (is Line 4 Diagonal) (result Mover Win)))))

5x6 board. Each player has twelve pieces. Players alternate placing their pieces until they are all placed on the board. Players cannot make a row of three pieces in the placement phase. Once the pieces are all on the board, they may be moved one space orthogonally. The goal is to make a line of three, which allows the player to capture one of the opponent's pieces. In the case that a move creates two lines of three, only one capture is made. The player who captures the most pieces wins. Matches are typically played to a score of ten, with a player scoring one point by winning a game, and two points for winning without any of their pieces being captured.
(game "Dra" (players 2) (equipment {(board (rectangle 5 6)) (hand Each) (piece "Marker" Each (move Step Orthogonal (to (is Empty (to ))) (then (if (is Line 3 Orthogonal true) (moveAgain )))))}) (rules (start (place "Marker" "Hand" 12)) {(phase "Placement" (play (do (move (from (handSite Mover)) (to (sites Empty))) (not (is Line 3 Orthogonal)))) (nextPhase (all Sites (sites Hand P2) (= 0 (count Cell (site )))) "Movement")) (phase "Movement" (play (if (is Prev Mover) (move Remove (sites Occupied Enemy "Board")) (forEach Piece))) (end (if (<= (count Pieces Next) 2) (result Next Loss))))}))

Each piece has four dichotomous attributes – color, height, shape, and consistency – so each piece is either black or white, tall or short, square or round, and hollow or solid. The object is to place the fourth piece in a row in which all four pieces have at least one attribute in common. The twist is that your opponent gets to choose the piece you place on the board each turn.
(game "Quarto" (players 2) (equipment {(board (square 4) Vertex) (piece "Disc" Each) (piece "Square" Each) (hand Shared 16)}) (rules (start {(place "Disc1" (handSite Shared 0)) (place "Disc1" (handSite Shared 1) 1) (place "Disc1" (handSite Shared 2) 1) (place "Disc1" (handSite Shared 3) 1 1) (place "Disc2" (handSite Shared 4)) (place "Disc2" (handSite Shared 5) 1) (place "Disc2" (handSite Shared 6) 1) (place "Disc2" (handSite Shared 7) 1 1) (place "Square1" (handSite Shared 8)) (place "Square1" (handSite Shared 9) 1) (place "Square1" (handSite Shared 10) 1) (place "Square1" (handSite Shared 11) 1 1) (place "Square2" (handSite Shared 12)) (place "Square2" (handSite Shared 13) 1) (place "Square2" (handSite Shared 14) 1) (place "Square2" (handSite Shared 15) 1 1)}) {(phase "Select" (play (move Select (from Cell (difference (sites Hand Shared) (sites Empty 1))))) (nextPhase "Place")) (phase "Place" (play (move (from Cell (last From)) (to (sites Empty)) (then (moveAgain )))) (end {(if (is Line 4 All {(id "Disc" P1) (id "Disc" P2)}) (result Mover Win)) (if (is Line 4 All {(id "Square" P1) (id "Square" P2)}) (result Mover Win)) (if (is Line 4 All P1) (result Mover Win)) (if (is Line 4 All P2) (result Mover Win)) (if (is Line 4 All {(id "Disc" P1) (id "Disc" P2) (id "Square" P1) (id "Square" P2)} (= 0 (state (to )))) (result Mover Win)) (if (is Line 4 All {(id "Disc" P1) (id "Disc" P2) (id "Square" P1) (id "Square" P2)} (= 1 (state (to )))) (result Mover Win)) (if (is Line 4 All {(id "Disc" P1) (id "Disc" P2) (id "Square" P1) (id "Square" P2)} (= 0 (value Piece (to )))) (result Mover Win)) (if (is Line 4 All {(id "Disc" P1) (id "Disc" P2) (id "Square" P1) (id "Square" P2)} (= 1 (value Piece (to )))) (result Mover Win))}) (nextPhase "Select"))}))

Three concentric squares, with lines connecting the midpoints of the sides. Eleven pieces per player. Players alternate turns placing a piece on the board. When a player lines up three of their pieces in a row along one of the lines of the board, the player removes one of the opponent's pieces. When all of the pieces are placed, players move their pieces one spot along the lines of the board. The player who captures all of the opponent's pieces wins.
(game "Fettas" (players 2) (equipment {(board (concentric Square 3) Vertex) (hand Each) (piece "Marker" Each (move Step (to (is Empty (to ))) (then (if (is Line 3 Orthogonal true) (moveAgain )))))}) (rules (start (place "Marker" "Hand" 11)) {(phase "Placement" (play (if (is Prev Mover) (move Remove (sites Occupied Enemy "Board")) (move (from (handSite Mover)) (to (sites Empty)) (then (if (is Line 3 Orthogonal true) (moveAgain )))))) (nextPhase Mover (all Sites (sites Hand Mover) (= 0 (count Cell (site )))) "Movement")) (phase "Movement" (play (if (is Prev Mover) (move Remove (sites Occupied Enemy "Board")) (forEach Piece))))} (end (if (no Pieces Next) (result Next Loss)))))

4x4 board. Six pieces per player, which begin on opposite rows of the board and in the two outer squares in the row in front of it. Players alternate turns moving a piece orthogonally to an adjacent space on the board. When a player moves a piece such that it creates three in a row: two of their own pieces (which must be adjacent to one another) and one of the opponent's pieces (which must have a vacant space on the opposite side of it), the opponent's piece is captured. However, when the opponent's piece moves in line with two of the player's piece on the opponent's turn, the player does not capture the opponent's piece. The player who captures all of the opponent's pieces wins.
        
(game "Six Insect Game" (players 2) (equipment {(board (square 4)) (piece "Marker" Each (move Step Orthogonal (to (is Empty (to ))) (then (if (is Line 2 Orthogonal) (or {(if (!= (ahead (last To) N) (last To)) (if (= (mover ) (who (ahead (last To) N))) (or (if (!= (ahead (last To) 2 N) (last To)) (if (= (next ) (who (ahead (last To) 2 N))) (if (!= (ahead (last To) 3 N) (last To)) (if (is Empty (ahead (last To) 3 N)) (remove (ahead (last To) 2 N)))))) (if (!= (ahead (last To) S) (last To)) (if (= (next ) (who (ahead (last To) S))) (if (!= (ahead (last To) 2 S) (last To)) (if (is Empty (ahead (last To) 2 S)) (remove (ahead (last To) S))))))))) (if (!= (ahead (last To) S) (last To)) (if (= (mover ) (who (ahead (last To) S))) (or (if (!= (ahead (last To) 2 S) (last To)) (if (= (next ) (who (ahead (last To) 2 S))) (if (!= (ahead (last To) 3 S) (last To)) (if (is Empty (ahead (last To) 3 S)) (remove (ahead (last To) 2 S)))))) (if (!= (ahead (last To) N) (last To)) (if (= (next ) (who (ahead (last To) N))) (if (!= (ahead (last To) 2 N) (last To)) (if (is Empty (ahead (last To) 2 N)) (remove (ahead (last To) N))))))))) (if (!= (ahead (last To) E) (last To)) (if (= (mover ) (who (ahead (last To) E))) (or (if (!= (ahead (last To) 2 E) (last To)) (if (= (next ) (who (ahead (last To) 2 E))) (if (!= (ahead (last To) 3 E) (last To)) (if (is Empty (ahead (last To) 3 E)) (remove (ahead (last To) 2 E)))))) (if (!= (ahead (last To) W) (last To)) (if (= (next ) (who (ahead (last To) W))) (if (!= (ahead (last To) 2 W) (last To)) (if (is Empty (ahead (last To) 2 W)) (remove (ahead (last To) W))))))))) (if (!= (ahead (last To) W) (last To)) (if (= (mover ) (who (ahead (last To) W))) (or (if (!= (ahead (last To) 2 W) (last To)) (if (= (next ) (who (ahead (last To) 2 W))) (if (!= (ahead (last To) 3 W) (last To)) (if (is Empty (ahead (last To) 3 W)) (remove (ahead (last To) 2 W)))))) (if (!= (ahead (last To) E) (last To)) (if (= (next ) (who (ahead (last To) E))) (if (!= (ahead (last To) 2 E) (last To)) (if (is Empty (ahead (last To) 2 E)) (remove (ahead (last To) E)))))))))})))))}) (rules (start {(place "Marker1" (union (intersection (union (sites Right) (sites Left)) (sites Row 1)) (sites Bottom))) (place "Marker2" (union (intersection (union (sites Right) (sites Left)) (sites Row 2)) (sites Top)))}) (play (forEach Piece)) (end (if (no Pieces Next) (result Next Loss)))))

5x6 or 6x6 board. Twelve pieces per player. Players take turns placing pieces on the board. Once all the pieces are on the board, players may move one piece orthogonally one space during their turn. Players cannot create a line of more than three in an orthogonal direction, and cannot make a line of three during the placement phase. If three pieces are in an orthogonal line, they cannot be moved again. If a player makes three rows before the opponent makes one, it is an automatic win.
        
(game "Shiva" (players 2) (equipment {(board (rectangle 5 6)) (hand Each) (piece "Marker" Each (if (not (is Line 3 Orthogonal (from ))) (move Step Orthogonal (to (is Empty (to ))) (then (if (is Line 3 Orthogonal) (if (= (value Player Mover) -1) (set Value Mover 1) (set Value Mover (+ (value Player Mover) 1))))))))}) (rules (start (place "Marker" "Hand" 12)) {(phase "Placement" (play (do (move (from (handSite Mover)) (to (sites Empty))) (not (is Line 3 Orthogonal)))) (nextPhase (and (all Sites (sites Hand P1) (= 0 (count Cell (site )))) (all Sites (sites Hand P2) (= 0 (count Cell (site ))))) "Movement")) (phase "Movement" (play (do (forEach Piece) (not (is Line 4 Orthogonal)))))} (end (if (= (value Player Mover) 3) (result Mover Win)))))

3x3 intersecting lines. Three pieces per player. Players alternate turns placing pieces on an empty spot on the board. When all pieces are placed, players alternate turns moving a piece to any empty spot on the board. The first player to place their pieces in an orthogonal row along the lines wins.
(game "Nine Holes" (players 2) (equipment {(board (square 3) Vertex) (hand Each) (piece "Marker" Each (move (from ) (to (sites Empty))))}) (rules (start (place "Marker" "Hand" 3)) {(phase "Placement" (play (move (from (handSite Mover)) (to (sites Empty)))) (nextPhase (all Sites (sites Hand P2) (= 0 (count Cell (site )))) "Movement")) (phase "Movement" (play (forEach Piece)))} (end (if (is Line 3 Orthogonal) (result Mover Win)))))

3x3 intersecting lines, with diagonals. Three pieces per player. Players alternate turns placing a piece on an empty spot on the board. Once all of the pieces are placed, the players alternate turns moving a piece to an empty adjacent spot along the lines. The first player to place three pieces in a line wins.
(game "Liu Tsi" (players 2) (equipment {(board (rectangle 3 3 Alternating) Vertex) (hand Each) (piece "Marker" Each (move Step (to (is Empty (to )))))}) (rules (start (place "Marker" "Hand" 3)) {(phase "Placement" (play (move (from (handSite Mover)) (to (sites Empty)))) (nextPhase (all Sites (sites Hand P2) (= 0 (count Cell (site )))) "Movement")) (phase "Movement" (play (forEach Piece)))} (end (if (is Line 3) (result Mover Win)))))

Played on a square grid 11x11 or larger.  White goes first and places two pieces every turn, Black places four pieces per turn.  White wins if they make an orthogonal line of four pieces; Black wins if they make an orthogonal line of 7 pieces.
(game "Unfair" (players 2) (equipment {(board (square 11) Vertex) (piece "Ball" Each)}) (rules (play (or (move Add (to (sites Empty) (= (id P1) (mover ))) (then (if (= 0 (count MovesThisTurn)) (moveAgain )))) (move Add (to (sites Empty) (= (id P2) (mover ))) (then (if (< (count MovesThisTurn) 3) (moveAgain )))))) (end {(if (and (= (id P1) (mover )) (is Line 4 Orthogonal)) (result Mover Win)) (if (and (= (id P2) (mover )) (is Line 7 Orthogonal)) (result Mover Win))})))

Three concentric hexagons, with lines connecting the corners and midpoints of the sides. Seventeen pieces per player. Players alternate turns placing one of their pieces on an empty spot on the board. When all of the pieces are placed, they alternate turns moving one of their pieces to an empty adjacent spot along the lines of the board. During either phase, when a player places three of their pieces in a row, they may remove one of the opponent's pieces from the board. Pieces which are in a three-in-a-row arrangement cannot be removed from the board. The player who captures all of the opponent's pieces wins.
(game "Zurgaan Tal" (players 2) (equipment {(board (rotate 30.0 (concentric Hexagon 3 true)) Vertex) (hand Each) (piece "Marker" Each (move Step (to (is Empty (to ))) (then (if (is Line 3) (moveAgain )))))}) (rules (start (place "Marker" "Hand" 17)) {(phase "Placement" (play (if (is Prev Mover) (move Remove (forEach (sites Occupied Enemy "Board") (not (is Line 3 Orthogonal (site ))))) (move (from (handSite Mover)) (to (sites Empty)) (then (if (is Line 3) (moveAgain )))))) (nextPhase Mover (all Sites (sites Hand Mover) (= 0 (count Cell (site )))) "Movement")) (phase "Movement" (play (if (is Prev Mover) (move Remove (forEach (sites Occupied Enemy "Board") (not (is Line 3 Orthogonal (site ))))) (forEach Piece))))} (end (if (no Pieces Next) (result Next Loss)))))

Three concentric squares, with lines connecting the midpoints. Nine pieces per player. Players alternate turns placing a piece on the board on an empty spot. When all of the pieces have been placed, the players alternate turns moving a piece to an empty adjacent spot along the lines of the board. During either phase, if a player places three of their pieces in a row along the lines on the board, the player removes one of the opponent's pieces. The player who removes all of the opponent's peices wins.
(game "Nao Guti" (players 2) (equipment {(board (concentric Square 3) Vertex) (hand Each) (piece "Marker" Each (move Step (to (is Empty (to ))) (then (if (is Line 3 Orthogonal true) (moveAgain )))))}) (rules (start (place "Marker" "Hand" 9)) {(phase "Placement" (play (if (is Prev Mover) (move Remove (sites Occupied Enemy "Board")) (move (from (handSite Mover)) (to (sites Empty)) (then (if (is Line 3 Orthogonal true) (moveAgain )))))) (nextPhase Mover (all Sites (sites Hand Mover) (= 0 (count Cell (site )))) "Movement")) (phase "Movement" (play (if (is Prev Mover) (move Remove (sites Occupied Enemy "Board")) (forEach Piece))))} (end (if (no Pieces Next) (result Next Loss)))))

Played on a 9x9 board with nine Go pieces per player occupying their two nearest ranks. Pieces move as a rook in Shogi. Pieces may also move by hopping over an adjacent piece of any color. This does not capture the piece, and multiple hops are not allowed in on turn. The goal is to create an orthogonal line of five of a player's pieces outside the player's starting rows.
(game "Dai Hasami Shogi" (players 2) (equipment {(board (square 9)) (piece "Marker" Each (or (move Slide Orthogonal) (move Hop Orthogonal (between (is Occupied (between ))) (to (is Empty (to )))) (then (or (custodial (from (last To)) Orthogonal (between (max 1) (is Enemy (who (between ))) (apply (remove (between )))) (to (is Friend (who (to ))))) (surround (from (last To)) Orthogonal (between (and (is In (between ) (sites Corners)) (is Enemy (who (between )))) (apply (remove (between )))) (to (is Friend (who (to ))))))))) (regions P1 (expand (sites Bottom))) (regions P2 (expand (sites Top)))}) (rules (start {(place "Marker1" (sites P1)) (place "Marker2" (sites P2))}) (play (forEach Piece)) (end {(if (is Line 5 Orthogonal (not (is In (to ) (sites Mover)))) (result Mover Win)) (if (and (< (count Pieces P1) 5) (< (count Pieces P2) 5)) (result Mover Draw))})))

3x3 intersecting lines with diagonals. Play occurs on the intersections of the lines. Players each have three pieces, initially placed on the sides closest to the player. Players move the pieces to an adjacent unoccupied intersection along the lines. The goal is to make three in a row which cannot be in the starting position. An alternate version requires the three in a row to be diagonal.
(game "Tant Fant" (players 2) (equipment {(board (rectangle 3 Alternating) Vertex) (piece "Marker" Each (move Step (to (is Empty (to ))))) (regions P1 (sites Bottom)) (regions P2 (sites Top))}) (rules (start {(place "Marker1" (sites P1)) (place "Marker2" (sites P2))}) (play (forEach Piece)) (end (if (and (not (all Sites (sites Occupied Mover) (is In (site ) (sites Mover)))) (is Line 3)) (result Mover Win)))))

According to the given rules, the pieces, eight on each army, start in reserve off the board. A move consists of either: 1) placing a piece from your reserve on any vacant square; 2) moving a piece to any adjacent square, orthogonally or diagonally (as a chess king), or 3) capturing an enemy piece by jumping it, like an 8-directional checker. Multiple jumps are allowed. When a jump is possible, jumping is compulsory, though the player may choose any jumping move available and need not capture the greatest possible number of pieces.

The object is either to form a line of three of your pieces, orthogonally or diagonally with no intervening spaces, or to capture six enemy pieces (i.e. reduce your enemy’s forces to two so that he cannot win).
(game "Moxie" (players 2) (equipment {(board (square 4)) (piece "Pawn" Each) (hand Each)}) (rules (start (place "Pawn" "Hand" 8)) (play (if (is Prev Mover) (move Hop (from (last To)) (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to ))) (then (if (can Move (move Hop (from (last To)) (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to ))))) (moveAgain )))) (priority {(forEach Piece (move Hop (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to ))) (then (if (can Move (move Hop (from (last To)) (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to ))))) (moveAgain ))))) (or (if (is Occupied (handSite Mover)) (move (from (handSite Mover)) (to (sites Empty)))) (forEach Piece (move Step (to (is Empty (to ))))))}))) (end {(forEach NonMover (<= (count Pieces Player) 2) (result Player Loss)) (if (is Line 3 All) (result Mover Win))})))

Triangle, with a line from the apex bisecting the base, and a line bisecting this one and the opposite sides. Three pieces per player. Players alternate turns placing a piece on one of the empty points on the board. When all of the pieces have been placed, players alternate turns moving any one of their pieces to the empty point on the board. The first player to make a line of three wins. 
(game "Tsoro Yemutatu (Triangle)" (players 2) (equipment {(board (scale 1.0 2.0 (wedge 3)) Vertex) (hand Each) (piece "Marker" Each (move (from ) (to (sites Empty))))}) (rules (start (place "Marker" "Hand" 3)) {(phase "Placement" (play (move (from (handSite Mover)) (to (sites Empty)))) (nextPhase (all Sites (sites Hand P2) (= 0 (count Cell (site )))) "Movement")) (phase "Movement" (play (forEach Piece)))} (end (if (is Line 3) (result Mover Win)))))

6x6 grid. Twelve pieces per player. In the first phase, players alternate turns placing their pieces on an empty space on the board. They are forbidden from placing two of their own pieces orthogonally adjacent to one another. Once all of the pieces are placed, players alternate turns moving the pieces in an orthogonal direction to an empty adjacent spot. When they place a piece so that two are in a row, they capture one of the opponent's pieces. The player who captures all of the opponent's pieces wins.
(game "Bolotudu" (players 2) (equipment {(board (square 6)) (hand Each) (piece "Marker" Each (move Step Orthogonal (to (is Empty (to ))) (then (if (is Line 2 Orthogonal) (moveAgain )))))}) (rules (start (place "Marker" "Hand" 12)) {(phase "Placement" (play (move (from (handSite Mover)) (to (difference (sites Empty) (sites Around (sites Occupied Mover) Orthogonal))))) (nextPhase (all Sites (sites Hand P2) (= 0 (count Cell (site )))) "Movement")) (phase "Movement" (play (if (is Prev Mover) (move Remove (sites Occupied Next)) (forEach Piece))))} (end (if (no Pieces Next) (result Next Loss)))))

Your goal in Gobblet Junior is to place three of your pieces in a horizontal, vertical or diagonal row. Your pieces can stack on top of each other, and they start the game nested, off the board. On a turn, you either play one exposed piece from your three off-the-board piles or move one piece on the board to any other spot on the board where it fits. A larger piece can cover any smaller piece.
            
        Your memory is tested as you try to remember which color one of your larger pieces is covering before you move it. As soon as a player has three like-colored pieces in a row, he wins.
(game "Gobblet Gobblers" (players 2) (equipment {(board (square 3)) (piece "Disc1" Each) (piece "Disc2" Each) (piece "Disc3" Each) (hand Each 3)}) (rules (start {(place Stack "Disc11" (handSite P1) 3) (place Stack "Disc12" (handSite P2) 3) (place Stack "Disc21" (handSite P1 1) 3) (place Stack "Disc22" (handSite P2 1) 3) (place Stack "Disc31" (handSite P1 2) 3) (place Stack "Disc32" (handSite P2 2) 3)}) (play (or (move (from (sites Hand Mover)) (to (sites Board) (and (!= (from ) (to )) (or (is Empty (to )) (< (- (what (from ) (topLevel (from ))) (who (from ) (topLevel (from )))) (- (what (to ) (topLevel (to ))) (who (to ) (topLevel (to ))))))))) (move (from (sites Occupied Mover true)) (to (sites Board) (and (!= (from ) (to )) (or (is Empty (to )) (< (- (what (from ) (topLevel (from ))) (who (from ) (topLevel (from )))) (- (what (to ) (topLevel (to ))) (who (to ) (topLevel (to ))))))))))) (end (forEach Player (is Line 3 Player true) (result Player Win)))))

TURNS - At each turn, each player must move one of his stones
            - A stone moves (orthogonal and diagonal) forward to an empty cell.
        GOAL - A player wins by making a (orthogonal or diagonal) 4 in-a-row.
(game "Roll-Ing to Four" (players {(player N) (player S)}) (equipment {(board (rectangle 10 4) Vertex) (piece "Ball" Each (move Step (directions Forwards All) (to (is Empty (to )))))}) (rules (start {(place "Ball1" (sites {"A1" "B1" "C1" "B6" "C6" "D6"})) (place "Ball2" (sites {"A5" "B5" "C5" "B10" "C10" "D10"}))}) (play (forEach Piece)) (end (if (is Line 4 All) (result Mover Win)))))

Three concentric squares with lines connecting the midpoints of the squares. Nine pieces per player. Players alternate turns placing one of their pieces on an empty space. If a player places three of their pieces along one of the straight lines, they take another turn. Once all of the pieces are on the board, players take turns moving a piece to an empty space on the board. When a player creates a line of three in this phase, the player removes one of the opponent's pieces, and receives another turn. The player who reduces the opponent to two pieces wins.
(game "Nerenchi Keliya" (players 2) (equipment {(board (concentric Square 3) Vertex) (hand Each) (piece "Marker" Each (move Step (to (is Empty (to ))) (then (if (is Line 3) (moveAgain )))))}) (rules (start (place "Marker" "Hand" 9)) {(phase "Placement" (play (move (from (handSite Mover)) (to (sites Empty)) (then (if (and (is Line 3) (not (all Sites (sites Hand Mover) (= 0 (count Cell (site )))))) (moveAgain ))))) (nextPhase (and (all Sites (sites Hand P1) (= 0 (count Cell (site )))) (all Sites (sites Hand P2) (= 0 (count Cell (site ))))) "Movement")) (phase "Movement" (play (forEach Piece)) (nextPhase Mover (is Line 3) "Capture")) (phase "Capture" (play (move Remove (sites Occupied Enemy "Board") (then (moveAgain )))) (nextPhase Mover "Movement"))} (end (forEach Player (<= (count Pieces Player) 2) (result Player Loss)))))

3x3 intersecting lines with diagonals. Play occurs on the intersections of the lines. Players each have three pieces, initially placed on the sides closest to the player. Players move the pieces to an adjacent unoccupied intersection along the lines. The goal is to make three in a row which cannot be in the starting position.
(game "Epelle" (players 2) (equipment {(board (rectangle 3 Alternating) Vertex) (piece "Marker" Each (move Step (to (is Empty (to ))))) (regions P1 (sites Bottom)) (regions P2 (sites Top))}) (rules (start {(place "Marker1" (sites P1)) (place "Marker2" (sites P2))}) (play (forEach Piece)) (end (if (and (not (all Sites (sites Occupied Mover) (is In (site ) (sites Mover)))) (is Line 3)) (result Mover Win)))))

3x3 intersecting lines. Three pieces per player. Players alternate turns placing a piece on an empty spot on the board. Once all of the pieces are placed, players move a piece to any empty spot on the board. The first player to make an orthogonal row of three along the lines of the board wins.
(game "San-Noku-Narabe" (players 2) (equipment {(board (square 3) Vertex) (hand Each) (piece "Marker" Each (move (from ) (to (sites Empty))))}) (rules (start (place "Marker" "Hand" 3)) {(phase "Placement" (play (move (from (handSite Mover)) (to (sites Empty)))) (nextPhase (all Sites (sites Hand P2) (= 0 (count Cell (site )))) "Movement")) (phase "Movement" (play (forEach Piece)))} (end (if (is Line 3 Orthogonal) (result Mover Win)))))

5x6 board. Players have 12 pieces each. They take turns placing pieces on an empty board.Once all pieces are placed, players can move pieces orthogonally to an adjacent space, attempting to make three in a row. When three in a row are made, an opponent's piece is removed from the board that is not in a three in a row pattern. Placing more than three in a row is not allowed. Three in a row during the initial phase of the game does not count. When a player has only two pieces left, they lose.
(game "Dara" (players 2) (equipment {(board (rectangle 5 6)) (hand Each) (piece "Marker" Each (move Step Orthogonal (to (is Empty (to ))) (then (if (is Line 3 Orthogonal) (moveAgain )))))}) (rules (start (place "Marker" "Hand" 12)) {(phase "Placement" (play (do (move (from (handSite Mover)) (to (sites Empty))) (not (is Line 4 Orthogonal)))) (nextPhase (all Sites (sites Hand P2) (= 0 (count Cell (site )))) "Movement")) (phase "Movement" (play (if (is Prev Mover) (move Remove (forEach (sites Occupied Enemy "Board") (not (is Line 3 Orthogonal (site ))))) (do (forEach Piece) (not (is Line 4 Orthogonal))))))} (end (if (<= (count Pieces Next) 2) (result Next Loss)))))

Play occurs on a 3x3 grid. One player places an X, the other places an O and players take turns placing their marks in the grid, losing is they make three in a row of their colour.
(game "Tic-Tac-Toe Misere" (players 2) (equipment {(board (square 3)) (piece "Disc" P1) (piece "Cross" P2)}) (rules (play (move Add (to (sites Empty)))) (end (if (is Line 3) (result Next Win)))))

Goal: Simultaneously create two or more rows of exactly four stones of your color.
            
            Play: White starts by placing a white stone at an empty cell. Players then take turns placing two stones of their color at empty cells, one stone after another.
            
            In each placement, players are not allowed to create a single
            4-in-a-row of their color, unless that placement simultaneously
            creates at least one other 4-in-a-row of their color to win the game.
            
            This means that players may NOT make a single 4-in-a-row of their color on the first placement of their turn even if they can make a second 4-in-a-row on their second placement.
            
            In no event are players allowed to create 5 (or more) -in-a-row of their color.
            
        The first player to make simultaneous 4-in-a-rows of their color wins immediately, whether it was their first or second placement.
(game "Yavalax" (players 2) (equipment {(board (square 13)) (piece "Marker" Each)}) (rules {(phase "Opening" (play (move Add (to (sites Empty)))) (nextPhase "General")) (phase "General" (play (do (move Add (to (sites Empty)) (then (if (not (is Prev Mover)) (moveAgain )))) (and (not (is Line 5)) (!= 1 (+ {(if (is Line 4 N true) 1 0) (if (is Line 4 NE true) 1 0) (if (is Line 4 E true) 1 0) (if (is Line 4 SE true) 1 0)}))))))} (end (if (<= 2 (+ {(if (is Line 4 N true) 1 0) (if (is Line 4 NE true) 1 0) (if (is Line 4 E true) 1 0) (if (is Line 4 SE true) 1 0)})) (result Mover Win)))))

DROP - A player, on his turn, can drop a stone on an empty cell.
            SHIFT - Instead of dropping a stone, the player may decide to shift one row or column, one cell left/right (for rows) or up/down (for columns). 
            All stones are shifted on the chosen direction. If a stone is shifted off-board, it is placed on the other end of the shifted row/column (so, for shift purposes, the board is a Torus).
            KO rule- If a player has just shifted, the next player cannot shift that row/column.
            
        GOAL - A player wins when he makes a 5 in-a-row (orthogonal or diagonal). If a shift give both players a 5 in-a-row, wins the player that made that shift.
(game "Kassle" (players 2) (equipment {(board (square 5)) (piece "Square" Each)}) (rules (play (or {(move Add (to (sites Empty))) (move Select (from (forEach (sites Column (- (count Columns) 1)) (not (all Sites (sites Row (row (site ))) (is Empty (site )))))) (to (ahead (from ) W) (not (is In (+ (from ) (to )) (sites Pending)))) (then (and {(forEach Site (sites Row (row (last From))) (remove (site ))) (forEach Site (sites Row (row (last From))) (if (!= (ahead (site ) W) (site )) (add (piece (what (site ))) (to (ahead (site ) W))) (add (piece (what (site ))) (to (coord (row (last From)) (- (count Columns) 1)))))) (set Pending (+ (last From) (last To))) (set Pending (+ (coord (row (last From)) 0) (ahead (coord (row (last From)) 0) E)))}))) (move Select (from (forEach (sites Column 0) (not (all Sites (sites Row (row (site ))) (is Empty (site )))))) (to (ahead (from ) E) (not (is In (+ (from ) (to )) (sites Pending)))) (then (and {(forEach Site (sites Row (row (last From))) (remove (site ))) (forEach Site (sites Row (row (last From))) (if (!= (ahead (site ) E) (site )) (add (piece (what (site ))) (to (ahead (site ) E))) (add (piece (what (site ))) (to (coord (row (last From)) 0))))) (set Pending (+ (last From) (last To))) (set Pending (+ (coord (row (last From)) (- (count Columns) 1)) (ahead (coord (row (last From)) (- (count Columns) 1)) W)))}))) (move Select (from (forEach (sites Row 0) (not (all Sites (sites Column (column (site ))) (is Empty (site )))))) (to (ahead (from ) N) (not (is In (+ (from ) (to )) (sites Pending)))) (then (and {(forEach Site (sites Column (column (last From))) (remove (site ))) (forEach Site (sites Column (column (last From))) (if (!= (ahead (site ) N) (site )) (add (piece (what (site ))) (to (ahead (site ) N))) (add (piece (what (site ))) (to (coord 0 (column (last From))))))) (set Pending (+ (last From) (last To))) (set Pending (+ (coord (- (count Rows) 1) (column (last To))) (ahead (coord (- (count Rows) 1) (column (last To))) S)))}))) (move Select (from (forEach (sites Row (- (count Rows) 1)) (not (all Sites (sites Column (column (site ))) (is Empty (site )))))) (to (ahead (from ) S) (not (is In (+ (from ) (to )) (sites Pending)))) (then (and {(forEach Site (sites Column (column (last From))) (remove (site ))) (forEach Site (sites Column (column (last From))) (if (!= (ahead (site ) S) (site )) (add (piece (what (site ))) (to (ahead (site ) S))) (add (piece (what (site ))) (to (coord (- (count Rows) 1) (column (last From))))))) (set Pending (+ (last From) (last To))) (set Pending (+ (coord (- (count Rows) 1) 0) (ahead (coord (- (count Rows) 1) 0) N)))})))})) (end {(if (and (not (all Sites (sites Occupied P1) (not (is Line 5 (site ))))) (not (all Sites (sites Occupied P2) (not (is Line 5 (site )))))) (result Mover Win)) (if (not (all Sites (sites Occupied P1) (not (is Line 5 (site ))))) (result P1 Win)) (if (not (all Sites (sites Occupied P2) (not (is Line 5 (site ))))) (result P2 Win))})))

Three intersecting lines, with diagonals drawn in the square. Two players. Three pieces per player, one playing as red and the other as white. The red player plays first and places their piece in the central spot. Players alternate turns placing one of their pieces on an empty space on the board. When all of the pieces are placed, players alternate turns moving one of their pieces to an empty adjacent spot on the board along the lines. The first player to place three of their pieces in a row wins.
(game "Katsela" (players 2) (equipment {(board (rectangle 3 3 Alternating) Vertex) (hand Each) (piece "Marker" Each (move Step (to (is Empty (to )))))}) (rules (start (place "Marker" "Hand" 3)) {(phase "Opening" (play (move (from (handSite Mover)) (to (centrePoint )))) (nextPhase "Placing")) (phase "Placing" (play (move (from (handSite Mover)) (to (sites Empty)))) (nextPhase Mover (all Sites (sites Hand Mover) (= 0 (count Cell (site )))) "Moving")) (phase "Moving" (play (forEach Piece)))} (end (if (is Line 3) (result Mover Win)))))

White starts and, in turn, pieces are placed on any one of 5 spaces, including on other pieces. The object is to get 3 same color pieces in a row - horizontally, vertically or diagonally.
(game "Agilidade" (players 2) (equipment {(board (skew 0.5 (scale 1.0 0.5 (merge {(wedge 2 2) (shift 0.0 1.0 (rotate 180.0 (wedge 2 2)))}))) Vertex) (piece "discFlat" Each) (hand Each)}) (rules (start {(place Stack "discFlat1" (handSite P1) 7) (place Stack "discFlat2" (handSite P2) 7)}) (play (move (from (handSite Mover)) (to (sites Board)))) (end (if (is Line 3 true) (result Mover Win)))))

Square with diagonals and lines connecting the midpoints of the sides. Three pieces per player. The first player places their piece in the center. Players alternate turns placing a piece on an empty spot on the board. The first player to make three in a row wins.
(game "Ngrin" (players 2) (equipment {(board (square 3 Alternating) Vertex) (piece "Marker" Each)}) (rules {(phase "Opening" (play (move Add (to (centrePoint )))) (nextPhase "Playing")) (phase "Playing" (play (move Add (to (sites Empty)))))} (end (if (is Line 3) (result Mover Win)))))

3x3 grid. Three pieces per player. Players alternate turns placing a piece on the board. When all of the pieces are placed, players alternate turns moving a piece to any empty space on the board. The player who places three pieces in an orthogonal  row wins. 
(game "Dris at-Talata" (players 2) (equipment {(board (square 3)) (hand Each) (piece "Marker" Each)}) (rules (start (place "Marker" "Hand" 3)) {(phase "Placement" (play (move (from (handSite Mover)) (to (sites Empty)))) (nextPhase (all Sites (sites Hand P2) (= 0 (count Cell (site )))) "Movement")) (phase "Movement" (play (move (from (sites Occupied Mover)) (to (sites Empty)))))} (end (if (is Line 3 Orthogonal) (result Mover Win)))))

3x3 intersecting lines with diagonals. Play occurs on the intersections of the lines. Each player has three pieces. Play begins with each player placing pieces on empty points. If they make three in a row along the lines, they win. Once all pieces are placed, players take turns moving pieces one spot to an adjacent point along the lines trying to make three in a row.
        
(game "Fanorona Telo" (players 2) (equipment {(board (rectangle 3 3 Alternating) Vertex) (hand Each) (piece "Marker" Each (move Step (to (is Empty (to )))))}) (rules (start (place "Marker" "Hand" 3)) {(phase "Placement" (play (move (from (handSite Mover)) (to (sites Empty)))) (nextPhase (all Sites (sites Hand P2) (= 0 (count Cell (site )))) "Movement")) (phase "Movement" (play (forEach Piece)))} (end (if (is Line 3) (result Mover Win)))))

White player takes a red piece and places a white piece on top of it, placing the stack before them. Black player takes a white piece and places a black piece on top of it, placing the stack before them. Red player takes a black piece and places a red piece on top of it, placing the stack before them. Starting with White, players take turns placing a piece of their colour on an empty space of the board until the victory condition is reached. The aim of the game is to create a 5-in-a-row containing both and only both colours of your stack.
(game "Yavalade" (players 3) (equipment {(board (rotate 90.0 (hex 5))) (piece "Marker" Each)}) (rules (play (move Add (to (sites Empty)))) (end {(if (is Line 5 {1 3}) (result P1 Win)) (if (is Line 5 {1 2}) (result P2 Win)) (if (is Line 5 {2 3}) (result P3 Win))})))

3x3 intersecting lines with diagonals in the square. Three pieces per player. Players alternate turns placing a piece on the board. The player who places three pieces in a row along one of the lines of the board wins. 
(game "Selbia" (players 2) (equipment {(board (rectangle 3 3 Alternating) Vertex) (hand Each) (piece "Marker" Each)}) (rules (start (place "Marker" "Hand" 3)) (play (move (from (handSite Mover)) (to (sites Empty)))) (end (if (is Line 3) (result Mover Win)))))

Played on a 3x3 board. Three pieces per player. Players take turns placing the pieces on the board. Once all the pieces are placed, players take turns moving a piece to an adjacent spot. The points where the diagonals of the squares cross are not eligible spots. The first player to align all three of their pieces in a row wins.
(game "Picaria" (players 2) (equipment {(board (square 3) Vertex) (hand Each) (piece "Marker" Each (move Step All (to (is Empty (to )))))}) (rules (start (place "Marker" "Hand" 3)) {(phase "Placement" (play (move (from (handSite Mover)) (to (sites Empty)))) (nextPhase (all Sites (sites Hand P2) (= 0 (count Cell (site )))) "Movement")) (phase "Movement" (play (forEach Piece)))} (end (if (is Line 3 All) (result Mover Win)))))

Each player has 6 Chess queens. It is played on a 5x5 board. The starting position has the queens arranged on opposite sides, alternating white-black-white-black in each space. The pieces move as queens in Chess. The first player to line up four queens in a row wins.
(game "All Queens Chess" (players 2) (equipment {(board (square 5)) (piece "Queen" Each (move Slide))}) (rules (start {(place "Queen1" (union {(difference (sites Bottom) (sites Phase 1)) (intersection (sites Left) (sites Row (/ (count Rows) 2))) (difference (sites Top) (sites Phase 0))})) (place "Queen2" (union {(difference (sites Bottom) (sites Phase 0)) (intersection (sites Right) (sites Row (/ (count Rows) 2))) (difference (sites Top) (sites Phase 1))}))}) (play (forEach Piece)) (end (if (is Line 4) (result Mover Win)))))

3x3 intersecting lines. Three pieces per player. Players alternate turns placing a piece on an empty spot on the board. When all of the pieces are placed, players alternate turns moving a piece to an empty adjacent spot. The first player to place their three pieces along one of the lines wins.
(game "Djara-Badakh" (players 2) (equipment {(board (square 3) Vertex) (hand Each) (piece "Marker" Each (move Step (to (is Empty (to )))))}) (rules (start (place "Marker" "Hand" 3)) {(phase "Placement" (play (move (from (handSite Mover)) (to (sites Empty)))) (nextPhase Mover (all Sites (sites Hand Mover) (= 0 (count Cell (site )))) "Movement")) (phase "Movement" (play (forEach Piece)))} (end (if (is Line 3) (result Mover Win)))))

Played on a square grid (8x8 or larger) with two players. Players alternate placing one stone of their colour on the board on any empty point.  If a player makes a line of five pieces, either orthogonally or diagonally, they win; but if they make a line of four pieces, they lose.
(game "Fivalath" (players 2) (equipment {(board (square 10) Vertex) (piece "Ball" Each)}) (rules (play (move Add (to (sites Empty)))) (end {(if (is Line 5 All) (result Mover Win)) (if (is Line 4 All) (result Mover Loss))})))

Starting with white, each player places a marble on an empty space or platform (2x2 arrangement of marbles). A player wins by making a line of L pieces of their colour orthogonally or diagonally (where L is the layer size) but loses by making a line of L-1 of their colour beforehand (without also making a line of L).
(game "Spava" (players 2) (equipment {(board (square 4 true) Vertex) (piece "Ball" Each)}) (rules (play (move Add (to (sites Empty) (is Flat)))) (end {(if (is Line (- (count Rows) (layer (last To))) SameLayer) (result Mover Win)) (if (is Line (- (- (count Rows) (layer (last To))) 1) SameLayer) (result Mover Loss))})))

Three concentric squares, with lines connecting the corners and the midpoints of the sides. Twelve pieces per player. Players alternate turns placing a piece on an empty spot on the board. When all of the pieces have been placed, players alternate turns moving a piece to an empty adjacent spot along the lines. During either phase, when a player places three of their pieces in a row, they remove one of the opponent's pieces. Pieces which are in a three-in-a-row pattern cannot be removed from the board. The player who removes all of the opponent's pieces wins.
(game "Xonin Shatar (Simple)" (players 2) (equipment {(board (concentric Square 3 true) Vertex) (hand Each) (piece "Marker" Each (move Step (to (is Empty (to ))) (then (if (is Line 3) (moveAgain )))))}) (rules (start (place "Marker" "Hand" 12)) {(phase "Placement" (play (if (is Prev Mover) (move Remove (forEach (sites Occupied Enemy "Board") (not (is Line 3 Orthogonal (site ))))) (move (from (handSite Mover)) (to (sites Empty)) (then (if (is Line 3) (moveAgain )))))) (nextPhase Mover (all Sites (sites Hand Mover) (= 0 (count Cell (site )))) "Movement")) (phase "Movement" (play (if (is Prev Mover) (move Remove (forEach (sites Occupied Enemy "Board") (not (is Line 3 Orthogonal (site ))))) (forEach Piece))))} (end (if (no Pieces Next) (result Next Loss)))))

3x3 intersecting lines. Three pieces per player. Players alternate turns placing pieces on an empty spot on the board. When all pieces are placed, players alternate turns moving a piece to any empty spot on the board. The first player to place their pieces in an orthogonal row along the lines wins.
        
(game "Driesticken" (players 2) (equipment {(board (square 3) Vertex) (hand Each) (piece "Marker" Each (move (from ) (to (sites Empty))))}) (rules (start (place "Marker" "Hand" 3)) {(phase "Placement" (play (move (from (handSite Mover)) (to (sites Empty)))) (nextPhase (all Sites (sites Hand P2) (= 0 (count Cell (site )))) "Movement")) (phase "Movement" (play (forEach Piece)))} (end (if (is Line 3 Orthogonal) (result Mover Win)))))

Played on a board of three concentric squares, with a line bisecting the perimeters of each square on each side, but not extending inside the perimeter of the central square. Play occurs on the intersections of the lines and the corners of the squares. Each player has nine pieces. Play begins with each player placing pieces on empty points. If they make three in a row along the lines, they can remove one of the opponent's pieces. They cannot remove an opponent's piece that is in a three-in-a-row formation. Once all pieces are placed, players take turns moving pieces one spot to an adjacent point along the lines. If a player makes three in a row, an opponent's piece is removed as in the first phase of the game. The game is won when the opponent is reduced to two pieces. A player may also win by blocking their opponent from being able to move.
        
(game "Mylna" (players 2) (equipment {(board (concentric Square 3) Vertex) (piece "Marker" Each (move Step Orthogonal (to (is Empty (to ))) (then (if (is Line 3 Orthogonal) (moveAgain ))))) (hand Each)}) (rules (start (place "Marker" "Hand" 9)) {(phase "Placement" (play (if (is Prev Mover) (move Remove (forEach (sites Occupied Enemy "Board") (not (is Line 3 Orthogonal (site ))))) (move (from (handSite Mover)) (to (sites Empty)) (then (if (is Line 3 Orthogonal) (moveAgain )))))) (nextPhase Mover (all Sites (sites Hand Mover) (= 0 (count Cell (site )))) "Movement")) (phase "Movement" (play (if (is Prev Mover) (move Remove (forEach (sites Occupied Enemy "Board") (not (is Line 3 Orthogonal (site ))))) (forEach Piece))))} (end {(if (<= (count Pieces Next) 2) (result Next Loss)) (if (no Moves Next) (result Mover Win))})))

Three concentric squares, the corners and midpoints of the squares connected with lines. Nine pieces per player. Players alternate turns placing a piece on an empty spot on the board. When all of the pieces are placed, the players alternate turns moving a piece to an empty adjacent spot along the lines. During either phase, when a player places three of their pieces in a row along the orthogonal lines (not along the diagonal lines), the player removes any one of the opponent's pieces. When a player is reduced to four pieces, they may move a piece to any open spot on the board. The player who reduces the opponent to two pieces wins.
        
(game "Marelle Triple" (players 2) (equipment {(board (concentric Square 3 true) Vertex) (hand Each) (piece "Marker" Each (move Step (to (is Empty (to ))) (then (if (or {(is Line 3 N true) (is Line 3 S true) (is Line 3 E true) (is Line 3 W true)}) (moveAgain )))))}) (rules (start (place "Marker" "Hand" 9)) {(phase "Placement" (play (if (is Prev Mover) (move Remove (sites Occupied Enemy "Board")) (move (from (handSite Mover)) (to (sites Empty)) (then (if (or {(is Line 3 N true) (is Line 3 S true) (is Line 3 E true) (is Line 3 W true)}) (moveAgain )))))) (nextPhase Mover (all Sites (sites Hand Mover) (= 0 (count Cell (site )))) "Movement")) (phase "Movement" (play (if (is Prev Mover) (move Remove (sites Occupied Enemy "Board")) (if (> (count Pieces Mover) 4) (forEach Piece) (move (from (sites Occupied Mover)) (to (sites Empty)))))))} (end (if (<= (count Pieces Next) 2) (result Next Loss)))))

3x3 intersecting lines with diagonals. Play occurs on the intersections of the lines. Three pieces per player. Play begins with each player placing pieces on empty points. If they make three in a row along the lines, they win. Once all pieces are place, players take turns moving pieces one spot to an adjacent point along the lines trying to make three in a row.
        
(game "Tapatan" (players 2) (equipment {(board (rectangle 3 3 Alternating) Vertex) (hand Each) (piece "Marker" Each (move Step (to (is Empty (to )))))}) (rules (start (place "Marker" "Hand" 3)) {(phase "Placement" (play (move (from (handSite Mover)) (to (sites Empty)))) (nextPhase (all Sites (sites Hand P2) (= 0 (count Cell (site )))) "Movement")) (phase "Movement" (play (forEach Piece)))} (end (if (is Line 3) (result Mover Win)))))

Three concentric squares, with lines connecting the corners and midpoints of the squares. Twelve pieces per player. In the first phase, players take turns placing pieces on an empty spot on the board. If they place three pieces so they are in a line, forming a \"meul.\" they remove one of the opponent's pieces that is not in a \"meul.\" Once all the pieces are placed, the second phase begins, in which players take turns moving one piece to an adjacent empty spot. When a \"meul\" is formed, the player removes one of the opponent's pieces that is not in a \"meul.\" When one player is reduced to three pieces, they may move their pieces to any empty spot on the board. The player who reduces their opponent to two pieces wins.
        
(game "Mlabalaba" (players 2) (equipment {(board (concentric Square 3 true) Vertex) (hand Each) (piece "Marker" Each (if (= 3 (count Pieces Mover)) (move (from (from )) (to (sites Empty))) (move Step (to (is Empty (to )))) (then (if (is Line 3 Orthogonal) (moveAgain )))))}) (rules (start (place "Marker" "Hand" 12)) {(phase "Placement" (play (if (is Prev Mover) (move Remove (forEach (sites Occupied Enemy "Board") (not (is Line 3 Orthogonal (site ))))) (move (from (handSite Mover)) (to (sites Empty)) (then (if (is Line 3 Orthogonal) (moveAgain )))))) (nextPhase Mover (all Sites (sites Hand Mover) (= 0 (count Cell (site )))) "Movement")) (phase "Movement" (play (if (is Prev Mover) (move Remove (forEach (sites Occupied Enemy "Board") (not (is Line 3 Orthogonal (site ))))) (forEach Piece))))} (end (forEach NonMover (= 2 (count Pieces Player)) (result Player Loss)))))

Connect 4 is played on a vertically placed grid of 7x6, where colored disks are dropped from the top of the grid. Players alternate dropping discs, which fall to the bottom of the column in which they are dropped. The first player to create a row of four disks in their color wins.
(game "Connect Four" (players 2) (equipment {(board (rectangle 1 7)) (piece "Disc" Each)}) (rules (play (move Add (to (forEach (sites Board) (< (size Stack (site )) 6))) true)) (end (if (is Line 4 true) (result Mover Win)))))

Three pieces per player. Players take turns placing their pieces on a spot where the lines intersect. They then take turns moving one piece to an adjacent empty spot. The first player to place three pieces in a row wins the game. 
(game "Round Merels" (players 2) (equipment {(board (concentric {1 8}) Vertex) (hand Each) (piece "Marker" Each (move Step (to (is Empty (to )))))}) (rules (start (place "Marker" "Hand" 3)) {(phase "Placement" (play (move (from (handSite Mover)) (to (sites Empty)))) (nextPhase (all Sites (sites Hand P2) (= 0 (count Cell (site )))) "Movement")) (phase "Movement" (play (forEach Piece)))} (end (if (is Line 3 (centrePoint ) (mover )) (result Mover Win)))))

At the first round of the game, players can only pick a blank face cube.
            
            Next round players can play the same cube at the previously.
            
            A player cannot return a cube that he/she has played to place on where he/she took it from.
            
        A player who creates the line of opponent’s symbol is the person who loses the game, even if he/she has created a line of his/her own symbol at the same time.
(game "Pushing Me XO" (players 2) (equipment {(board (square 5)) (piece "Disc" P1) (piece "Cross" P2) (piece "Square" Neutral) (hand Each)}) (rules (start (place "Square0" (sites Board))) (play (if (is Prev Mover) (or {(move Select (from (difference (intersection (sites Left) (sites Row (row (last To)))) (sites {(last To)}))) (then (and {(push (from (last To)) E) (if (or (= (what (handSite (mover ))) (id "Square0")) (= (what (handSite (mover ))) (mover ))) (add (piece (mover )) (to (last To))) (add (piece (next )) (to (last To)))) (remove (handSite (mover )))}))) (move Select (from (difference (intersection (sites Right) (sites Row (row (last To)))) (sites {(last To)}))) (then (and {(push (from (last To)) W) (if (or (= (what (handSite (mover ))) (id "Square0")) (= (what (handSite (mover ))) (mover ))) (add (piece (mover )) (to (last To))) (add (piece (next )) (to (last To)))) (remove (handSite (mover )))}))) (move Select (from (difference (intersection (sites Bottom) (sites Column (column (last To)))) (sites {(last To)}))) (then (and {(push (from (last To)) N) (if (or (= (what (handSite (mover ))) (id "Square0")) (= (what (handSite (mover ))) (mover ))) (add (piece (mover )) (to (last To))) (add (piece (next )) (to (last To)))) (remove (handSite (mover )))}))) (move Select (from (difference (intersection (sites Top) (sites Column (column (last To)))) (sites {(last To)}))) (then (and {(push (from (last To)) S) (if (or (= (what (handSite (mover ))) (id "Square0")) (= (what (handSite (mover ))) (mover ))) (add (piece (mover )) (to (last To))) (add (piece (next )) (to (last To)))) (remove (handSite (mover )))})))}) (move Select (from (sites Outer)) (then (and (fromTo (from (last To)) (to (handSite (mover )))) (moveAgain )))))) (end {(if (is Line 5 (sites LastTo) (next )) (result Next Win)) (if (is Line 5 (sites LastTo) (mover )) (result Mover Win))})))

Three concentric squares, with lines connecting the corners and the midpoints of the sides. Twelve pieces per player. Players alternate turns placing a piece on the board. When a player places three pieces in a row along the lines of the board, the player places another of their pieces on top of one of the opponent's pieces; the opponent's piece is considered \"dead.\" Once all of the pieces have been placed on the board, all \"dead\" pieces are removed from the board. Players then alternate moving pieces to an empty adjacent spot along the lines. When three are placed in a row, one of the opponent's pieces is taken. A player wins by capturing all of the opponent's pieces or by blocking them from being able to move.
(game "Sam K'i" (players 2) (equipment {(board (concentric Square 3 true) Vertex) (hand Each) (piece "Marker" Each (move Step (to (is Empty (to ))) (then (if (is Line 3 (= 1 (size Stack (to )))) (moveAgain )))))}) (rules (start {(place Stack "Marker1" (handSite P1) 12) (place Stack "Marker2" (handSite P2) 12)}) {(phase "Placement" (play (if (is Prev Mover) (move (from (handSite Mover)) (to (forEach (sites Occupied Next "Board") (= (size Stack (site )) 1)))) (if (not (all Sites (sites Hand Mover) (= 0 (count Cell (site ))))) (move (from (handSite Mover)) (to (sites Empty)) (then (if (is Line 3 (= 1 (size Stack (to )))) (moveAgain ))))) (then (if (and (not (is Next Mover)) (and (all Sites (sites Hand P1) (= 0 (count Cell (site )))) (all Sites (sites Hand P2) (= 0 (count Cell (site )))))) (and (forEach Site (forEach (sites Occupied P1 "Board") (= (size Stack (site )) 2)) (and {(remove (site )) (remove (site )) (add (piece (id "Marker" P1)) (to (site )))})) (forEach Site (forEach (sites Occupied P2 "Board") (= (size Stack (site )) 2)) (and {(remove (site )) (remove (site )) (add (piece (id "Marker" P2)) (to (site )))}))))))) (nextPhase (and (not (is Next Mover)) (and (all Sites (sites Hand P1) (= 0 (count Cell (site )))) (all Sites (sites Hand P2) (= 0 (count Cell (site )))))) "Movement")) (phase "Movement" (play (if (is Prev Mover) (move Remove (sites Occupied Enemy "Board")) (if (> (count Pieces Mover) 3) (forEach Piece) (move (from (sites Occupied Mover)) (to (sites Empty)))))) (end (if (no Moves Next) (result Mover Win))))}))

The same rules as Tic-Tac-Toe are used with four players in a 5x5 board. The third and fourth players play with \"Y\" and \"Z\".
(game "Tic-Tac-Four" (players 4) (equipment {(board (square 5)) (piece "Disc" P1) (piece "Cross" P2) (piece "Y" P3) (piece "Z" P4)}) (rules (play (move Add (to (sites Empty)))) (end (if (is Line 3) (result Mover Win)))))

Played on a Go-like board (6x6 or larger, but a 19x19 go board is ideal) with two colors of stones (usually white and black). Black goes first by placing one stone. Play continues with each player playing two stones per turn. The first player to make a line of six in a row wins.
(game "Connect6" (players 2) (equipment {(board (square 19) Vertex) (piece "Marker" Each)}) (rules {(phase "Opening" (play (move Add (to (sites Empty)))) (nextPhase "Playing")) (phase "Playing" (play (move Add (to (sites Empty)) (then (if (is Even (count Moves)) (moveAgain ))))) (nextPhase "Playing"))} (end (if (is Line 6 All) (result Mover Win)))))

Each player has six pieces. Play begins with each player placing pieces on empty points. If they make three in a row along the lines, they can remove one of the opponent's pieces. Once all pieces are place, players take turns moving pieces one spot to an adjacent point along the lines. If a player makes three in a row, an opponent's piece is removed as in the first phase of the game. The game is won when the opponent is reduced to two pieces.
(game "Six Men's Morris" (players 2) (equipment {(board (concentric Square 2) Vertex) (hand Each) (piece "Marker" Each (move Step (to (is Empty (to ))) (then (if (is Line 3 Orthogonal true) (moveAgain )))))}) (rules (start (place "Marker" "Hand" 6)) {(phase "Placement" (play (if (is Prev Mover) (move Remove (sites Occupied Enemy "Board")) (move (from (handSite Mover)) (to (sites Empty)) (then (if (is Line 3 Orthogonal true) (moveAgain )))))) (nextPhase Mover (all Sites (sites Hand Mover) (= 0 (count Cell (site )))) "Movement")) (phase "Movement" (play (if (is Prev Mover) (move Remove (sites Occupied Enemy "Board")) (forEach Piece))))} (end (if (<= (count Pieces Next) 2) (result Next Loss)))))

Two concentric squares with a line connecting their midpoints. Six pieces per player. Players alternate placing one of their pieces on the intersections of the lines. Whenever a player places three of their pieces in a row, they may remove one of the opponent's pieces from the board. Once all of the pieces are placed, players may take turns moving a piece to an adjacent point along the lines, attempting to place three of their pieces in a row. When one player is reduced to two pieces, that player loses.
(game "Achi" (players 2) (equipment {(board (concentric Square 2) Vertex) (hand Each) (piece "Marker" Each (move Step (to (is Empty (to ))) (then (if (is Line 3 Orthogonal true) (moveAgain )))))}) (rules (start (place "Marker" "Hand" 6)) {(phase "Placement" (play (if (is Prev Mover) (move Remove (sites Occupied Enemy "Board")) (move (from (handSite Mover)) (to (sites Empty)) (then (if (is Line 3 Orthogonal true) (moveAgain )))))) (nextPhase Mover (all Sites (sites Hand Mover) (= 0 (count Cell (site )))) "Movement")) (phase "Movement" (play (if (is Prev Mover) (move Remove (sites Occupied Enemy "Board")) (forEach Piece))))} (end (if (<= (count Pieces Next) 2) (result Mover Win)))))

Three concentric squares, with lines connecting the midpoints of the squares with the center of the square and four lines connecting the corners of the outer two squares. Twelve pieces per player. In the first phase, players take turns placing pieces on an empty spot on the board. If they place three pieces so they are in a line, forming a \"meul.\" they remove one of the opponent's pieces that is not in a \"meul.\" Once all the pieces are placed, the second phase begins, in which players take turns moving one piece to an adjacent empty spot. When a \"meul\" is formed, the player removes one fo the opponent's pieces that is not in a \"meul.\" When one player is reduced to three pieces, they may move their pieces to any empty spot on the board. The player who reduces their opponent to two pieces wins. 
(game "Morabaraba" (players 2) (equipment {(board (remove (add (concentric Square 3 true) {{0.0 0.0}} {{11 24} {16 24} {7 24} {12 24}}) {{3 6} {8 5} {17 20} {15 18}}) Vertex) (hand Each) (piece "Marker" Each (if (> (count Pieces Mover) 3) (move Step (to (is Empty (to )))) (move (from ) (to (sites Empty))) (then (if (is Line 3) (moveAgain )))))}) (rules (start (place "Marker" "Hand" 12)) {(phase "Placement" (play (if (is Prev Mover) (move Remove (forEach (sites Occupied Enemy "Board") (not (is Line 3 (site ))))) (move (from (handSite Mover)) (to (sites Empty)) (then (if (is Line 3) (moveAgain )))))) (nextPhase Mover (all Sites (sites Hand Mover) (= 0 (count Cell (site )))) "Movement")) (phase "Movement" (play (if (is Prev Mover) (move Remove (forEach (sites Occupied Enemy "Board") (not (is Line 3 (site ))))) (forEach Piece))))} (end (if (<= (count Pieces Next) 2) (result Next Loss)))))

Three concentric squares, with lines connecting the corners and midpoints of the squares. Two players. Players alternate turns placing one of their pieces on one of the spots on the board. A player may place a piece on top of a piece belonging to their opponent during this phase of the game, and they are both canceled out. When three uncanceled pieces form a row along the lines on the board, the player may capture one of the opponent's pieces. Once all of the spots have been occupied, the canceled pieces are removed. Players alternate turns moving one of their pieces to an empty adjacent spot on the board.The player who captures all of the opponent's pieces wins.
(game "Dig Dig" (players 2) (equipment {(board (concentric Square 3 true) Vertex) (hand Each) (piece "Marker" Each (move Step (to (is Empty (to ))) (then (if (is Line 3 (= 1 (size Stack (to )))) (moveAgain )))))}) (rules (start {(place Stack "Marker1" (handSite P1)) (place Stack "Marker2" (handSite P2))}) {(phase "Placement" (play (if (is Prev Mover) (move Remove (forEach (sites Occupied Next "Board") (= 1 (size Stack (site ))))) (move (from (handSite Mover)) (to (union (forEach (sites Occupied Next "Board") (= 1 (size Stack (site )))) (sites Empty))) true (then (if (is Line 3 (= 1 (size Stack (to )))) (moveAgain )))) (then (if (and (not (is Next Mover)) (is Full)) (and {(forEach Site (forEach (sites Occupied P1 "Board") (= (size Stack (site )) 2)) (and (remove (site )) (remove (site )))) (forEach Site (forEach (sites Occupied P2 "Board") (= (size Stack (site )) 2)) (and (remove (site )) (remove (site )))) (set Pending)}))))) (nextPhase (is Pending) "Movement")) (phase "Movement" (play (if (is Prev Mover) (move Remove (forEach (sites Occupied Next "Board") (= 1 (size Stack (site ))))) (forEach Piece))) (end (if (all Sites (sites Occupied Next) (not (is In (site ) (sites Board)))) (result Mover Win))))}))

Starting with white, each player places a marble on an empty space or platform (2x2 arrangement of marbles). The first player making a full line of his color on any layer wins. Lines may be diagonal. This is, for a 4x4 set, a 4-in-a-row on the first layer, or a 3-in-a-row on the 2nd layer, or a 2-in-a-row on the 3rd layer.
(game "Spline" (players 2) (equipment {(board (square 4 true) Vertex) (piece "Ball" Each)}) (rules (play (move Add (to (sites Empty) (is Flat)))) (end (if (is Line (- (count Rows) (layer (last To))) SameLayer) (result Mover Win)))))

3x3 intersecting lines, with diagonals. Three pieces per player. Players alternate turns placing one of their pieces on the board. Once all of the pieces are placed, players take turns moving one of their pieces to an adjacent empty spot. The first player to make an orthogonal line with their pieces wins.
(game "Wure Dune" (players 2) (equipment {(board (rectangle 3 3 Alternating) Vertex) (hand Each) (piece "Marker" Each (move Step All (to (is Empty (to )))))}) (rules (start (place "Marker" "Hand" 3)) {(phase "Placement" (play (move (from (handSite Mover)) (to (sites Empty)))) (nextPhase (all Sites (sites Hand P2) (= 0 (count Cell (site )))) "Movement")) (phase "Movement" (play (forEach Piece)))} (end (if (is Line 3 Orthogonal) (result Mover Win)))))

Three concentric squares with lines connecting their midpoints. Nine pieces per player. Players alternate turns placing pieces on the board or moving one piece on the board to an adjacent empty spot. The first player to get three of their pieces in a row wins.
(game "Sujjua" (players 2) (equipment {(board (concentric Square 3) Vertex) (piece "Marker" Each (move Step Orthogonal (to (is Empty (to ))))) (hand Each)}) (rules (start (place "Marker" "Hand" 9)) (play (or (if (not (all Sites (sites Hand Mover) (= 0 (count Cell (site ))))) (move (from (handSite Mover)) (to (sites Empty)))) (forEach Piece))) (end (if (is Line 3 Orthogonal) (result Mover Win)))))

The object is to get a line of three of the same color.
            
            On each turn, you may do ONE of the following:
            
            (1) Put a red counter in an empty square.
            (2) Replace a red counter with a yellow one.
        (3) Replace a yellow counter with a green one.
(game "Traffic Lights" (players 2) (equipment {(board (rectangle 3 4)) (piece "Square" Shared) (piece "Triangle" Shared) (piece "Disc" Shared)}) (rules (play (or {(move Add (piece "Square") (to (sites Empty))) (move Select (from (sites Occupied Shared "Square")) (then (promote (last To) (piece {"Triangle"}) Shared))) (move Select (from (sites Occupied Shared "Triangle")) (then (promote (last To) (piece {"Disc"}) Shared)))})) (end (if (is Line 3) (result Mover Win)))))

7x6 board. Eighteen pieces per player. Players alternate turns placing a piece on the board. When all of the pieces have been placed, players alternate turns moving a piece to an adjacent empty square in an orthogonal direction. When a player places three of their pieces in an orthogonal line, they capture one of the opponent's pieces. The player who captures all of the opponent's pieces wins.
(game "Aqrad" (players 2) (equipment {(board (rectangle 7 6)) (hand Each) (piece "Marker" Each (move Step Orthogonal (to (is Empty (to ))) (then (if (is Line 3 Orthogonal true) (moveAgain )))))}) (rules (start (place "Marker" "Hand" 18)) {(phase "Placement" (play (if (is Prev Mover) (move Remove (sites Occupied Enemy "Board")) (move (from (handSite Mover)) (to (sites Empty)) (then (if (is Line 3 Orthogonal true) (moveAgain )))))) (nextPhase Mover (all Sites (sites Hand Mover) (= 0 (count Cell (site )))) "Movement")) (phase "Movement" (play (if (is Prev Mover) (move Remove (sites Occupied Enemy "Board")) (forEach Piece))))} (end (if (no Pieces Next) (result Next Loss)))))

Each player uses twelve pieces. Play begins with each player placing pieces on empty points. If they make three in a row along the lines, they can remove one of the opponent's pieces. They cannot remove an opponent's piece that is in a three in a row formation unless there are no other options. Once all pieces are place, players take turns moving pieces one spot to an adjacent point along the lines. If a player makes three in a row, an opponent's piece is removed as in the first phase of the game. Once a player is reduced to three pieces, that player may move to any open space on the board. The game is won when the opponent is reduced to two pieces.
(game "Twelve Men's Morris" (players 2) (equipment {(board (concentric Square 3 true) Vertex) (hand Each) (piece "Marker" Each (move Step (to (is Empty (to ))) (then (if (is Line 3 Orthogonal true) (moveAgain )))))}) (rules (start (place "Marker" "Hand" 12)) {(phase "Placement" (play (if (is Prev Mover) (if (can Move (move Remove (forEach (sites Occupied Enemy "Board") (not (is Line 3 Orthogonal (site )))))) (move Remove (forEach (sites Occupied Enemy "Board") (not (is Line 3 Orthogonal (site ))))) (move Remove (sites Occupied Enemy "Board"))) (move (from (handSite Mover)) (to (sites Empty)) (then (if (is Line 3 Orthogonal true) (moveAgain )))))) (nextPhase Mover (all Sites (sites Hand Mover) (= 0 (count Cell (site )))) "Movement")) (phase "Movement" (play (if (is Prev Mover) (if (can Move (move Remove (forEach (sites Occupied Enemy "Board") (not (is Line 3 Orthogonal (site )))))) (move Remove (forEach (sites Occupied Enemy "Board") (not (is Line 3 Orthogonal (site ))))) (move Remove (sites Occupied Enemy "Board"))) (if (> (count Pieces Mover) 3) (forEach Piece) (move (from (sites Occupied Mover)) (to (sites Empty)))))))} (end (if (<= (count Pieces Next) 2) (result Next Loss)))))

Three concentric squares, with lines connecting the midpoints of the sides. Nine pieces per player. Players alternate turns placing a piece on the board. When a player places three of their pieces in a line of three along one of the lines on the board, they capture one of the opponent's pieces. When all of the pieces have been placed, players alternate turns moving one of their pieces to an adjacent empty spot on the board. Players cannot capture one of their opponent's pieces which is in a three-in-a-row alignment. The player who either captures seven of their opponent's pieces or blocks the opponent from being able to move wins.
(game "La Chascona" (players 2) (equipment {(board (concentric Square 3) Vertex) (hand Each) (piece "Marker" Each (move Step (to (is Empty (to ))) (then (if (is Line 3 Orthogonal true) (moveAgain )))))}) (rules (start (place "Marker" "Hand" 9)) {(phase "Placement" (play (if (is Prev Mover) (if (can Move (move Remove (forEach (sites Occupied Enemy "Board") (not (is Line 3 Orthogonal (site )))))) (move Remove (forEach (sites Occupied Enemy "Board") (not (is Line 3 Orthogonal (site ))))) (move Remove (sites Occupied Enemy "Board"))) (move (from (handSite Mover)) (to (sites Empty)) (then (if (is Line 3 Orthogonal true) (moveAgain )))))) (nextPhase Mover (all Sites (sites Hand Mover) (= 0 (count Cell (site )))) "Movement")) (phase "Movement" (play (if (is Prev Mover) (if (can Move (move Remove (forEach (sites Occupied Enemy "Board") (not (is Line 3 Orthogonal (site )))))) (move Remove (forEach (sites Occupied Enemy "Board") (not (is Line 3 Orthogonal (site ))))) (move Remove (sites Occupied Enemy "Board"))) (forEach Piece))))} (end (if (or (no Moves Next) (<= (count Pieces Next) 2)) (result Mover Win)))))

Players take turns placing a piece of theirs at an empty cell. When all pieces have been placed, players take turns moving one of their pieces. The pieces move like the equivalent Chess pieces but do not capture. Any piece can hop over an adjacent enemy piece to an empty cell beyond (without capturing it). First to make a line of 3 of their pieces, at any time, wins the game.
(game "Tic-Tac-Chess" (players 2) (equipment {(board (square 3)) (hand Each 3) (piece "Queen" Each (or (move Hop (between (is Enemy (who (between )))) (to (is Empty (to )))) (move Slide All))) (piece "King" Each (or (move Hop (between (is Enemy (who (between )))) (to (is Empty (to )))) (move Step (to (is Empty (to )))))) (piece "Rook" Each (or (move Hop (between (is Enemy (who (between )))) (to (is Empty (to )))) (move Slide Orthogonal)))}) (rules (start {(place "Queen" "Hand") (place "King" "Hand") (place "Rook" "Hand")}) {(phase "Placement" (play (move (from (sites Occupied Mover (mover ))) (to (sites Empty)))) (nextPhase (all Sites (sites Hand P2) (= 0 (count Cell (site )))) "Movement")) (phase "Movement" (play (forEach Piece)))} (end (if (is Line 3 Mover) (result Mover Win)))))

MOVE - Players move in turn to place one stone of either color on an empty cell.
            - However, the dropped stone must be adjacent, at least, to two other stones.
            - A stone cannot be adjacent to another stone of the same color.
            
        GOAL - Wins the player that makes a 4 in-a-row, with stones of his color at both ends (one player has Black and Blue, the other has White and Red).
(game "Plotto" (players 2) (equipment {(boardless Hexagonal) (tile "Hex" Each 6) (tile "SecondHex" Each 6) (hand Each 2)}) (rules (start {(place "Hex1" (centrePoint )) (place "Hex2" (ahead (centrePoint ) E)) (place "Hex1" (handSite P1 0)) (place "Hex2" (handSite P2 0)) (place "SecondHex1" (handSite P1 1)) (place "SecondHex2" (handSite P2 1))}) (play (move (from (sites Hand Mover)) (to (sites Playable) (and (<= 2 (count Sites (sites Around (to ) NotEmpty))) (not (is In (what (from )) (results (last From) (sites Around (to )) (what (to ))))))) true)) (end (if (and (is Line 4 {(id "Hex" P1) (id "Hex" P2) (id "SecondHex" P1) (id "SecondHex" P2)}) (or {(and {(is Occupied (ahead (last To) 1 W)) (is Occupied (ahead (last To) 2 W)) (= (what (last To)) (what (ahead (last To) 3 W)))}) (and {(is Occupied (ahead (last To) 1 E)) (is Occupied (ahead (last To) 2 E)) (= (what (last To)) (what (ahead (last To) 3 E)))}) (and {(is Occupied (ahead (last To) 1 NNW)) (is Occupied (ahead (last To) 2 NNW)) (= (what (last To)) (what (ahead (last To) 3 NNW)))}) (and {(is Occupied (ahead (last To) 1 SSW)) (is Occupied (ahead (last To) 2 SSW)) (= (what (last To)) (what (ahead (last To) 3 SSW)))}) (and {(is Occupied (ahead (last To) 1 SSE)) (is Occupied (ahead (last To) 2 SSE)) (= (what (last To)) (what (ahead (last To) 3 SSE)))}) (and {(is Occupied (ahead (last To) 1 NNE)) (is Occupied (ahead (last To) 2 NNE)) (= (what (last To)) (what (ahead (last To) 3 NNE)))})})) (result Mover Win)))))

TURN - On each turn, each player drops a stone on an empty cell
            
        GOAL - A player loses if he has 3 friendly stones on an orthogonal or diagonal line (they don't need to be adjacent to each other).
(game "Trianon" (players 2) (equipment {(board (square 5) Vertex) (piece "Ball" Each)}) (rules (play (move Add (to (sites Empty)))) (end (if (or {(= 3 (count Sites (forEach (sites Row (row (last To))) (is Friend (who (site )))))) (= 3 (count Sites (forEach (sites Column (column (last To))) (is Friend (who (site )))))) (= 3 (count Sites (forEach (union (sites Direction (last To) NE true) (sites Direction (last To) SW)) (is Friend (who (site )))))) (= 3 (count Sites (forEach (union (sites Direction (last To) NW true) (sites Direction (last To) SE)) (is Friend (who (site ))))))}) (result Mover Loss)))))

A square is drawn, with diagonals. Three pieces per player. Players alternate turns placing a piece on the board. The corners or the square, the central point, and the midpoint of each side of the square are playing sites. When a player forms a line with their three pieces, they win.
(game "Nzengue (Small)" (players 2) (equipment {(board (add (remove (remove (square 3 Solid) {8 9 3 4}) {{7 4} {4 1} {3 4} {4 5}}) {{6 4} {4 8} {4 2} {4 0}}) Vertex) (piece "Marker" Each) (hand Each)}) (rules (start (place "Marker" "Hand" 3)) (play (move (from (handSite Mover)) (to (sites Empty)))) (end (if (is Line 3) (result Mover Win)))))

Three concentric squares, with the midpoints of their sides connected with lines. Twelve pieces per player. Players take turns placing one of their pieces on an empty point on the board. The first player to make three in a row obtains the privilege of starting the next phase after all of the stones are placed; if no one makes three in a row the last player to place a stone begins the next phase. Ones all of the stones are placed, the player who has the right to begin the next phase removes any one of the opponent's stones, and the opponent does the same with one of the player's pieces. Then, players alternate turns moving one of their pieces to an empty adjacent space. When a player place three of their pieces in a row, they remove one of the opponent's pieces. If a player moves in such a way that the opponent cannot move, the player must make an extra move to allow the opponent a place to play. A player cannot capture an opponent's piece when this extra move is made. The player who captures all but two of the opponent's pieces wins. Games are usually played in sequence, starting with the winner of the previous game, with the first player to win five games in a row being the winner.
        
(game "Shah" (players 2) (equipment {(board (concentric Square 3) Vertex) (piece "Marker" Each (move Step (to (is Empty (to ))) (then (if (and (not (is Prev Mover)) (is Line 3)) (moveAgain ) (if (no Moves Next) (and (moveAgain ) (set Pending))))))) (hand Each)}) (rules (start (place "Marker" "Hand" 12)) {(phase "Placement" (play (move (from (handSite Mover)) (to (sites Empty)) (then (and (if (and (< (var ) 1) (is Line 3)) (set Var (mover ))) (if (and (all Sites (sites Hand P1) (= 0 (count Cell (site )))) (all Sites (sites Hand P2) (= 0 (count Cell (site ))))) (if (< (var ) 1) (moveAgain ) (set NextPlayer (player (var ))))))))) (nextPhase (and (all Sites (sites Hand P1) (= 0 (count Cell (site )))) (all Sites (sites Hand P2) (= 0 (count Cell (site ))))) "Remove")) (phase "Remove" (play (move Remove (sites Occupied Next "Board"))) (nextPhase Mover "Move")) (phase "Move" (play (if (and (not (is Pending)) (is Prev Mover)) (move Remove (sites Occupied Next "Board") (then (if (no Moves Next) (and (moveAgain ) (set Pending))))) (if (is Pending) (do (forEach Piece (move Step (to (is Empty (to ))))) (can Move (forEach Piece Next))) (forEach Piece)) (then (if (= 2 (count Pieces P1)) (addScore P2 1 (then (if (!= (score P2) 5) (and {(remove (sites Occupied All)) (add (piece (id "Marker" P1)) (to (handSite P1)) 12) (add (piece (id "Marker" P2)) (to (handSite P2)) 12)})))) (if (= 2 (count Pieces P2)) (addScore P1 1 (then (if (!= (score P1) 5) (and {(remove (sites Occupied All)) (add (piece (id "Marker" P1)) (to (handSite P1)) 12) (add (piece (id "Marker" P2)) (to (handSite P2)) 12)}))))))))) (nextPhase (= 0 (count Sites (sites Occupied All "Board"))) "Placement"))} (end (if (= (score Mover) 5) (result Mover Win)))))

Three concentric squares, with lines connecting the corners and the midpoints of the sides. Twelve pieces per player. Players alternate turns placing a piece on the board. When a player makes a line of three of their pieces, they may remove one of the opponent's pieces. When all of the pieces have been placed, players alternate turns moving a piece to an empty adjacent spot along the lines of the board. A piece in the four outside corner spaces is allowed to move to any empty spot on the board. The player who captures all of the opponent's pieces wins.
(game "Mulabalaba" (players 2) (equipment {(board (concentric Square 3 true) Vertex) (hand Each) (piece "Marker" Each (if (is In (from ) (sites Corners)) (move (from (from )) (to (sites Empty))) (move Step (to (is Empty (to )))) (then (if (is Line 3) (moveAgain )))))}) (rules (start (place "Marker" "Hand" 12)) {(phase "Placement" (play (if (is Prev Mover) (move Remove (sites Occupied Enemy "Board")) (move (from (handSite Mover)) (to (sites Empty)) (then (if (is Line 3) (moveAgain )))))) (nextPhase Mover (all Sites (sites Hand Mover) (= 0 (count Cell (site )))) "Movement")) (phase "Movement" (play (if (is Prev Mover) (move Remove (sites Occupied Enemy "Board")) (forEach Piece))))} (end (forEach NonMover (no Pieces Player) (result Player Loss)))))

3x3 intersecting lines, with diagonals drawn in the square. Three pieces per player, which begin on the three points on opposite sides of the board. Players alternate turns moving a piece to an empty adjacent spot along the lines of the board. The first player to place three of their pieces in a row along one of the lines which is not one of the sides of the square, wins.
(game "T'mbl" (players 2) (equipment {(board (square 3 Alternating) Vertex) (piece "Marker" Each (move Step (to (is Empty (to )))))}) (rules (start {(place "Marker1" (sites Top)) (place "Marker2" (sites Bottom))}) (play (forEach Piece)) (end (if (and (is In (centrePoint ) (sites Occupied Mover)) (is Line 3)) (result Mover Win)))))

The board has two concentric squares, with a line connecting the center points of each side of the two squares, but not extending inside the perimeter of the central square. Play occurs on the intersections of the lines and the corners of the squares. Each player has five pieces. Play begins with each player placing pieces on empty points. If they make three in a row along the lines, they can remove one of the opponent's pieces. Once all pieces are place, players take turns moving pieces one spot to an adjacent point along the lines. If a player makes three in a row, an opponent's piece is removed as in the first phase of the game. The game is won when the opponent is reduced to two pieces.
(game "Five Men's Morris" (players 2) (equipment {(board (concentric Square 2) Vertex) (hand Each) (piece "Marker" Each (move Step (to (is Empty (to ))) (then (if (is Line 3 Orthogonal true) (moveAgain )))))}) (rules (start (place "Marker" "Hand" 5)) {(phase "Placement" (play (if (is Prev Mover) (move Remove (sites Occupied Enemy "Board")) (move (from (handSite Mover)) (to (sites Empty)) (then (if (is Line 3 Orthogonal true) (moveAgain )))))) (nextPhase Mover (all Sites (sites Hand Mover) (= 0 (count Cell (site )))) "Movement")) (phase "Movement" (play (if (is Prev Mover) (move Remove (sites Occupied Enemy "Board")) (forEach Piece))))} (end (if (<= (count Pieces Next) 2) (result Next Loss)))))

Place a piece of your colour each turn. Win with 4 in a row of your colour.
(game "Score Four" (players 2) (equipment {(board (skew 0.5 (scale 1.0 0.5 (square 4)))) (piece "discFlat" Each)}) (rules (play (move Add (to (forEach (sites Board) (< (size Stack (site )) 4))) true)) (end (if (is Line 4 true) (result Mover Win)))))

Three concentric squares, the corners and midpoints of the squares connected with lines. Nine pieces per player. Players alternate turns placing a piece on an empty spot on the board. When all of the pieces are placed, the players alternate turns moving a piece to an empty adjacent spot along the lines. During either phase, when a player places three of their pieces in a row along the lines, the player removes any one of the opponent's pieces. The player who reduces the opponent to two pieces wins.
        
(game "Triodi (Diagonal)" (players 2) (equipment {(board (concentric Square 3 true) Vertex) (hand Each) (piece "Marker" Each (move Step (to (is Empty (to ))) (then (if (is Line 3 Orthogonal true) (moveAgain )))))}) (rules (start (place "Marker" "Hand" 9)) {(phase "Placement" (play (if (is Prev Mover) (move Remove (sites Occupied Enemy "Board")) (move (from (handSite Mover)) (to (sites Empty)) (then (if (is Line 3 Orthogonal true) (moveAgain )))))) (nextPhase Mover (all Sites (sites Hand Mover) (= 0 (count Cell (site )))) "Movement")) (phase "Movement" (play (if (is Prev Mover) (move Remove (sites Occupied Enemy "Board")) (forEach Piece))))} (end (if (<= (count Pieces Next) 2) (result Next Loss)))))

3x3 board with diagonals. Three pieces per player. Players take turns placing their pieces. Once all pieces have been placed, they may move a piece to any unoccupied spot. The first player to align their three pieces in a row along one of lines on the board is the winner.
(game "Les Pendus" (players 2) (equipment {(board (square 3 Alternating) Vertex) (hand Each) (piece "Marker" Each (move (from ) (to (sites Empty))))}) (rules (start (place "Marker" "Hand" 3)) {(phase "Placement" (play (move (from (handSite Mover)) (to (sites Empty)))) (nextPhase Mover (all Sites (sites Hand Mover) (= 0 (count Cell (site )))) "Movement")) (phase "Movement" (play (forEach Piece)))} (end (if (is Line 3) (result Mover Win)))))

Tic-Tac-Mo uses the same rules as Tic-Tac-Toe, but the third player plays with a \"y\". The first player to make three in a row wins.
(game "Tic-Tac-Mo" (players 3) (equipment {(board (rectangle 3 5)) (piece "Disc" P1) (piece "Cross" P2) (piece "Y" P3)}) (rules (play (move Add (to (sites Empty)))) (end (if (is Line 3) (result Mover Win)))))

Three concentric squares, the midpoints of the squares connected with lines. Nine pieces per player. Players alternate turns placing a piece on an empty spot on the board. When all of the pieces are placed, the players alternate turns moving a piece to an empty adjacent spot along the lines. During either phase, when a player places three of their pieces in a row along the lines, the player removes any one of the opponent's pieces. The player who reduces the opponent to two pieces wins.
(game "Triodi" (players 2) (equipment {(board (concentric Square 3) Vertex) (hand Each) (piece "Marker" Each (move Step (to (is Empty (to ))) (then (if (is Line 3 Orthogonal true) (moveAgain )))))}) (rules (start (place "Marker" "Hand" 9)) {(phase "Placement" (play (if (is Prev Mover) (move Remove (sites Occupied Enemy "Board")) (move (from (handSite Mover)) (to (sites Empty)) (then (if (is Line 3 Orthogonal true) (moveAgain )))))) (nextPhase Mover (all Sites (sites Hand Mover) (= 0 (count Cell (site )))) "Movement")) (phase "Movement" (play (if (is Prev Mover) (move Remove (sites Occupied Enemy "Board")) (forEach Piece))))} (end (if (<= (count Pieces Next) 2) (result Next Loss)))))

3x3 intersecting lines with diagonals. Play occurs on the intersections of the lines. Each player has three pieces. Play begins with each player placing pieces on empty points. If they make three in a row along the lines, they win. Once all pieces are place, players take turns moving pieces one spot to an adjacent point along the lines trying to make three in a row.
(game "Three Men's Morris" (players 2) (equipment {(board (rectangle 3 3 Alternating) Vertex) (hand Each) (piece "Marker" Each (move Step (to (is Empty (to )))))}) (rules (start (place "Marker" "Hand" 3)) {(phase "Placement" (play (move (from (handSite Mover)) (to (sites Empty)))) (nextPhase (all Sites (sites Hand P2) (= 0 (count Cell (site )))) "Movement")) (phase "Movement" (play (forEach Piece)))} (end (if (is Line 3) (result Mover Win)))))

7x7 board. 24 pieces per player. Players alternate turns placing two pieces on the board. When all of the pieces are placed, players alternate turns moving one piece orthogonally any distance. The first player to place seven of their pieces in an orthogonal or diagonal line wins.
        
(game "Fart (7x7)" (players 2) (equipment {(board (square 7)) (piece "Marker" Each (move Slide Orthogonal)) (hand Each)}) (rules (start (place "Marker" "Hand" 24)) {(phase "Placement" (play (move (from (handSite Mover)) (to (difference (sites Board) (centrePoint )) (is Empty (to ))) (then (if (not (is Prev Mover)) (moveAgain ))))) (nextPhase Mover (is Empty (handSite Mover)) "Move")) (phase "Move" (play (forEach Piece)))} (end (if (is Line 7) (result Mover Win)))))

Start with a tile of each colour placed next to each other. Players take turns adding a tile of their colour touching at least one existing tile. Win by making a line of four (or more) of your colour, but lose by making a line of three of your colour beforehand.
(game "Bravalath" (players 2) (equipment {(boardless Hexagonal) (tile "Hex" Each 6)}) (rules (start {(place "Hex1" (centrePoint )) (place "Hex2" (ahead (centrePoint ) E))}) (play (move Add (to (sites Playable) (<= 1 (count Sites (sites Around (to ) NotEmpty)))))) (end {(if (is Line 4) (result Mover Win)) (if (is Line 3) (result Mover Loss))})))

3x3 board, without the outer edges of the square. Three pieces per player. Players alternate turns placing the pieces on an empty space on the board. When all of the pieces have been placed, players move pieces to an adjacent empty space on the board. the first player to place all three of their pieces in an orthogonal or diagonal line wins. 
(game "Tuk Tak" (players 2) (equipment {(board (square 3)) (hand Each) (piece "Marker" Each (move Step (to (is Empty (to )))))}) (rules (start (place "Marker" "Hand" 3)) {(phase "Placement" (play (move (from (handSite Mover)) (to (sites Empty)))) (nextPhase (all Sites (sites Hand P2) (= 0 (count Cell (site )))) "Movement")) (phase "Movement" (play (forEach Piece)))} (end (if (is Line 3) (result Mover Win)))))

Players alternate turns placing one of their pieces on the board. The first person to make a line of four, but without first making a line of three, wins.
(game "Squava" (players 2) (equipment {(board (square 5)) (piece "Marker" Each)}) (rules (meta (swap )) (play (move Add (to (sites Empty)))) (end {(if (is Line 4) (result Mover Win)) (if (is Line 3) (result Mover Loss))})))

5x6 board. Each player has twelve pieces. Players alternate placing their pieces until they are all placed on the board. The goal is to make a line of three, which allows the player to capture one of the opponent's pieces. Once the pieces are all on the board, they may be moved one space orthogonally. In the case that a move creates two lines of three, only one capture is made. The player who makes the last possible capture wins.
        
(game "Tauru" (players 2) (equipment {(board (rectangle 5 6)) (hand Each) (piece "Marker" Each (move Step Orthogonal (to (is Empty (to ))) (then (if (is Line 3) (moveAgain )))))}) (rules (start (place "Marker" "Hand" 12)) {(phase "Placement" (play (if (is Prev Mover) (move Remove (sites Occupied Enemy "Board")) (move (from (handSite Mover)) (to (sites Empty)) (then (if (is Line 3) (moveAgain )))))) (nextPhase (all Sites (sites Hand P2) (= 0 (count Cell (site )))) "Movement")) (phase "Movement" (play (if (is Prev Mover) (move Remove (sites Occupied Enemy "Board")) (forEach Piece))))} (end (if (<= (count Pieces Next) 2) (result Next Loss)))))

The game starts with the board empty. Order plays first, then turns alternate. On each turn, a player places either an X or an O on any open square. Order aims to get five like pieces in a row either vertically, horizontally, or diagonally. Chaos aims to fill the board without completion of a line of five like pieces.
(game "Order and Chaos" (players 2) (equipment {(board (square 6)) (piece "Disc" Shared) (piece "Cross" Shared) (hand Shared 2)}) (rules (start {(place "Disc" (handSite Shared)) (place "Cross" (handSite Shared 1))}) (play (move (from (sites Hand Shared)) (to (sites Empty)) true)) (end {(if (is Line 5) (result P1 Win)) (if (no Moves Next) (result P2 Win))})))

Three concentric squares, with lines connecting the corners and the midpoints of the sides. Two diamonds drawn, one connecting the midpoints of the outer square and intersecting the corners of the second square; the second connecting the midpoints of the second square and intersecting the corners of the central square. Twelve pieces per plays. Players alternate turns placing a piece on an empty spot on the board. When all of the pieces are placed, players alternate turns moving a piece to an empty adjacent spot along the lines. During either phase, when a player places three of their pieces in a row, they remove one of the opponent's pieces. Pieces which are in a three-in-a-row pattern cannot be removed. The player who removes all of the opponent's pieces wins.
(game "Xonin Shatar (Complex)" (players 2) (equipment {(board (add (remove (merge {(shift 3.0 3.0 (remove (square 3) {{1 4} {3 4} {4 7} {4 5}})) (shift 2.0 2.0 (scale 2.0 (remove (square 3) {{1 4} {3 4} {4 7} {4 5}}))) (scale 4.0 (remove (square 3) {{1 4} {3 4} {4 7} {4 5}}))}) {4}) {{17 19} {17 20} {20 22} {22 19} {17 9} {19 11} {22 14} {12 20} {21 13} {23 15} {18 10} {16 8} {11 9} {9 12} {12 14} {14 11} {9 1} {11 3} {6 14} {4 12} {0 8} {5 13} {7 15} {10 2}}) Vertex) (hand Each) (piece "Marker" Each (move Step (to (is Empty (to ))) (then (if (is Line 3) (moveAgain )))))}) (rules (start (place "Marker" "Hand" 12)) {(phase "Placement" (play (if (is Prev Mover) (move Remove (forEach (sites Occupied Enemy "Board") (not (is Line 3 Orthogonal (site ))))) (move (from (handSite Mover)) (to (sites Empty)) (then (if (is Line 3) (moveAgain )))))) (nextPhase Mover (all Sites (sites Hand Mover) (= 0 (count Cell (site )))) "Movement")) (phase "Movement" (play (if (is Prev Mover) (move Remove (forEach (sites Occupied Enemy "Board") (not (is Line 3 Orthogonal (site ))))) (forEach Piece))))} (end (if (no Pieces Next) (result Next Loss)))))

Played on a board of three concentric squares, with a line bisecting the perimeters of each square on each side, but not extending inside the perimeter of the central square. Play occurs on the intersections of the lines and the corners of the squares. Each player has nine pieces. Play begins with each player placing pieces on empty points. If they make three in a row along the lines, they can remove one of the opponent's pieces. They cannot remove an opponent's piece that is in a three-in-a-row formation unless there are no other options. Once all pieces are placed, players take turns moving pieces one spot to an adjacent point along the lines. If a player makes three in a row, an opponent's piece is removed as in the first phase of the game. Once a player is reduced to three pieces, that player may move to any open space on the board. The game is won when the opponent is reduced to two pieces.
(game "Nine Men's Morris" (players 2) (equipment {(board (concentric Square 3) Vertex) (hand Each) (piece "Marker" Each (move Step (to (is Empty (to ))) (then (if (is Line 3 Orthogonal true) (moveAgain )))))}) (rules (start (place "Marker" "Hand" 9)) {(phase "Placement" (play (if (is Prev Mover) (if (can Move (move Remove (forEach (sites Occupied Enemy "Board") (not (is Line 3 Orthogonal (site )))))) (move Remove (forEach (sites Occupied Enemy "Board") (not (is Line 3 Orthogonal (site ))))) (move Remove (sites Occupied Enemy "Board"))) (move (from (handSite Mover)) (to (sites Empty)) (then (if (is Line 3 Orthogonal true) (moveAgain )))))) (nextPhase Mover (all Sites (sites Hand Mover) (= 0 (count Cell (site )))) "Movement")) (phase "Movement" (play (if (is Prev Mover) (if (can Move (move Remove (forEach (sites Occupied Enemy "Board") (not (is Line 3 Orthogonal (site )))))) (move Remove (forEach (sites Occupied Enemy "Board") (not (is Line 3 Orthogonal (site ))))) (move Remove (sites Occupied Enemy "Board"))) (if (> (count Pieces Mover) 3) (forEach Piece) (move (from (sites Occupied Mover)) (to (sites Empty)))))))} (end (if (<= (count Pieces Next) 2) (result Next Loss)))))

The board starts empty. White plays first. Players take turns placing a piece of their colour on an empty cell. Passing is not allowed. After each move, the opponent's pieces with no freedom are captured and removed from the board. A piece has freedom if the group it belongs to touches an empty cell. It is not allowed to place a piece in a space without freedom, unless that move captures the other player's pieces to create freedom. The game ends when one of the players wins a game by making a line of five (or more) stones of their colour.
(game "Pentalath" (players 2) (equipment {(board (intersect {(hex 7) (shift -5.2 0.0 (hex Rectangle 7 14))})) (piece "Marker" Each)}) (rules (play (do (move Add (to (sites Empty)) (then (enclose (from (last To)) (between (is Enemy (who (between ))) (apply (remove (between ))))))) (> (count Liberties Orthogonal) 0))) (end (if (is Line 5) (result Mover Win)))))

Play occurs on a 3x3 grid. One player places an X, the other places an O and players take turns placing their marks in the grid, attempting to get three in a row. The die is showing the cell index to place a piece.
(game "Tic-Tac-Die" (players 2) (equipment {(board (square 3)) (piece "Disc" P1) (piece "Cross" P2) (dice 9 0 1)}) (rules (play (do (roll ) (if (is Empty (count Pips)) (move Add (piece (if (is Mover P1) (id "Disc" P1) (id "Cross" P2))) (to (count Pips))) (move Pass (then (moveAgain )))))) (end {(if (is Line 3) (result Mover Win)) (if (is Full) (result Mover Draw))})))

On a turn, the active player takes a cube that is blank or bearing his symbol from the outer ring of the grid, then adds it to the grid by pushing it into one of the rows from which it was removed. Thus, a few pieces of the grid change places each turn, and the cubes slowly go from blank to crosses and circles. Play continues until someone forms an orthogonal or diagonal line of five cubes bearing his symbol, with this person winning the game.
(game "Quixo" (players 2) (equipment {(board (square 5)) (piece "Disc" P1) (piece "Cross" P2) (piece "Square" Neutral) (hand Each)}) (rules (start (place "Square0" (sites Board))) (play (if (is Prev Mover) (or {(move Select (from (difference (intersection (sites Left) (sites Row (row (last To)))) (sites {(last To)}))) (then (and {(push (from (last To)) E) (if (or (= (what (handSite (mover ))) (id "Square0")) (= (what (handSite (mover ))) (mover ))) (add (piece (mover )) (to (last To))) (add (piece (next )) (to (last To)))) (remove (handSite (mover )))}))) (move Select (from (difference (intersection (sites Right) (sites Row (row (last To)))) (sites {(last To)}))) (then (and {(push (from (last To)) W) (if (or (= (what (handSite (mover ))) (id "Square0")) (= (what (handSite (mover ))) (mover ))) (add (piece (mover )) (to (last To))) (add (piece (next )) (to (last To)))) (remove (handSite (mover )))}))) (move Select (from (difference (intersection (sites Bottom) (sites Column (column (last To)))) (sites {(last To)}))) (then (and {(push (from (last To)) N) (if (or (= (what (handSite (mover ))) (id "Square0")) (= (what (handSite (mover ))) (mover ))) (add (piece (mover )) (to (last To))) (add (piece (next )) (to (last To)))) (remove (handSite (mover )))}))) (move Select (from (difference (intersection (sites Top) (sites Column (column (last To)))) (sites {(last To)}))) (then (and {(push (from (last To)) S) (if (or (= (what (handSite (mover ))) (id "Square0")) (= (what (handSite (mover ))) (mover ))) (add (piece (mover )) (to (last To))) (add (piece (next )) (to (last To)))) (remove (handSite (mover )))})))}) (move Select (from (sites Outer) (or (is Mover (who (from ))) (= (who (from )) 0))) (then (and (fromTo (from (last To)) (to (handSite (mover )))) (moveAgain )))))) (end {(if (is Line 5 (sites LastTo) (next )) (result Next Win)) (if (is Line 5 (sites LastTo) (mover )) (result Mover Win))})))

DROP - On each turn, each player picks any stone of either color, and changes its color. Then, like in Othello, flips all stones of the other color that are between that stone and the next of same color, in any orthogonal or diagonal direction.
            
            GOAL - One player wins if it is able to make an horizontal 8 in-a-row of stones of any color. The other player wins by making a vertical 8 in-a-row.
            
        If, after a move, there are one horizontal and one vertical 8 in-a-row, the player that made the move losses.
(game "Minefield" (players 2) (equipment {(board (square 8)) (piece "Disc" Neutral (flips 1 2))}) (rules (start {(place "Disc0" (sites Phase 0) 1) (place "Disc0" (sites Phase 1) 2)}) (play (move Select (from (sites Board)) (then (flip (last To) (then (custodial (from (last To)) Adjacent (between (!= (state (between )) (state (last To))) (apply (allCombinations (add (piece "Disc0" (mover )) (to (last To))) (flip (between ))))) (to (= (state (to )) (state (last To)))))))))) (end {(if (and (!= 0 (count Sites (forEach (sites Column 0) (or (all Sites (sites Row (row (site ))) (= 1 (state (site )))) (all Sites (sites Row (row (site ))) (= 2 (state (site )))))))) (!= 0 (count Sites (forEach (sites Row 0) (or (all Sites (sites Column (column (site ))) (= 1 (state (site )))) (all Sites (sites Column (column (site ))) (= 2 (state (site ))))))))) (result Mover Loss)) (if (!= 0 (count Sites (forEach (sites Column 0) (or (all Sites (sites Row (row (site ))) (= 1 (state (site )))) (all Sites (sites Row (row (site ))) (= 2 (state (site )))))))) (result P1 Win)) (if (!= 0 (count Sites (forEach (sites Row 0) (or (all Sites (sites Column (column (site ))) (= 1 (state (site )))) (all Sites (sites Column (column (site ))) (= 2 (state (site )))))))) (result P2 Win))})))

Three concentric pentagons, with lines connecting the corners and the midpoints of each side. Fourteen pieces per player. Players alternate turns placing one of their pieces on an empty spot on the board. When all of the pieces are placed, they alternate turns moving one of their pieces to an empty adjacent spot along the lines of the board. During either phase, when a player places three of their pieces in a row, they may remove one of the opponent's pieces from the board. Pieces which are in a three-in-a-row arrangement cannot be removed from the board. The player who captures all of the opponent's pieces wins.
        
(game "Tavan Tal" (players 2) (equipment {(board (add (merge {(shift 2.0 2.0 (merge {(rectangle 1 3) (shift -1.31 0.95 (rotate 108.0 (rectangle 1 3))) (shift -0.81 2.49 (rotate 216.0 (rectangle 1 3))) (shift 1.31 0.95 (rotate -108.0 (rectangle 1 3))) (shift 0.81 2.49 (rotate -216.0 (rectangle 1 3)))})) (shift 1.0 1.0 (scale 2.0 (merge {(rectangle 1 3) (shift -1.31 0.95 (rotate 108.0 (rectangle 1 3))) (shift -0.81 2.49 (rotate 216.0 (rectangle 1 3))) (shift 1.31 0.95 (rotate -108.0 (rectangle 1 3))) (shift 0.81 2.49 (rotate -216.0 (rectangle 1 3)))}))) (scale 3.0 (merge {(rectangle 1 3) (shift -1.31 0.95 (rotate 108.0 (rectangle 1 3))) (shift -0.81 2.49 (rotate 216.0 (rectangle 1 3))) (shift 1.31 0.95 (rotate -108.0 (rectangle 1 3))) (shift 0.81 2.49 (rotate -216.0 (rectangle 1 3)))}))}) {{26 16} {16 6} {5 15} {15 25} {29 19} {19 9} {7 17} {17 27} {28 18} {18 8} {22 12} {12 2} {1 11} {11 21} {20 10} {10 0} {3 13} {13 23} {24 14} {14 4}}) Vertex) (hand Each) (piece "Marker" Each (move Step (to (is Empty (to ))) (then (if (is Line 3) (moveAgain )))))}) (rules (start (place "Marker" "Hand" 14)) {(phase "Placement" (play (if (is Prev Mover) (move Remove (forEach (sites Occupied Enemy "Board") (not (is Line 3 Orthogonal (site ))))) (move (from (handSite Mover)) (to (sites Empty)) (then (if (is Line 3) (moveAgain )))))) (nextPhase Mover (all Sites (sites Hand Mover) (= 0 (count Cell (site )))) "Movement")) (phase "Movement" (play (if (is Prev Mover) (move Remove (forEach (sites Occupied Enemy "Board") (not (is Line 3 Orthogonal (site ))))) (forEach Piece))))} (end (if (no Pieces Next) (result Next Loss)))))

Players complete two actions in turns:
            1. Place a disc of their colour inside any ring.
            2. Pick up the ring in which they placed their disc and move it somewhere else:
            – It must be placed horizontally or vertically adjacent to at least another ring.
            – It must be placed on an empty space (i.e. not over a disc or ring that was placed before).
            - If a player has used up his/her stock of discs, he/she continues by removing one of his/her discs from anywhere on the table and places it in a ring as usual.
            
            However rings and discs must always remain (orthogonally or diagonally) connected to form one unique group. 
            
        The winner is the first player who succeeds in placing four of his/her discs or four of his/her rings in a horizontal, vertical or diagonal row. 
(game "Ringo" (players 2) (equipment {(boardless Square) (piece "Disc" Each (move (from (from ) (level )) (to (sites Occupied All "Ring") 0 (= 1 (size Stack (to )))) (then (moveAgain )))) (piece "Ring" Each)}) (rules (start {(place "Ring1" (ahead (centrePoint ) NE)) (place "Ring1" (ahead (centrePoint ) SE)) (place "Ring1" (ahead (centrePoint ) SW)) (place "Ring1" (ahead (centrePoint ) NW)) (place "Ring2" (ahead (centrePoint ) N)) (place "Ring2" (ahead (centrePoint ) E)) (place "Ring2" (ahead (centrePoint ) S)) (place "Ring2" (ahead (centrePoint ) W))}) {(phase "PlacePhase" (play (do (if (not (is Prev Mover)) (move Add (piece (id "Disc" Mover)) (to (sites Occupied All "Ring") 0 (= 1 (size Stack (to )))) true (then (moveAgain ))) (move (from (last To)) (to (sites Around (difference (sites Occupied All "Ring") (last To)) Orthogonal (is Empty (to )))))) (= 1 (count Groups)))) (nextPhase Mover (and (not (is Prev Mover)) (>= (count Turns) (- (* (count Players) 10) 1))) "MovePhase")) (phase "MovePhase" (play (do (if (not (is Prev Mover)) (forEach Piece) (move (from (last To)) (to (sites Around (difference (sites Occupied All "Ring") (last To)) Orthogonal (is Empty (to )))))) (= 1 (count Groups)))))} (end {(if (is Line 4 (id "Disc" P1)) (result P1 Win)) (if (is Line 4 (id "Ring" P1)) (result P1 Win)) (if (is Line 4 (id "Disc" P2)) (result P2 Win)) (if (is Line 4 (id "Ring" P2)) (result P2 Win))})))

Played on a Go board, using 15x15 of the intersecting lines. The first player places 2 black and 1 white piece on the board. The second player can then choose to: play as black, play as white and place another white piece, or place two more stones and let the other player choose which color to play. Players take turns placing pieces in an attempt to make 5 in a row. In the Standard version, rows of more than five do not count.
(game "Gomoku" (players 2) (equipment {(board (square 15) Vertex) (piece "Marker" Each)}) (rules (play (move Add (to (sites Empty)))) (end (if (is Line 5 All true) (result Mover Win)))))

3x3 intersecting lines, with diagonals drawn in the large square. Three pieces per player. Players alternate turns placing a stone on an empty point on the board. When all of the pieces have been placed, players alternate turns moving one of their pieces to any empty point. The first player to place three of their pieces in a line wins.
        
(game "Tsoro Yemutatu" (players 2) (equipment {(board (rectangle 3 3 Alternating) Vertex) (hand Each) (piece "Marker" Each (move (from ) (to (sites Empty))))}) (rules (start (place "Marker" "Hand" 3)) {(phase "Placement" (play (move (from (handSite Mover)) (to (sites Empty)))) (nextPhase (all Sites (sites Hand P2) (= 0 (count Cell (site )))) "Movement")) (phase "Movement" (play (forEach Piece)))} (end (if (is Line 3) (result Mover Win)))))

3x3 intersecting lines with diagonals. Three pieces per player. Players alternate turns placing a piece on an empty spot on the board. When a player succeeds in making a line of three with their pieces, they win.
(game "Ngre E E" (players 2) (equipment {(board (rectangle 3 3 Alternating) Vertex) (hand Each) (piece "Marker" Each)}) (rules (start (place "Marker" "Hand" 3)) (play (move (from (handSite Mover)) (to (sites Empty)))) (end (if (is Line 3) (result Mover Win)))))

Two players play, with white and black pieces, with neutral red pieces as well. Players take turns placing either a red counters on an empty space or a counter of their color on a space adjacent to a red one. Play continues until one player creates five in a row with only their color and red. The player that does so first wins.
(game "Yavalanchor" (players 2) (equipment {(board (rotate 90.0 (hex 5))) (piece "Marker" Each) (piece "Marker" Shared) (hand Shared)}) (rules (meta (swap )) (start (place "Marker" (handSite Shared))) (play (or (move Add (to (sites Around (sites Occupied Shared "Marker") (is Empty (to ))))) (move (from (handSite Shared)) (to (sites Empty)) true))) (end (forEach Player (and (or (= (what (last To)) (id "Marker" Player)) (= (what (last To)) (id "Marker"))) (is Line 5 {(id "Marker" Player) (id "Marker")})) (result Player Win)))))

3x3 intersecting lines, with diagonals. Three pieces per player. Players alternate turns placing pieces on the board. Once all of the pieces have been placed, the players alternate turns moving a piece to an empty adjacent spot on the board. The first player to place their pieces in a row along one of the lines wins.
(game "Engijn Zirge" (players 2) (equipment {(board (rectangle 3 3 Alternating) Vertex) (hand Each) (piece "Marker" Each (move Step (to (is Empty (to )))))}) (rules (start (place "Marker" "Hand" 3)) {(phase "Placement" (play (move (from (handSite Mover)) (to (sites Empty)))) (nextPhase (all Sites (sites Hand P2) (= 0 (count Cell (site )))) "Movement")) (phase "Movement" (play (forEach Piece)))} (end (if (is Line 3) (result Mover Win)))))

9x9 intersecting lines. Forty pieces per player. Players alternate turns placing a piece on an empty space on the board. When all of the pieces are placed, players alternate turns moving a piece to an empty adjacent spot on the board. When a player places three of their pieces in an orthogonal or diagonal line, they remove one of the opponent's pieces. Players also remove one of the opponent's pieces when they place four pieces so that they are one the four corners of one of the squares on the board. Pieces which are in these patterns cannot be removed from the board. The player who removes all of the opponent's pieces wins.
(game "Xanan Zirge" (players 2) (equipment {(board (square 9) Vertex) (hand Each) (piece "Marker" Each (move Step (to (is Empty (to ))) (then (if (or (is Line 3 All) (is Pattern {F R F R F R F})) (moveAgain )))))}) (rules (start (place "Marker" "Hand" 40)) {(phase "Placement" (play (if (is Prev Mover) (move Remove (forEach (sites Occupied Next "Board") (and (not (is Line 3 All (site ))) (not (is Pattern {F R F R F R F} (site )))))) (move (from (handSite Mover)) (to (sites Empty)) (then (if (or (is Line 3 All) (is Pattern {F R F R F R F})) (moveAgain )))))) (nextPhase Mover (all Sites (sites Hand Mover) (= 0 (count Cell (site )))) "Movement")) (phase "Movement" (play (if (is Prev Mover) (move Remove (forEach (sites Occupied Next "Board") (and (not (is Line 3 All (site ))) (not (is Pattern {F R F R F R F} (site )))))) (forEach Piece))))} (end (if (no Pieces Next) (result Next Loss)))))

The game begins with an empty Diamond board. Black moves first, then turns alternate. (To offset any advantage Black has in moving first, the pie rule is used: White can choose to switch sides after Black's first move, playing from then on as Black. White has this option only after Black's first move.) 
            
            The game is executed in two phases:
            
        1) Placement phase. Players take turns placing one of their pieces on any open point on the board. No placements result in a capture in this phase. A player can win the game in this phase if they are able to occupy all four corners of a board square; otherwise, play proceeds to the Movement phase once all 24 pieces have been placed.
        
    2) Movement phase. For their turn, a player may either:
    - move one of their pieces along a straight line to an adjacent empty point; or,
    - remove a neutral piece from the board—but only if no white or black piece is adjacent to it.
    
    Capturing moves are possible in the Movement phase. If the points of a triangle contain exactly one white and one black piece, either player can capture the opponent piece by occupying the remaining open point (\"cornering\" the enemy piece on the triangle). 
    
    If a move simultaneously corners two opponent pieces on two different triangles, then neither enemy piece is captured. A piece can move safely to a triangle point even if the other two points of the triangle are occupied by enemy pieces.
    
    A player wins by being the first to occupy all four corners (points) of a board square with their pieces.
    
    The game is drawn if any of the following occurs:
    - The player whose turn it is to move cannot move a piece.
- In the last 50 moves (25 moves per player) no capture has been made, nor neutral piece removed.
(game "Diamond" (players 2) (equipment {(board (rotate 90.0 (tiling T33434 3)) Vertex) (piece "Disc" Each (move Step (to (is Empty (to ))) (then (if (= 1 (count Sites (forEach (sites Incident Cell Vertex (last To)) (and {(= 3 (count Sites (sites Incident Vertex Cell (site )))) (= 2 (count Sites (forEach (sites Incident Vertex Cell (site )) (is Mover (who (site )))))) (= 1 (count Sites (forEach (sites Incident Vertex Cell (site )) (is Next (who (site ))))))})))) (forEach Site (sites Incident Cell Vertex (last To)) (if (and {(= 3 (count Sites (sites Incident Vertex Cell (site )))) (= 2 (count Sites (forEach (sites Incident Vertex Cell (site )) (is Mover (who (site )))))) (= 1 (count Sites (forEach (sites Incident Vertex Cell (site )) (is Next (who (site ))))))}) (and (forEach Site (forEach (sites Incident Vertex Cell (site )) (is Next (who (site )))) (and (remove (site )) (add (piece (id "Disc" Neutral)) (to (site ))))) (set Counter)))))))) (piece "Disc" Neutral) (hand Each) (regions P1 {(sites Side W) (sites Side E)}) (regions P2 {(sites Side N) (sites Side S)})}) (rules (meta (swap )) (start (place "Disc" "Hand" 12)) {(phase "Placement" (play (move (from (handSite Mover)) (to (sites Empty)) (then (and (forEach Site (sites Incident Cell Vertex (last To)) (if (= 4 (count Sites (forEach (sites Incident Vertex Cell (site )) (is Mover (who (site )))))) (trigger "Win" Mover))) (set Counter))))) (nextPhase Mover (is Empty (handSite Mover)) "Movement")) (phase "Movement" (play (or (forEach Piece) (move Remove (sites Occupied Neutral)))))} (end {(if (is Triggered "Win" Mover) (result Mover Win)) (if (or (no Moves Mover) (= (counter ) 49)) (result Mover Draw))})))

Each turn the players will put one of their pieces on the boardgame. It's forbidden to put a shape in a line, a column or an area on which this same form has already been posed by the opponent. We can only double a shape if we have played the previous one ourself. The first player who places the fourth different form in a row, column or zone wins the game immediately, no matter who owns the other pieces of that winning move.
(game "Quantik" (players 2) (equipment {(board (square 4) Vertex) (piece "Disc" Each) (piece "Square" Each) (piece "Triangle" Each) (piece "Hex" Each) (regions "BottomLeft" (expand (coord "A1") All)) (regions "BottomRight" (expand (coord "D1") All)) (regions "TopLeft" (expand (coord "A4") All)) (regions "TopRight" (expand (coord "D4") All)) (hand Each 4) (map {(pair (id "Disc1") (id "Disc2")) (pair (id "Disc2") (id "Disc1")) (pair (id "Square1") (id "Square2")) (pair (id "Square2") (id "Square1")) (pair (id "Triangle1") (id "Triangle2")) (pair (id "Triangle2") (id "Triangle1")) (pair (id "Hex1") (id "Hex2")) (pair (id "Hex2") (id "Hex1"))})}) (rules (start {(place "Disc1" (handSite P1) 2) (place "Disc2" (handSite P2) 2) (place "Square1" (handSite P1 1) 2) (place "Square2" (handSite P2 1) 2) (place "Triangle1" (handSite P1 2) 2) (place "Triangle2" (handSite P2 2) 2) (place "Hex1" (handSite P1 3) 2) (place "Hex2" (handSite P2 3) 2)}) (play (move (from (sites Occupied Mover (mover ))) (to (sites Empty) (and {(all Sites (sites Row (row (to ))) (!= (what (site )) (mapEntry (what (from ))))) (all Sites (sites Column (column (to ))) (!= (what (site )) (mapEntry (what (from ))))) (if (is In (to ) (sites "BottomLeft")) (all Sites (sites "BottomLeft") (!= (what (site )) (mapEntry (what (from ))))) (if (is In (to ) (sites "BottomRight")) (all Sites (sites "BottomRight") (!= (what (site )) (mapEntry (what (from ))))) (if (is In (to ) (sites "TopLeft")) (all Sites (sites "TopLeft") (!= (what (site )) (mapEntry (what (from ))))) (all Sites (sites "TopRight") (!= (what (site )) (mapEntry (what (from ))))))))})))) (end (if (or {(all Different (sites "BottomLeft") (is Occupied (site ))) (all Different (sites "BottomRight") (is Occupied (site ))) (all Different (sites "TopLeft") (is Occupied (site ))) (all Different (sites "TopRight") (is Occupied (site ))) (all Different (sites Row 0) (is Occupied (site ))) (all Different (sites Row 1) (is Occupied (site ))) (all Different (sites Row 2) (is Occupied (site ))) (all Different (sites Row 3) (is Occupied (site ))) (all Different (sites Column 0) (is Occupied (site ))) (all Different (sites Column 1) (is Occupied (site ))) (all Different (sites Column 2) (is Occupied (site ))) (all Different (sites Column 3) (is Occupied (site ))) (no Moves Next)}) (result Mover Win)))))

The two players, Red and Blue, alternately place tokens on the intersections of the board until each has placed fifteen. Thereafter they alternate turns sliding a single token along a line to an adjacent vertex.
            
            A player who occupies the three vertices of any triangle has formed a mill and may relocate one enemy token. Occupying the four vertices of a square (forming a double mill) allows the player to relocate two enemy tokens. No more than two tokens may be relocated in a single turn, even if a player completes a mill and double mill with the same move.
            
        The winner is the first player to occupy all six vertices of either any neutral hexagon or one of his/her own color. A win can be achieved during either the placement or movement phases of the game.
(game "Kensington" (players 2) (equipment {(board (rotate 90.0 (tiling T3464 2)) Vertex) (hand Each) (piece "Marker" Each (move Step (to (is Empty (to ))))) (regions "HexA" P1 (sites Cell "E4")) (regions "HexB" P1 (sites Cell "I4")) (regions "HexA" P2 (sites Cell "E12")) (regions "HexB" P2 (sites Cell "I12")) (regions "HexNeutral1" (sites Cell "C8")) (regions "HexNeutral2" (sites Cell "G8")) (regions "HexNeutral3" (sites Cell "K8"))}) (rules (start (place "Marker" "Hand" 15)) (play (if (is Prev Mover) (move (from (sites Occupied Next "Board")) (to (sites Empty) (apply (is Pending) (moveAgain )))) (if (all Sites (sites Hand Mover) (= 0 (count Cell (site )))) (forEach Piece) (move (from (handSite Mover)) (to (sites Empty))) (then (forEach Site (sites Incident Cell Vertex (last To)) (if (= (count Sites (intersection (sites Incident Vertex Cell (site )) (sites Occupied Mover))) (count Sites (sites Incident Vertex Cell (site )))) (if (= 6 (count Sites (sites Incident Vertex Cell (site )))) (if (or {(= (sites Incident Vertex Cell (site )) (sites Mover "HexA")) (= (sites Incident Vertex Cell (site )) (sites Mover "HexB")) (= (sites Incident Vertex Cell (site )) (sites "HexNeutral1")) (= (sites Incident Vertex Cell (site )) (sites "HexNeutral2")) (= (sites Incident Vertex Cell (site )) (sites "HexNeutral3"))}) (trigger "Lose" Next)) (and (if (= 4 (count Sites (sites Incident Vertex Cell (site )))) (set Pending)) (moveAgain ))))))))) (end (if (is Triggered "Lose" Next) (result Mover Win)))))

