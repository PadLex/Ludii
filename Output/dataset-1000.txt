description: 5x5 intersecting lines, with diagonals in each 3x3 quadrant. One player plays with two tigers, which begin on the central spot. The other player plays as 24 goats. The goats play first, and may place a piece on any empty spot. The tigers move to an empty spot any distance along the lines on the board, or may hop over an adjacent goat to capture it, provided there is an empty spot immediately on the other side of the goat. Once all of the goats are placed, they may move along the lines to an empty adjacent spot. If the tigers cannot move, the goats win. The tigers win by capturing all the goats.
Ludii code: (game "Main Tapak Empat" (players 2) (equipment {(board (rectangle 5 5 Alternating) Vertex) (piece "Goat" P1 (move Step (to (is Empty (to ))))) (piece "Tiger" P2 (or (move Hop (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to )))) (move Step (to (is Empty (to )))))) (hand P1)}) (rules (start {(place Stack "Tiger2" (centrePoint )) (place Stack "Goat1" (handSite P1) 24)}) {(phase "Placement" P1 (play (move (from (handSite P1)) (to (sites Empty)))) (nextPhase (all Sites (sites Hand P1) (= 0 (count Cell (site )))))) (phase "Movement" (play (forEach Piece)))} (end {(if (no Moves P2) (result P1 Win)) (if (no Pieces P1) (result P2 Win))})))
Line 3
description: Players take turns moving their pieces. Black starts. Players may: Move one or two empty spaces in any direction, or hop over one ring marker in any direction into an empty space. multiple jumps. White may capture an opponent's piece by moving onto its space from an adjacent one. Both the white and black pieces are removed from play. After moving or capturing, the moving player places a hole-in-the-ice ring marker on the moving tokens starting space and any empty space passed over. The goal for the white player is to capture both black tokens. The goal for the black player is to isolate at least one of their pieces so that it cannot be captured. If both players cannot play, black wins.
Ludii code: (game "Go with the Floe" (players 2) (equipment {(board (keep (square 8) (poly {{-3.0 4.0} {4.0 -3.0} {11.0 4.0} {4.0 11.0}}))) (piece "Seal" P1 N (or (move Slide (between (max 2) (id "Disc0"))) (move Hop (between (= (what (between )) (id "Disc0" Neutral))) (to (is Empty (to ))) (then (add (piece "Disc0") (to (last From))))))) (piece "Bear" P2 (or {(move Slide (between (max 2) (id "Disc0"))) (move Hop (between (= (what (between )) (id "Disc0" Neutral))) (to (is Empty (to ))) (then (add (piece "Disc0") (to (last From))))) (move Step (to (= (what (to )) (id "Seal1" P1)) (apply (remove (to )))) (then (and (remove (last To)) (add (piece "Disc0") (to (last From))))))})) (piece "Disc" Neutral)}) (rules (start {(place "Bear2" {"G2" "G7"}) (place "Seal1" {"B2" "B7"})}) (play (forEach Piece)) (end {(if (= (count Sites (sites Occupied All)) 0) (result P2 Win)) (if (and (no Moves P1) (not (can Move (forEach Piece "Bear" (step (to (= (what (to )) (id "Seal1" P1)))))))) (result P1 Win)) (if (all Passed) (result P1 Win))})))
Line 3
description: 7x7 board, with an X in each corner space, the middle space along each side, and the central space. Black plays with thirteen pieces, white plays with ten. Black places the first piece on the central square, then players alternate turns placing a piece on their own half of the board. When all of the pieces are placed, players alternate turns moving pieces one space orthogonally. A piece is captured when it is surrounded on two opposite sides by opponent's pieces, or if it is in the corner and there are two opponent's pieces blocking it from moving. Capturing cannot happen in the placement phase. Black wins if it can block white from being able to move. White wins if it is impossible for black to block them.
Ludii code: (game "Gala (Buginese)" (players 2) (equipment {(board (square 7)) (piece "Marker" Each (move Step Orthogonal (to (is Empty (to ))) (then (and (custodial (from (last To)) Orthogonal (between (max 1) (is Enemy (who (between ))) (apply (remove (between )))) (to (is Friend (who (to ))))) (surround (from (last To)) Orthogonal (between (and (is Enemy (who (between ))) (is In (between ) (sites Corners))) (apply (remove (between )))) (to (is Friend (who (to ))))))))) (hand Each) (regions "HalfBoard" P1 (expand (sites Bottom) 3)) (regions "HalfBoard" P2 (expand (sites Top) 3))}) (rules (start {(place "Marker1" (handSite P1) 13) (place "Marker2" (handSite P2) 10)}) {(phase "CentrePlacing" P1 (play (move (from (handSite P1)) (to (centrePoint )))) (nextPhase "Placement")) (phase "Placement" P2 (play (if (not (all Sites (sites Hand Mover) (= 0 (count Cell (site ))))) (move (from (handSite Mover)) (to (intersection (sites Empty) (sites Mover)))) (move Pass))) (nextPhase (and (all Sites (sites Hand P1) (= 0 (count Cell (site )))) (all Sites (sites Hand P2) (= 0 (count Cell (site ))))) "Movement")) (phase "Movement" (play (forEach Piece)) (end {(if (no Moves P2) (result P1 Win)) (if (< (count Pieces P1) 2) (result P2 Win))}))}))
Line 3
description: Board with 5x5 lines, diagonals drawn in the four quadrants of the board, and a triangle at the top, connecting the apex with the three central points at the top edge, and a line perpendicularly bisecting the height of the triangle. One player plays as the general, placed in the central position. The other player plays with sixteen pieces, arranged on the perimeter points of the square. Pieces move one spot along the lines on the board. The general may capture pieces when it moves into a space that is surrounded on two opposite sides, along the lines on the board, thus capturing the pieces on either side of it. Conversely, the general can be captured by surrounding it on two opposite sides with pieces. Only the general may enter the triangle. The goal of the general is to capture all of the opponent's pieces, the goal of the person playing with sixteen pieces is to capture the general. If the general becomes trapped in the triangle, the opponent wins.
Ludii code: (game "Shi Liu Kan Tsiang Kun" (players 2) (equipment {(board (merge (scale 2.0 (square 5 Alternating)) (shift 2.0 8.0 (rotate 180.0 (wedge 3)))) Vertex) (piece "General" P1 (move Step (to (is Empty (to ))) (then (intervene (from (last To)) (to (is Enemy (who (to ))) (apply (remove (to )))))))) (piece "Marker" P2 (move Step (to (and (not (is In (to ) (expand (sites Top)))) (is Empty (to )))) (then (custodial (from (last To)) (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Friend (who (to ))))))))}) (rules (start {(place "General1" (ahead (centrePoint ) S)) (place "Marker2" (difference (sites Outer) (expand (sites Top))))}) (play (forEach Piece)) (end {(if (no Pieces P2) (result P1 Win)) (if (no Pieces P1) (result P2 Win)) (if (and {(is In (where "General" P1) (expand (sites Top))) (>= (count Pieces P2) 2) (= (who (coord "D5")) P2)}) (result P2 Win))})))
Line 3
description: To be reconstructed. Rules as inferred by Murray 1951. One player is the bean, and the other player plays with twelve corn kernels. The corn kernels move along the lines. The goal is to corner the bean so that it cannot move. The bean may hop over the corn kernels to capture them or move to an adjacent empty point along the lines. The bean wins by reducing the opponent to nine corn kernels.
Ludii code: (game "Pon Chochotl" (players 2) (equipment {(board (rectangle 5 5 Alternating) Vertex) (piece "Corn" P1 (move Step (to (is Empty (to ))))) (piece "Bean" P2 (or (move Hop (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to )))) (if (is Prev Mover) (move Pass) (move Step (to (is Empty (to )))))))}) (rules (start {(place "Corn1" (union {(expand (sites Bottom)) (sites {"A3" "E3"})})) (place "Bean2" (centrePoint ))}) (play (forEach Piece)) (end {(if (no Moves Next) (result Next Loss)) (if (<= (count Pieces P1) 9) (result P1 Loss))})))
Line 3
description: One player is the rabbit, and the other player plays with twelve other pieces. They may also play with either ten or eleven pieces instead of twelve. The pieces move along the lines. The goal is to corner the rabbit so that it cannot move. The rabbit may hop over the other pieces to capture them. The rabbit wins by reducing the opponent to nine pieces.
Ludii code: (game "Cercar La Liebre" (players 2) (equipment {(board (rectangle 5 5 Alternating) Vertex) (piece "Counter" P1 (move Step (to (is Empty (to ))))) (piece "Hare" P2 (or (move Hop (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to )))) (if (is Prev Mover) (move Pass) (move Step (to (is Empty (to )))))))}) (rules (start {(place "Counter1" (union {(expand (sites Bottom)) (sites {"A3" "E3"})})) (place "Hare2" (centrePoint ))}) (play (forEach Piece)) (end {(if (no Moves Next) (result Next Loss)) (if (<= (count Pieces P1) 9) (result P1 Loss))})))
Line 3
description: 3x5 intersecting lines, with diagonals in the four quadrants created. On either short end, an arc connects the two corner points, and the center line is extended to the arc. One player plays as four hounds, which begin on the four points to the left side of the board. The other player plays as one hare, which begins on the point where the center line and the second line cross. Players alternate turns moving a piece to an empty adjacent spot along the lines. The hounds may only move forward. The hounds win when they block the hare from being able to move.
Ludii code: (game "Hund efter Hare (Thy)" (players 2) (equipment {(board (remove (add (merge {(rectangle 3 5) (shift 1.0 0.0 (scale 0.5 (rectangle 5 1))) (shift 3.0 0.0 (scale 0.5 (rectangle 5 1))) (shift -1.0 1.0 (rectangle 1 7))}) {{0 15} {15 7} {7 18} {18 14} {17 4} {7 17} {7 16} {16 10} {19 10} {0 19} {20 14} {20 4} {12 16} {16 5} {5 15} {15 2} {2 17} {17 9} {9 18} {18 12}}) {{11 6} {6 1} {13 8} {8 3}}) Vertex) (piece "Hare" P1 (move Step (to (is Empty (to ))))) (piece "Dog" P2 E (move Step Forwards (to (is Empty (to )))))}) (rules (start {(place "Hare1" "C3") (place "Dog2" (sites {"B3" "B1" "A3" "B5"}))}) (play (forEach Piece)) (end {(if (no Moves P1) (result P2 Win))})))
Line 3
description: A square, with lines bisecting the sides drawn to the center. A circle is drawn around the central point. arcs are drawn inside the square around the midpoints of the sides and the corners. Diagonals are drawn from the corner arcs to the central circle. One player plays as the hare, one player plays as the hunter and two hounds. The hare begins on the central spot, and the hunter and hounds are placed on three of the points on the central circle. Pieces move to an empty adjacent spot along the lines of the board. The hare moves first. When the hunter and hounds prevent the hare from being able to move, the game ends and the players switch roles.
Ludii code: (game "To Kinegi tou Lagou" (players 2) (equipment {(board (add (remove (remove (merge {(concentric {1 8}) (shift 0.0 -5.0 (concentric {1 4})) (shift 0.0 5.0 (concentric {1 4})) (shift -5.0 0.0 (concentric {1 4})) (shift 5.0 0.0 (concentric {1 4})) (shift 5.0 5.0 (concentric {1 8})) (shift 5.0 -5.0 (concentric {1 8})) (shift -5.0 -5.0 (concentric {1 8})) (shift -5.0 5.0 (concentric {1 8}))}) {20 18 27 11 48 49 50 51 52 41 42 43 44 45 34 35 36 37 30 59 58 57 64 63}) {{0 1} {0 7} {0 5} {0 3} {33 35} {30 29} {27 25} {39 37}}) {{15 8} {22 6} {4 12} {19 2} {18 36} {38 20} {40 14} {16 26} {28 24} {23 32} {31 11} {10 34} {5 30} {3 35} {39 1} {27 7}}) Vertex) (piece "Human" Each (move Step (to (is Empty (to ))))) (piece "Dog" Each (move Step (to (is Empty (to ))))) (piece "Hare" Each (move Step (to (is Empty (to ))))) (hand Each 2)}) (rules (start {(place "Hare2" (centrePoint )) (place "Human1" (handSite P1)) (place "Dog1" (handSite P1 1) 2)}) {(phase "PlacementP1" (play (move (from (sites Hand P1) (is Occupied (from ))) (to (sites {1 2 3 4 5 6 7 8}) (is Empty (to ))) (then (if (not (all Sites (sites Hand P1) (= 0 (count Cell (site ))))) (moveAgain ))))) (nextPhase (all Sites (sites Hand P1) (= 0 (count Cell (site )))) "HuntingP2")) (phase "HuntingP2" (play (forEach Piece (then (if (not (can Move (step (from (where "Hare" P2)) (to (is Empty (to )))))) (and {(addScore P2 (- (count Moves) 3)) (remove (sites Occupied All "Board")) (add (piece "Hare1") (to (sites Centre))) (add (piece "Human2") (to (handSite P2))) (add (piece "Dog2") (to (handSite P2 1)) 2)}))))) (nextPhase (= 1 (count Sites (sites Occupied All "Board"))) "PlacementP2")) (phase "PlacementP2" (play (move (from (sites Hand P2) (is Occupied (from ))) (to (intersection (sites Empty) (sites {1 2 3 4 5 6 7 8})) (is Empty (to ))) (then (if (not (all Sites (sites Hand P2) (= 0 (count Cell (site ))))) (moveAgain ))))) (nextPhase (all Sites (sites Hand P2) (= 0 (count Cell (site )))) "HuntingP1")) (phase "HuntingP1" (play (forEach Piece (then (if (not (can Move (step (from (where "Hare" P1)) (to (is Empty (to )))))) (addScore P1 (- (count Moves) (+ (score P2) 6))))))) (end (if (!= 0 (score P1)) (byScore ))))}))
Line 3
description: An isosceles triangle, with a line intersecting the two equal sides, another line drawn from the apex to the midpoint of this line. A line extending below the base, and another line perpendicular to this one. One player plays as the tiger, and another player as three goats. The tiger begins at the apex of the triangle, the goats on the three points on the bottom line (the two ends and the place where it intersects with the other line. Players alternate turns moving a piece to an empty adjacent spot. The tiger may capture a goat by hopping over it to an empty adjacent spot along the lines of the board. The tiger wins by capturing all of the goats; the goats win by blocking the tiger from being able to move.
Ludii code: (game "Bam Blang Beh Khla" (players 2) (equipment {(board (add (remove (merge {(shift 0.4 -1.0 (scale 0.6 (rectangle 1 3))) (shift 0.2 0.0 (scale 0.8 2.0 (wedge 2))) (shift 0.0 -0.5 (scale 1.0 2.5 (wedge 2)))}) {{3 8} {3 7} {3 9}}) {{6 9} {4 7} {1 8}}) Vertex) (piece "Tiger" P1 (or (move Hop (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to )))) (move Step (to (is Empty (to )))))) (piece "Goat" P2 (move Step (to (is Empty (to )))))}) (rules (start {(place "Tiger1" (sites Top)) (place "Goat2" (sites Bottom))}) (play (forEach Piece)) (end {(if (no Moves P1) (result P2 Win)) (if (no Pieces P2) (result P1 Win))})))
Line 3
description: One player has a single piece, the other has twelve, playing as jackrabbits. The player playing as the jackrabbits attempts to move all of their pieces to the opposite side of the board until they form the same configuration as the starting position on the opposite side. Pieces move orthogonally to accomplish this. The opponent's goal is to capture one of the jackrabbits by hopping over it.
Ludii code: (game "Ko-app-paw-na" (players 2) (equipment {(board (square 5) Vertex) (piece "Rabbit" P1 (move Step (to (is Empty (to ))))) (piece "Counter" P2 (or (move Hop (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to )))) (move Step (to (is Empty (to )))))) (regions P1 (union (expand (sites Top)) (sites {"A3" "E3"})))}) (rules (start {(place "Rabbit1" (union (expand (sites Bottom)) (sites {"A3" "E3"}))) (place "Counter2" (centrePoint ))}) (play (forEach Piece)) (end {(if (= (sites P1) (sites Occupied P1)) (result P1 Win)) (if (= (count Pieces P1) 11) (result P2 Win))})))
Line 3
description: Two arcs which meet, in the shape of a horn, curving to the left. Nine points along the left side, and eight along the right, with one at the apex. Zig-zag lines connect points  on either side of the board, connecting the first on the left to the first on the right, the first on the right to the second on the left, the second on the left to the second on the right, and so on. One player plays as the cow and the calf (black). The cow begins on the first point on the left, the calf on the second point on the right. The other player plays as two children (white), which begin on the second point on the left and the first point on the right. Players alternate turns moving a piece to an empty adjacent spot along the lines on the board. The cow never moves from its position. The calf plays first. The calf wins when it reaches the cow; the children win when they force the calf onto the apex of the board (the pasture).
Ludii code: (game "Uxrijn Ever" (players 2) (equipment {(board (graph {{0.0 0.0} {5.0 0.0} {0.17 1.0} {4.65 1.0} {0.3 2.0} {4.3 2.0} {0.38 3.0} {3.9 3.0} {0.25 4.0} {3.5 4.0} {-0.13 5.0} {2.97 5.0} {-0.75 6.0} {2.2 6.0} {-1.47 7.0} {0.95 7.0} {-2.22 8.0} {-3.0 9.0}} {{0 1} {0 2} {2 4} {4 6} {6 8} {8 10} {10 12} {12 14} {14 16} {16 17} {1 3} {3 5} {5 7} {7 9} {9 11} {11 13} {13 15} {1 2} {2 3} {3 4} {4 5} {5 6} {6 7} {7 8} {8 9} {9 10} {10 11} {11 12} {12 13} {13 14} {14 15} {15 16} {15 17}}) Vertex) (piece "Cow" P1) (piece "Calf" P1 (move Step (to (or (= (what (to )) (id "Cow" P1)) (is Empty (to ))) (apply (remove (to )))))) (piece "Human" P2 (move Step (to (is Empty (to )))))}) (rules (start {(place "Cow1" 0) (place "Calf1" 3) (place "Human2" (sites {1 2}))}) (play (forEach Piece)) (end {(if (is In (where "Calf" P1) (sites Top)) (result P2 Win)) (if (= 1 (count Sites (sites Occupied P1))) (result P1 Win))})))
Line 3
description: 5x5 intersecting lines, with the diagonals of every 2x2 square formed. On one side, a diamond intersects with the central point of that side, with diagonals drawn in the diamond. One player plays as the monk, placed at the intersection of the diamond and the main board. The other player plays as fifteen water pieces, placed on each point along the perimeter of the main board. Players take turns moving their pieces to one adjacent point following the lines on the board. The monk may capture two water pieces by moving to an empty space between two water pieces. The goal of the water pieces is to trap the monk on the far point of the diamond. The monk wins by capturing all of the water.
Ludii code: (game "Shui Yen Ho-Shang" (players 2) (equipment {(board (merge (rotate 45.0 (shift 1.5 4.2 (square 2 Solid))) (square 5 Alternating)) Vertex) (piece "Marker" P1 (move Step (to (is Empty (to ))))) (piece "Marker" P2 (move Step (to (is Empty (to ))) (then (intervene (from (last To)) (to (is Enemy (who (to ))) (apply (remove (to ))))))))}) (rules (start {(place "Marker2" "C5") (place "Marker1" (difference (sites Outer) (sites {"B6" "C7" "D6"})))}) (play (forEach Piece)) (end {(if (no Pieces P1) (result P2 Win)) (if (and (no Moves P2) (is In (where "Marker" P2) (sites {"C7"}))) (result P1 Win))})))
Line 3
description: 28 squares arranged in a cross-shaped board. Diagonals are drawn in each 2x2 square. Pieces are played on the lines of the board. One player plays as a single fox, placed on the center of the third line from the top of one arm of the cross. The other player plays as eighteen geese, placed on the points on the opposite arm of the cross and the first horizontal line of the horizontal arms of the cross. Players alternate turns moving a piece to an empty adjacent spot along the lines of the board. The geese may not move backward. The fox may capture a goose by hopping over it to an empty spot immediately on the opposite side of the goose along the lines of the board. The geese win by blocking the fox from being able to move. The fox wins by capturing all the geese.
        
Ludii code: (game "Gasetavl (Gedved)" (players 2) (equipment {(board (merge (shift 0.0 (/ (- 9.0 3.0) 2.0) (rectangle 3 9 Alternating)) (shift (/ (- 9.0 3.0) 2.0) 0.0 (rectangle 9 3 Alternating))) Vertex) (piece "Fox" P1 (or (move Hop (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to )))) (move Step (to (is Empty (to )))))) (piece "Geese" P2 N (move Step (directions {Rightward Forwards Leftward}) (to (is Empty (to )))))}) (rules (start {(place "Fox1" "E7") (place "Geese2" (sites {"D1" "E1" "F1" "D2" "E2" "F2" "D3" "E3" "F3" "A4" "B4" "C4" "D4" "E4" "F4" "G4" "H4" "I4"}))}) (play (forEach Piece)) (end {(if (no Moves P1) (result P2 Win)) (if (no Pieces P2) (result P1 Win))})))
Line 3
description: Cross-shaped board made of five squares. The four squares of the arms have diagonals and lines connecting the midpoints of opposite sides. The central square has diagonals and a line connecting the central point with the midpoint of the lower side. One player plays with nineteen pieces, which begin on the uppermost nineteen points. The other player plays with two pieces, which begin on the central space and the one immediately below it. The player with two pieces goes first. Pieces move along the lines of the board to an empty adjacent spot. The player with two pieces may capture an adjacent opponent's piece by hopping over it to an empty spot immediately on the opposite side of it. The player with two pieces wins by capturing all of the opponent's pieces; the player with nineteen pieces wins by blocking the opponent from being able to move.
Ludii code: (game "Nuktagaq" (players 2) (equipment {(board (remove (merge (shift 0.0 (/ (- 7.0 3.0) 2.0) (rectangle 3 7 Alternating)) (shift (/ (- 7.0 3.0) 2.0) 0.0 (rectangle 7 3 Alternating))) {{17 10} {9 10} {10 11}}) Vertex) (hand P1) (piece "Marker" P1 (or (move Hop (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to )))) (move Step (to (is Empty (to )))))) (piece "Marker" P2 (move Step (to (is Empty (to )))))}) (rules (start {(place "Marker2" (difference (expand (sites Top) 4) (union (sites Row 2) (sites Centre)))) (place "Marker1" (sites Direction (sites Centre) S true 1))}) (play (forEach Piece)) (end {(if (no Moves Next) (result Next Loss)) (if (no Pieces P2) (result P2 Win))})))
Line 3
description: 8x8 checkered board. One player plays as four sheep (white pieces), which begin on the four dark squares on one side of the board. The other player plays as one wolf (black piece), which can be placed on any dark space on the board. Players alternate turns moving a piece to an empty adjacent dark square on the board. The sheep move forward only but the wolf may also move backward. The goal of the sheep is to block the wolf from being able to move, the goal of the wolf is to move beyond the line of sheep.
Ludii code: (game "Wolf und Schaaf" (players 2) (equipment {(board (square 8)) (piece "Sheep" P2 N (move Step (directions {FR FL}) (to (is Empty (to ))))) (piece "Wolf" P1 (move Step Diagonal (to (is Empty (to ))))) (hand P1)}) (rules (start {(place "Wolf1" (handSite P1)) (place "Sheep2" {"A1" "C1" "E1" "G1"})}) {(phase "Placement" P1 (play (move (from (handSite P1)) (to (intersection (sites Phase 0) (sites Empty))))) (nextPhase "Movement")) (phase "Movement" (play (forEach Piece)))} (end {(if (and (no Moves P1) (is Mover P1)) (result P2 Win)) (if (= 0 (count Sites (forEach (sites Occupied P2) (<= (row (site )) (row (where "Wolf" P1)))))) (result P1 Win))})))
Line 3
description: 5x5 intersecting lines, with diagonals drawn in the four quadrants of the board. Two triangles, their apices intersecting the main board at opposite midpoints. The bast of the triangle is bisected by a line drawn from the apex, and this line is bisected and intersects with the other two sides of the triangle. one player plays as two tigers, which start on the central point. The other player has 23 sheep, eight of which start on the board, on the points immediately adjacent to the tigers. Pieces move one space along the lines to an empty adjacent spot. The tigers may capture an unbroken line of sheep in one direction, provided there is an unoccupied space at the opposite end of the line. The player with the sheep replaces any captured sheep from those remaining in their hand. The tigers win when they capture all of the sheep; the sheep win when they block the tigers from being able to move.
Ludii code: (game "Merimueng-rimueng" (players 2) (equipment {(board (merge {(square 5 Alternating) (shift 0.0 4.0 (rotate 180.0 (wedge 3))) (shift 0.0 -2.0 (wedge 3))}) Vertex) (hand P2) (piece "Tiger" P1 (or {(move Step (to (is Empty (to )))) (move Hop (between (range 1 9) (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to ))))})) (piece "Sheep" P2 (move Step (to (is Empty (to )))))}) (rules (start {(place "Sheep2" (difference (expand (sites Centre)) (centrePoint ))) (place Stack "Sheep2" (handSite P2) 15) (place Stack "Tiger1" (sites Centre) {2})}) {(phase "Movement" (play (forEach Piece true)) (end {(if (no Moves P1) (result P2 Win)) (if (no Pieces P2) (result P1 Win))}) (nextPhase (and (not (all Sites (sites Hand P2) (= 0 (count Cell (site ))))) (< (count Sites (sites Occupied P2 "Board")) 8)) "Placement")) (phase "Placement" (play (move (from (handSite Mover)) (to (sites Empty)) (then (moveAgain )))) (nextPhase (or (all Sites (sites Hand P2) (= 0 (count Cell (site )))) (= (count Sites (sites Occupied P2 "Board")) 8)) "Movement"))}))
Line 3
description: Played on cross-shaped board, made of five squares, each divided into four squares and with the diagonals of the larger squares drawn. One player plays with thirteen pieces situated on every point of one arm of the cross and along the line immediately perpendicular to that arm. The other plays as the Punipeki, which is placed on any empty spot on the first turn. Pieces move along the lines to an adjacent empty spot. The Punipeki may jump over an adjacent piece to capture it. The Punipeki wins if it can capture all the opponent's pieces, the other player wins by blocking the Punipeki from moving.
Ludii code: (game "Manu" (players 2) (equipment {(board (merge (shift 0.0 (/ (- 7.0 3.0) 2.0) (rectangle 3 7 Alternating)) (shift (/ (- 7.0 3.0) 2.0) 0.0 (rectangle 7 3 Alternating))) Vertex) (hand P1) (piece "Stick" P1 (or (move Hop (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to )))) (move Step (to (is Empty (to )))))) (piece "Marker" P2 (move Step (to (is Empty (to )))))}) (rules (start {(place "Marker2" (union (expand (sites Bottom)) (sites Row 2))) (place "Stick1" (handSite P1))}) {(phase "Placement" P1 (play (move (from (handSite P1)) (to (sites Empty)))) (nextPhase (all Sites (sites Hand P1) (= 0 (count Cell (site )))) "Movement")) (phase "Movement" (play (forEach Piece)))} (end {(if (no Moves Next) (result Next Loss)) (if (no Pieces P2) (result P2 Win))})))
Line 3
description: Rectangular board, with 32 points along each long side. Lines connect the points opposite each other, as well as a diagonal line connecting each point on the left to the next highest point on the right (e.g., the first left point with the second right point, the second left point with the third right point, an so on). One player plays as the calf, which begins in the bottom right corner. The second player plays as two children, which begin in the bottom left corner and the second point on the right. Players alternate turns moving one of their pieces to an empty adjacent spot on the board along the lines. The children move first, and cannot move backward during the game. The calf can move in any direction. The children win by forcing the calf to move to the top left corner of the board, the calf wins by returning to its starting point after first having left it.
Ludii code: (game "Neg Tugal Tuux" (players 2) (equipment {(board (add (scale 15.0 1.0 (rectangle 32 2)) {{0 3} {2 5} {4 7} {6 9} {8 11} {10 13} {12 15} {14 17} {16 19} {18 21} {20 23} {22 25} {24 27} {26 29} {28 31} {30 33} {32 35} {34 37} {36 39} {38 41} {40 43} {42 45} {44 47} {46 49} {48 51} {50 53} {52 55} {54 57} {56 59} {58 61} {60 63}}) Vertex) (piece "Cow" P2 (move Step (to (is Empty (to ))))) (piece "Human" P1 (move Step (to (and (is Empty (to )) (>= 1 (- (from ) (to )))))))}) (rules (start {(place "Cow2" 1) (place "Human1" (sites {0 3}))}) (play (forEach Piece)) (end {(if (and (is Mover P2) (= 1 (where "Cow2" P2))) (result P2 Win)) (if (= 62 (where "Cow2" P2)) (result P1 Win))})))
Line 3
description: Four pieces are the sheep; they are placed on the dark squares along one side of the board. one piece is the wolf; it is placed on any dark square on the side opposite the sheep. The goal of the wolf is to reach one of the sheep's original spaces, the sheep's goal is to block the wolf from doing so. Sheep move diagonally forward one square, the wolf moves diagonally forward or backward one square.
Ludii code: (game "Wolf and Sheep" (players 2) (equipment {(board (square 8)) (piece "Sheep" P1 N (move Step (directions {FR FL}) (to (is Empty (to ))))) (piece "Wolf" P2 (move Step Diagonal (to (is Empty (to )))))}) (rules (start {(place "Wolf2" {"D8"}) (place "Sheep1" {"A1" "C1" "E1" "G1"})}) (play (forEach Piece)) (end {(if (and (no Moves P2) (is Mover P2)) (result P1 Win)) (if (is In (where "Wolf" P2) (sites Bottom)) (result P2 Win))})))
Line 3
description: 12x12 checkered board. One player plays with six \"cattle\" or \"dogs,\" the other plays as the \"leopard.\" The cattle start on the white spaces along one side of the board, the leopard may be placed on any white square. Cattle move one space forward diagonally. The leopard may move one or two spaces diagonally in any one direction. If the leopard moves past the line of cattle, the leopard wins. If the cattle block the leopard from being able to move, the cattle win.
Ludii code: (game "Koti Keliya" (players 2) (equipment {(board (square 12)) (piece "Leopard" P1 (move Slide Diagonal (between (max 2)))) (piece "Cow" P2 N (move Step (directions {FR FL}) (to (is Empty (to )))))}) (rules (start {(place "Cow2" (difference (sites Bottom) (sites Phase 0)))}) {(phase "Placement" (play (move Add (to (intersection (sites Phase 1) (sites Empty))))) (nextPhase (not (no Pieces P1)) "Movement")) (phase "Movement" (play (forEach Piece)))} (end {(if (and (no Moves P1) (is Mover P1)) (result P2 Win)) (if (= 0 (count Sites (forEach (sites Occupied P2) (< (row (site )) (row (where "Leopard" P1)))))) (result P1 Win))})))
Line 3
description: Two concentric circles, with four radii from the outer circle to in the center, dividing the circles into four equal parts. There are four arcs, each of which bisects a radius between where each radius intersects the circumference of each circle, the arc also intersecting with the outer circle's circumference. One player plays as a bear, which begins on the central point, the other as three hunters, which begin on any three points on the inner circle. The bear plays first. Players alternate turns moving a piece to an empty adjacent spot along the lines. When the bear is unable to move, the game ends and the players play again, switching sides. The player who lasts longest while playing as the bear wins.
Ludii code: (game "Gioco dell'Orso" (players 2) (equipment {(board (add (concentric {1 4 12}) {{6 8} {9 11} {12 14} {5 15}}) Vertex) (piece "Human" Each (move Step (to (is Empty (to ))))) (piece "Bear" Each (move Step (to (is Empty (to ))))) (hand Each)}) (rules (start {(place "Human1" (handSite P1) 3) (place "Bear2" (sites Centre))}) {(phase "PlacementP1" (play (move (from (handSite P1)) (to (intersection (sites Empty) (sites {1 2 3 4}))) (then (if (not (all Sites (sites Hand P1) (= 0 (count Cell (site ))))) (moveAgain ))))) (nextPhase (all Sites (sites Hand P1) (= 0 (count Cell (site )))) "HuntingP2")) (phase "HuntingP2" (play (forEach Piece (then (if (not (can Move (move Step (from (where "Bear" P2)) (to (is Empty (to )))))) (and {(addScore P2 (- (count Moves) 3)) (remove (sites Occupied All "Board")) (add (piece "Bear1") (to (sites Centre))) (add (piece "Human2") (to (handSite P2)) 3)}))))) (nextPhase (= 1 (count Sites (sites Occupied All "Board"))) "PlacementP2")) (phase "PlacementP2" (play (move (from (handSite P2)) (to (intersection (sites Empty) (sites {1 2 3 4}))) (then (if (not (all Sites (sites Hand P2) (= 0 (count Cell (site ))))) (moveAgain ))))) (nextPhase (all Sites (sites Hand P2) (= 0 (count Cell (site )))) "HuntingP1")) (phase "HuntingP1" (play (forEach Piece (then (if (not (can Move (move Step (from (where "Bear" P1)) (to (is Empty (to )))))) (addScore P1 (- (count Moves) (+ (score P2) 6))))))) (end (if (!= 0 (score P1)) (byScore ))))}))
Line 3
description: 5x5 intersecting lines, with diagonals in each quadrant. Two triangles, the apexes of which intersect with the square at the midpoint of opposite sides. One line bisecting the base of the triangle, and another bisecting this line. One player plays as the tiger, which is placed on the apex of either triangle. The other player plays as 24  people, nine of which begin on the nine central points of the board. To begin, the person playing as the tiger removes three of the people from their starting position and places them on any points on the board. The person playing as the people then places one of the remaining people on an empty spot on the board. The tiger then moves to an empty adjacent spot along the lines of the board. Play continues like this until all of the people are placed, at which point the people move to an adjacent empty spot on the board as well. On its turn, the tiger may hop over a line of people to an empty spot on the other side of the line, following the lines of the board and only if the number of people in the line is odd. The tiger wins if it captures all the people; the people win when they block the tiger from being able to move.
Ludii code: (game "Rimau-Rimau (One Tiger)" (players 2) (equipment {(board (merge {(square 5 Alternating) (shift 0.0 4.0 (rotate 180.0 (wedge 3))) (shift 0.0 -2.0 (wedge 3))}) Vertex) (hand Each) (piece "Tiger" P1 (or {(move Step (to (is Empty (to )))) (move Hop (between (range 1 9) (is Enemy (who (between ))) (apply (remove (between )))) (to (and (is Empty (to )) (is Even (count Steps (from ) (to ))))))})) (piece "human" P2 (move Step (to (is Empty (to )))))}) (rules (start {(place "human2" (expand (sites Centre))) (place "human2" (handSite P2) 15) (place "Tiger1" (handSite P1))}) {(phase "PlacementTiger" P1 (play (move (from (handSite P1)) (to (sites {"C3" "C7"})) (then (moveAgain )))) (nextPhase Mover "MoveHuman")) (phase "MoveHuman" P1 (play (move (from (intersection (expand (sites Centre)) (sites Occupied Next))) (to (difference (sites Empty) (expand (sites Centre)))) (then (if (< 6 (count Sites (intersection (expand (sites Centre)) (sites Occupied Next)))) (moveAgain ))))) (nextPhase Mover (= 6 (count Sites (intersection (expand (sites Centre)) (sites Occupied Next)))) "Movement")) (phase "PlacementHuman" P2 (play (move (from (handSite Mover)) (to (sites Empty)))) (nextPhase (all Sites (sites Hand P2) (= 0 (count Cell (site )))) "Movement")) (phase "Movement" (play (forEach Piece)) (end {(if (no Moves P1) (result P2 Win)) (if (no Pieces P2) (result P1 Win))}))}))
Line 3
description: A square, with diagonals and lines connecting the midpoints. Two triangles on opposite sides of the triangle. One player plays as three galgos, which are placed on the three points of one of the triangles. The other player plays as one hare, which begins on the point between two of the galgos. The hare may move in any direction along the lines on the board, but must move to the central point of the board on its first move. The galgos may move forward orthogonally or diagonally; they may never move horizontally and may only move backwards if the galgo which starts on the apex of the triangle has moved and the piece to move backwards has not yet moved. If the galgos block the hare from being able to move, they win, if the hare moves past the galgos it wins.
Ludii code: (game "La Liebre Perseguida" (players 2) (equipment {(board (rotate 90.0 (merge {(rectangle 3 3 Alternating) (shift 1.5 0.5 (rotate -90.0 (wedge 2))) (shift -1.5 0.5 (rotate 90.0 (wedge 2)))})) Vertex) (piece "Hare" P1 (move Step Orthogonal (to (is Empty (to ))))) (piece "Rabbit" P2 N (or (if (= (state (from )) 1) (move Step Backwards (to (and (is In (to ) (sites Bottom)) (is Empty (to )))) (then (if (= (state (last To)) 1) (set State (last To) 0))))) (move Step Forwards (to (is Empty (to ))) (then (if (= (state (last To)) 1) (set State (last To) 0)))))) (regions "Home" P2 (sites {"B1" "C2" "A2"})) (regions "Home" P1 (sites {"B2"}))}) (rules (start {(place "Hare1" (sites P1)) (place "Rabbit2" (sites P2) 1)}) (play (forEach Piece)) (end {(if (no Moves P1) (result P2 Win)) (if (is In (where "Hare" P1) (sites P2)) (result P1 Win))})))
Line 3
description: 5x5 intersecting lines with diagonals in each quadrant. A triangle, the apex intersecting with the apex of one of the sides. A line is drawn from the apex to the midpoint of the base of the triangle. A line bisects this line, connecting the midpoints of the sides of the triangle,  One player plays as one jaguar, which begins on the center of the base of the large triangle's base. The other player plays as fifteen dogs, which begin on the points of the three ranks of the bottom half of the square portion of the board. The jaguar moves first. Pieces move to an empty adjacent space along the lines of the board. The jaguar may hop over an adjacent dog to an empty space immediately on the opposite side of it, capturing the dog. Dogs cannot capture. The dogs win by blocking the jaguar so it cannot move; the jaguar wins when only six dogs remain. 
Ludii code: (game "Yaguarete Kora" (players 2) (equipment {(board (rotate 180.0 (merge (shift 0.0 2.0 (square 5 Alternating)) (wedge 3))) Vertex) (piece "Jaguar" P1 (or (move Step (to (is Empty (to )))) (move Hop (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to )))))) (piece "Dog" P2 (move Step (to (is Empty (to )))))}) (rules (start {(place "Jaguar1" "C6") (place "Dog2" (expand (sites Bottom) 2))}) (play (forEach Piece)) (end {(if (no Moves P1) (result P1 Loss)) (if (<= (count Pieces P2) 6) (result P1 Win))})))
Line 3
description: One player plays with one piece \"presumably the coyote,\" the other with the other twelve pieces, placed on intersections of the lines. Pieces move to an adjacent intersection connected to the present position by a line. The \"coyote\" may take the opponent's pieces by hopping over them. Multiple captures are allowed if possible, Captures are obligatory. The goal of the coyote is to capture all of the opponent's pieces; the other player's goal is to block the coyote so it cannot move.
Ludii code: (game "Coyote" (players 2) (equipment {(board (rectangle 5 5 Radiating) Vertex) (piece "Sheep" P1 (move Step (to (is Empty (to ))))) (piece "Coyote" P2 (or (move Hop (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to )))) (if (is Prev Mover) (move Pass) (move Step (to (is Empty (to )))))))}) (rules (start {(place "Sheep1" (union (expand (sites Bottom)) (sites {"A3" "E3"}))) (place "Coyote2" (centrePoint ))}) (play (forEach Piece)) (end {(if (no Moves Next) (result Next Loss)) (if (<= (count Pieces P1) 9) (result P1 Loss))})))
Line 3
description: 5x5 intersecting lines, with diagonals drawn in the quadrants. One player plays as one dog,  which is a large stone, and the other as twelve goats, which are smaller stones. The goats begin on the two rows closest to the player to which they belong, and on the right hand spots in the central row. The dog begins in the central space. 
            
            The dog moves first. The dog may move in any direction along the lines of the board. It may capture a goat by hopping over it to an empty adjacent spot on the opposite side of the goat, according to the lines of the board. Multiple captures are allowed. The goats move one space forward orthogonally or diagonally, or sideways, along the lines of the board. 
            
            When all of the goats are unable to move forward anymore and all are are in spaces being equivalent to the starting position on the opposite side of the board, they may then commence moving in the opposite direction toward their original starting position, but not backwards with respect to this direction. 
            
        The dog wins by capturing all the goats; the goats win by blocking the dog from being able to move.
Ludii code: (game "El Perro" (players 2) (equipment {(board (rectangle 5 5 Alternating) Vertex) (piece "Goat" P2 (move Step (if (= (value Player Mover) 1) (directions {S SE SW E W}) (directions {N NE NW E W})) (to (is Empty (to ))))) (piece "Dog" P1 (or (move Hop (from (from )) Adjacent (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to ))) (then (if (can Move (move Hop (from (last To)) (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to ))))) (moveAgain )))) (move Step (to (is Empty (to ))))))}) (rules (start {(place "Goat2" (union (intersection (union (sites Left) (sites Right)) (sites Row 2)) (expand (sites Bottom)))) (place "Dog1" (sites Centre))}) (play (if (is Prev Mover) (or (move Hop (from (last To)) Adjacent (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to ))) (then (if (can Move (move Hop (from (last To)) (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to ))))) (moveAgain )))) (move Pass)) (forEach Piece) (then (if (not (can Move (forEach Piece (move Step (if (= (value Player P2) 1) (directions {S SE SW}) (directions {N NE NW})) (to (is Empty (to )))) P2))) (set Value P2 (if (= (value Player P2) 1) 0 1)))))) (end {(if (no Moves P1) (result P2 Win)) (if (no Pieces P2) (result P1 Win))})))
Line 3
description: ta
    
    (info
        {
        (description "Komikan is a game played in South America, particularly well-known in Chile. It is first mentioned in a text by J. I. Molina in 1787, describing it as a game of Chess. Subsequent authors have doubted the identification of this game as Chess, and have largely agreed that it is indeed a hunt game popular among the Araucanians from the nineteenth century, also known as \"Leoncito.\" It is a hunt game, played on an Alquerque-type board with a triangular appendage. It may be derived from the game Komina (also Taptana) known from Inka times.
Ludii code: (game "Komikan" (players 2) (equipment {(board (merge (scale 2.0 (square 5 Alternating)) (graph {{4.0 8.0} {3.0 9.0} {4.0 9.0} {5.0 9.0} {2.0 10.0} {3.0 10.0} {4.0 10.0} {5.0 10.0} {6.0 10.0} {1.0 11.0} {3.0 11.0} {4.0 11.0} {5.0 11.0} {7.0 11.0}} {{0 1} {0 2} {0 3} {1 4} {1 5} {1 2} {2 6} {2 3} {3 7} {3 8} {4 9} {4 5} {5 10} {5 6} {6 11} {6 7} {7 12} {7 8} {8 13} {9 10} {10 11} {11 12} {12 13}})) Vertex) (piece "MountainLion" P1 (if (is Prev Mover) (or (move Pass) (move Hop (from (last To)) (between (and (not (is In (between ) (sites ToClear))) (is Enemy (who (between )))) (apply (remove (between )))) (to (is Empty (to ))) (then (if (can Move (hop (from (last To)) (between (and (not (is In (between ) (sites ToClear))) (is Enemy (who (between ))))) (to (is Empty (to ))))) (moveAgain ))))) (or (move Hop (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to ))) (then (if (can Move (hop (from (last To)) (between (and (not (is In (between ) (sites ToClear))) (is Enemy (who (between ))))) (to (is Empty (to ))))) (moveAgain )))) (move Step (to (is Empty (to ))))))) (piece "Dog" P2 N (move Step Forwards (to (is Empty (to )))))}) (rules (start {(place "Dog2" (union (expand (sites Bottom)) (sites {"A3" "I3"}))) (place "MountainLion1" (coord "E7"))}) (play (forEach Piece)) (end {(if (no Pieces P2) (result P1 Win)) (if (no Moves P1) (result P2 Win)) (if (no Moves P2) (result Mover Draw))})))
Line 3
description: Square board, divided into eight equal triangles, and a circle around the square, touching it at the corners, One player plays as the hare, the other player as three hounds. Players take turns placing one of their pieces on the board. When a player has placed all their pieces, they move to an adjacent empty spot. When the hounds block the hare from being able to move, the hounds win. 
Ludii code: (game "Hyvn aetter Hare" (players 2) (equipment {(board (splitCrossings (merge (shift 0.5 0.5 (scale 0.707 (concentric {1 8}))) (square 2))) Vertex) (piece "Hare" P1 (move Step (to (is Empty (to ))))) (piece "Dog" P2 (move Step (to (is Empty (to ))))) (hand Each)}) (rules (start {(place "Hare1" (handSite P1) 1) (place "Dog2" (handSite P2) 3)}) {(phase "Placement" (play (if (not (all Sites (sites Hand Mover) (= 0 (count Cell (site ))))) (move (from (handSite Mover)) (to (sites Empty))))) (nextPhase (all Sites (sites Hand P2) (= 0 (count Cell (site )))) "Movement")) (phase "Movement" (play (forEach Piece)) (end (if (no Moves Next) (result Next Loss))))}))
Line 3
description: Five squares which are each divided with lines connecting the midpoints of their sides and diagonals. The five squares are arranged in a cross-shaped board. One player plays as two foxes the other as twenty hens. The hens begin on the twenty spaces on one half of the board, the foxes on the bottom two corners of the square on the opposite arm of the cross. The foxes may move in any direction, and hop over a hen to an empty space immediately adjacent on the opposite side of the hen along the lines of the board to capture. The hens may not move backward. The foxes win by capturing all the hens, the hens win by occupying all of the spaces in the square of the arm of the cross opposite from where they began.
Ludii code: (game "El Zorro" (players {(player N) (player S)}) (equipment {(board (merge (shift 0.0 (/ (- 7.0 3.0) 2.0) (rectangle 3 7 Alternating)) (shift (/ (- 7.0 3.0) 2.0) 0.0 (rectangle 7 3 Alternating))) Vertex) (piece "Fox" P1 (or (move Hop (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to )))) (move Step (to (is Empty (to )))))) (piece "Hen" P2 (move Step (directions {Rightward Leftward Forwards}) (to (is Empty (to )))))}) (rules (start {(place "Hen2" (union (sites Top) (expand (sites Row 4)))) (place "Fox1" (intersection (union (sites Column 4) (sites Column 2)) (sites Bottom)))}) (play (forEach Piece)) (end {(if (all Sites (expand (sites Bottom) 2) (= (who (site )) P2)) (result P2 Win)) (if (no Pieces P2) (result P1 Win))})))
Line 3
description: The game is played on a triangle board divided in half on its height and then in thirds with lines crossing the height perpendicularly. One player plays as the tiger, and the other plays as seven leopards. The tiger plays their piece on a point where lines intersect first, and then on subsequent turns the leopards are placed one-by-one. Moves occur along the lines to an adjacent intersection. The tiger captures may capture a leopard by hopping over it. The tiger's goal is to capture four of the leopards; the leopards' goal is to block the tiger so it cannot move.
Ludii code: (game "Hat Diviyan Keliya" (players 2) (equipment {(board (scale 1.0 2.0 (wedge 4)) Vertex) (hand Each) (piece "Tiger" P1 (or (move Hop (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to )))) (move Step (to (is Empty (to )))))) (piece "Leopard" P2 (move Step (to (is Empty (to )))))}) (rules (start {(place "Tiger1" (handSite P1) 1) (place "Leopard2" (handSite P2) 7)}) {(phase "Placement" (play (move (from (handSite Mover)) (to (sites Empty)))) (nextPhase Mover (all Sites (sites Hand Mover) (= 0 (count Cell (site )))) "Movement")) (phase "Movement" (play (forEach Piece)) (end {(if (no Moves Next) (result Next Loss)) (if (<= (count Pieces P2) 3) (result P2 Loss))}))}))
Line 3
description: The board has no extension and joined diagonals. Haretavl rules.
Ludii code: (game "Ludus Coriovalli" (players 2) (equipment {(board (add (merge {(scale 2.0 1.0 (rectangle 1 3)) (rectangle 2 1) (shift 4.0 0.0 (rectangle 2 1)) (shift 4.0 1.5 (rectangle 2 1)) (shift 0.0 1.5 (rectangle 2 1)) (scale 2.0 1.0 (shift 0.0 2.5 (rectangle 1 3)))}) {{3 7} {5 4} {9 1} {3 1} {1 4} {5 9} {9 7}}) Vertex) (hand Each) (piece "Dog" P1 (move Step (to (is Empty (to ))))) (piece "Hare" P2 (move Step (to (is Empty (to )))))}) (rules (start {(place "Dog1" (handSite P1) 3) (place "Hare2" (handSite P2))}) {(phase "Placement" (play (move (from (handSite Mover)) (to (sites Empty)))) (nextPhase Mover (all Sites (sites Hand Mover) (= 0 (count Cell (site )))) "Movement")) (phase "Movement" (play (forEach Piece)))} (end {(if (no Moves P2) (result P1 Win)) (if (or (>= (count Moves) (- (value MoveLimit) 10)) (>= (count Turns) (- (value TurnLimit) 5))) (result P2 Win))})))
Line 3
description: 5x5 lines, intersecting to form a square. Diagonals are drawn in the four quadrants of the board. One triangle, its apex intersecting the main board at the midpoint of one side. The base of the triangle is bisected by a line drawn from the apex, and this line is bisected and intersects with the other two sides of the triangle. One player plays as the tiger, placed on the central point of the triangle, and the other plays as twelve goats, which begin on the first two rows of points opposite the triangle and on the outer two points in the third row. The tiger moves first. Pieces move to an empty adjacent spot along the lines on the board. The tiger alone may capture a goat by hopping over it to an empty spot immediately opposite a goat. The tiger wins by capturing all the goats; the goats win by blocking the tiger from being able to move.
Ludii code: (game "Orissa Tiger Game (One Tiger)" (players 2) (equipment {(board (rotate 180.0 (merge (shift 0.0 2.0 (square 5 Alternating)) (wedge 3))) Vertex) (piece "Tiger" P1 (or (move Step (to (is Empty (to )))) (move Hop (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to )))))) (piece "Goat" P2 (move Step (to (is Empty (to )))))}) (rules (start {(place "Tiger1" (sites {"C6"})) (place "Goat2" (union (expand (sites Bottom)) (sites {"A3" "E3"})))}) (play (forEach Piece)) (end {(if (no Moves P1) (result P2 Win)) (if (no Pieces P2) (result P1 Win))})))
Line 3
description: Played on a five-pointed star shaped board. One player plays with one piece, the \"tiger,\" and the other plays with seven pieces, the \"kaooas.\" The player with the kaooas attempt to checkmate the tiger by moving to one of the points where the lines of the board intersect. The tiger captures kaooas by hopping over them. The tiger wins by capturing all the kaooas.
Ludii code: (game "Kaooa" (players 2) (equipment {(board (splitCrossings (regular Star 5)) Vertex) (hand Each) (piece "Marker" P1 (or (move Hop (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to ))) (then (if (can Move (hop (from (last To)) (between (and (not (is In (between ) (sites ToClear))) (is Enemy (who (between ))))) (to (is Empty (to ))))) (moveAgain )))) (move Step (to (is Empty (to )))))) (piece "Marker" P2 (move Step (to (is Empty (to )))))}) (rules (start {(place "Marker1" (handSite P1) 1) (place "Marker2" (handSite P2) 7)}) {(phase "Placement" (play (move (from (handSite Mover)) (to (sites Empty)))) (nextPhase Mover (all Sites (sites Hand Mover) (= 0 (count Cell (site )))) "Movement")) (phase "Movement" (play (forEach Piece)) (end (if (no Moves Next) (result Next Loss))))}))
Line 3
description: A triangle, with a line drawn from the apex to the base, and two lines drawn through the height connecting the opposite two sides. One player plays as one tiger, the other as five lambs. The tiger begins on the apex of the triangle. The tiger moves to an empty adjacent spot along the lines of the board. The player who plays as the lambs plays first, placing a lamb on an empty spot on the board, and then the tiger player moves. When all of the lambs are placed, the lambs move in the same manner as the tiger. The tiger may capture a lamb by hopping over it to an empty space on the opposite adjacent side of the lamb along the lines on the board. The lambs win when they block the tiger from being able to move, the tiger wins by capturing enough lambs so that it cannot be blocked.
Ludii code: (game "Huli-Mane Ata" (players 2) (equipment {(board (scale 1.0 2.0 (wedge 4 3)) Vertex) (hand P1) (piece "Lamb" P1 (move Step (to (is Empty (to ))))) (piece "Tiger" P2 (or (move Step (to (is Empty (to )))) (move Hop (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to ))))))}) (rules (start {(place "Lamb1" (handSite P1) 5) (place "Tiger2" (sites Top))}) {(phase "Opening" P1 (play (move (from (handSite Mover)) (to (sites Empty)))) (nextPhase Mover (all Sites (sites Hand Mover) (= 0 (count Cell (site )))) "Movement")) (phase "Movement" (play (forEach Piece)))} (end {(if (no Moves P2) (result P1 Win)) (if (< (count Pieces P1) 4) (result P2 Win))})))
Line 3
description: 5x5 intersecting lines, with diagonals in each quadrant. Two triangles, the apexes of which intersect with the square at the midpoint of opposite sides. One line bisecting two sides of the triangle. One player plays as twenty people, stacked five each in the four points where the diagonals cross in each quadrant. The other player plays as two tigers, which are placed on the midpoints of the sides without triangles. Players alternate turns moving one piece to an adjacent spot along the lines of the board. The tiger may hop over one of the people to an empty point on the opposite side immediately adjacent to it along the lines of the board. When the tiger hops over one of the stacks, it captures only one of the people. The tigers win by capturing all the people, the people win by blocking the tigers from being able to move.
Ludii code: (game "Mao Naga Tiger Game" (players 2) (equipment {(board (merge {(square 5 Alternating) (shift 0.0 4.0 (rotate 180.0 (wedge 3))) (shift 0.0 -2.0 (wedge 3))}) Vertex) (piece "Human" P1 (move Step (to (is Empty (to ))))) (piece "Tiger" P2 (or (move Step (to (is Empty (to )))) (move Hop (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to ))))))}) (rules (start {(place Stack "Human1" (sites {"B4" "B6" "D4" "D6"}) 5) (place "Tiger2" (sites {"A5" "E5"}))}) (play (forEach Piece true)) (end {(if (no Moves P2) (result P1 Win)) (if (no Pieces P1) (result P2 Win))})))
Line 3
description: Cross-shaped board, made of four 3x3 intersecting lines with diagonals. One player plays as the fox, which begins on the central space of the board. The other player plays as the lambs, who start in the spaces of one arm of the cross and the line of seven spots in front of that arm. Players alternate turns moving their pieces along the lines. The fox may capture one lamb by hopping over it in a straight line to an empty space on the opposite side of it. The fox wins by capturing seven lambs, the lambs win by blocking the fox so it cannot move.
Ludii code: (game "Refskak" (players 2) (equipment {(board (merge (shift 0.0 (/ (- 7.0 3.0) 2.0) (rectangle 3 7 Alternating)) (shift (/ (- 7.0 3.0) 2.0) 0.0 (rectangle 7 3 Alternating))) Vertex) (piece "Lamb" P1 (move Step (to (is Empty (to ))))) (piece "Fox" P2 (or (move Hop (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to )))) (move Step (to (is Empty (to ))))))}) (rules (start {(place "Fox2" (centrePoint )) (place "Lamb1" (union (expand (sites Bottom) 2) (sites {"A3" "B3" "F3" "G3"})))}) (play (forEach Piece)) (end {(if (no Moves Next) (result Next Loss)) (if (<= (count Pieces P1) 6) (result P1 Loss))})))
Line 3
description: 5x5 board, played on intersections, with lines forming a diamond shape connecting the midpoints of the edges of the board. One player plays with two tiger pieces, placed on the midpoints of two opposite sides. The other player plays with twenty goats, divided into four stacks of five, placed on the next adjacent spot to the tigers on the diamond. The goats move first. Goats may move one at a time to any adjacent vacant spot. The tiger may move in the same manner, but also may capture a piece by hopping over it. Multiple captures can be made on the same turn with subsequent hops, but only the top goat in a stack is captured when a tiger leaps over it. The goal of the goats is to surround the tigers so they cannot move; the goal of the tigers is to capture all the goats.
Ludii code: (game "Bagh Guti" (players 2) (equipment {(board (makeFaces (remove (square 5 Alternating) {{{0.0 0.0} {1.0 1.0}} {{1.0 1.0} {2.0 2.0}} {{2.0 2.0} {3.0 3.0}} {{3.0 3.0} {4.0 4.0}} {{4.0 0.0} {3.0 1.0}} {{3.0 1.0} {2.0 2.0}} {{2.0 2.0} {1.0 3.0}} {{1.0 3.0} {0.0 4.0}}})) Vertex) (piece "Goat" P1 (move Step (to (is Empty (to ))))) (piece "Tiger" P2 (or (move Step (to (is Empty (to )))) (move Hop (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to ))) (then (if (can Move (hop (from (last To)) (between (and (not (is In (between ) (sites ToClear))) (is Enemy (who (between ))))) (to (is Empty (to ))))) (moveAgain ))))))}) (rules (start {(place Stack "Goat1" (sites {"B2" "D2" "B4" "D4"}) {5 5 5 5}) (place "Tiger2" (sites {"C1" "C5"}))}) (play (if (is Prev Mover) (or (move Pass) (move Hop (from (last To)) (between (and (not (is In (between ) (sites ToClear))) (is Enemy (who (between )))) (apply (remove (between )))) (to (is Empty (to ))) (then (if (can Move (hop (from (last To)) (between (and (not (is In (between ) (sites ToClear))) (is Enemy (who (between ))))) (to (is Empty (to ))))) (moveAgain ))))) (forEach Piece true))) (end {(if (no Moves P2) (result P1 Win)) (if (no Pieces P1) (result P2 Win))})))
Line 3
description: Played on cross-shaped board, made of five squares, each divided into four squares and with the diagonals of the larger squares drawn. One player plays with one larger piece, the Oke-mow, placed on the central point, and the other player with thirteen pieces situated on every point of one arm of the cross and along the line immediately perpendicular to that arm. Pieces move along the lines to an adjacent empty spot. The Oke-mow may jump over an adjacent piece to capture it. Multiple captures are allowed. The Oke-mow wins if it can capture all the opponent's pieces, the other player wins by blocking the Oke-mow from moving.
        
Ludii code: (game "Musinaykahwhanmetowaywin" (players 2) (equipment {(board (merge (shift 0.0 (/ (- 7.0 3.0) 2.0) (rectangle 3 7 Alternating)) (shift (/ (- 7.0 3.0) 2.0) 0.0 (rectangle 7 3 Alternating))) Vertex) (piece "Marker" P1 (or (move Hop (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to ))) (then (if (can Move (hop (from (last To)) (between (and (not (is In (between ) (sites ToClear))) (is Enemy (who (between ))))) (to (is Empty (to ))))) (moveAgain )))) (move Step (to (is Empty (to )))))) (piece "Disc" P2 (move Step (to (is Empty (to )))))}) (rules (start {(place "Disc2" (union (expand (sites Bottom)) (sites Row 2))) (place "Marker1" (centrePoint ))}) (play (if (is Prev Mover) (or (move Hop (from (last To)) (between (and (not (is In (between ) (sites ToClear))) (is Enemy (who (between )))) (apply (remove (between )))) (to (is Empty (to ))) (then (if (can Move (hop (from (last To)) (between (and (not (is In (between ) (sites ToClear))) (is Enemy (who (between ))))) (to (is Empty (to ))))) (moveAgain )))) (move Pass)) (forEach Piece))) (end {(if (no Moves P1) (result P2 Win)) (if (no Pieces P2) (result P1 Win))})))
Line 3
description: The board consists of three instersecting lines, with diagonals drawn in the square formed. On opposite ends of the square, the central line is extended beyond the square and lines drawn from the adjacent corners to the end of this line, forming two triangles at opposite ends. One player takes the part of three white towers, the other the part of a single black army piece. First the army moves their piece, then the towers move one of their pieces, play alternating thereafter until the game is ended. A tower piece may move one step along a marked line in any forward or sideways direction. Tower pieces cannot move backwards, diagonally or otherwise, towards the end of the board from which they started. The army may move one step in any direction along a marked line. The army wins by passing the towers and reaching the end of the board from which they started. The towers win by trapping the army so that it cannot move in its turn.
Ludii code: (game "Jeu Militaire" (players 2) (equipment {(board (rotate 90.0 (merge {(rectangle 3 3 Alternating) (shift 1.5 0.5 (rotate -90.0 (wedge 2))) (shift -1.5 0.5 (rotate 90.0 (wedge 2)))})) Vertex) (piece "Pawn" P1 (move Step (to (is Empty (to ))))) (piece "Pawn" P2 N (move Step (directions {Forwards Rightward Leftward}) (to (is Empty (to ))))) (regions "Home" P2 (sites {"B1" "C2" "A2"})) (regions "Home" P1 (sites {"B2"}))}) (rules (start {(place "Pawn1" (sites P1)) (place "Pawn2" (sites P2))}) (play (forEach Piece)) (end {(if (no Moves P1) (result P2 Win)) (if (is In (where "Pawn" P1) (sites P2)) (result P1 Win))})))
Line 3
description: 8x8 Draughts board. One player plays with a single fox, the other with twelve hens, played on the white squares. The hens begin on the first three rows; the fox may begin on whatever spot the player chooses. Hens move one space forward diagonally, the fox moves one space diagonally forward or backward. The fox may capture a hen by hopping over it to an empty space diagonally on the other side of it. The hens win by blocking the fox from being able to move; the fox wins by capturing all the hens.
Ludii code: (game "Jeu de Renard" (players 2) (equipment {(board (square 8)) (piece "Fox" P1 (or (move Step Diagonal (to (is Empty (to )))) (move Hop Diagonal (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to )))))) (piece "Hen" P2 N (move Step (directions {FR FL}) (to (is Empty (to ))))) (hand P1)}) (rules (start {(place "Fox1" (handSite P1)) (place "Hen2" (difference (expand (sites Bottom) 2) (sites Phase 0)))}) {(phase "Placement" P1 (play (move (from (handSite Mover)) (to (difference (sites Empty) (sites Phase 0))))) (nextPhase "Movement")) (phase "Movement" (play (forEach Piece)))} (end {(if (no Moves P1) (result P2 Win)) (if (no Pieces P2) (result P1 Win))})))
Line 3
description: One player has two leopards, the other has 24 cows. Play begins by each player taking turns to place their pieces, and then can move to one adjacent intersection. Leopards capture cows by hopping over them. Leopards win by capturing all the cows, cows win by blocking the leopards from moving.
Ludii code: (game "Diviyan Keliya" (players 2) (equipment {(board (merge {(shift 2.0 2.0 (square 5 Alternating)) (shift 2.0 0.0 (wedge 3)) (shift 5.0 3.0 (rotate 90.0 (wedge 3))) (shift 2.0 6.0 (rotate 180.0 (wedge 3))) (shift -1.0 3.0 (rotate 270.0 (wedge 3)))}) Vertex) (hand Each) (piece "Leopard" P1) (piece "Cow" P2 (move Step (to (is Empty (to )))))}) (rules (start {(place "Leopard1" "Hand1" 2) (place "Cow2" "Hand2" 24)}) {(phase "Placement" (play (move (from (handSite Mover)) (to (sites Empty)))) {(nextPhase P1 (all Sites (sites Hand P1) (= 0 (count Cell (site )))) "MovementP1") (nextPhase P2 (all Sites (sites Hand P2) (= 0 (count Cell (site )))) "MovementP2")}) (phase "MovementP1" P1 (play (forEach Piece "Leopard" (or (move Hop (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to )))) (move Step (to (is Empty (to )))))))) (phase "MovementP2" P2 (play (forEach Piece)))} (end (if (no Moves Next) (result Next Loss)))))
Line 3
description: 5x5 board, played on intersections, with diagonals for each quadrant of the board. One player plays with two tiger pieces, placed on the midpoints of two opposite sides. The other player plays with twenty goats, divided into four stacks of five, placed in the center of each quadrant. The goats move first. Goats may move one at a time to any adjacent vacant spot. More than one goat can be placed on the goats' starting spots, but not elsewhere. The tiger moves in the same manner, but also may capture a piece by hopping over it. Multiple captures can be made on the same turn with subsequent hops, but only the top goat in a stack is captured when a tiger leaps over it. The goal of the goats is to surround the tigers so they cannot move; when one tiger is blocked the other must be blocked on the next turn. The goal of the tigers is to capture all the goats.
        
Ludii code: (game "Bagh Batti" (players 2) (equipment {(board (rectangle 5 5 Alternating) Vertex) (piece "Goat" P1 (move Step (to (is Empty (to ))))) (piece "Tiger" P2 (or (move Step (to (is Empty (to )))) (move Hop (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to ))) (then (if (can Move (hop (from (last To)) (between (and (not (is In (between ) (sites ToClear))) (is Enemy (who (between ))))) (to (is Empty (to ))))) (moveAgain ))))))}) (rules (start {(place Stack "Goat1" (sites {"B2" "D2" "B4" "D4"}) {5 5 5 5}) (place "Tiger2" (sites {"C1" "C5"}))}) (play (if (is Prev Mover) (or (move Pass) (move Hop (from (last To)) (between (and (not (is In (between ) (sites ToClear))) (is Enemy (who (between )))) (apply (remove (between )))) (to (is Empty (to ))) (then (if (can Move (hop (from (last To)) (between (and (not (is In (between ) (sites ToClear))) (is Enemy (who (between ))))) (to (is Empty (to ))))) (moveAgain ))))) (forEach Piece true))) (end {(if (no Moves P2) (result P1 Win)) (if (no Pieces P1) (result P2 Win))})))
Line 3
description: Played on the Fox and Geese board, but the top arm of the cross is surrounded by a double line, indicating it is a fortress, in which one player puts two officers. The opponent has 24 pieces, which occupy the points outside the fortress. Officers may capture one of the opponent's pieces by hopping over it to an empty space immediately on the opposite side of the opponent's piece. If the officer does not capture when it is possible, it is huffed. The soldiers win by occupying all of the points in the fortress or by blocking the officers from being able to move; the officers win by capturing enough soldiers to prevent this.
Ludii code: (game "Asalto" (players 2) (equipment {(board (merge (shift 0.0 (/ (- 7.0 3.0) 2.0) (rectangle 3 7 Alternating)) (shift (/ (- 7.0 3.0) 2.0) 0.0 (rectangle 7 3 Alternating))) Vertex) (piece "Marker" P1 (or (move Hop (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to )))) (move Step (to (is Empty (to )))))) (piece "Marker" P2 (move Step (to (is Empty (to )))))}) (rules (start {(place "Marker1" (sites {"C6" "E6"})) (place "Marker2" (union (expand (union (sites Right) (sites Left))) (expand (sites Bottom) 3)))}) (play (if (is Mover P1) (do (forEach Site (sites From (forEach Piece "Marker" (move Hop (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to )))))) (remember Value "From" (site ))) (forEach Piece) (then (and (if (!= 0 (count Sites (sites (values Remembered "From")))) (if (= 1 (count Steps (last From) (last To))) (and (forEach Site (sites (values Remembered "From")) (remove (site ))) (if (is In (last From) (sites (values Remembered "From"))) (remove (last To)))))) (forget Value All)))) (forEach Piece))) (end {(if (no Pieces P2) (result P1 Win)) (if (or (or (no Pieces P1) (no Moves P1)) (all Sites (expand (sites Top) 2) (= (who (site )) P2))) (result P2 Win))})))
Line 3
description: 5x5 intersecting lines, with diagonals in each 3x3 quadrant of the board. On one end, a square with diagonals, with one corner as the midpoint of one of the sides of the main board. On the opposite side, a triangle, with a line bisecting the base and another bisecting this line and intersecting with the other two sides of the triangle. The triangle's apex is the midpoint of the opposite side as the square. One player plays with two larger pieces, the Bulls, which start at the points where the triangle and square intersect with the main board. The other player plays with 24 smaller pieces. Eight of these begin on the points surrounding the central point of the board, the rest are in the hand. Players alternate turns. The Bulls move to an empty adjacent spot, the other player places one of the pieces from their hand onto the board. When all of these pieces are on the board, the player may move one of the pieces to an empty adjacent spot. The Bull may captured one of the smaller pieces my hopping over it onto an empty space. The goal of the Bulls is to capture all of the smaller pieces. The goal of the player with the smaller pieces is to corner the bulls so they cannot move. Doing so in the triangle and the square is a better win than cornering the Bulls on the main board.
Ludii code: (game "Bouge Shodra" (players 2) (equipment {(board (merge (merge (shift 0.0 2.0 (square 5 Alternating)) (wedge 3)) (rotate 45.0 (shift 1.5 6.2 (square 2 Solid)))) Vertex) (hand P1) (piece "Marker" P1 (move Step (to (is Empty (to ))))) (piece "Bull" P2 (or (move Step (to (is Empty (to )))) (move Hop (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to ))))))}) (rules (start {(place "Bull2" (sites {"C3" "C7"})) (place "Marker1" (difference (expand (sites Centre)) (centrePoint ))) (place "Marker1" (handSite P1) 16)}) {(phase "Placement" P1 (play (move (from (handSite P1)) (to (sites Empty)))) (nextPhase Mover (all Sites (sites Hand P1) (= 0 (count Cell (site )))) "Movement")) (phase "Movement" (play (forEach Piece)))} (end {(if (no Moves P2) (result P1 Win)) (if (no Pieces P1) (result P2 Win))})))
Line 3
description: 5x5 intersecting lines, with diagonals drawn in the four quadrants of the board. Two triangles, their apices intersecting the main board at opposite midpoints. The bast of the triangle is bisected by a line drawn from the apex, and this line is bisected and intersects with the other two sides of the triangle. One player plays as two tigers, which can be placed anywhere on the board, and the other player plays as 32 goats, which begin on the four central points of the quadrants of the square board, eight per stack. Players alternate turns moving a piece to an empty adjacent spot along the lines. The goats move one at a time from their stacks, and cannot be restacked once they have been moved. The tiger may capture a goat by hopping over it to an empty spot immediately on the opposite side of an adjacent goat. Multiple captures in one turn are allowed, but a tiger cannot hop over a stack of goats and hop over it again in the opposite direction. When tigers hop over a stack of goats, only one goat is captured. The goats win by blocking the tigers from being able to move; the tigers win by capturing all the goats.
Ludii code: (game "Bagh Bandi" (players 2) (equipment {(board (merge {(square 5 Alternating) (shift 0.0 4.0 (rotate 180.0 (wedge 3))) (shift 0.0 -2.0 (wedge 3))}) Vertex) (piece "Goat" P2 (move Step (to (is Empty (to ))))) (piece "Tiger" P1 (or (move Step (to (is Empty (to )))) (move Hop (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to ))) (then (if (can Move (move Hop (from (last To)) (difference Orthogonal OppositeDirection) (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to ))))) (moveAgain )))))) (regions "CentralSites" (sites {6 8 16 18})) (hand P1)}) (rules (start {(place Stack "Tiger1" (handSite P1) 2) (place Stack "Goat2" 6 8) (place Stack "Goat2" 8 8) (place Stack "Goat2" 16 8) (place Stack "Goat2" 18 8)}) {(phase "Placement" P1 (play (move (from (handSite P1)) (to (sites Empty)) (then (if (not (all Sites (sites Hand Mover) (= 0 (count Cell (site ))))) (moveAgain ))))) (nextPhase Mover (all Sites (sites Hand Mover) (= 0 (count Cell (site )))) "Movement")) (phase "Movement" (play (if (is Prev Mover) (or (move Hop (from (last To)) (difference Orthogonal OppositeDirection) (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to ))) (then (if (can Move (move Hop (from (last To)) (difference Orthogonal OppositeDirection) (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to ))))) (moveAgain )))) (move Pass)) (forEach Piece true))))} (end {(if (no Moves P1) (result P2 Win)) (if (no Pieces P2) (result P1 Win))})))
Line 3
description: An isosceles triangle, with the height of the triangle and two lines, which bisect the sides of the triangle, but intersect the height at the same point, roughly central, such that they are at an angle but do not bisect it. One player plays as the tiger, which begins at the apex of the triangle, the other as four goats, which begin on the central point. The goats play first, removing one of the pieces from the stack to an adjacent empty spot. The tiger moves along the lines to an empty adjacent spot. The goats also move in this way. Goats may only be stacked on the central point. The tiger may capture a goat by jumping over it, and a jump from one side of the triangle to the opposite side, over the central point, is allowed. The goats win by blocking the tiger from being able to move, the tiger wins by capturing one goat.
Ludii code: (game "Sher Bakr" (players 2) (equipment {(board (rotate 180.0 (add (remove (scale 1.0 2.0 (wedge 3)) {2}) {{2.0 1.333}} {{4 6} {6 0} {1 6} {6 2}})) Vertex) (hand Each) (piece "Goat" P1 (move Step (to (or (is Empty (to )) (and (= (to ) (centrePoint )) (is Friend (who (to )))))))) (piece "Tiger" P2 (or {(move Step (to (is Empty (to )))) (move Hop (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to )))) (if (and {(= (from ) 2) (is Enemy (who (centrePoint ))) (is Empty 1)}) (move (from 2) (to 1) (then (remove (centrePoint ))))) (if (and {(= (from ) 1) (is Enemy (who (centrePoint ))) (is Empty 2)}) (move (from 1) (to 2) (then (remove (centrePoint )))))}))}) (rules (start {(place Stack "Goat1" (centrePoint ) 4) (place Stack "Tiger2" 0)}) (play (forEach Piece true)) (end {(if (no Moves P2) (result P1 Win)) (if (= 3 (count Pieces P1)) (result P2 Win))})))
Line 3
description: Square board, divided into eight equal triangles, with the central horizonal line extended past the square on either side and lines connecting the end point to the two nearby cornes of the square One player plays as the hare, the other player as three hounds. Players take turns placing one of their pieces on the board. When a player has placed all their pieces, they move to an adjacent empty spot. When the hounds block the hare from being able to move, the hounds win.
        
Ludii code: (game "Haretavl" (players 2) (equipment {(board (merge {(rectangle 3 3 Alternating) (shift 1.5 0.5 (rotate -90.0 (wedge 2))) (shift -1.5 0.5 (rotate 90.0 (wedge 2)))}) Vertex) (hand Each) (piece "Dog" P1 (move Step (to (is Empty (to ))))) (piece "Hare" P2 (move Step (to (is Empty (to )))))}) (rules (start {(place "Dog1" (handSite P1) 3) (place "Hare2" (handSite P2))}) {(phase "Placement" (play (move (from (handSite Mover)) (to (sites Empty)))) (nextPhase Mover (all Sites (sites Hand Mover) (= 0 (count Cell (site )))) "Movement")) (phase "Movement" (play (forEach Piece)))} (end {(if (no Moves P2) (result P1 Win))})))
Line 3
description: 5x5 board, played on intersections of the lines, with diagonals for each quadrant of the board. One player plays as four tigers, the other as twenty goats. The tigers begin, two on the top two corners of the board, and two in the centers of the two bottom quadrants. Four of the goats are placed on any available points. The tigers move first, to an empty adjacent spot along the lines on the board. The player playing as the goats places one of the remaining goats on any available point. The goats cannot move until all of the goats are placed. Once they are all placed, the goats move as the tigers do. The tigers alone may capture a goat by hopping over it to an empty spot immediately opposite a goat. The tigers win by capturing all the goats; the goats win by blocking the tigers from being able to move.
Ludii code: (game "Orissa Tiger Game (Four Tigers)" (players 2) (equipment {(board (rectangle 5 5 Alternating) Vertex) (piece "Goat" P1 (move Step (to (is Empty (to ))))) (piece "Tiger" P2 (or (move Step (to (is Empty (to )))) (move Hop (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to )))))) (hand P1)}) (rules (start {(place "Goat1" (handSite P1) 20) (place "Tiger2" (sites {"A5" "E5" "B2" "D2"}))}) {(phase "Placement" P1 (play (move (from (handSite P1)) (to (sites Empty)) (then (if (< 16 (count Cell (handSite P1))) (moveAgain ))))) (nextPhase Mover (all Sites (sites Hand Mover) (= 0 (count Cell (site )))) "Movement")) (phase "Movement" (play (forEach Piece)))} (end {(if (no Moves P2) (result P1 Win)) (if (no Pieces P1) (result P2 Win))})))
Line 3
description: A triangle, with a point in the center and lines connecting it to the apex and the midpoints of the two sides which meet at the apex. One person plays as the tiger, which begins on the apex. The other person plays as three people. Players alternate turns, with the person playing as the people first placing a person on the board, and then the tiger moving to an empty adjacent spot along the lines of the board. When all of the people have been placed, the people move on the board in the same fashion. The tiger may capture one of the people by jumping over it to an empty adjacent spot immediately on the opposite side of one of the people along the lines of the board. The tiger wins when it captures one person, the people win when they can block the tiger from being able to move.
Ludii code: (game "Mysore Tiger Game" (players 2) (equipment {(board (add (remove (scale 1.0 2.0 (wedge 3)) {5}) {{4 5}}) Vertex) (hand P1) (piece "Human" P1 (move Step (to (is Empty (to ))))) (piece "Tiger" P2 (or (move Step (to (is Empty (to )))) (move Hop (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to ))))))}) (rules (start {(place "Human1" (handSite P1) 3) (place "Tiger2" (sites Top))}) {(phase "Opening" P1 (play (move (from (handSite Mover)) (to (sites Empty)))) (nextPhase Mover (all Sites (sites Hand Mover) (= 0 (count Cell (site )))) "Movement")) (phase "Movement" (play (forEach Piece)))} (end {(if (no Moves P2) (result P1 Win)) (if (< (count Pieces P1) 3) (result P2 Win))})))
Line 3
description: One player plays as the tigers (five in number), the other as the sheep (fifteen in number). They take turns placing the pieces on the intersections of the lines. When all of the player's pieces are on the board, the piece may move to any adjacent intersection along the connecting lines. The tiger hops over a sheep to capture it. The goal of the tiger is to capture all of the sheep; the sheep try to prevent all of the tigers from moving.
Ludii code: (game "Merimueng-rimueng-do" (players 2) (equipment {(board (scale 1.4 1.0 (remove (scale 1.0 2.0 (wedge 5 6)) {{0 1} {0 6}} {24 19})) Vertex) (hand Each) (piece "Tiger" P1 (or {(move Hop (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to )))) (move Step (to (is Empty (to )))) (move Hop (between (exact 3) (and (!= (row (between )) (row (from ))) (is Enemy (who (between )))) (apply (remove (between )))) (to (is Empty (to )))) (move Hop (between (exact 4) (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to ))))})) (piece "Sheep" P2 (move Step (to (is Empty (to )))))}) (rules (start {(place "Tiger1" (handSite P1) 5) (place "Sheep2" (handSite P2) 15)}) {(phase "Placement" (play (move (from (handSite Mover)) (to (sites Empty)))) (nextPhase Mover (all Sites (sites Hand Mover) (= 0 (count Cell (site )))) "Movement")) (phase "Movement" (play (forEach Piece)) (end {(if (no Moves Next) (result Next Loss)) (if (no Pieces P2) (result P2 Win))}))}))
Line 3
description: 5x5 intersecting lines, with diagonals in each quadrant. Two triangles, the apexes of which intersect with the square at the midpoint of opposite sides. One line bisecting the base of the triangle, and another bisecting this line. One player plays as two tigers, the other as 23 people. One of the tigers begins on any spot on the board. Eight of the people begin on the spots surrounding the central point of the board. The tiger player, on their first turn, removes one of the people and then places the second tiger anywhere on the board. The people then play, placing one of the remaining people on an empty spot on the board. On the tiger's turn, the player may move one of the tigers to an empty adjacent spot along the lines of the board. The tiger may also capture a person by hopping over it to an empty adjacent spot immediately on the opposite side of it along the lines of the board. When all of the people are placed, they move to an empty adjacent spot along the lines of the board on their turn. The tigers win by capturing all the people; the people win by blocking both tigers from being able to move.
Ludii code: (game "Rimau-Rimau (Two Tigers)" (players 2) (equipment {(board (merge {(square 5 Alternating) (shift 0.0 4.0 (rotate 180.0 (wedge 3))) (shift 0.0 -2.0 (wedge 3))}) Vertex) (hand Each) (piece "Tiger" P1 (or {(move Step (to (is Empty (to )))) (move Hop (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to ))))})) (piece "human" P2 (move Step (to (is Empty (to )))))}) (rules (start {(place "human2" (difference (expand (sites Centre)) (centrePoint ))) (place "human2" (handSite P2) 16) (place "Tiger1" (handSite P1) 2)}) {(phase "PlacementFirstTiger" P1 (play (move (from (handSite P1)) (to (sites Empty)) (then (moveAgain )))) (nextPhase Mover "RemoveHuman")) (phase "RemoveHuman" P1 (play (move Remove (intersection (sites Board) (sites Occupied Next)) (then (moveAgain )))) (nextPhase Mover "PlacementSecondTiger")) (phase "PlacementSecondTiger" P1 (play (move (from (handSite P1)) (to (sites Empty)))) (nextPhase Mover "Movement")) (phase "PlacementHuman" P2 (play (move (from (handSite Mover)) (to (sites Empty)))) (nextPhase (all Sites (sites Hand P2) (= 0 (count Cell (site )))) "Movement")) (phase "Movement" (play (forEach Piece)) (end {(if (no Moves P1) (result P2 Win)) (if (no Pieces P2) (result P1 Win))}))}))
Line 3
description: Played with three \"leopards\" and fifteen \"dogs.\" The pieces are placed on the intersections of the lines, and move along the lines to the next intersection. The game starts with the leopards on the board, but in the beginning the player controlling the dogs places one dog on an intersection until they are all on the board. After this, the dogs move in the same manner as the leopards. The leopard can hop over a dog as in draughts, capturing it. The leopard wins the game if it captures more than half of the dogs, the dogs win if they block the leopard from being able to move.
Ludii code: (game "Demala Diviyan Keliya" (players 2) (equipment {(board (add (remove (merge (shift 0.0 2.0 (scale 8.0 2.0 (rectangle 3 2))) (scale 1.0 2.0 (wedge 5 4))) {{0 1} {2 3} {4 5}}) {{0 15} {18 1} {2 11} {14 3} {4 7} {10 5}}) Vertex) (hand P2) (piece "Tiger" P1 (or (move Hop (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to )))) (move Step (to (is Empty (to )))))) (piece "Dog" P2 (move Step (to (is Empty (to )))))}) (rules (start {(place "Tiger1" {"H5" "G4" "I4"}) (place "Dog2" (handSite P2) 15)}) {(phase "Placement" P2 (play (move (from (handSite P2)) (to (sites Empty)))) (nextPhase (all Sites (sites Hand P2) (= 0 (count Cell (site )))) "Movement")) (phase "Movement" (play (forEach Piece)) (end {(if (no Moves Next) (result Next Loss)) (if (<= (count Pieces P2) 7) (result P2 Loss))}))}))
Line 3
description: Played on a 5x5 board. There are 3 'Musketeer' pieces and 22 'Enemy' pieces. Musketeers can only move by capturing enemies on any adjacent space. Enemies can only move to empty adjacent spaces. Enemies win if all three musketeers are ever on the same line or column. Musketeers win as soon as they run out of legal moves.
Ludii code: (game "Three Musketeers" (players 2) (equipment {(board (square 5)) (piece "Musketeer" P1 (move Step Orthogonal (to (is Enemy (who (to ))) (apply (remove (to )))))) (piece "Enemy" P2 (move Step Orthogonal (to (is Empty (to )))))}) (rules (start {(place "Musketeer1" {"A1" "C3" "E5"}) (place "Enemy2" (difference (sites Board) (sites {"A1" "C3" "E5"})))}) (play (forEach Piece)) (end {(if (no Moves P1) (result P1 Win)) (if (and (is Mover P1) (is Line 3 Orthogonal false)) (result P2 Win))})))
Line 3
description: 5x5 intersecting lines, with diagonals drawn in each quadrant. One player plays as four tigers, places on the four corners of the board. The other player plays as twenty goats, which are placed on the remaining points, leaving the central point open. Players alternate turns moving a piece to an empty adjacent point along the lines. The tigers may capture a goat by hopping over it to an empty adjacent spot immediately on the opposite side of the goat along the lines. The tigers win when they capture all of the goats; the goats win by blocking the tigers from being able to move. 
Ludii code: (game "Kulaochal" (players 2) (equipment {(board (rectangle 5 5 Alternating) Vertex) (piece "Tiger" P1 (or (move Step (to (is Empty (to )))) (move Hop (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to )))))) (piece "Goat" P2 (move Step (to (is Empty (to )))))}) (rules (start {(place "Tiger1" (sites Corners)) (place "Goat2" (difference (sites Board) (union (sites Corners) (sites Centre))))}) (play (forEach Piece)) (end {(if (no Moves P1) (result P2 Win)) (if (no Pieces P2) (result P1 Win))})))
Line 3
description: 5x5 board. Markings in the central square, each corner square, and the central square of each side. Black plays with thirteen pieces, white plays with ten. Black places the first piece on the central square, then players alternate turns placing a piece on their own half of the board. When all of the pieces are placed, players alternate turns moving pieces on space orthogonally. A piece is captured when it is surrounded on two opposite sides by opponent's pieces. Black wins if it can block white from being able to move. White wins if it is impossible for black to block them.
Ludii code: (game "Gala" (players 2) (equipment {(board (square 5)) (hand Each) (regions P1 (expand (sites Bottom) 2)) (regions P2 (expand (sites Top) 2)) (regions "MarkedCells" (union {(sites Centre) (sites Corners) (intersection (sites Outer) (sites Row (row (centrePoint )))) (intersection (sites Outer) (sites Column (column (centrePoint ))))})) (piece "Marker" Each (move Step Orthogonal (to (is Empty (to )))))}) (rules (start {(place "Marker1" (handSite P1) 10) (place "Marker2" (handSite P2) 12) (place "Marker2" (centrePoint ))}) {(phase "Placement" (play (move (from (handSite Mover)) (to (intersection (sites Empty) (sites Mover))))) (nextPhase (and (all Sites (sites Hand P1) (= 0 (count Cell (site )))) (all Sites (sites Hand P2) (= 0 (count Cell (site ))))) "Movement")) (phase "Movement" (play (forEach Piece (then (custodial (from (last To)) (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Friend (who (to )))))))) (end {(if (no Moves P1) (result P2 Win)) (if (< (count Pieces P2) 2) (result P1 Win))}))}))
Line 3
description: Three diamonds in a row, the central one connecting to the others one opposite corners. A horizontal line connects the top corners of the diamonds, another horizontal line connects the bottom corners of the diamonds, and a longer horizontal line connects all the middle corners. The outer two diamonds have vertical lines connecting their top and bottom corners. One player plays as three hounds, which begin on the outer corner and top and bottom corner of one of the end diamonds. The other player plays as one hare, which begins on the central point of the same diamond. Players alternate turns moving a piece to an empty adjacent spot along the lines of the board. The Hare moves first. The hounds win by blocking the hare from being able to move.
Ludii code: (game "Hund efter Hare (Vendsyssel)" (players 2) (equipment {(board (add (merge {(add (remove (rectangle 1 7) {3}) {{2 3}}) (scale 2.0 (shift 0.5 -0.5 (rectangle 1 3))) (scale 2.0 (shift 0.5 0.5 (rectangle 1 3)))}) {{0 9} {0 6} {11 5} {5 8} {1 6} {1 9} {4 11} {4 8} {9 2} {2 7} {6 2} {2 10} {10 3} {3 8} {7 3} {3 11}}) Vertex) (piece "Hare" P1 (move Step (to (is Empty (to ))))) (piece "Dog" P2 (move Step (to (is Empty (to )))))}) (rules (start {(place "Hare1" "B2") (place "Dog2" (sites {"A2" "B1" "B3"}))}) (play (forEach Piece)) (end {(if (no Moves P1) (result P2 Win))})))
Line 3
description: 5x5 grid, with diagonals in each quadrant. A triangle, with the apex connecting to the midpoint of one side of the grid. A line is drawn connecting the apex of the triangle to the midpoint of its base, and another triangle is drawn within the triangle connecting the midpoints of the larger triangle. One player plays as twelve dogs, arranged on the lower two rows of points and the two outer points on the central line; the other plays as one jaguar, placed on the apex of the smaller triangle. The jaguar moves first. Pieces move to an empty adjacent space along the lines of the board. The jaguar may hop over an adjacent dog to an empty space immediately on the opposite side of it, capturing the dog. Dogs cannot capture. The dogs win by blocking the jaguar so it cannot move; the jaguar wins when only six dogs remain.
        
Ludii code: (game "La Yagua" (players 2) (equipment {(board (add (rotate 180.0 (merge (shift 0.0 2.0 (square 5 Alternating)) (wedge 3))) {{27 29} {29 25}}) Vertex) (piece "Jaguar" P1 (or (move Hop (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to )))) (move Step (to (is Empty (to )))))) (piece "Dog" P2 (move Step (to (is Empty (to )))))}) (rules (start {(place "Dog2" (union (expand (sites Bottom) 1) (sites {"A3" "E3"}))) (place "Jaguar1" "C7")}) (play (forEach Piece)) (end {(if (no Moves Next) (result Next Loss)) (if (<= (count Pieces P2) 6) (result P2 Loss))})))
Line 3
description: Twenty squares arranged in a cross shape, with diagonals in each square. The pieces are played on the intersections of the lines. Two foxes are placed on the outer corners of one of the arms of the cross, and twenty geese are placed on the points in the opposite arm, as well as the first two long lines in the perpendicular arms. Players alternate turns moving a piece to an empty spot along the lines on the board. The geese cannot move backward. The foxes may hop over a goose to an empty adjacent spot immediately on the opposite side of it along the lines on the board. The geese win by blocking the foxes from being able to move. The foxes win by capturing all the geese.
Ludii code: (game "Gasetavl" (players 2) (equipment {(board (merge (shift 0.0 (/ (- 7.0 3.0) 2.0) (rectangle 3 7 Solid)) (shift (/ (- 7.0 3.0) 2.0) 0.0 (rectangle 7 3 Solid))) Vertex) (piece "Fox" P1 (or (move Hop (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to )))) (move Step (to (is Empty (to )))))) (piece "Geese" P2 N (move Step (directions {Rightward Forwards Leftward}) (to (is Empty (to )))))}) (rules (start {(place "Fox1" (sites {"G9" "I7"})) (place "Geese2" (sites {"A3" "B2" "C1" "B4" "C3" "D2" "A7" "B6" "C5" "D4" "E3" "F2" "G1" "B8" "C7" "D6" "E5" "F4" "G3" "H2"}))}) (play (forEach Piece)) (end {(if (no Moves P1) (result P2 Win)) (if (no Pieces P2) (result P1 Win))})))
Line 3
description: A triangle, with a line drawn from the apex to the base. A rectangle intersects with the triangle, and has a line connecting the midpoints of the short sides. One player plays as the tiger(s), one to four in number. The other player plays as five to 23 goats (or dogs, or lambs). The tiger begins on the apex of the triangle, and any other tigers on the spots adjacent to the apex. The tiger player moves by moving a piece to an empty adjacent spot along the lines of the board. The goat player begins the game by placing a goat on an empty point on the board, and then the tiger player moves. When all of the goats are placed, they move like the tiger. The tiger may capture a goat by hopping over it to an empty spot on the opposite adjacent side of the goat along the lines of the board. The goats win by blocking the tiger(s) from being able to move; the tiger(s) win by capturing enough goats to prevent them from blocking it/them.
Ludii code: (game "Pulijudamu" (players 2) (equipment {(board (add (remove (merge (scale 1.0 2.0 (wedge 5 3)) (shift 0.0 2.0 (scale 8.0 2.0 (rectangle 3 2)))) {{17 18} {15 16} {13 14}}) {{13 7} {15 4} {17 1} {3 18} {6 16} {9 14}}) Vertex) (hand Each) (piece "Goat" P2 (move Step (to (is Empty (to ))))) (piece "Tiger" P1 (or (move Step (to (is Empty (to )))) (move Hop (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to ))))))}) (rules (start {(place "Goat2" (handSite P2) 5) (place "Tiger1" (handSite P1) 1)}) {(phase "Opening" P1 (play (move (from (handSite Mover)) (to (if (= 0 (count Sites (intersection (sites Top) (sites Occupied Mover)))) (sites Top) (intersection (sites Empty) (sites {1 2 3})))) (then (if (not (all Sites (sites Hand Mover) (= 0 (count Cell (site ))))) (moveAgain ))))) (nextPhase Mover (all Sites (sites Hand Mover) (= 0 (count Cell (site )))) "Movement")) (phase "Opening" P2 (play (move (from (handSite Mover)) (to (sites Empty)))) (nextPhase Mover (all Sites (sites Hand Mover) (= 0 (count Cell (site )))) "Movement")) (phase "Movement" (play (forEach Piece)))} (end {(if (no Moves P1) (result P2 Win)) (if (no Pieces P2) (result P1 Win))})))
Line 3
description: 5x5 board, played on intersections of the lines, with diagonals for each quadrant of the board. One player plays with a tiger piece, placed anywhere on the board. The other player plays with 21 goats, placed on the central point of the board. The goats move first. Goats may move one at a time to any adjacent vacant spot along the lines of the board. The tiger moves in the same manner, but also may capture a piece by hopping over it to an empty space immediate on the opposite side of a goat. The tiger may hop the stack of goats, but may only capture one. The goal of the goats is to surround the tiger so it cannot move. The goal of the tiger is to capture all the goats.
        
Ludii code: (game "Bagha Guti" (players 2) (equipment {(board (rectangle 5 5 Alternating) Vertex) (piece "Goat" P2 (move Step (to (is Empty (to ))))) (piece "Tiger" P1 (or (move Step (to (is Empty (to )))) (move Hop (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to )))))) (hand P1)}) (rules (start {(place Stack "Goat2" 12 21) (place "Tiger1" (handSite P1))}) {(phase "Opening" P1 (play (move (from (handSite Mover)) (to (sites Empty)))) (nextPhase "Movement")) (phase "Movement" (play (forEach Piece true)))} (end {(if (no Moves P1) (result P2 Win)) (if (no Pieces P2) (result P1 Win))})))
Line 3
description: The game is played on a cruciform board adapted from an Alquerque board. One player plays as the fox, the other as the geese. The geese begin in a set starting position; the person playing as the fox may choose any available spot to place the fox as their first move. Players move as in Alquerque, but only the fox can hop to capture. The goal of the geese is to block the fox from being able to move; the fox's goal is to capture all of the geese.
Ludii code: (game "Fox and Geese" (players 2) (equipment {(board (merge (shift 0.0 (/ (- 7.0 3.0) 2.0) (rectangle 3 7 Alternating)) (shift (/ (- 7.0 3.0) 2.0) 0.0 (rectangle 7 3 Alternating))) Vertex) (hand P1) (piece "Fox" P1 (or (move Hop (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to )))) (move Step (to (is Empty (to )))))) (piece "Goose" P2 (move Step (to (is Empty (to )))))}) (rules (start {(place "Goose2" (union (expand (sites Bottom)) (sites Row 2))) (place "Fox1" (handSite P1))}) {(phase "Placement" P1 (play (move (from (handSite P1)) (to (sites Empty)))) (nextPhase (all Sites (sites Hand P1) (= 0 (count Cell (site )))) "Movement")) (phase "Movement" (play (forEach Piece)))} (end {(if (no Moves Next) (result Next Loss)) (if (no Pieces P2) (result P2 Win))})))
Line 3
description: 5x5 intersecting lines, with the diagonals of every 2x2 square formed. On one side, a triangle, with the apex intesecting with the midpoint of that side. There is a line from the apex to the midpoint of the triangle's base, and another interior triangle, connecting the base of the larger triangle with the midpoints of the sides of the larger triangle. One player plays as the Taisho (\"general\
Ludii code: (game "Juroku Musashi" (players 2) (equipment {(board (add (merge (scale 2.0 (square 5 Alternating)) (shift 2.0 -2.0 (wedge 3))) {{3.0 -2.0} {5.0 -2.0}} {{25 31} {25 29} {27 29} {27 32}}) Vertex) (piece "Marker" P1 (move Step (to (is Empty (to ))))) (piece "Marker" P2 (or (move Hop (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to )))) (move Step (to (is Empty (to ))))))}) (rules (start {(place "Marker1" (difference (sites Outer) (expand (sites Bottom)))) (place "Marker2" (ahead (centrePoint ) N))}) (play (forEach Piece)) (end {(if (no Moves P2) (result P1 Win)) (if (no Pieces P1) (result P2 Win))})))
Line 3
description: 3x3 intersecting lines, with triangles extending on opposite ends of the large square and the central line extending to the apices. One player plays as the notched stick, called the hare, and the other as three sharp sticks, known as the hounds. Players alternate turns placing a piece on the board. When a player has placed all of their pieces on the board, they move one of their pieces to an empty adjacent spot along the lines. When the hounds block the hare from being able to move, the hounds win.
Ludii code: (game "Janes Soppi" (players 2) (equipment {(board (merge {(rectangle 3 3) (shift 1.5 0.5 (rotate -90.0 (wedge 2))) (shift -1.5 0.5 (rotate 90.0 (wedge 2)))}) Vertex) (hand Each) (piece "Hound" P1 (move Step (to (is Empty (to ))))) (piece "Hare" P2 (move Step (to (is Empty (to )))))}) (rules (start {(place "Hound1" (handSite P1) 3) (place "Hare2" (handSite P2))}) {(phase "Placement" (play (move (from (handSite Mover)) (to (sites Empty)))) (nextPhase Mover (all Sites (sites Hand Mover) (= 0 (count Cell (site )))) "Movement")) (phase "Movement" (play (forEach Piece)))} (end {(if (no Moves P2) (result P1 Win))})))
Line 3
description: 5x5 intersecting lines, forming a grid Diagonals in each quadrant. A triangular appendage, the apex being the midpoint of one of the sides of the grid. A line from the apex to the midpoint of the base, and a line bisecting this line and intersecting with the midpoints of the two sides of the triangle. There are fourteen \"dog\" pieces and one \"jaguar\" piece. The jaguar attempts to capture all of the dogs by hopping over them. The dogs attempt to surround the jaguar and block it from moving. Pieces move from the points where lines intersect to adjacent points along the lines on the board.
Ludii code: (game "Adugo" (players 2) (equipment {(board (merge (shift 0.0 2.0 (square 5 Alternating)) (wedge 3)) Vertex) (piece "Jaguar" P1 (or (move Hop (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to )))) (move Step (to (is Empty (to )))))) (piece "Dog" P2 (move Step (to (is Empty (to )))))}) (rules (start {(place "Dog2" (difference (expand (sites Top) 2) (sites {"C5"}))) (place "Jaguar1" "C5")}) (play (forEach Piece)) (end {(if (no Moves Next) (result Next Loss)) (if (<= (count Pieces P2) 0) (result P2 Loss))})))
Line 3
description: 5x5 intersecting lines, with diagonals in each quadrant. At the midpoint of each side, the apex of a triangle. A line is drawn from the apex to the base of each triangle, and another line bisecting this one and the two opposite sides of the triangle. One player plays as two tigers, the other as 25 people. One tiger begins on the central point, and the other may be placed anywhere on the board. Players alternate turns, with the person playing as the people first placing a person on the board, and then one of the tigers moving to an empty adjacent spot along the lines of the board. When all of the people have been placed, the people move on the board in the same fashion. The tigers may capture one of the people by jumping over it to an empty adjacent spot immediately on the opposite side of one of the people along the lines of the board. The tigers win when they capture enough people so that the people cannot block the tiger, the people win when they can block the tiger from being able to move.
        
Ludii code: (game "Mysore Tiger Game (Two Tigers)" (players 2) (equipment {(board (merge {(shift 2.0 2.0 (square 5 Alternating)) (shift 2.0 0.0 (wedge 3)) (shift 5.0 3.0 (rotate 90.0 (wedge 3))) (shift 2.0 6.0 (rotate 180.0 (wedge 3))) (shift -1.0 3.0 (rotate 270.0 (wedge 3)))}) Vertex) (hand Each) (piece "Human" P2 (move Step (to (is Empty (to ))))) (piece "Tiger" P1 (or (move Step (to (is Empty (to )))) (move Hop (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to ))))))}) (rules (start {(place "Human2" (handSite P2) 25) (place "Tiger1" (sites Centre)) (place "Tiger1" (handSite P1))}) {(phase "Opening" (play (move (from (handSite Mover)) (to (sites Empty)))) (nextPhase Mover (all Sites (sites Hand Mover) (= 0 (count Cell (site )))) "Movement")) (phase "Movement" (play (forEach Piece)))} (end {(if (no Moves P1) (result P2 Win)) (if (no Pieces P2) (result P1 Win))})))
Line 3
description: 5x5 board, played on intersections, with diagonals for each quadrant of the board. One player plays with two tiger pieces, placed on the midpoints of two opposite sides. The other player plays with nineteen goats, divided into three stacks of five and one stack of four, placed in the center of each quadrant. The goats move first. Goats may move one at a time to any adjacent vacant spot. More than one goat can be placed on the goats' starting spots, but not elsewhere. The tiger moves in the same manner, but also may capture a piece by hopping over it. Multiple captures can be made on the same turn with subsequent hops, but only the top goat in a stack is captured when a tiger leaps over it. The goal of the goats is to surround the tigers so they cannot move. The goal of the tigers is to capture all the goats.
        
Ludii code: (game "Sher Bakar" (players 2) (equipment {(board (rectangle 5 5 Alternating) Vertex) (piece "Goat" P1 (move Step (to (or (and (is In (to ) (sites "StartingSitesGoats")) (is Friend (who (to )))) (is Empty (to )))))) (piece "Tiger" P2 (or (move Step (to (is Empty (to )))) (move Hop (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to ))) (then (if (can Move (hop (from (last To)) (between (and (not (is In (between ) (sites ToClear))) (is Enemy (who (between ))))) (to (is Empty (to ))))) (moveAgain )))))) (regions "StartingSitesGoats" (sites {"B2" "D2" "D4" "B4"}))}) (rules (start {(place "Tiger2" (sites {"C1" "C5"})) (place Stack "Goat1" (sites {"B2" "D2" "D4"}) 5) (place Stack "Goat1" (sites {"B4"}) 4)}) (play (if (is Prev Mover) (or (move Pass) (move Hop (from (last To)) (between (and (not (is In (between ) (sites ToClear))) (is Enemy (who (between )))) (apply (remove (between )))) (to (is Empty (to ))) (then (if (can Move (hop (from (last To)) (between (and (not (is In (between ) (sites ToClear))) (is Enemy (who (between ))))) (to (is Empty (to ))))) (moveAgain ))))) (forEach Piece true))) (end {(if (no Moves P2) (result P1 Win)) (if (no Pieces P1) (result P2 Win))})))
Line 3
description: Played on cross-shaped board, made of five squares, each divided into four squares and with the diagonals of the larger squares drawn. One player plays as thirteen hens, which begin on the points on one of the arms of the cross and along the line immediately perpendicular to that arm. The other player plays as one fox, which can be placed on any empty point of the board. Players alternate turns moving to an empty adjacent spot  along the lines of the board. The hens, however, can only move in a forward direction. The fox may hop over an adjacent hen to an empty spot immediately on the opposite side of the hen along the lines of the board. The fox wins by capturing all the hens, the hens win by blocking the fox from being able to move.
Ludii code: (game "Jeu du Renard et de la Poule" (players 2) (equipment {(board (merge (shift 0.0 (/ (- 7.0 3.0) 2.0) (rectangle 3 7 Alternating)) (shift (/ (- 7.0 3.0) 2.0) 0.0 (rectangle 7 3 Alternating))) Vertex) (hand P1) (piece "Fox" P1 (or (move Hop (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to ))) (then (if (can Move (hop (from (last To)) (between (and (not (is In (between ) (sites ToClear))) (is Enemy (who (between ))))) (to (is Empty (to ))))) (moveAgain )))) (move Step (to (is Empty (to )))))) (piece "Hen" P2 N (move Step Forwards (to (is Empty (to )))))}) (rules (start {(place "Fox1" (handSite P1)) (place "Hen2" (union (expand (sites Bottom)) (sites Row 2)))}) {(phase "Placement" P1 (play (move (from (handSite P1)) (to (sites Empty)))) (nextPhase (all Sites (sites Hand P1) (= 0 (count Cell (site )))) "Movement")) (phase "Movement" (play (forEach Piece)))} (end {(if (no Moves Next) (result Next Loss)) (if (no Pieces P2) (result P2 Win))})))
Line 3
description: 4x4 board. One player plays as four tigers, which begin the board placed in the four corner spaces. The other player plays as twelve oxen. The first move is made by placing one of the oxen on an empty space, followed by a move by the tiger closest to the ox. Players continue alternating moves, the oxen player placing an ox and the tiger player moving a tiger. When moving, pieces move to an empty adjacent spot orthogonally. Once all of the oxen are placed, the players alternate turns moving their pieces on the board. Pieces may capture another piece by hopping over an adjacent opponent's piece to an empty space immediately on the opposite side of it. Tigers capture orthogonally, oxen capture diagonally. Oxen may also capture a tiger by blocking it from being able to move. The oxen win by reducing the tigers to two.
Ludii code: (game "Len Cua Kin Ngoa" (players 2) (equipment {(board (square 4)) (hand P1) (piece "Ox" P1 (or (move Hop Diagonal (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to )))) (move Step Orthogonal (to (is Empty (to )))))) (piece "Tiger" P2 (or (move Hop Orthogonal (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to )))) (move Step Orthogonal (to (is Empty (to ))))))}) (rules (start {(place "Ox1" (handSite P1) 12) (place "Tiger2" (sites Corners))}) {(phase "Placement" P1 (play (move (from (handSite P1)) (to (sites Empty)) (then (forEach Site (sites Occupied Next) (if (not (can Move (or (step (from (site )) Orthogonal (to (is Empty (to )))) (hop (from (site )) Orthogonal (between (= (who (between )) P1) (apply (remove (between )))) (to (is Empty (to ))))))) (remove (site ))))))) (nextPhase (all Sites (sites Hand P1) (= 0 (count Cell (site )))) "MovementP1")) (phase "MovementP1" P1 (play (forEach Piece (then (forEach Site (sites Occupied Next) (if (not (can Move (or (step (from (site )) Orthogonal (to (is Empty (to )))) (hop (from (site )) Orthogonal (between (= (who (between )) P1) (apply (remove (between )))) (to (is Empty (to ))))))) (remove (site )))))))) (phase "FirstTigerMovement" P2 (play (forEach Piece (if (= (count Steps (from ) (last To)) (min (results (last To) (sites Corners) (count Steps (from ) (to ))))) (or (move Hop Orthogonal (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to )))) (move Step (to (is Empty (to )))))))) (nextPhase Mover "MovementP2")) (phase "MovementP2" P2 (play (forEach Piece)))} (end {(if (no Pieces P1) (result P2 Win)) (if (>= 2 (count Pieces P2)) (result P1 Win))})))
Line 3
description: 5x5 intersecting lines with diagonals drawn in the quadrants. One player plays as one hunter, placed in the central spot. The other player plays as twelve birds, which are placed in the two rows closest to the player and the two spots on the right hand side in the central row. The hunter may move in any direction along the lines of the board. The hunter may capture birds by hopping over them to an empty spot on the opposite side along the lines of the  board. The birds may move forward orthogonally or diagonally. The birds win by blocking the hunter from being able to move; the hunter wins by capturing all of the birds or when it is no longer possible for the birds to capture the hunter.
Ludii code: (game "El Cazador" (players {(player S) (player N)}) (equipment {(board (rectangle 5 5 Alternating) Vertex) (piece "Human" P1 (or (move Hop (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to )))) (move Step (to (is Empty (to )))))) (piece "Hen" P2 (move Step (directions {Rightward Leftward Forwards}) (to (is Empty (to )))))}) (rules (start {(place "Human1" (centrePoint )) (place "Hen2" (union {(expand (sites Bottom)) (sites {"D3" "E3"})}))}) (play (forEach Piece)) (end {(if (no Moves P1) (result P2 Win)) (if (no Pieces P2) (result P1 Win))})))
Line 3
description: 5x5 intersecting lines, with diagonals drawn in each quadrant. One player plays as four tigers, which begin on the four corners of the board. The other player plays as twenty goats, which begin off the board. Play begins by placing one of the goats on an empty spot. The other player then moves the tiger to an empty adjacent spot along the lines on the board. The tiger may hop over an adjacent goat, to an empty space on the opposite adjacent side of the goat along the lines. Play continues like this until all of the goats are placed, after which the goats also move to one adjacent spot along the lines. The tigers win by capturing all of the goats; the goats win by blocking the tigers from being able to move.
Ludii code: (game "Sumi Naga Game (Hunt)" (players 2) (equipment {(board (rectangle 5 5 Alternating) Vertex) (piece "Goat" P1 (move Step (to (is Empty (to ))))) (piece "Tiger" P2 (or (move Step (to (is Empty (to )))) (move Hop (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to ))) (then (if (can Move (hop (from (last To)) (between (and (not (is In (between ) (sites ToClear))) (is Enemy (who (between ))))) (to (is Empty (to ))))) (moveAgain )))))) (hand P1)}) (rules (start {(place "Goat1" (handSite P1) 20) (place "Tiger2" (sites Corners))}) {(phase "Placement" P1 (play (move (from (handSite P1)) (to (sites Empty)))) (nextPhase Mover (all Sites (sites Hand Mover) (= 0 (count Cell (site )))) "Moving")) (phase "Moving" (play (forEach Piece)))} (end {(if (no Moves P2) (result P1 Win)) (if (no Pieces P1) (result P2 Win))})))
Line 3
description: 5x9 intersecting lines; with a triangle formed by lines drawn from the second and fourth line of one of the short sides of the rectangle, with the base and a line bisecting the base of the triangle. One player plays as the General, placed on the central space of the rectangle, and the other player plays as 26 Rebels, places on the intersections of the second, third, and fourth of the long lines. Pieces move one space orthogonally. The General may capture one of the Rebels by hopping over it to an empty space. The General wins by capturing all the Rebels. The Rebels win by blocking the General from moving.
Ludii code: (game "Yeung Luk Sz' Kon Tseung Kwan" (players 2) (equipment {(board (merge (rectangle 9 5) (shift 1.0 8.0 (scale 0.5 (wedge 3)))) Vertex) (piece "Marker" P1 (move Step (to (is Empty (to ))))) (piece "Marker" P2 (or (move Hop (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to )))) (move Step (to (is Empty (to ))))))}) (rules (start {(place "Marker1" (union {(sites Column 1) (difference (sites Column 3) (union (sites Centre) (expand (sites Top)))) (sites Column 5)})) (place "Marker2" (centrePoint ))}) (play (forEach Piece)) (end {(if (no Pieces P1) (result P2 Win)) (if (no Moves P2) (result P1 Win))})))
Line 3
description: 8x8 Draughts board. One player plays with two foxes, the other with twelve or more hens, played on the white squares. The hens begin on the rows closest to the player; the foxes begin, one each on the left and right end of the row farthest from the hens. Hens move one space forward diagonally, the foxes move one space diagonally forward or backward. Foxes must alternate turns, i.e., when one fox moves, the other fox must move on the next turn. The foxes may capture a hen by hopping over it to an empty space diagonally on the other side of it. The hens win by blocking the foxes from being able to move; the foxes win by capturing all the hens.
        
Ludii code: (game "Jeu de Renard (Two Foxes)" (players 2) (equipment {(board (square 8)) (piece "Fox" P1 (if (= (state (from )) 1) (or (move Step Diagonal (to (is Empty (to )))) (move Hop Diagonal (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to ))))) (then (and (forEach Site (sites Occupied Mover) (if (= (state (site )) 0) (set State (site ) 1))) (set State (last To) 0))))) (piece "Hen" P2 N (move Step (directions {FR FL}) (to (is Empty (to )))))}) (rules (start {(place "Fox1" (intersection (sites Top) (union (sites Left) (difference (expand (sites Right)) (sites Right)))) 1) (place "Hen2" (difference (expand (sites Bottom) 2) (sites Phase 0)))}) {(phase "Opening" P1 (play (forEach Piece (or (move Step Diagonal (to (is Empty (to )))) (move Hop Diagonal (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to )))) (then (set State (last To) 0))))) (nextPhase "Movement")) (phase "Movement" (play (forEach Piece)))} (end {(if (no Moves P1) (result P2 Win)) (if (no Pieces P2) (result P1 Win))})))
Line 3
description: 5x5 intersecting lines, with diagonals drawn in the four quadrants of the board. Two triangles, their apices intersecting the main board at opposite midpoints. The base of the triangle is bisected by a line drawn from the apex, and this line is bisected and intersects with the other two sides of the triangle. One player plays as the Rimoe (king), which starts on the central point. The other player has 24 pieces, eight of which start on the board, on the points immediately adjacent to the Rimoe. The Rimoe plays first, and takes one of the opponent's pieces by hopping over it to an empty spot immediately behind it in a straight line. The Rimoe captures in this way any uninterrupted line of pieces with an odd number. The Rimoe cannot capture a line of pieces with an even number. When the Rimoe cannot capture, it moves one to an empty adjacent space along the lines of the board. The other player places on of their remaining pieces on the board on their turn. When there are no more pieces left to place, the player moves one of the pieces to an empty adjacent spot along the lines. The Rimoe wins by capturing all of the opponent's pieces; the opponent wins by blocking the Rimoe from being able to move.
Ludii code: (game "Rimoe" (players 2) (equipment {(board (merge {(square 5 Alternating) (shift 0.0 4.0 (rotate 180.0 (wedge 3))) (shift 0.0 -2.0 (wedge 3))}) Vertex) (piece "King" P1 (priority {(move Hop (between (range 1 9) (is Enemy (who (between ))) (apply (remove (between )))) (to (and (is Empty (to )) (is Even (count Steps (from ) (to )))))) (move Step (to (is Empty (to ))))})) (piece "Marker" P2 (move Step (to (is Empty (to ))))) (hand Each)}) (rules (start {(place "King1" (centrePoint ) 1) (place "Marker2" (handSite P2) 16) (place "Marker2" (difference (expand (sites Centre)) (centrePoint )))}) {(phase "Placement" P2 (play (move (from (handSite Mover)) (to (sites Empty)))) (nextPhase Mover (all Sites (sites Hand Mover) (= 0 (count Cell (site )))) "Movement")) (phase "Movement" (play (forEach Piece)))} (end {(if (no Moves P1) (result P2 Win)) (if (no Pieces P2) (result P1 Win))})))
Line 3
description: Played on 5x5 grid including diagonals and pieces are played on the intersections of the lines. One player has four tigers, placed on the corners, and the other has up to 20 goats, placed on the board on a free space. Tigers and goats can move to an adjacent intersection along the lines on the board. Tigers may capture goats by hopping over them. The game ends when tigers have captured all of the goats or the goats block the tigers from being able to move.
Ludii code: (game "Baghchal" (players 2) (equipment {(board (rectangle 5 5 Alternating) Vertex) (hand P1) (piece "Goat" P1 (move Step (to (is Empty (to ))))) (piece "Tiger" P2 (or (move Hop (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to )))) (move Step (to (is Empty (to ))))))}) (rules (start {(place "Tiger2" (sites Corners)) (place "Goat1" (handSite P1) 20)}) {(phase "Placement" P1 (play (move (from (handSite P1)) (to (sites Empty)))) (nextPhase (all Sites (sites Hand P1) (= 0 (count Cell (site )))))) (phase "Movement" (play (forEach Piece)))} (end {(if (no Moves Next) (result Next Loss)) (if (<= (count Pieces P1) 0) (result P1 Loss))})))
Line 3
description: Played on cross-shaped board, made of five squares, each divided into four squares and with the diagonals of the larger squares drawn. One player plays as seventeen hens, which begin on the points on one of the arms of the cross and along the line immediately perpendicular to that arm, and on the two outermost points on the left and right arms. The other player plays as one fox, which starts on the central point of the board. Players alternate turns moving to an empty adjacent spot along the lines of the board. The hens, however, can only move in a forward or horizontal direction. The fox hops over an adjacent hen to an empty spot immediately on the opposite side of the hen along the lines of the board. At the beginning of the game, the players choose whether to allow the fox the ability to make multiple captures in one turn. If the fox is able to capture but does not, the opponent adds another hen on an empty point in the bottom row. If there is no empty spot on the bottom row, the player waits until there is one to place the new hen. The fox wins by capturing all of the hens or by moving to the furthest line on the hens' side of the board. The hens win by blocking the fox from being able to move.
        
Ludii code: (game "Renard et les Poules" (players 2) (equipment {(board (merge (shift 0.0 (/ (- 7.0 3.0) 2.0) (rectangle 3 7 Alternating)) (shift (/ (- 7.0 3.0) 2.0) 0.0 (rectangle 7 3 Alternating))) Vertex) (hand P1) (piece "Fox" P1 S (or (move Hop (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to )))) (move Step (to (is Empty (to )))))) (piece "Hen" P2 N (move Step (directions {Forwards Rightward Leftward}) (to (is Empty (to )))))}) (rules (start {(place "Fox1" (centrePoint )) (place "Hen2" (union {(expand (sites Bottom)) (sites Row 2) (sites {"A4" "G4" "A5" "G5"})}))}) {(phase "FoxPhase" P1 (play (do (set Pending (sites To (forEach Piece "Fox" (move Hop (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to ))))))) (forEach Piece (then (if (and (is Pending) (not (is In (last To) (sites Pending)))) (if (< (value Player Mover) 0) (set Value Mover 1) (set Value Mover (+ 1 (value Player Mover)))))))))) (phase "HenPhase" P2 (play (if (and (> (value Player Prev) 0) (!= 0 (count Sites (intersection (sites Empty) (sites Bottom))))) (move Add (to (intersection (sites Empty) (sites Bottom))) (then (and (set Value Prev (- (value Player Prev) 1)) (moveAgain )))) (forEach Piece))))} (end {(if (no Moves P1) (result P1 Loss)) (if (or (is In (where "Fox" P1) (sites Bottom)) (no Pieces P2)) (result P1 Win))})))
Line 3
description: A triangle, with two lines drawn from the apex to the base. A rectangle is drawn across the triangle, and another line connecting the midpoints of the short sides of the rectangle. One player plays as three tigers, the other as seventeen people. One tiger begins on the apex of the triangle and the other two may be placed anywhere. Players alternate turns, with the person playing as the people first placing a person on the board, and then one of the tigers moving to an empty adjacent spot along the lines of the board. When all of the people have been placed, the people move on the board in the same fashion. The tigers may capture one of the people by jumping over it to an empty adjacent spot immediately on the opposite side of one of the people along the lines of the board. The tigers win when they capture enough people so that the people cannot block the tiger, the people win when they can block the tiger from being able to move.
Ludii code: (game "Mysore Tiger Game (Three Tigers)" (players 2) (equipment {(board (add (remove (merge (shift 0.0 2.0 (scale 8.0 2.0 (rectangle 3 2))) (scale 1.0 2.0 (wedge 5 4))) {{0 1} {2 3} {4 5}}) {{0 15} {18 1} {2 11} {14 3} {4 7} {10 5}}) Vertex) (hand Each) (piece "Human" P2 (move Step (to (is Empty (to ))))) (piece "Tiger" P1 (or (move Step (to (is Empty (to )))) (move Hop (between (is Enemy (who (between ))) (apply (remove (between )))) (to (is Empty (to ))))))}) (rules (start {(place "Human2" (handSite P2) 17) (place "Tiger1" (sites Top)) (place "Tiger1" (handSite P1) 2)}) {(phase "Opening" P1 (play (move (from (handSite Mover)) (to (sites Empty)) (then (if (not (all Sites (sites Hand Mover) (= 0 (count Cell (site ))))) (moveAgain ))))) (nextPhase Mover (all Sites (sites Hand Mover) (= 0 (count Cell (site )))) "Movement")) (phase "Opening" P2 (play (move (from (handSite Mover)) (to (sites Empty)))) (nextPhase Mover (all Sites (sites Hand Mover) (= 0 (count Cell (site )))) "Movement")) (phase "Movement" (play (forEach Piece)))} (end {(if (no Moves P1) (result P2 Win)) (if (no Pieces P2) (result P1 Win))})))
Line 3
description: 3x6 board, three counters per hole. Each player owns the row of holes closest to them, as well as the right half of the central row, with respect to their perspective. Sowing occurs from left to right in the player's complete row, right to left in the player's half of the central row, then continuing from right to left in the opponent's outer row, left to right in the opponent's holes in the central row, and then continuing as before into the player's outer row. Players sow from any of their holes, and when the final counter lands in an occupied hole, they pick up the contents and continue sowing. When the final counter falls into an empty hole, the turn ends. After the first turn, players may capture a hole when the final counter of a sowing falls into a hole containing three counters, increasing it to four. The counters in a captured hole cannot be sown. When a player drops their final counter into an occupied captured hole, two counters are captured from it. If the player captured counters from one of the holes that they had created, they begin sowing again from another of their holes, but if the capture was from a hole captured by the opponent, the turn ends. The leftmost holes in each player's row are special: a player may under no circumstance capture counters from this hole in their row, but may do so from the opponent's, gaining another turn when they do so. Play continues until all of the counters are captured or all of the counters are accumulated in captured holes. A new round begins. Players then collect the counters in their captured holes. They count their takings by filling their holes with three counters each as in the beginning, and the player would own every hole they could fill with three counters. If the player has two counters remaining, they also gain another hole and the opponent surrenders their extra counter. Play continues until one player cannot fill any holes.
Ludii code: (game "Selus (Massawa)" (players 2) (equipment {(mancalaBoard 3 6 None (track "Track" "0,E,N1,W2,17,W,S1,E2" true)) (piece "Seed" Shared) (hand Each) (regions P1 (union (sites Bottom) (difference (expand (sites Right) 2) (sites Top)))) (regions P2 (union (sites Top) (difference (expand (sites Left) 2) (sites Bottom)))) (map "LeftMostHole" {(pair P1 0) (pair P2 17)})}) (rules (start {(set RememberValue "OwnedP1" (sites P1)) (set RememberValue "OwnedP2" (sites P2)) (set Count 3 (sites Track))}) {(phase "Sowing" (play (or {(move Select (from (if (and (not (is Pending)) (is Prev Mover)) (sites {(last To true)}) (if (is Mover P1) (sites (values Remembered "OwnedP1")) (sites (values Remembered "OwnedP2")))) (and (< 0 (count (from ))) (= 0 (state (from ))))) (then (sow (if (< 1 (count (to ))) (if (and (!= (mapEntry "LeftMostHole" Mover) (to )) (!= 0 (state (to )))) (and {(if (or (= (mover ) (state (to ))) (= (mapEntry "LeftMostHole" Next) (to ))) (and (moveAgain ) (set Pending))) (fromTo (from (to )) (to (handSite Mover)) 2) (set State (to ) (state (to )))}) (if (and {(< 2 (count Turns)) (= 0 (state (to ))) (= 4 (count (to )))}) (set State (to ) (mover )) (moveAgain )))))))} (then (if (all Sites (forEach (sites Board) (= 0 (state (site )))) (= 0 (count (site )))) (and {(forEach Site (forEach (sites Board) (= 1 (state (site )))) (fromTo (from (site )) (to (handSite P1)) (count (site )))) (forEach Site (forEach (sites Board) (= 2 (state (site )))) (fromTo (from (site )) (to (handSite P2)) (count (site )))) (forget Value "OwnedP1" All) (forget Value "OwnedP2" All)}))))) (end (if (all Sites (sites Board) (= 0 (count (site )))) {(if (> 3 (count Cell (handSite P1))) (result P2 Win)) (if (> 3 (count Cell (handSite P2))) (result P1 Win))})) (nextPhase (all Sites (sites Board) (= 0 (count (site )))) "BetweenRounds")) (phase "BetweenRounds" (play (if (<= 3 (count Cell (handSite Mover))) (move (from (handSite Mover)) (to (if (all Sites (sites Mover) (is Occupied (site ))) (sites Board) (sites Mover)) (is Empty (to ))) 3 (then (if (is Mover P1) (remember Value "OwnedP1" (last To)) (remember Value "OwnedP2" (last To))))) (if (= 2 (count Cell (handSite Mover))) (move (from (handSite Mover)) (to (if (all Sites (sites Mover) (is Occupied (site ))) (sites Board) (sites Mover)) (is Empty (to ))) 2 (then (and (fromTo (from (handSite Next)) (to (last To)) 1) (if (is Mover P1) (remember Value "OwnedP1" (last To)) (remember Value "OwnedP2" (last To))))))))) (nextPhase (and (is Empty (handSite P1)) (is Empty (handSite P2))) "Sowing"))}))
Line 3
description: Three rows of four holes; the central two holes in the middle row are stores. Each player owns the hole in the central row to their left. Ten counters in each hole. Players sow from one of their holes, sowing first into the hole from which the counters were lifted, in an anti-clockwise direction. When the final counter lands in a hole containing two counters, these counters are captured. The player captures like this seven times. The eighth captures happens when the final counter falls into a hole containing one counter; the next capture from a hole containing three; the next from a hole containing five; then repeating the pattern of one, three, five for the rest of the game. The player who captures the most counters wins.
Ludii code: (game "The Concentration Game" (players 2) (equipment {(mancalaBoard 3 4 None (track "Track" "0,E,N,W,S2" true)) (piece "Seed" Shared) (regions P1 (union (sites {4}) (sites Bottom))) (regions P2 (union (sites {7}) (sites Top))) (map {(pair P1 5) (pair P2 6)})}) (rules (start {(set Count 10 (sites Outer)) (set RememberValue "NumToCaptureP1" 2) (set RememberValue "NumToCaptureP2" 2) (set RememberValue "NumCaptureTwoP1" 0) (set RememberValue "NumCaptureTwoP2" 0)}) (play (move Select (from (sites Mover) (< 1 (count (from )))) (then (sow (= (count (to )) (if (is In 2 (if (is Mover P1) (sites (values Remembered "NumToCaptureP1")) (sites (values Remembered "NumToCaptureP2")))) (+ 1 2) (if (is In 1 (if (is Mover P1) (sites (values Remembered "NumToCaptureP1")) (sites (values Remembered "NumToCaptureP2")))) 2 (if (is In 3 (if (is Mover P1) (sites (values Remembered "NumToCaptureP1")) (sites (values Remembered "NumToCaptureP2")))) 4 6)))) (and (fromTo (from (to )) (to (mapEntry (mover ))) (count (to ))) (if (< (value Player Mover) 5) (set Value Mover (+ 1 (value Player Mover))) (if (is Mover P1) (and (forget Value "NumToCaptureP1" All) (if (is In 2 (if (is Mover P1) (sites (values Remembered "NumToCaptureP1")) (sites (values Remembered "NumToCaptureP2")))) (remember Value "NumToCaptureP1" 1) (if (is In 1 (if (is Mover P1) (sites (values Remembered "NumToCaptureP1")) (sites (values Remembered "NumToCaptureP2")))) (remember Value "NumToCaptureP1" 3) (if (is In 5 (if (is Mover P1) (sites (values Remembered "NumToCaptureP1")) (sites (values Remembered "NumToCaptureP2")))) (remember Value "NumToCaptureP1" 1) (remember Value "NumToCaptureP1" 5))))) (and (forget Value "NumToCaptureP2" All) (if (is In 2 (if (is Mover P1) (sites (values Remembered "NumToCaptureP1")) (sites (values Remembered "NumToCaptureP2")))) (remember Value "NumToCaptureP2" 1) (if (is In 1 (if (is Mover P1) (sites (values Remembered "NumToCaptureP1")) (sites (values Remembered "NumToCaptureP2")))) (remember Value "NumToCaptureP2" 3) (if (is In 5 (if (is Mover P1) (sites (values Remembered "NumToCaptureP1")) (sites (values Remembered "NumToCaptureP2")))) (remember Value "NumToCaptureP2" 1) (remember Value "NumToCaptureP2" 5)))))))) true)))) (end (if (no Moves Next) (byScore {(score P1 (count (mapEntry P1))) (score P2 (count (mapEntry P2)))})))))
Line 3
description: 3x6 board. Three counters per hole. Each player owns the row of holes closest to them, as well as the right half of the central row, with respect to their perspective. Sowing occurs from left to right in the player's complete row, right to left in the player's half of the central row, then continuing from right to left in the opponent's outer row, left to right in the opponent's holes in the central row, and then continuing as before into the player's outer row. In the opening phase, players play simultaneously. When the final counter of a sowing falls into an occupied hole, the contents are picked up and sowing continues. Each player plays until their final counter falls into an empty hole; the first player to do so begins the main phase. In the main phase, players alternate turns, and picking up the counters and continuing to sow when the final counter lands in an occupied hole, and stopping when the final counter lands in an empty hole. There are some restrictions with regard to sowing. Each of the player's three leftmost holes cannot be sown from to begin a turn if they contain three counters or less, unless there are no other options for play, in which case sowing must occur from a hole with one counter, and if none are available, then it must begin from a hole with two counters, or three counters if that is the only option. Separately, if the player's other holes only contain two or three counters, the player must play from a hole containing two counters, and these must be the option closest to the opponent's holes. Players must also play from holes containing more than three counters when available. During sowing, a player may not drop a counter into any of the opponent's holes which contain three counters (except when making a nedf, see below), skipping over them and sowing in the next available holes.  When the final counter of a sowing lands in a hole in the opponent's row containing three counters, this hole becomes a \"nedf.\" Any counters falling into the nedf cannot be sown. Only one nedf can exist at one time. After the first nedf is made, any others can only be made by placing the final two counters of a sowing into holes which contain three counters, the penultimate hole becoming the new nedf. The player then continues their turn with the counters from the final hole. The hole after the nedf becomes the yazab tabaqi, or \"guardian.\" While the yazab tabaqi contains exactly three counters, the opponent cannot create a new nedf. Play continues until one player has no counters to move, or concedes they can no longer make a nedf.
Ludii code: (game "Selus" (players 2) (equipment {(mancalaBoard 3 6 None (track "Track" "0,E,N1,W2,17,W,S1,E2" true)) (piece "Seed" Shared) (hand Each) (regions "Home" P1 (union (intersection (sites Row 1) (expand (sites Right) 2)) (sites Bottom))) (regions "Home" P2 (union (intersection (sites Row 1) (expand (sites Left) 2)) (sites Top))) (regions "ThreeLeftMost" P1 (intersection (sites Bottom) (expand (sites Left) 2))) (regions "ThreeLeftMost" P2 (intersection (sites Top) (expand (sites Right) 2)))}) (rules (start (set Count 3 (sites Board))) (play (priority {(move Select (from (if (is Prev Mover) (sites {(var "Replay")}) (sites Mover)) (< 3 (count (site )))) (then (do (set Var "NumSowed" (count (last From))) (sow (if (< 1 (count (to ))) (if (and {(= 0 (state (to ))) (= 4 (count (to ))) (all Sites (sites Board) (!= (mover ) (state (site )))) (is In (to ) (sites Next))}) (set State (to ) (mover )) (and (moveAgain ) (set Var "Replay" (to ))))) (and (= 3 (count (to ))) (is In (to ) (sites Next))))))) (if (all Sites (intersection (sites Mover "Home") (sites Mover "ThreeLeftMost")) (or (= 2 (count (site ))) (= 3 (count (site ))))) (move Select (from (if (is Prev Mover) (sites {(var "Replay")}) (sites Mover)) (= 2 (count (site )))) (then (do (set Var "NumSowed" (count (last From))) (sow (if (< 1 (count (to ))) (if (and {(= 0 (state (to ))) (= 4 (count (to ))) (all Sites (sites Board) (!= (mover ) (state (site )))) (is In (to ) (sites Next))}) (set State (to ) (mover )) (and (moveAgain ) (set Var "Replay" (to ))))) (and (= 3 (count (to ))) (is In (to ) (sites Next)))))))) (move Select (from (if (is Prev Mover) (sites {(var "Replay")}) (sites Mover)) (and (is Occupied (from )) (if (is Prev Mover) true (if (is In (to ) (sites Mover "ThreeLeftMost")) (< 3 (count (to ))) true)))) (then (do (set Var "NumSowed" (count (last From))) (sow (if (< 1 (count (to ))) (if (and {(= 0 (state (to ))) (= 4 (count (to ))) (all Sites (sites Board) (!= (mover ) (state (site )))) (is In (to ) (sites Next))}) (set State (to ) (mover )) (and (moveAgain ) (set Var "Replay" (to ))))) (and (= 3 (count (to ))) (is In (to ) (sites Next))))))) (move Select (from (if (is Prev Mover) (sites {(var "Replay")}) (sites Mover "ThreeLeftMost")) (and (= 1 (count (from ))) (is Occupied (from )))) (then (do (set Var "NumSowed" (count (last From))) (sow (if (< 1 (count (to ))) (if (and {(= 0 (state (to ))) (= 4 (count (to ))) (all Sites (sites Board) (!= (mover ) (state (site )))) (is In (to ) (sites Next))}) (set State (to ) (mover )) (and (moveAgain ) (set Var "Replay" (to ))))) (and (= 3 (count (to ))) (is In (to ) (sites Next))))))) (move Select (from (if (is Prev Mover) (sites {(var "Replay")}) (sites Mover "ThreeLeftMost")) (and (= 2 (count (from ))) (is Occupied (from )))) (then (do (set Var "NumSowed" (count (last From))) (sow (if (< 1 (count (to ))) (if (and {(= 0 (state (to ))) (= 4 (count (to ))) (all Sites (sites Board) (!= (mover ) (state (site )))) (is In (to ) (sites Next))}) (set State (to ) (mover )) (and (moveAgain ) (set Var "Replay" (to ))))) (and (= 3 (count (to ))) (is In (to ) (sites Next))))))) (move Select (from (if (is Prev Mover) (sites {(var "Replay")}) (sites Mover "ThreeLeftMost")) (and (= 3 (count (from ))) (is Occupied (from )))) (then (do (set Var "NumSowed" (count (last From))) (sow (if (< 1 (count (to ))) (if (and {(= 0 (state (to ))) (= 4 (count (to ))) (all Sites (sites Board) (!= (mover ) (state (site )))) (is In (to ) (sites Next))}) (set State (to ) (mover )) (and (moveAgain ) (set Var "Replay" (to ))))) (and (= 3 (count (to ))) (is In (to ) (sites Next)))))))})) (end (if (no Moves Next) (result Mover Win)))))
Line 3
description: 3x6 board. Four counters per hole. Each player controls one row of holes and the half of the central row to their right. Sowing occurs from left ro right in the player's full row, right to left in their holes in the central row, then right to left in the opponent's full row, then left to right in the opponent's holes in the central row, at that point continuing into the player's full row again. When the final counter is sown into an occupied hole, the counters are picked up and sowing continues. When the final counter falls into an empty hole, the turn ends. At any point while the player sows, if a hole is made to contain four counters, these are captured, regardless of who the hole belongs to. When the final counter causes a capture, the turn ends. Play continues until a player has no counters in their holes. The opponent then captures the remaining counters. Players then redistribute their counters, four in each hole, starting from the leftmost hole in their row in the direction of play. The player with fewer counters distributes all of their counters on the board, even if they cannot place four in the final hole of the counting. The player with more counters then places four counters in the same number of holes as the other player, taking any remaining as their winnings. Play continues in this fashion until one player captures all of the counters.
Ludii code: (game "Rab'e" (players 2) (equipment {(mancalaBoard 3 6 None (track "Track" "0,E,N1,W2,17,W,S1,E2" true)) (piece "Seed" Shared) (regions P1 (union (sites Bottom) (difference (expand (sites Right) 2) (sites Top)))) (regions P2 (union (sites Top) (difference (expand (sites Left) 2) (sites Bottom)))) (hand Each) (map "LeftMost" {(pair P1 0) (pair P2 17)}) (map "CorrespondingHoles" {(pair 0 17) (pair 1 16) (pair 2 15) (pair 3 14) (pair 4 13) (pair 5 12) (pair 11 6) (pair 10 7) (pair 9 8) (pair 8 9) (pair 7 10) (pair 6 11) (pair 12 5) (pair 13 4) (pair 14 3) (pair 15 2) (pair 16 1) (pair 17 0)})}) (rules (start (set Count 4 (sites Track))) {(phase "Sowing" (play (or {(move Select (from (if (is Prev Mover) (sites {(last To true)}) (sites Mover)) (< 0 (count (from )))) (then (do (set Var "NumSowed" (count (last To))) (sow (if (and (!= 4 (count (to ))) (< 1 (count (to )))) (moveAgain ))) (then (and (forEach Site (sites Track (last From) (trackSite Move (last From) "Track" (var "NumSowed"))) (if (= 4 (count (site ))) (fromTo (from (site )) (to (handSite Mover)) 4))) (set Var "NumSowed" 0))))))} (then (if (or (all Sites (sites P1) (is Empty (site ))) (all Sites (sites P2) (is Empty (site )))) (and {(forEach Site (sites P1) (fromTo (from (site )) (to (handSite P1)) (count (site )))) (forEach Site (sites P2) (fromTo (from (site )) (to (handSite P2)) (count (site )))) (if (<= (+ (count Cell (handSite P1)) (count (sites P1))) (+ (count Cell (handSite P2)) (count (sites P2)))) (set NextPlayer (player 1)) (set NextPlayer (player 2)))}))))) (end (if (all Sites (sites Board) (= 0 (count (site )))) {(if (= 0 (count Cell (handSite P1))) (result P2 Win)) (if (= 0 (count Cell (handSite P2))) (result P1 Win))})) (nextPhase (all Sites (sites Board) (= 0 (count (site )))) "BetweenRounds")) (phase "BetweenRounds" (play (if (<= 4 (count Cell (handSite Mover))) (move (from (handSite Mover)) (to (trackSite FirstSite (mapEntry "LeftMost" Mover) (is Empty (to )))) 4 (then (if (<= 4 (count Cell (handSite Mover))) (moveAgain ) (and (if (!= 0 (count Cell (handSite Mover))) (and (fromTo (from (handSite Mover)) (to (trackSite FirstSite (mapEntry "LeftMost" Mover) (is Empty (to )))) (count Cell (handSite Mover))) (fromTo (from (handSite Next)) (to (mapEntry "CorrespondingHoles" (trackSite FirstSite (mapEntry "LeftMost" Mover) (is Empty (to ))))) (count Cell (handSite Next))))) (forEach Site (sites Mover) (if (is Occupied (site )) (fromTo (from (handSite Next)) (to (mapEntry "CorrespondingHoles" (site ))) (count (site ))))))))))) (nextPhase (= 0 (count Cell (handSite Mover))) "Sowing"))}))
Line 3
description: 3x6 board. Play begins with three counters per hole. Each player owns the row closest to them and the right half of the central row. Sowing occurs in the following direction: from left to right in the player's full row, right to left in the player's half of the central row, proceeding to the opponent's full row and sowing right to left, then left to right in the opponent's part of the central row, then proceeding back to the player's full row and proceeding as before. Sowing always begins from a player's own holes. A player can not sow from their left hand hole in their main row unless it has more than three counters, unless there is no other option. When the last counter falls into an empty hole, the turn ends. If the last counter falls into an occupied hole, the contents of that hole are picked up and sowing continues. A hole is captured by dropping the last counter of a sowing into an opponent's hole which contains three counters, making it have four counters, and becomes a wegue. Captures cannot be made until after the original three counters placed in the holes at the beginning of the game have been moved. Once a wegue is created, the player cannot sow from it. When the final counter of a sowing lands in a wegue owned by the opponent, the player captures two counters from it. Play continues until all of the counters are captured or all of the counters are accumulated in wegue. A new round begins. Players then collect the counters in their captured holes. They count their takings by filling their holes with three counters each as in the beginning, and the player would own every hole they could fill with three counters. If the player has two counters remaining, they also gain another hole and the opponent surrenders their extra counter. At the end of play, if a player captures the opponent's single remaining hole as a wegue, the player captured three counters from it, leaving one for the opponent to continue to play. Play continues until one player cannot fill any holes.
Ludii code: (game "Gabata (Aksum)" (players 2) (equipment {(mancalaBoard 3 6 None (track "Track" "0,E,N1,W2,17,W,S1,E2" true)) (piece "Seed" Shared) (hand Each) (regions P1 (union (sites Bottom) (intersection (sites Row 1) (expand (sites Right) 2)))) (regions P2 (union (sites Top) (intersection (sites Row 1) (expand (sites Left) 2)))) (map "LeftMost" {(pair P1 0) (pair P2 17)})}) (rules (start {(set Count 3 (sites Track)) (set RememberValue "OwnedP1" (union (sites Bottom) (intersection (sites Row 1) (expand (sites Right) 2)))) (set RememberValue "OwnedP2" (union (sites Top) (intersection (sites Row 1) (expand (sites Left) 2))))}) {(phase "Sowing" (play (or {(move Select (from (if (is Prev Mover) (sites {(var "Replay")}) (if (is Mover P1) (sites (values Remembered "OwnedP1")) (sites (values Remembered "OwnedP2")))) (and {(if (!= (from ) (mapEntry "LeftMost" Mover)) true (if (is Prev Mover) true (or (< 3 (count (from ))) (no Pieces All (forEach (difference (if (is Mover P1) (sites (values Remembered "OwnedP1")) (sites (values Remembered "OwnedP2"))) (mapEntry "LeftMost" Mover)) (= 0 (state (site )))))))) (< 0 (count (from ))) (= 0 (state (from )))})) (then (sow (if (and {(= 0 (state (to ))) (= 4 (count (to ))) (is In (to ) (if (is Mover P1) (sites (values Remembered "OwnedP2")) (sites (values Remembered "OwnedP1"))))}) (set State (to ) (mover )) (if (< 1 (count (to ))) (if (= 0 (state (to ))) (and {(moveAgain ) (set Var "Replay" (to ))}) (if (!= (mover ) (state (to ))) (and {(fromTo (from (to )) (to (handSite Mover)) (min 2 (count (to )))) (set State (to ) (state (to )))}))))))))} (then (if (all Sites (forEach (sites Board) (= 0 (state (site )))) (= 0 (count (site )))) (and {(forEach Site (forEach (sites Board) (= 1 (state (site )))) (fromTo (from (site )) (to (handSite P1)) (count (site )))) (forEach Site (forEach (sites Board) (= 2 (state (site )))) (fromTo (from (site )) (to (handSite P2)) (count (site )))) (forget Value "OwnedP1" All) (forget Value "OwnedP2" All)}))))) (end (if (all Sites (sites Board) (= 0 (count (site )))) {(if (>= 1 (count Cell (handSite P1))) (result P2 Win)) (if (>= 1 (count Cell (handSite P2))) (result P1 Win))})) (nextPhase (all Sites (sites Board) (= 0 (count (site )))) "BetweenRounds")) (phase "BetweenRounds" (play (if (<= 3 (count Cell (handSite Mover))) (move (from (handSite Mover)) (to (trackSite FirstSite (mapEntry "LeftMost" Mover) (is Empty (to )))) 3 (then (and {(if (is Mover P1) (remember Value "OwnedP1" (last To)) (remember Value "OwnedP2" (last To))) (if (<= 3 (count Cell (handSite Mover))) (moveAgain ) (if (= 2 (count Cell (handSite Mover))) (and {(fromTo (from (handSite Mover)) (to (trackSite FirstSite (mapEntry "LeftMost" Mover) (is Empty (to )))) 2) (fromTo (from (handSite Next)) (to (trackSite FirstSite (mapEntry "LeftMost" Mover) (is Empty (to )))) 1) (if (is Mover P1) (remember Value "OwnedP1" (trackSite FirstSite (mapEntry "LeftMost" Mover) (is Empty (to )))) (remember Value "OwnedP2" (trackSite FirstSite (mapEntry "LeftMost" Mover) (is Empty (to )))))})))}))))) (nextPhase (and (is Empty (handSite P1)) (is Empty (handSite P2))) "Sowing"))}))
Line 3
description: 3x6 board. Three counters per hole. Each player owns the row closest to them and the right half of the central row. Sowing occurs in the following direction: from left to right in the player's full row, right to left in the player's half of the central row, proceeding to the opponent's full row and sowing right to left, then left to right in the opponent's part of the central row, then proceeding back to the player's full row and proceeding as before. Sowing always begins from a player's own holes. When the last counter falls into an empty hole, the turn ends. If the last counter falls into an occupied hole, the contents of that hole are picked up and sowing continues. A hole is captured by dropping the last counter of a sowing into an opponent's hole which contains three counters, making it have four counters, and becomes a wegue. Captures cannot be made until after the original three counters placed in the holes at the beginning of the game have been moved. Once a wegue is created, the player cannot sow from it. When the final counter of a sowing lands in a wegue owned by the opponent, the player captures two counters from it. Play continues until all of the counters are captured or all of the counters are accumulated in wegue. A new round begins. Players then collect the counters in their captured holes. They count their takings by filling their holes with three counters each as in the beginning, and the player would own every hole they could fill with three counters. If the player has two counters remaining, they also gain another hole and the opponent surrenders their extra counter. At the end of play, if a player captures the opponent's single remaining hole as a wegue, the player captured three counters from it, leaving one for the opponent to continue to play. Play continues until one player cannot fill any holes.
Ludii code: (game "Gabata (Adowa)" (players 2) (equipment {(mancalaBoard 3 6 None (track "Track" "0,E,N1,W2,17,W,S1,E2" true)) (piece "Seed" Shared) (hand Each) (regions P1 (union (sites Bottom) (intersection (sites Row 1) (expand (sites Right) 2)))) (regions P2 (union (sites Top) (intersection (sites Row 1) (expand (sites Left) 2)))) (map "LeftMost" {(pair P1 0) (pair P2 17)})}) (rules (start {(set Count 3 (sites Track)) (set RememberValue "OwnedP1" (union (sites Bottom) (intersection (sites Row 1) (expand (sites Right) 2)))) (set RememberValue "OwnedP2" (union (sites Top) (intersection (sites Row 1) (expand (sites Left) 2))))}) {(phase "Sowing" (play (or {(move Select (from (if (is Prev Mover) (sites {(var "Replay")}) (if (is Mover P1) (sites (values Remembered "OwnedP1")) (sites (values Remembered "OwnedP2")))) (and (< 0 (count (from ))) (= 0 (state (from ))))) (then (sow (if (and {(= 0 (state (to ))) (= 4 (count (to ))) (is In (to ) (if (is Mover P1) (sites (values Remembered "OwnedP2")) (sites (values Remembered "OwnedP1"))))}) (set State (to ) (mover )) (if (< 1 (count (to ))) (if (= 0 (state (to ))) (and {(moveAgain ) (set Var "Replay" (to ))}) (if (!= (mover ) (state (to ))) (and {(fromTo (from (to )) (to (handSite Mover)) (min 2 (count (to )))) (set State (to ) (state (to )))}))))))))} (then (if (all Sites (forEach (sites Board) (= 0 (state (site )))) (= 0 (count (site )))) (and {(forEach Site (forEach (sites Board) (= 1 (state (site )))) (fromTo (from (site )) (to (handSite P1)) (count (site )))) (forEach Site (forEach (sites Board) (= 2 (state (site )))) (fromTo (from (site )) (to (handSite P2)) (count (site )))) (forget Value "OwnedP1" All) (forget Value "OwnedP2" All)}))))) (end (if (all Sites (sites Board) (= 0 (count (site )))) {(if (>= 1 (count Cell (handSite P1))) (result P2 Win)) (if (>= 1 (count Cell (handSite P2))) (result P1 Win))})) (nextPhase (all Sites (sites Board) (= 0 (count (site )))) "BetweenRounds")) (phase "BetweenRounds" (play (if (<= 3 (count Cell (handSite Mover))) (move (from (handSite Mover)) (to (trackSite FirstSite (mapEntry "LeftMost" Mover) (is Empty (to )))) 3 (then (and {(if (is Mover P1) (remember Value "OwnedP1" (last To)) (remember Value "OwnedP2" (last To))) (if (<= 3 (count Cell (handSite Mover))) (moveAgain ) (if (= 2 (count Cell (handSite Mover))) (and {(fromTo (from (handSite Mover)) (to (trackSite FirstSite (mapEntry "LeftMost" Mover) (is Empty (to )))) 2) (fromTo (from (handSite Next)) (to (trackSite FirstSite (mapEntry "LeftMost" Mover) (is Empty (to )))) 1) (if (is Mover P1) (remember Value "OwnedP1" (trackSite FirstSite (mapEntry "LeftMost" Mover) (is Empty (to )))) (remember Value "OwnedP2" (trackSite FirstSite (mapEntry "LeftMost" Mover) (is Empty (to )))))})))}))))) (nextPhase (and (is Empty (handSite P1)) (is Empty (handSite P2))) "Sowing"))}))
Line 3
description: 3x6 board. Each player owns the row closest to them and the half of the central row to their right. Play begins with three counters in each hole. During the first phase of the game, the players race each other (i.e., do not take turns) to be the first person to drop the last counter into an empty hole. Play moves from left to right in the row closest to the player, right to left in the central row, and left to right in the furthest row. Upon reaching the final hole in the opponent's row, play continues with the first hole in the player's own row. In the first phase, Players take counters from the leftmost hole in their row and sow them in the appropriate direction. When the final counter lands in a hole with counters, they are picked up and sowing continues until the last counter is dropped into an empty hole. Play continues in phase two in the same manner as before, but the players take turns and the player who \"won\" the first phase plays first. Players capture counters when placing the last counter of a sowing into one of their own holes which is empty. If the hole is on the left half of the board, any counters in the two holes of the opponent facing it are captured. If the last hole is on the right half of the board, any counters in the opponent's one hole facing it are captured. The player then continues to move using the last counter placed which effected the capture, and placing it in the next hole. This move can result in further captures (if the hole is empty), continuation of sowing (if there are counters in it), or the end of the turn (if hole is empty and there are no opponent's counters to be captured). Play continues until a player has no counters in their holes. The opponent then captures the remaining counters. Players then redistribute their counters, three in each hole, starting from the leftmost hole in their row in the direction of play. The player with fewer counters distributes all of their counters on the board, even if they cannot place three in the final hole of the counting. The player with more counters then places three counters in the same number of holes as the other player, taking any remaining as their winnings. Play continues in this fashion until one player captures all of the counters.
        
Ludii code: (game "Abalala'e" (players 2) (equipment {(mancalaBoard 3 6 None {(track "Track" "0,E,N1,W5,N1,E" true P1) (track "Track" "17,W,S1,E5,S1,W" true P2)}) (regions "Home" P1 (union (sites Bottom) (sites {"D2" "E2" "F2"}))) (regions "Home" P2 (union (sites Top) (sites {"A2" "B2" "C2"}))) (regions "LeftPart" P1 (sites {"A1" "B1" "C1"})) (regions "LeftPart" P2 (sites {"D3" "E3" "F3"})) (regions "MiddleRow" (sites {"A2" "B2" "C2" "D2" "E2" "F2"})) (map "LeftHole" {(pair P1 0) (pair P2 17)}) (piece "Seed" Shared) (hand Each)}) (rules (start (set Count 3 (union (sites P1 "Home") (sites P2 "Home")))) (play (move Select (from (if (is Prev Mover) (if (is Pending) (sites Pending) (sites {(last To true)})) (sites Mover "Home")) (> (count (from )) 0)) (then (sow (if (is Pending) 1 (count (last To))) "Track" (mover ) (if (> (count (to )) 1) (moveAgain ) (if (is In (to ) (sites Mover "Home")) (if (is In (to ) (sites "MiddleRow")) (if (> (count (if (is Mover P1) (+ (to ) 6) (- (to ) 6))) 0) (and {(fromTo (from (if (is Mover P1) (+ (to ) 6) (- (to ) 6))) (to (handSite Mover)) (count (if (is Mover P1) (+ (to ) 6) (- (to ) 6)))) (moveAgain ) (set Pending (to ))})) (if (is In (to ) (sites Mover "LeftPart")) (and {(if (> (count (if (is Mover P1) (+ (to ) 6) (- (to ) 6))) 0) (and {(fromTo (from (if (is Mover P1) (+ (to ) 6) (- (to ) 6))) (to (handSite Mover)) (count (if (is Mover P1) (+ (to ) 6) (- (to ) 6)))) (moveAgain ) (set Pending (to ))})) (if (> (count (if (is Mover P1) (+ (to ) (* 6 2)) (- (to ) (* 6 2)))) 0) (and {(fromTo (from (if (is Mover P1) (+ (to ) (* 6 2)) (- (to ) (* 6 2)))) (to (handSite Mover)) (count (if (is Mover P1) (+ (to ) (* 6 2)) (- (to ) (* 6 2))))) (moveAgain ) (set Pending (to ))}))}) (if (> (count (if (is Mover P1) (+ (to ) (* 6 2)) (- (to ) (* 6 2)))) 0) (and {(fromTo (from (if (is Mover P1) (+ (to ) (* 6 2)) (- (to ) (* 6 2)))) (to (handSite Mover)) (count (if (is Mover P1) (+ (to ) (* 6 2)) (- (to ) (* 6 2))))) (moveAgain ) (set Pending (to ))})))))))))) (end (if (or {(all Sites (sites P1 "Home") (= 0 (count (site )))) (all Sites (sites P2 "Home") (= 0 (count (site ))))}) (byScore {(score P1 (+ (count Cell (handSite P1)) (count (sites P1)))) (score P2 (+ (count Cell (handSite P2)) (count (sites P2))))})))))
Line 3
description: 6x3 or 6 board. Two counters in each hole. Sowing occurs from one of the holes in the player's outermost row which contains counters, in either direction. Sowing moves in a boustrophedon path along the holes, moving from the last hole in the innermost row to the beginning of the outer row. When the final counter lands in an occupied hole, the contents of this hole are picked up and sowing continues. If this hole is in the player's inner row, the contents of the opponent's hole opposite it are captured, and these counters are also used along with the hole in which the last counter fell for the sowing to continue. If the opponent's inner row hole is empty, counters may be captured from their central row, and if both the inner and central rows are empty, captures may be made from the outer hole. Sowing ends when the final counter lands in an empty hole. When a player has only one counter on their side of the board, it may capture by moving from the central row directly to the inner row hole above it to make a capture (i.e., without following the normal track), and on the move prior to the capture, from the outer to the central row. Play continues until one player has captured all of the counters.
Ludii code: (game "Katro" (players 2) (equipment {(mancalaBoard 6 6 None {(track "TrackCCW1" "0,E,N1,W,N1,E" true P1) (track "TrackCW1" "5,W,N1,E,N1,W" true P1) (track "TrackCW2" "18,E,N1,W,N1,E" true P2) (track "TrackCCW2" "23,W,N1,E,N1,W" true P2)}) (piece "Seed" Shared) (regions "Home" P1 (sites Track "TrackCCW1")) (regions "Home" P2 (sites Track "TrackCCW2")) (regions "Inner" P1 (sites Row 2)) (regions "Inner" P2 (sites Row 3)) (regions "Middle" P1 (sites Row 1)) (regions "Middle" P2 (sites Row 4)) (regions "Outer" P1 (sites Bottom)) (regions "Outer" P2 (sites Top))}) (rules (start (set Count 2 (sites Board))) (play (or {(if (or (= (value Player Mover) 1) (<= (value Player Mover) 0)) (move Select (from (if (is Prev Mover) (sites {(last To true)}) (if (!= 0 (count (sites Mover "Outer"))) (sites Mover "Outer") (if (!= 0 (count (sites Mover "Middle"))) (sites Mover "Middle") (sites Mover "Inner")))) (> (count (from )) 0)) (then (sow "TrackCCW" (mover ) (if (> (count (to )) 1) (and {(if (<= (value Player Mover) 0) (set Value Mover 1)) (moveAgain ) (if (is In (to ) (sites Mover "Inner")) (if (!= 0 (count (if (is Mover P1) (+ (to ) 6) (- (to ) 6)))) (fromTo (from (if (is Mover P1) (+ (to ) 6) (- (to ) 6))) (to (to )) (count (if (is Mover P1) (+ (to ) 6) (- (to ) 6)))) (if (!= 0 (count (if (is Mover P1) (+ (to ) (* 6 2)) (- (to ) (* 6 2))))) (fromTo (from (if (is Mover P1) (+ (to ) (* 6 2)) (- (to ) (* 6 2)))) (to (to )) (count (if (is Mover P1) (+ (to ) (* 6 2)) (- (to ) (* 6 2))))) (if (!= 0 (count (if (is Mover P1) (+ (to ) (* 6 3)) (- (to ) (* 6 3))))) (fromTo (from (if (is Mover P1) (+ (to ) (* 6 3)) (- (to ) (* 6 3)))) (to (to )) (count (if (is Mover P1) (+ (to ) (* 6 3)) (- (to ) (* 6 3)))))))))}) (set Value Mover 0)))))) (if (or (= (value Player Mover) 2) (<= (value Player Mover) 0)) (move Select (from (if (is Prev Mover) (sites {(last To true)}) (if (!= 0 (count (sites Mover "Outer"))) (sites Mover "Outer") (if (!= 0 (count (sites Mover "Middle"))) (sites Mover "Middle") (sites Mover "Inner")))) (> (count (from )) 0)) (then (sow "TrackCW" (mover ) (if (> (count (to )) 1) (and {(if (<= (value Player Mover) 0) (set Value Mover 2)) (moveAgain ) (if (is In (to ) (sites Mover "Inner")) (if (!= 0 (count (if (is Mover P1) (+ (to ) 6) (- (to ) 6)))) (fromTo (from (if (is Mover P1) (+ (to ) 6) (- (to ) 6))) (to (to )) (count (if (is Mover P1) (+ (to ) 6) (- (to ) 6)))) (if (!= 0 (count (if (is Mover P1) (+ (to ) (* 6 2)) (- (to ) (* 6 2))))) (fromTo (from (if (is Mover P1) (+ (to ) (* 6 2)) (- (to ) (* 6 2)))) (to (to )) (count (if (is Mover P1) (+ (to ) (* 6 2)) (- (to ) (* 6 2))))) (if (!= 0 (count (if (is Mover P1) (+ (to ) (* 6 3)) (- (to ) (* 6 3))))) (fromTo (from (if (is Mover P1) (+ (to ) (* 6 3)) (- (to ) (* 6 3)))) (to (to )) (count (if (is Mover P1) (+ (to ) (* 6 3)) (- (to ) (* 6 3)))))))))}) (set Value Mover 0)))))) (if (and (= (count (sites Mover "Home")) 1) (= (count (sites Mover "Outer")) 1)) (move (from (sites Mover "Outer") (> (count (from )) 0)) (to (if (is Mover P1) (ahead (from ) N) (ahead (from ) S))))) (if (and (= (count (sites Mover "Home")) 1) (= (count (sites Mover "Middle")) 1)) (move (from (sites Mover "Middle") (and (> (count (from )) 0) (< 1 (count (sites Column (column (from ))))))) (to (if (is Mover P1) (ahead (from ) N) (ahead (from ) S))) (then (and (if (!= 0 (count (if (is Mover P1) (+ (last To) 6) (- (last To) 6)))) (fromTo (from (if (is Mover P1) (+ (last To) 6) (- (last To) 6))) (to (last To)) (count (if (is Mover P1) (+ (last To) 6) (- (last To) 6)))) (if (!= 0 (count (if (is Mover P1) (+ (last To) (* 6 2)) (- (last To) (* 6 2))))) (fromTo (from (if (is Mover P1) (+ (last To) (* 6 2)) (- (last To) (* 6 2)))) (to (last To)) (count (if (is Mover P1) (+ (last To) (* 6 2)) (- (last To) (* 6 2))))) (if (!= 0 (count (if (is Mover P1) (+ (last To) (* 6 3)) (- (last To) (* 6 3))))) (fromTo (from (if (is Mover P1) (+ (last To) (* 6 3)) (- (last To) (* 6 3)))) (to (last To)) (count (if (is Mover P1) (+ (last To) (* 6 3)) (- (last To) (* 6 3)))))))) (moveAgain )))))})) (end (forEach NonMover (all Sites (sites Player "Home") (= 0 (count (site )))) (result Player Loss)))))
Line 3
description: Played by two to five players. Each player has three heaps of counters, with twelve counters per heap. Sowing occurs in an anti-clockwise direction. When a player creates a heap containing three counters in an opponent's heap, a circle is drawn around the heap and the player captures the counters in it and every counter sown into it for the rest of the game. When there are no heaps left, the player with the most counters wins.
Ludii code: (game "Pic" (players 5) (equipment {(board (concentric {(* 3 5)}) (track "Track" {0 1 3 5 7 9 11 13 14 12 10 8 6 4 2} true) Vertex) (piece "Seed" Shared) (hand Each) (regions P1 (sites {0 1 3})) (regions P2 (sites {5 7 9})) (regions P3 (sites {11 13 14})) (regions P4 (sites {12 10 8})) (regions P5 (sites {6 4 2}))}) (rules (start (set Count 12 (sites Track))) (play (or {(move Select (from (sites Mover) (is Occupied (from ))) (then (sow (if (and (not (is In (to ) (sites Mover))) (= 3 (count (to )))) (and (fromTo (from (to )) (to (handSite Mover)) 3) (set State (to ) (mover )))))))} (then (forEach Site (sites Board) (if (and (is Occupied (site )) (!= 0 (state (site )))) (and (fromTo (from (site )) (to (handSite (state (site )))) (count (site ))) (set State (site ) (state (site ))))))))) (end (if (all Sites (sites Board) (= 0 (count (site )))) (byScore {(score P1 (count Cell (handSite P1))) (score P2 (count Cell (handSite P2))) (score P3 (count Cell (handSite P3))) (score P4 (count Cell (handSite P4))) (score P5 (count Cell (handSite P5)))})))))
Line 3
description: Two rows of five holes arranged in a circle around four stores in the center. Each player has five holes on one half of the circle. Ten counters in each hole. Players sow from their holes, and can choose to sow any number of counters, but must leave at least one in the starting hole. Sowing occurs in an anti-clockwise direction. If sowing ends in a hole making its contents an odd number of counters, they are captured, but not more than nine. If the sowing ends and the last counter makes the contents of a hole an even number and the next hole has an odd number of counters, the contents of the odd hole are taken, but not more than nine. In both situations, if there is an unbroken sequence of holes with an odd number of counters, these are all taken, but not more than nine from each.
Ludii code: (game "Okwe (Achalla)" (players 2) (equipment {(board (add (concentric {10}) {{0.45 0.45} {-0.45 -0.45} {0.45 -0.45} {-0.45 0.45}}) (track "Track" {0 2 4 6 8 9 7 5 3 1} true) Vertex) (regions P1 (sites {0 1 2 3 4})) (regions P2 (sites {5 6 7 8 9})) (map {(pair P1 11) (pair P2 10)}) (piece "Seed" Shared)}) (rules (start (set Count 10 (sites Track))) (play (forEach Site (forEach (sites Mover) (< 1 (count (site )))) (forEach Value 2 (count (site )) (do (set Var (value )) (move Select (from (site )) (then (sow (var ) true (if (and (<= (count (to )) 9) (is Odd (count (to )))) (fromTo (from (to )) (to (mapEntry (mover ))) (count (to ))) (if (and (<= (count (trackSite Move (to ) 1)) 9) (is Odd (count (trackSite Move (to ) 1)))) (fromTo (from (trackSite Move (to ) 1)) (to (mapEntry (mover ))) (count (trackSite Move (to ) 1))))) true (and (<= (count (to )) 9) (is Odd (count (to ))))))))))) (end (if (and (no Moves P1) (no Moves P2)) (byScore {(score P1 (count (mapEntry P1))) (score P2 (count (mapEntry P2)))})))))
Line 3
description: Two rows of twelve holes in the central part of the board, one hole on either end of this, two rows of two outside of these single holes on both sides of the board, and one final hole on either end of the board. Three counters in each hole. Sowing occurs only in the player's row; players use the inner single hole to their left; the outer single hole to the right. Sowing can occur in either direction. Captures are made when a counter falls into an empty hole. The counters in the opponent's opposite hole are captured. When the final counter of a sowing ends in a player's empty inner single holes, the counters in the opponent's inner single hole are captured. If it lands in a player's empty outer single hole, the counters in the opponent's outer single hole are captured. Single counters can be sown, but these cannot capture more than one of the opponent's counters. If the final counter falls into an occupied hole, the contents of this hole are picked up and sowing continues in the same direction. A player can sow such that they can make a capture from the hole in which the sowing began, but this cannot be done by sowing two or fewer counters. The player who has no counters remaining in their row loses. It is customary to play a series of round to determine the winner.
Ludii code: (game "Mbelele" (players 2) (equipment {(board (merge {(rectangle 2 12) (shift -1.0 0.5 (square 1)) (shift -3.0 0.0 (square 2)) (shift -4.0 0.5 (square 1)) (shift 12.0 0.5 (square 1)) (shift 13.0 0.0 (square 2)) (shift 15.0 0.5 (square 1))}) {(track "TrackCCW1" "25,26,24,0,E,31,32,35" true P1) (track "TrackCCW2" "34,33,30,23,W,28,27,29" true P2) (track "TrackCW1" "35,32,31,11,W,24,26,25" true P1) (track "TrackCW2" "29,27,28,12,E,30,33,34" true P2)} Vertex) (piece "Seed" Shared) (map "Opposite" {(pair 29 35) (pair 35 29) (pair 24 30) (pair 30 24) (pair 25 27) (pair 26 28) (pair 0 12) (pair 1 13) (pair 2 14) (pair 3 15) (pair 4 16) (pair 5 17) (pair 6 18) (pair 7 19) (pair 8 20) (pair 9 21) (pair 10 22) (pair 11 23) (pair 31 33) (pair 32 34) (pair 27 25) (pair 28 26) (pair 12 0) (pair 13 1) (pair 14 2) (pair 15 3) (pair 16 4) (pair 17 5) (pair 18 6) (pair 19 7) (pair 20 8) (pair 21 9) (pair 22 10) (pair 23 11) (pair 33 31) (pair 34 32)}) (regions P1 (union (sites Bottom) (sites {24 35}))) (regions P2 (union (sites Top) (sites {29 30})))}) (rules (start (set Count 3 (sites Board))) (play (or (if (!= 2 (var "NumCapture")) (or (if (!= (var "Direction") 2) (move Select (from (if (is Prev Mover) (sites {(var "Replay")}) (sites Mover)) (and (if (is Prev Mover) true (= 1 (count (from )))) (is Occupied (from )))) (then (sow "TrackCCW" (mover ) (if (= 1 (count (to ))) (and {(if (is Occupied (mapEntry "Opposite" (to ))) (remove (mapEntry "Opposite" (to )) 1)) (set Var "Direction" 0) (set Var "NumCapture" 0)}) (and {(moveAgain ) (set Var "Replay" (to )) (set Var "Direction" 1) (set Var "NumCapture" 1)})))))) (if (!= (var "Direction") 1) (move Select (from (if (is Prev Mover) (sites {(var "Replay")}) (sites Mover)) (and (if (is Prev Mover) true (= 1 (count (from )))) (is Occupied (from )))) (then (sow "TrackCW" (mover ) (if (= 1 (count (to ))) (and {(if (is Occupied (mapEntry "Opposite" (to ))) (remove (mapEntry "Opposite" (to )) 1)) (set Var "Direction" 0) (set Var "NumCapture" 0)}) (and {(moveAgain ) (set Var "Replay" (to )) (set Var "Direction" 2) (set Var "NumCapture" 1)})))))))) (if (!= 1 (var "NumCapture")) (or (if (!= (var "Direction") 2) (move Select (from (if (is Prev Mover) (sites {(var "Replay")}) (sites Mover)) (and (if (is Prev Mover) true (< 1 (count (from )))) (is Occupied (from )))) (then (sow "TrackCCW" (mover ) (if (= 1 (count (to ))) (and {(if (is Occupied (mapEntry "Opposite" (to ))) (remove (mapEntry "Opposite" (to )) (count (to )))) (set Var "Direction" 0) (set Var "NumCapture" 0)}) (and {(moveAgain ) (set Var "Replay" (to )) (set Var "Direction" 1) (set Var "NumCapture" 2)})))))) (if (!= (var "Direction") 1) (move Select (from (if (is Prev Mover) (sites {(var "Replay")}) (sites Mover)) (and (if (is Prev Mover) true (< 1 (count (from )))) (is Occupied (from )))) (then (sow "TrackCW" (mover ) (if (= 1 (count (to ))) (and {(if (is Occupied (mapEntry "Opposite" (to ))) (remove (mapEntry "Opposite" (to )) (count (to )))) (set Var "Direction" 0) (set Var "NumCapture" 1)}) (and {(moveAgain ) (set Var "Replay" (to )) (set Var "Direction" 2) (set Var "NumCapture" 2)})))))))))) (end (forEach NonMover (all Sites (sites Player) (= 0 (count (site )))) (result Player Loss)))))
Line 3
description: Seven holes, arranged in a circle. Four counters in each hole. Sowing occurs in an anti-clockwise direction. When the final counter lands in a hole, the contents of the next hole are picked up and sowing continues with those counters. When the hole from which this new sowing would occur is empty, the counters in the next hole are captured and the turn ends. The next player begins to sow from the next available hole with counters after the last one played by the opponent. Play continues until no further captures can be made, and the player with the most counters wins.
Ludii code: (game "Sat Gol" (players 2) (equipment {(board (concentric {7}) (track "Track" {0 1 3 5 6 4 2} true) Vertex) (piece "Seed" Shared) (hand Each)}) (rules (start (set Count 4 (sites Board))) (play (move Select (from (if (is Prev Mover) (sites {(trackSite Move (last To true) 1)}) (if (= 0 (count Moves)) (sites Board) (sites {(var )}))) (> (count (from )) 0)) (then (sow (if (!= 0 (count (trackSite Move (to ) 1))) (moveAgain ) (and (if (!= 0 (count (trackSite Move (to ) 2))) (fromTo (from (trackSite Move (to ) 2)) (to (handSite Mover)) (count (trackSite Move (to ) 2)))) (if (!= 0 (count (trackSite Move (to ) 3))) (set Var (trackSite Move (to ) 3)) (if (!= 0 (count (trackSite Move (to ) 4))) (set Var (trackSite Move (to ) 4)) (if (!= 0 (count (trackSite Move (to ) 5))) (set Var (trackSite Move (to ) 5)) (if (!= 0 (count (trackSite Move (to ) 6))) (set Var (trackSite Move (to ) 6)) (set Pending))))))))))) (end (if (is Pending) (byScore {(score P1 (count Cell (handSite P1))) (score P2 (count Cell (handSite P2)))})))))
Line 3
description: 4x8 board. May have one or two stores per player. Stores are located to the right hand side of the player's two rows, centered with respect to the player's two rows. If each player has two stores, the second store is located between the fourth and fifth holes of the player's rows; i.e., in the center of the board. One counter in each hole except the stores. Opening play: Player sows from any one of their holes, thus making a pair. They then take the counter in the next hole and sow it, making another pair. This continues until the last pair is made. When the last pair is made, the player sows this pair normally. Main phase: Sowing occurs in an anti-clockwise direction. When the final counter falls into an occupied hole, these are picked up and sowing continues. The turn ends when the final counter falls into an empty hole. When this empty hole is in the inner row, the counters in the opponent's hole opposite are captured. If the opponent's inner row hole are occupied, then any contents in the outer row opposite are also captured. Several rules apply to the stores: They are not used during the opening play; They may only hold one counter at a time; The counter in the store cannot be captured; It is the player's choice whether to include the store in sowing; they are considered to be in the player's inner row of holes for the purposes of sowing.
Ludii code: (game "Tchela" (players 2) (equipment {(board (merge {(square 4) (shift 5.0 0.0 (square 4)) (shift 4.0 0.5 (square 1)) (shift 4.0 2.5 (square 1)) (shift -1.0 2.5 (square 1)) (shift 9.0 0.5 (square 1))}) {(track "TrackCCW1" {0 1 2 3 16 17 18 19 23 22 21 20 7 6 5 4} true P1) (track "TrackCCW2" {8 9 10 11 24 25 26 27 31 30 29 28 15 14 13 12} true P2) (track "TrackExtendedCCW1" {0 1 2 3 16 17 18 19 23 22 21 20 32 7 6 5 4} true P1) (track "TrackExtendedCCW2" {8 9 10 11 33 24 25 26 27 31 30 29 28 15 14 13 12} true P2)} Vertex) (piece "Seed" Shared) (regions "HomeNotExtented" P1 (sites Track "TrackCCW1")) (regions "HomeNotExtented" P2 (sites Track "TrackCCW2")) (regions "Home" P1 (sites Track "TrackExtendedCCW1")) (regions "Home" P2 (sites Track "TrackExtendedCCW2")) (regions "Inner" P1 (difference (sites Track "TrackCCW1") (sites Bottom))) (regions "Inner" P2 (difference (sites Track "TrackCCW2") (sites Top))) (map {(pair P1 34) (pair P2 35)}) (map "ExtraStore" {(pair P1 32) (pair P2 33)})}) (rules (start (set Count 1 (difference (sites Board) (sites {32 33 34 35})))) {(phase "Opening" (play (move Select (from (if (< (value Player Mover) 0) (sites Mover "HomeNotExtented") (sites {(trackSite Move (value Player Mover) "TrackCCW" 2)}))) (then (and (sow "TrackCCW" (mover )) (set Value Mover (last To)))))) (nextPhase Mover (= 0 (count (trackSite Move (value Player Mover) "TrackCCW" 2))) "OpeningPair")) (phase "OpeningPair" (play (move Select (from (sites {(trackSite Move (value Player Mover) "TrackCCW" 1)})) (then (sow "TrackCCW" (mover ))))) (nextPhase Mover "Playing")) (phase "Playing" (play (or (move Select (from (if (is Prev Mover) (sites {(last To true)}) (sites Mover "HomeNotExtented")) (< 0 (count (from )))) (then (sow "TrackCCW" (mover ) (if (> (count (to )) 1) (moveAgain ) (if (and (is In (to ) (sites Mover "Inner")) (> (count (if (is Mover P1) (+ (to ) 4) (- (to ) 4))) 0)) (and (fromTo (from (if (is Mover P1) (+ (to ) 4) (- (to ) 4))) (to (mapEntry Mover)) (count (if (is Mover P1) (+ (to ) 4) (- (to ) 4)))) (if (> (count (if (is Mover P1) (+ (to ) 4) (- (to ) 4))) 0) (fromTo (from (if (is Mover P1) (+ (to ) (* 4 2)) (- (to ) (* 4 2)))) (to (mapEntry Mover)) (count (if (is Mover P1) (+ (to ) (* 4 2)) (- (to ) (* 4 2)))))))))))) (do (move Select (from (if (is Prev Mover) (sites {(last To true)}) (sites Mover "Home")) (< 0 (count (from )))) (then (sow "TrackExtendedCCW" (mover ) (if (!= (to ) (mapEntry "ExtraStore" Mover)) (if (> (count (to )) 1) (moveAgain ) (if (and (is In (to ) (sites Mover "Inner")) (> (count (if (is Mover P1) (+ (to ) 4) (- (to ) 4))) 0)) (and (fromTo (from (if (is Mover P1) (+ (to ) 4) (- (to ) 4))) (to (mapEntry Mover)) (count (if (is Mover P1) (+ (to ) 4) (- (to ) 4)))) (if (> (count (if (is Mover P1) (+ (to ) 4) (- (to ) 4))) 0) (fromTo (from (if (is Mover P1) (+ (to ) (* 4 2)) (- (to ) (* 4 2)))) (to (mapEntry Mover)) (count (if (is Mover P1) (+ (to ) (* 4 2)) (- (to ) (* 4 2))))))))))))) (<= (count (mapEntry "ExtraStore" Mover)) 1)))))} (end (if (no Moves Mover) (byScore {(score P1 (+ (count (mapEntry P1)) (count (sites P1 "Home")))) (score P2 (+ (count (mapEntry P2)) (count (sites P2 "Home"))))})))))
Line 3
description: 4x8 board. Two counters in each hole. Opening play:  Players rearrange their counters so that there are four counters in each hole of their outer row. If they play with the second array, they take turns sowing from each of the holes with four  counters, beginning with the rightmost hole, placing two in the first hole and one in each of the following. Main phase: Play begins from any hole on the player's side of the board with counters in it. Singletons cannot move. Sowing happens in an anti-clockwise direction. If the last counter lands in an empty hole, the turn is over. For capturing: Holes are in 'opposition' when one player has the front row hole occupied and the opponent has both of the holes opposite it occupied. If the last hole in a sowing is in opposition, the player takes the counters in both of the opponent's holes and places them in the empty hole from which the player lifted the counters. The player then sows the captured counters from this hole. Further captures in the sowing can occur in the same way. However, each player has two hole from which clockwise plays can be made: the leftmost hole in the outer row and the second from the left in the inner row. Clockwise moves can only be made from these holes if they immediately lead to a capture. When the captured counters are sown, starting from the same hole, they can also be sown clockwise if they lead to a capture. If they cannot lead to a capture, they are sown anti-clockwise. Another alternative the player has is that, if the player plays clockwise from one of these holes and therefore makes a capture, the captured counters may be placed in the hole and left there, and the player may play instead from the other hole from which clockwise captures are allowed in a clockwise direction, if it leads to a capture. The player may continue playing from this hole as above until the possibilities to move are exhausted, and then may move from any hole in an anti-clockwise direction. Multiple captures can only be made in a clockwise direction from these holes if it is made on the first sowing of the turn. Otherwise, only one clockwise capture can be made and sowing must proceed in an anti-clockwise direction. If the last counter lands on a hole that is occupied but not in opposition, these counters are picked up and sowing continues. Play ends when one player captures all the opponent's counters or one player cannot play. The player who cannot play loses. A player may also win by capturing the counters from both of the opponent's end holes in the inner row in a single turn.
        
Ludii code: (game "Ikibuguzo (Opening 2)" (players 2) (equipment {(mancalaBoard 4 8 None {(track "TrackCCW1" "0,E,N1,W" true P1) (track "TrackCCW2" "16,E,N1,W" true P2) (track "TrackCW1" "7,W,N1,E" true P1) (track "TrackCW2" "24,E,S1,W" true P2)}) (regions "Home" P1 (sites Track "TrackCCW1")) (regions "Home" P2 (sites Track "TrackCCW2")) (regions "Inner" P1 (difference (sites Track "TrackCCW1") (sites Bottom))) (regions "Inner" P2 (difference (sites Track "TrackCCW2") (sites Top))) (map "RightMost" {(pair P1 7) (pair P2 24)}) (map "LeftMostOuter" {(pair P1 0) (pair P2 31)}) (map "SecondLeftInner" {(pair P1 9) (pair P2 22)}) (piece "Seed" Shared) (hand Each)}) (rules (start (set Count 4 (union (sites Bottom) (sites Top)))) {(phase "FirstMove" (play (move (from (trackSite FirstSite Mover "TrackCW" (if (= (value Player Mover) -1) (mapEntry "RightMost" Mover) (value Player Mover)) (= 4 (count (to ))))) (to (trackSite Move (from ) "TrackCCW" 1)) 2 (then (and {(fromTo (from (last From)) (to (trackSite Move (last From) "TrackCCW" 2)) 1) (fromTo (from (last From)) (to (trackSite Move (last From) "TrackCCW" 3)) 1) (set Value Mover (last From))})))) (nextPhase Mover (= (last From) (mapEntry "LeftMostOuter" Mover)) "MainPhase")) (phase "MainPhase" (play (or (move Select (from (if (is Prev Mover) (sites {(var "Replay")}) (sites {(mapEntry "LeftMostOuter" Mover) (mapEntry "SecondLeftInner" Mover)})) (and {(if (is Prev Mover) (< 0 (count (from ))) (< 1 (count (from )))) (is In (from ) (sites {(mapEntry "LeftMostOuter" Mover) (mapEntry "SecondLeftInner" Mover)})) (is In (trackSite Move (from ) "TrackCW" (count (from ))) (sites Mover "Inner")) (is Occupied (if (is Mover P1) (+ (trackSite Move (from ) "TrackCW" (count (from ))) 8) (- (trackSite Move (from ) "TrackCW" (count (from ))) 8))) (is Occupied (if (is Mover P1) (+ (trackSite Move (from ) "TrackCW" (count (from ))) (* 8 2)) (- (trackSite Move (from ) "TrackCW" (count (from ))) (* 8 2))))})) (then (sow "TrackCW" (mover ) (if (< 1 (count (to ))) (and (moveAgain ) (if (and {(is Occupied (if (is Mover P1) (+ (to ) 8) (- (to ) 8))) (is Occupied (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2)))) (is In (to ) (sites Mover "Inner"))}) (and {(fromTo (from (if (is Mover P1) (+ (to ) 8) (- (to ) 8))) (to (last From)) (count (if (is Mover P1) (+ (to ) 8) (- (to ) 8)))) (fromTo (from (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2)))) (to (last From)) (count (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2))))) (set Var "Replay" (from ))}) (set Var "Replay" (to )))))))) (move Select (from (if (is Prev Mover) (sites {(var "Replay")}) (sites Mover)) (if (is Prev Mover) (< 0 (count (from ))) (< 1 (count (from ))))) (then (sow "TrackCCW" (mover ) (if (< 1 (count (to ))) (and (moveAgain ) (if (and {(is Occupied (if (is Mover P1) (+ (to ) 8) (- (to ) 8))) (is Occupied (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2)))) (is In (to ) (sites Mover "Inner"))}) (and {(fromTo (from (if (is Mover P1) (+ (to ) 8) (- (to ) 8))) (to (last From)) (count (if (is Mover P1) (+ (to ) 8) (- (to ) 8)))) (fromTo (from (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2)))) (to (last From)) (count (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2))))) (set Var "Replay" (from ))}) (set Var "Replay" (to )))))))))) (end (if (no Moves Next) (result Mover Win))))}))
Line 3
description: 4x6-21 board; 8 is most common, 12, 15, and 18 are also popular. Two counters in each hole in the players' outer rows. Two holes in each player's outer row are selected as misoro. Typically, the left two holes are chosen. At the beginning of the game, players choose whether to capture from one, two, or three extra holes. Sowing occurs in an anti-clockwise direction, only in the two rows belonging to the player. When the final counter lands in an occupied hole, these are picked up and sowing continues. If this final hole is one of the misoro, the player may choose to end their turn instead of continuing to sow. When the final counter lands in an empty hole in the inner row, any counters in the opposite hole in the opponent's inner row are captured. If there also are counters in the opposite hole in the opponent's outer row, these are also captured, but only if there was first a capture from the inner row hole. The player also captures the counters from the agreed-upon number of holes on the opponent's side of the board. Counters in misoro cannot be captured with one of these additional captures. Players cannot sow from a hole with a single counter unless there are no holes with multiple counters. Single counters can only be sown into an empty hole. Play continues until one player has captured all of the opponent's counters, thus winning the game.
Ludii code: (game "Misoro Tsoro (Additional Capture)" (players 2) (equipment {(mancalaBoard 4 8 None {(track "Track1" "0,E,N1,W" true P1) (track "Track2" "16,E,N1,W" true P2)}) (regions "Home" P1 (sites Track "Track1")) (regions "Home" P2 (sites Track "Track2")) (regions "Inner" P1 (difference (sites Track "Track1") (sites Bottom))) (regions "Inner" P2 (difference (sites Track "Track2") (sites Top))) (regions "Outer" P1 (sites Bottom)) (regions "Outer" P2 (sites Top)) (piece "Seed" Shared)}) (rules (start (set Count 2 (union (sites Top) (sites Bottom)))) {(phase "Misoro" (play (move Select (from (forEach (sites Mover "Outer") (= 0 (state (site ))))) (then (set State (last To) (mover ))))) (nextPhase (= 4 (count Turns)) "Playing")) (phase "Playing" (play (if (< 0 (var "ExtraCapture")) (move Select (from (forEach (sites Next) (and (= 0 (state (site ))) (< 0 (count (site )))))) (then (and {(if (< 1 (var "ExtraCapture")) (moveAgain )) (set Var "ExtraCapture" (- (var "ExtraCapture") 1)) (remove (last To)) (forEach Site (sites Board) (if (!= 0 (state (site ))) (set State (site ) (state (site )))))}))) (or (if (and (!= 0 (state (var ))) (is Prev Mover)) (move Pass)) (move Select (from (if (is Prev Mover) (sites {(var )}) (sites Mover "Home")) (if (not (all Sites (forEach (sites Mover) (< 1 (count (site )))) (= 0 (count (site ))))) (> (count (from )) 1) (and (= (count (from )) 1) (= 0 (count (trackSite Move (from ) Mover 1)))))) (then (and (sow "Track" (mover ) (if (= (count (to )) 1) (if (is In (to ) (sites Mover "Inner")) (if (> (count (if (is Mover P1) (+ (to ) 8) (- (to ) 8))) 0) (and {(remove (if (is Mover P1) (+ (to ) 8) (- (to ) 8))) (if (> (count (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2)))) 0) (remove (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2))))) (moveAgain ) (set Var "ExtraCapture" 3)}))) (and (moveAgain ) (set Var (to ))))) (forEach Site (sites Board) (if (!= 0 (state (site ))) (set State (site ) (state (site ))))))))))))} (end (forEach NonMover (all Sites (sites Player "Home") (= 0 (count (site )))) (result Player Loss)))))
Line 3
description: 4x6-28 board; 16-20 is most common, only even numbers of holes. Two counters in each hole except the leftmost on the inner row, which is left empty, and the one to its right which contains one counter. Players sow by picking up the counters in any of their holes and sowing them in an anti-clockwise direction. Sowing continues when the last counter falls into an occupied hole by picking up the counters in that hole and continuing in the same direction. When the final counter lands in an empty hole in the inner row, the counters in the opponent's hole opposite in the inner row are captured; if there are also counters in the opponent's outer row opposite, these are also captured. The player is also entitled to capture counters in any other hole on the opponent's side. The turn ends with a capture and the opponent's turn begins. Play always begins with a stylized move, where the counters are taken from the third hole from the left in the inner row, sowing and making captures as described above. Players may not sow single counters unless there are no holes on their side containing multiple counters. Play ends when one player has captured all of their opponent's counters.
Ludii code: (game "Mefuvha" (players 2) (equipment {(mancalaBoard 4 16 None {(track "Track1" "0,E,N1,W" true P1) (track "Track2" "32,E,N1,W" true P2)}) (regions "Home" P1 (sites Track "Track1")) (regions "Home" P2 (sites Track "Track2")) (regions "Inner" P1 (difference (sites Track "Track1") (sites Bottom))) (regions "Inner" P2 (difference (sites Track "Track2") (sites Top))) (piece "Seed" Shared) (hand Each)}) (rules (start {(set Count 2 (difference (union (sites P1 "Home") (sites P2 "Home")) (union (expand (intersection (sites Row 1) (sites Left)) 1 E) (expand (intersection (sites Row 2) (sites Right)) 1 W)))) (set Count 1 (union (difference (expand (intersection (sites Row 1) (sites Left)) 1 E) (sites Left)) (difference (expand (intersection (sites Row 2) (sites Right)) 1 W) (sites Right))))}) (play (if (and (is Pending) (is Prev Mover)) (move Select (from (sites Next "Home") (> (count (from )) 0)) (then (fromTo (from (last From)) (to (handSite Mover)) (count (last From))))) (priority (move Select (from (if (is Prev Mover) (sites {(last To true)}) (if (< (count Turns) 3) (if (is Mover P1) (difference (expand (intersection (sites Row 1) (sites Left)) 2 E) (expand (intersection (sites Row 1) (sites Left)) 1 E)) (difference (expand (intersection (sites Row 2) (sites Right)) 2 W) (expand (intersection (sites Row 2) (sites Right)) 1 W))) (sites Mover "Home"))) (> (count (from )) 1)) (then (sow "Track" (mover ) (if (> (count (to )) 1) (moveAgain ) (if (is In (to ) (sites Mover "Inner")) (and {(fromTo (from (to )) (to (handSite Mover)) (count (to ))) (if (> (count (if (is Mover P1) (+ (to ) 16) (- (to ) 16))) 0) (fromTo (from (if (is Mover P1) (+ (to ) 16) (- (to ) 16))) (to (handSite Mover)) (count (if (is Mover P1) (+ (to ) 16) (- (to ) 16))))) (if (> (count (if (is Mover P1) (+ (to ) (* 16 2)) (- (to ) (* 16 2)))) 0) (fromTo (from (if (is Mover P1) (+ (to ) (* 16 2)) (- (to ) (* 16 2)))) (to (handSite Mover)) (count (if (is Mover P1) (+ (to ) (* 16 2)) (- (to ) (* 16 2)))))) (set Pending) (moveAgain )})))))) (move Select (from (if (is Prev Mover) (sites {(last To true)}) (sites Mover "Home")) (= (count (from )) 1)) (then (sow "Track" (mover ) (if (> (count (to )) 1) (moveAgain ) (if (is In (to ) (sites Mover "Inner")) (and {(fromTo (from (to )) (to (handSite Mover)) (count (to ))) (if (> (count (if (is Mover P1) (+ (to ) 16) (- (to ) 16))) 0) (fromTo (from (if (is Mover P1) (+ (to ) 16) (- (to ) 16))) (to (handSite Mover)) (count (if (is Mover P1) (+ (to ) 16) (- (to ) 16))))) (if (> (count (if (is Mover P1) (+ (to ) (* 16 2)) (- (to ) (* 16 2)))) 0) (fromTo (from (if (is Mover P1) (+ (to ) (* 16 2)) (- (to ) (* 16 2)))) (to (handSite Mover)) (count (if (is Mover P1) (+ (to ) (* 16 2)) (- (to ) (* 16 2)))))) (set Pending) (moveAgain )}))))))))) (end (if (no Moves Mover) (byScore {(score P1 (+ (count Cell (handSite P1)) (count (sites P1 "Home")))) (score P2 (+ (count Cell (handSite P2)) (count (sites P2 "Home"))))})))))
Line 3
description: 4x8 board. Two counters in each hole. Opening play: Two players play simultaneously, lifting and sowing counters from their outer rows. Rules for sowing and capturing are the same as in the main phase of the game except that all holes in each player's outer rows are considered to be in opposition and back captures can be made from them. Once a counter has been sown into the inner row, this ceases and captures can only be made from the inner row. The opening ends when both players reach an empty hole, and the first player to do so begins play in the main phase. 
            
            Main phase: Play begins from any hole on the player's side of the board with counters in it. Singletons cannot move. Sowing happens in an anti-clockwise direction. If the last counter lands in an empty hole, the turn is over
            
            For capturing: Holes are in 'opposition' when one player has the front row hole occupied and the opponent has both of the holes opposite it occupied. If the last hole in a sowing is in opposition, the player takes the counters in both of the opponent's holes and places them in the empty hole from which the player lifted the counters. The player then sows the captured counters from this hole. Further captures in the sowing can occur in the same way. However, each player has two holes from which clockwise plays can be made: the leftmost hole in the outer row and the second from the left in the inner row. Clockwise moves can only be made from these holes if they immediately lead to a capture. When the captured counters are sown, starting from the same hole, they can also be sown clockwise if they lead to a capture. If they cannot lead to a capture, they are sown anti-clockwise. 
            
            Another alternative the player has is that, if the player plays clockwise from one of these holes and therefore makes a capture, the captured counters may be placed in the hole and left there, and the player may play instead from the other hole from which clockwise captures are allowed in a clockwise direction, if it leads to a capture. 
            
            The player may continue playing from this hole as above until the possibilities to move are exhausted, and then may move from any hole in an anti-clockwise direction. Multiple captures can only be made in a clockwise direction from these holes if it is made on the first sowing of the turn. Otherwise, only one clockwise capture can be made and sowing must proceed in an anti-clockwise direction. If the last counter lands on a hole that is occupied but not in opposition, these counters are picked up and sowing continues. 
            
        Play ends when one player captures all the opponent's counters or one player cannot play. The player who cannot play loses.
Ludii code: (game "Choro (Acholi)" (players 2) (equipment {(mancalaBoard 4 8 None {(track "TrackCCW1" "0,E,N1,W" true P1) (track "TrackCCW2" "16,E,N1,W" true P2) (track "TrackCW1" "7,W,N1,E" true P1) (track "TrackCW2" "24,E,S1,W" true P2)}) (regions "Home" P1 (sites Track "TrackCCW1")) (regions "Home" P2 (sites Track "TrackCCW2")) (regions "Inner" P1 (difference (sites Track "TrackCCW1") (sites Bottom))) (regions "Inner" P2 (difference (sites Track "TrackCCW2") (sites Top))) (regions "Outer" P1 (sites Bottom)) (regions "Outer" P2 (sites Top)) (piece "Seed" Shared) (map "LeftMostOuter" {(pair P1 0) (pair P2 31)}) (map "SecondLeftInner" {(pair P1 9) (pair P2 22)})}) (rules (start (set Count 2 (union (sites P1 "Home") (sites P2 "Home")))) {(phase "OuterPhase" (play (move Select (from (if (is Prev Mover) (sites {(var "Replay")}) (sites Mover "Outer")) (if (is Prev Mover) (< 0 (count (from ))) (< 1 (count (from ))))) (then (sow "TrackCCW" (mover ) (and (if (and (!= 1 (value Player Mover)) (is In (to ) (sites Mover "Inner"))) (set Value Mover 1)) (if (< 1 (count (to ))) (and (moveAgain ) (if (= 1 (value Player Mover)) (if (and {(is Occupied (if (is Mover P1) (+ (to ) 8) (- (to ) 8))) (is Occupied (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2)))) (is In (to ) (sites Mover "Inner"))}) (and {(fromTo (from (if (is Mover P1) (+ (to ) 8) (- (to ) 8))) (to (last From)) (count (if (is Mover P1) (+ (to ) 8) (- (to ) 8)))) (fromTo (from (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2)))) (to (last From)) (count (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2))))) (set Var "Replay" (from ))}) (set Var "Replay" (to ))) (if (is Occupied (if (is Mover P1) (+ (to ) (* 3 8)) (- (to ) (* 8 3)))) (and (fromTo (from (if (is Mover P1) (+ (to ) (* 3 8)) (- (to ) (* 8 3)))) (to (last From)) (count (if (is Mover P1) (+ (to ) (* 3 8)) (- (to ) (* 8 3))))) (set Var "Replay" (from ))) (set Var "Replay" (to ))))))))))) (nextPhase Mover (= 1 (count (last To true))) "MainPhase")) (phase "MainPhase" (play (or (move Select (from (if (is Prev Mover) (sites {(var "Replay")}) (sites {(mapEntry "LeftMostOuter" Mover) (mapEntry "SecondLeftInner" Mover)})) (and {(if (is Prev Mover) (< 0 (count (from ))) (< 1 (count (from )))) (is In (from ) (sites {(mapEntry "LeftMostOuter" Mover) (mapEntry "SecondLeftInner" Mover)})) (is In (trackSite Move (from ) "TrackCW" (count (from ))) (sites Mover "Inner")) (is Occupied (if (is Mover P1) (+ (trackSite Move (from ) "TrackCW" (count (from ))) 8) (- (trackSite Move (from ) "TrackCW" (count (from ))) 8))) (is Occupied (if (is Mover P1) (+ (trackSite Move (from ) "TrackCW" (count (from ))) (* 8 2)) (- (trackSite Move (from ) "TrackCW" (count (from ))) (* 8 2))))})) (then (sow "TrackCW" (mover ) (if (< 1 (count (to ))) (and (moveAgain ) (if (and {(is Occupied (if (is Mover P1) (+ (to ) 8) (- (to ) 8))) (is Occupied (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2)))) (is In (to ) (sites Mover "Inner"))}) (and {(fromTo (from (if (is Mover P1) (+ (to ) 8) (- (to ) 8))) (to (last From)) (count (if (is Mover P1) (+ (to ) 8) (- (to ) 8)))) (fromTo (from (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2)))) (to (last From)) (count (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2))))) (set Var "Replay" (from ))}) (set Var "Replay" (to )))))))) (move Select (from (if (is Prev Mover) (sites {(var "Replay")}) (sites Mover)) (if (is Prev Mover) (< 0 (count (from ))) (< 1 (count (from ))))) (then (sow "TrackCCW" (mover ) (if (< 1 (count (to ))) (and (moveAgain ) (if (and {(is Occupied (if (is Mover P1) (+ (to ) 8) (- (to ) 8))) (is Occupied (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2)))) (is In (to ) (sites Mover "Inner"))}) (and {(fromTo (from (if (is Mover P1) (+ (to ) 8) (- (to ) 8))) (to (last From)) (count (if (is Mover P1) (+ (to ) 8) (- (to ) 8)))) (fromTo (from (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2)))) (to (last From)) (count (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2))))) (set Var "Replay" (from ))}) (set Var "Replay" (to )))))))))))} (end (if (no Moves Next) (result Mover Win)))))
Line 3
description: 4x8=20 holes, with an even number per row. One counter in each hole, except the right-hand end row of the inner row. Sowing occurs in an anti-clockwise direction, only into an empty hole. When a counter lands in a hole in the inner row and the opponent's opposite inner row hole is empty, the contents of the opponent's opposite outer row hole are captured. The player who captures all of the opponent's pieces wins.
Ludii code: (game "Sute" (players 2) (equipment {(mancalaBoard 4 8 None {(track "Track1" "0,E,N1,W" true P1) (track "Track2" "16,E,N1,W" true P2)}) (regions "Home" P1 (sites Track "Track1")) (regions "Home" P2 (sites Track "Track2")) (regions "Inner" P1 (difference (sites Track "Track1") (sites Bottom))) (regions "Inner" P2 (difference (sites Track "Track2") (sites Top))) (piece "Seed" Shared)}) (rules (start (set Count 1 (difference (union (sites P1 "Home") (sites P2 "Home")) (union (intersection (sites Right) (sites Row 1)) (intersection (sites Left) (sites Row 2)))))) (play (move Select (from (sites Mover "Home") (and (> (count (from )) 0) (= 0 (count (trackSite Move (from ) 1))))) (then (sow "Track" (mover ) (if (and (= (count (if (is Mover P1) (+ (to ) 8) (- (to ) 8))) 0) (is In (to ) (sites Mover "Inner"))) (remove (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2))))))))) (end (forEach NonMover (all Sites (sites Player "Home") (= 0 (count (site )))) (result Player Loss)))))
Line 3
description: 4x8 board. Play begins with two counters in each hole. Sowing occurs in an anti-clockwise direction. When the last counter falls into an occupied hole, the counters in it are picked up and sowing continues. Sowing ends when the last counter falls into an empty hole. When this hole is in the inner row, the counters in the opponent's inner row opposite it are captured; if there are also counters in the opponent's outer row opposite, these are also captured, but not if the inner row is empty. Play continues until one player has lost all of their counters.
Ludii code: (game "Bao Ki Arabu (Zanzibar 2)" (players 2) (equipment {(mancalaBoard 4 8 None {(track "Track1" "0,E,N1,W" true P1) (track "Track2" "16,E,N1,W" true P2)}) (regions "Home" P1 (sites Track "Track1")) (regions "Home" P2 (sites Track "Track2")) (regions "Inner" P1 (difference (sites Track "Track1") (sites Bottom))) (regions "Inner" P2 (difference (sites Track "Track2") (sites Top))) (piece "Seed" Shared) (hand Each)}) (rules (start (set Count 2 (sites Board))) (play (move Select (from (if (is Prev Mover) (sites {(last To true)}) (sites Mover "Home")) (> (count (from )) 0)) (then (sow "Track" (mover ) (if (= (count (to )) 1) (if (is In (to ) (sites Mover "Inner")) (if (> (count (if (is Mover P1) (+ (to ) 8) (- (to ) 8))) 0) (and (fromTo (from (if (is Mover P1) (+ (to ) 8) (- (to ) 8))) (to (handSite Mover)) (count (if (is Mover P1) (+ (to ) 8) (- (to ) 8)))) (if (> (count (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2)))) 0) (fromTo (from (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2)))) (to (handSite Mover)) (count (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2))))))))) (moveAgain )))))) (end (if (no Moves Mover) (byScore {(score P1 (+ (count Cell (handSite P1)) (count (sites P1 "Home")))) (score P2 (+ (count Cell (handSite P2)) (count (sites P2 "Home"))))})))))
Line 3
description: 4x8 board. Two counters in each hole, the holes in the inner row are then vacated. These counters become the \"store.\" Sowing occurs in an anti-clockwise direction in the player's two rows. When the final counter of a sowing lands in any occupied hole, the contents of the opponent's inner row holes opposite are captured. If there are also counters in the opponent's outer hole opposite, these are also captured, but only if there are counters in the opponent's inner hole. Captured counters are then sown from the hole that the sowing began. If the final counter lands in an occupied hole and capturing cannot happen, these counters are picked up and sowing continues. At any time during the game if a player is running low on counters, they may enter counters from the \"store\" and add one counter to each hole. The player who is unable to move loses.
Ludii code: (game "Mwambulula" (players 2) (equipment {(mancalaBoard 4 8 None {(track "Track1" "0,E,N1,W" true P1) (track "Track2" "16,E,N1,W" true P2)}) (regions "Home" P1 (sites Track "Track1")) (regions "Home" P2 (sites Track "Track2")) (regions "Inner" P1 (difference (sites Track "Track1") (sites Bottom))) (regions "Inner" P2 (difference (sites Track "Track2") (sites Top))) (piece "Seed" Shared) (hand Each)}) (rules (start (set Count 2 (union (sites P1 "Home") (sites P2 "Home")))) {(phase "Opening" (play (move (from (sites Mover "Inner") (is Occupied (from ))) (to Cell (handSite Mover)) 2)) (nextPhase Mover (all Sites (sites Mover "Inner") (= 0 (count (site )))) "Sowing")) (phase "Sowing" (play (or (move Select (from (if (is Prev Mover) (sites {(last To true)}) (sites Mover "Home")) (> (count (from )) 0)) (then (sow "Track" (mover ) (if (< 1 (count (to ))) (if (is In (to ) (sites Mover "Inner")) (if (is Occupied (if (is Mover P1) (+ (to ) 8) (- (to ) 8))) (and {(fromTo (from (if (is Mover P1) (+ (to ) 8) (- (to ) 8))) (to (last From)) (count (if (is Mover P1) (+ (to ) 8) (- (to ) 8)))) (if (is Occupied (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2)))) (fromTo (from (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2)))) (to (last From)) (count (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2)))))) (sow (last From) (+ (count (if (is Mover P1) (+ (to ) 8) (- (to ) 8))) (count (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2))))) "Track" (mover ))}) (moveAgain )) (if (is Occupied (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2)))) (and {(fromTo (from (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2)))) (to (last From)) (count (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2))))) (if (is Occupied (if (is Mover P1) (+ (to ) (* 8 3)) (- (to ) (* 8 3)))) (fromTo (from (if (is Mover P1) (+ (to ) (* 8 3)) (- (to ) (* 8 3)))) (to (last From)) (count (if (is Mover P1) (+ (to ) (* 8 3)) (- (to ) (* 8 3)))))) (sow (last From) (+ (count (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2)))) (count (if (is Mover P1) (+ (to ) (* 8 3)) (- (to ) (* 8 3))))) "Track" (mover ))}) (moveAgain ))))))) (if (and (not (is Prev Mover)) (is Occupied Cell (handSite Mover))) (move Select (from Cell (handSite Mover)) (then (forEach Site (sites Mover "Home") (fromTo (from Cell (handSite Mover)) (to (site ))))))))))} (end (forEach NonMover (no Moves Player) (result Player Loss)))))
Line 3
description: 4x7 board. Three counters in each hole in the outer row; before beginning each player rearranges these as they wish, with the following rules: The leftmost hole in the outer row must have the most counters; Each hole must have equal to or less than the number of the counters as the hole on its left; there can be a maximum of two holes with one counter in the inner row. Initial phase: Sowing occurs in an anti-clockwise direction, and when a counter lands in an occupied hole the sowing continues. When the final counter lands in an empty hole, the turn ends. If the empty hole is in the player's inner row, counters in the opponent's inner row opposite are captured, and if there are also counters in the opponent's outer row hole opposite, these are also taken. The initial phase ends for a player when they have one counter in each hole. After this, players can only move single counters into empty holes. The player who captures all of the opponent's counters wins.
Ludii code: (game "Quiela" (players 2) (equipment {(mancalaBoard 4 7 None {(track "TrackCCW1" "0,E,N1,W" true P1) (track "TrackCCW2" "14,E,N1,W" true P2)}) (regions "Home" P1 (sites Track "TrackCCW1")) (regions "Home" P2 (sites Track "TrackCCW2")) (regions "Inner" P1 (difference (sites Track "TrackCCW1") (sites Bottom))) (regions "Inner" P2 (difference (sites Track "TrackCCW2") (sites Top))) (regions "Outer" P1 (sites Bottom)) (regions "Outer" P2 (sites Top)) (piece "Seed" Shared) (map "LeftMost" {(pair P1 0) (pair P2 27)}) (hand Each)}) (rules (start (set Count 3 (union (sites P1 "Outer") (sites P2 "Outer")))) {(phase "Rearrangement" (play (or (move (from (sites Mover "Home") (is Occupied (from ))) (to (difference (sites Mover) (from )))) (if (and {(all Sites (difference (sites Mover "Home") (mapEntry "LeftMost" Mover)) (> (count (mapEntry Mover)) (count (site )))) (all Sites (sites Mover "Home") (if (= (site ) (if (is Mover P1) (ahead (site ) W) (ahead (site ) E))) true (<= (count (site )) (count (if (is Mover P1) (ahead (site ) W) (ahead (site ) E)))))) (>= 2 (count Sites (forEach (sites Mover "Inner") (= 1 (count (site ))))))}) (move Pass)))) (nextPhase (all Passed) "InitialPhase")) (phase "InitialPhase" (play (move Select (from (if (is Prev Mover) (sites {(last To true)}) (sites Mover "Home")) (is Occupied (from ))) (then (sow "TrackCCW" (mover ) (if (< 1 (count (to ))) (moveAgain ) (if (is In (to ) (sites Mover "Inner")) (if (is Occupied (if (is Mover P1) (+ (to ) 7) (- (to ) 7))) (and (fromTo (from (if (is Mover P1) (+ (to ) 7) (- (to ) 7))) (to (handSite Mover)) (count (if (is Mover P1) (+ (to ) 7) (- (to ) 7)))) (if (is Occupied (if (is Mover P1) (+ (to ) (* 7 2)) (- (to ) (* 7 2)))) (fromTo (from (if (is Mover P1) (+ (to ) (* 7 2)) (- (to ) (* 7 2)))) (to (handSite Mover)) (count (if (is Mover P1) (+ (to ) (* 7 2)) (- (to ) (* 7 2)))))))))))))) (nextPhase Mover (all Sites (sites Mover "Home") (> 2 (count (site )))) "MainPhase")) (phase "MainPhase" (play (move Select (from (if (is Prev Mover) (sites {(last To true)}) (sites Mover "Home")) (if (< 1 (count (from ))) true (if (= 1 (count (from ))) (is Empty (trackSite Move (from ) "TrackCCW" 1))))) (then (sow "TrackCCW" (mover ) (if (< 1 (count (to ))) (moveAgain ) (if (is In (to ) (sites Mover "Inner")) (if (is Occupied (if (is Mover P1) (+ (to ) 7) (- (to ) 7))) (and (fromTo (from (if (is Mover P1) (+ (to ) 7) (- (to ) 7))) (to (handSite Mover)) (count (if (is Mover P1) (+ (to ) 7) (- (to ) 7)))) (if (is Occupied (if (is Mover P1) (+ (to ) (* 7 2)) (- (to ) (* 7 2)))) (fromTo (from (if (is Mover P1) (+ (to ) (* 7 2)) (- (to ) (* 7 2)))) (to (handSite Mover)) (count (if (is Mover P1) (+ (to ) (* 7 2)) (- (to ) (* 7 2)))))))))))))))} (end (forEach NonMover (all Sites (sites Player "Home") (= 0 (count (site )))) (result Player Loss)))))
Line 3
description: 4x4-16 board, played only along the perimeter. Three counters per hole. Any number of players. Holes are distributed equally among the players. Sowing occurs in a clockwise direction. Counters are sown one per occupied hole, two per empty hole. Each player owns the holes in which their counters are located at the beginning of their turn, and they must sow from the rightmost hole. If the final counter of a sowing falls into an empty hole, the player sows again from the rightmost hole. Alternatively, a player may place all of the counters from the rightmost counter into the next hole, but this cannot be done after a move. When counters fall into holes belonging to an opponent, these hole and the counters in it are captured by the player, but remain in play. When a player has a single counter and empty holes in from of it, this counter leaps to the next hole occupied by the opponent. The player who captures all of the opponent's holes wins.
Ludii code: (game "Mwendo" (players 4) (equipment {(mancalaBoard 4 10 None (track "Track" "10,N,E,S,W" true)) (piece "Seed" Each) (regions P1 (sites {0 1 2 3 4 5})) (regions P2 (sites {6 7 8 9 19 29})) (regions P3 (sites {39 38 37 36 35 34})) (regions P4 (sites {33 32 31 30 20 10}))}) (rules (start {(place "Seed1" (sites P1) {3}) (place "Seed2" (sites P2) {3}) (place "Seed3" (sites P3) {3}) (place "Seed4" (sites P4) {3})}) (play (if (!= 1 (count Pieces Mover)) (or (move Select (from (trackSite FirstSite (trackSite FirstSite (not (is Mover (who (to ))))) (is Mover (who (to ))))) (then (sow (if (is Empty (to )) 2 1) (if (and (!= (mover ) (what (to ))) (is Occupied (to ))) (and (remove (to ) (count (to ))) (add (piece (id "Seed" Mover)) (to (to )) (count (to ))))) (if (= 2 (count (to ))) (moveAgain ))))) (if (not (is Prev Mover)) (move (from (trackSite FirstSite (trackSite FirstSite (not (is Mover (who (to ))))) (is Mover (who (to ))))) (to (trackSite Move (trackSite FirstSite (trackSite FirstSite (not (is Mover (who (to ))))) (is Mover (who (to )))) 1) (apply (if (and (!= (mover ) (what (to ))) (is Occupied (to ))) (and (remove (to ) (count (to ))) (add (piece (id "Seed" Mover)) (to (to )) (count (to ))))))) (count (trackSite FirstSite (trackSite FirstSite (not (is Mover (who (to ))))) (is Mover (who (to )))))))) (move (from (trackSite FirstSite (trackSite FirstSite (not (is Mover (who (to ))))) (is Mover (who (to ))))) (to (trackSite FirstSite (from ) (is Enemy (who (to )))) (apply (and (remove (to ) (count (to ))) (add (piece (id "Seed" Mover)) (to (to )) (count (to ))))))))) (end (forEach NonMover (no Pieces Player) (result Player Loss)))))
Line 3
description: 4x6-21 board; 8 is most common, 12, 15, and 18 are also popular. Two counters in each hole in the players' outer rows. Two holes in each player's outer row are selected as misoro. Typically, the left two holes are chosen. Sowing occurs in an anti-clockwise direction, only in the two rows belonging to the player. When the final counter lands in an occupied hole, these are picked up and sowing continues. If this final hole is one of the misoro, the player may choose to end their turn instead of continuing to sow. When the final counter lands in an empty hole in the inner row, any counters in the opposite hole in the opponent's inner row are captured. If there also are counters in the opposite hole in the opponent's outer row, these are also captured, but only if there was first a capture from the inner row hole. Players cannot sow from a hole with a single counter unless there are no holes with multiple counters. Single counters can only be sown into an empty hole. Play continues until one player has captured all of the opponent's counters, thus winning the game.
        
Ludii code: (game "Misoro Tsoro" (players 2) (equipment {(mancalaBoard 4 8 None {(track "Track1" "0,E,N1,W" true P1) (track "Track2" "16,E,N1,W" true P2)}) (regions "Home" P1 (sites Track "Track1")) (regions "Home" P2 (sites Track "Track2")) (regions "Inner" P1 (difference (sites Track "Track1") (sites Bottom))) (regions "Inner" P2 (difference (sites Track "Track2") (sites Top))) (regions "Outer" P1 (sites Bottom)) (regions "Outer" P2 (sites Top)) (piece "Seed" Shared)}) (rules (start (set Count 2 (union (sites Top) (sites Bottom)))) {(phase "Misoro" (play (move Select (from (forEach (sites Mover "Outer") (= 0 (state (site ))))) (then (set State (last To) (mover ))))) (nextPhase (= 4 (count Turns)) "Playing")) (phase "Playing" (play (or (if (and (!= 0 (state (var ))) (is Prev Mover)) (move Pass)) (move Select (from (if (is Prev Mover) (sites {(var )}) (sites Mover "Home")) (if (not (all Sites (forEach (sites Mover) (< 1 (count (site )))) (= 0 (count (site ))))) (> (count (from )) 1) (and (= (count (from )) 1) (= 0 (count (trackSite Move (from ) Mover 1)))))) (then (and (sow "Track" (mover ) (if (= (count (to )) 1) (if (is In (to ) (sites Mover "Inner")) (if (> (count (if (is Mover P1) (+ (to ) 8) (- (to ) 8))) 0) (and (remove (if (is Mover P1) (+ (to ) 8) (- (to ) 8))) (if (> (count (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2)))) 0) (remove (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2)))))))) (and (moveAgain ) (set Var (to ))))) (forEach Site (sites Board) (if (!= 0 (state (site ))) (set State (site ) (state (site )))))))))))} (end (forEach NonMover (all Sites (sites Player "Home") (= 0 (count (site )))) (result Player Loss)))))
Line 3
description: 4x6-21 board; 8 is most common, 12, 15, and 18 are also popular. Two counters in each hole in the players' outer rows. Sowing occurs in an anti-clockwise direction, only in the two rows belonging to the player. When the final counter lands in an occupied hole, these are picked up and sowing continues. When the final counter lands in an empty hole in the inner row, any counters in the opposite hole in the opponent's inner row are captured. If there also are counters in the opposite hole in the opponent's outer row, these are also captured, but only if there was first a capture from the inner row hole. Players cannot sow from a hole with a single counter unless there are no holes with multiple counters. Single counters can only be sown into an empty hole. Play continues until one player has captured all of the opponent's counters, thus winning the game.
Ludii code: (game "Tsoro" (players 2) (equipment {(mancalaBoard 4 8 None {(track "Track1" "0,E,N1,W" true P1) (track "Track2" "16,E,N1,W" true P2)}) (regions "Home" P1 (sites Track "Track1")) (regions "Home" P2 (sites Track "Track2")) (regions "Inner" P1 (difference (sites Track "Track1") (sites Bottom))) (regions "Inner" P2 (difference (sites Track "Track2") (sites Top))) (piece "Seed" Shared)}) (rules (start (set Count 2 (union (sites Top) (sites Bottom)))) (play (move Select (from (if (is Prev Mover) (sites {(last To true)}) (sites Mover "Home")) (if (not (all Sites (forEach (sites Mover) (< 1 (count (site )))) (= 0 (count (site ))))) (> (count (from )) 1) (and (= (count (from )) 1) (= 0 (count (trackSite Move (from ) Mover 1)))))) (then (sow "Track" (mover ) (if (= (count (to )) 1) (if (is In (to ) (sites Mover "Inner")) (if (> (count (if (is Mover P1) (+ (to ) 8) (- (to ) 8))) 0) (and (remove (if (is Mover P1) (+ (to ) 8) (- (to ) 8))) (if (> (count (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2)))) 0) (remove (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2)))))))) (moveAgain )))))) (end (forEach NonMover (all Sites (sites Player "Home") (= 0 (count (site )))) (result Player Loss)))))
Line 3
description: 4x13-19 board. Two counters in every hole, except the leftmost in both of a player's rows, which are empty, and the second from the left in the inner row, which has one. Sowing occurs in an anti-clockwise direction. When the final counter lands in an occupied hole, these counters are picked up and sowing continues. Captures are made when the final counters lands in an empty hole in the inner row, capturing the contents of the opponent's opposite inner row hole, as well as the contents of the outer row hole only if there was a capture from the inner row hole. Captures from extra holes are also made, which are graduated based on the number of captures the player has made. On their first turn, players sow from the third hole from the left in the front row. This triggers a capture of the counters in the opposite holes in the opponent's inner and outer rows, plus the contents of any other five holes on the opponent's side of the board. In subsequent turns, sowing must occur from a hole which follows an empty hole according to the circuit of the holes. On their second capture, the player captures three extra holes. All other subsequent captures capture from two extra holes. Sowing a single counter cannot result in a capture. The player who captures all of their opponent's counters wins.
Ludii code: (game "Tsoro (Baia)" (players 2) (equipment {(mancalaBoard 4 13 None {(track "TrackCCW1" "0,E,N1,W" true P1) (track "TrackCCW2" "26,E,N1,W" true P2) (track "TrackCW1" "12,W,N1,E" true P1) (track "TrackCW2" "39,E,S1,W" true P2)}) (regions "Home" P1 (sites Track "TrackCCW1")) (regions "Home" P2 (sites Track "TrackCCW2")) (regions "Inner" P1 (difference (sites Track "TrackCCW1") (sites Bottom))) (regions "Inner" P2 (difference (sites Track "TrackCCW2") (sites Top))) (regions "Outer" P1 (sites Bottom)) (regions "Outer" P2 (sites Top)) (regions "FirstMove" P1 (difference (expand (intersection (difference (sites Track "TrackCCW1") (sites Bottom)) (sites Left)) 2 E) (expand (intersection (difference (sites Track "TrackCCW1") (sites Bottom)) (sites Left)) E))) (regions "FirstMove" P2 (difference (expand (intersection (difference (sites Track "TrackCCW2") (sites Top)) (sites Right)) 2 W) (expand (intersection (difference (sites Track "TrackCCW2") (sites Top)) (sites Right)) W))) (piece "Seed" Shared) (hand Each)}) (rules (start {(set Count 2 (difference (sites P1 "Outer") (sites Left))) (set Count 2 (difference (sites P2 "Outer") (sites Right))) (set Count 2 (difference (sites P1 "Inner") (expand (sites Left)))) (set Count 2 (difference (sites P2 "Inner") (expand (sites Right)))) (set Count 1 (difference (sites P1 "Inner") (union (sites Left) (difference (sites P1 "Inner") (expand (sites Left)))))) (set Count 1 (difference (sites P2 "Inner") (union (sites Right) (difference (sites P2 "Inner") (expand (sites Right))))))}) {(phase "FirstTurn" (play (if (>= 0 (var "FreeCapture")) (move Select (from (sites Mover "FirstMove")) (then (sow "TrackCCW" (mover ) (if (is In (to ) (sites Mover "Inner")) (if (is Occupied (if (is Mover P1) (+ (to ) 13) (- (to ) 13))) (and {(fromTo (from (if (is Mover P1) (+ (to ) 13) (- (to ) 13))) (to (handSite Mover)) (count (if (is Mover P1) (+ (to ) 13) (- (to ) 13)))) (if (is Occupied (if (is Mover P1) (+ (to ) (* 13 2)) (- (to ) (* 13 2)))) (fromTo (from (if (is Mover P1) (+ (to ) (* 13 2)) (- (to ) (* 13 2)))) (to (handSite Mover)) (count (if (is Mover P1) (+ (to ) (* 13 2)) (- (to ) (* 13 2)))))) (set Value Mover (+ 1 (value Player Mover))) (set Var "FreeCapture" 5) (moveAgain )})))))) (move (from (sites Next "Home") (and (is Occupied (from )) (not (is In (from ) (sites Next "FirstMove"))))) (to (handSite Mover)) (count (from )) (then (and (set Var "FreeCapture" (- (var "FreeCapture") 1)) (if (< 1 (var "FreeCapture")) (moveAgain ))))))) (nextPhase Mover (not (is Next Mover)) "Main")) (phase "Main" (play (if (>= 0 (var "FreeCapture")) (or (move Select (from (if (is Prev Mover) (sites {(var "Replay")}) (sites Mover "Home")) (and (< 1 (count (from ))) (if (is Prev Mover) true (is Empty (trackSite Move (from ) "TrackCW" 1))))) (then (sow "TrackCCW" (mover ) (if (< 1 (count (to ))) (and {(moveAgain ) (set Var "Replay" (to ))}) (if (is In (to ) (sites Mover "Inner")) (if (is Occupied (if (is Mover P1) (+ (to ) 13) (- (to ) 13))) (and {(fromTo (from (if (is Mover P1) (+ (to ) 13) (- (to ) 13))) (to (handSite Mover)) (count (if (is Mover P1) (+ (to ) 13) (- (to ) 13)))) (if (is Occupied (if (is Mover P1) (+ (to ) (* 13 2)) (- (to ) (* 13 2)))) (fromTo (from (if (is Mover P1) (+ (to ) (* 13 2)) (- (to ) (* 13 2)))) (to (handSite Mover)) (count (if (is Mover P1) (+ (to ) (* 13 2)) (- (to ) (* 13 2)))))) (set Value Mover (+ 1 (value Player Mover))) (if (= 0 (value Player Mover)) (set Var "FreeCapture" 3) (set Var "FreeCapture" 2)) (moveAgain )}))))))) (move Select (from (if (is Prev Mover) (sites {(var "Replay")}) (sites Mover "Home")) (and (= 1 (count (from ))) (if (is Prev Mover) true (is Empty (trackSite Move (from ) "TrackCW" 1))))) (then (sow "TrackCCW" (mover ) (if (< 1 (count (to ))) (and {(moveAgain ) (set Var "Replay" (to ))})))))) (move (from (sites Next "Home") (and (is Occupied (from )) (not (is In (from ) (sites Next "FirstMove"))))) (to (handSite Mover)) (count (from )) (then (and (set Var "FreeCapture" (- (var "FreeCapture") 1)) (if (< 1 (var "FreeCapture")) (moveAgain ))))))))} (end (forEach NonMover (all Sites (sites Player) (= 0 (count (site )))) (result Player Loss)))))
Line 3
description: 4x6-16 board. Play begins with two counters in each hole. The first move must be from the inner row. Play begins from any of the player's holes, sowing clockwise. When the final counter lands in an occupied hole, these are picked up and sowing continues. Captures are made when the final counter falls into an empty hole in the inner row, and the opponent's hole opposite contains counters. If it is, they are captured, and if the hole in to outer row opposite also contains counters, these are also captured. If the final counter falls into an empty hole and a capture cannot happen, the turn is over. Play ends when one player cannot move.
Ludii code: (game "Muvalavala (Luena)" (players 2) (equipment {(mancalaBoard 4 6 None {(track "Track1" "5,W,N1,E" true P1) (track "Track2" "17,W,N1,E" true P2)}) (regions "Home" P1 (sites Track "Track1")) (regions "Home" P2 (sites Track "Track2")) (regions "Inner" P1 (difference (sites Track "Track1") (sites Bottom))) (regions "Inner" P2 (difference (sites Track "Track2") (sites Top))) (piece "Seed" Shared) (hand Each)}) (rules (start (set Count 2 (union (sites P1 "Home") (sites P2 "Home")))) {(phase "Opening" (play (move Select (from (if (is Prev Mover) (sites {(last To true)}) (sites Mover "Inner")) (> (count (from )) 0)) (then (sow "Track" (mover ) (if (= (count (to )) 1) (if (is In (to ) (sites Mover "Inner")) (if (> (count (if (is Mover P1) (+ (to ) 6) (- (to ) 6))) 0) (and (fromTo (from (if (is Mover P1) (+ (to ) 6) (- (to ) 6))) (to (handSite Mover)) (count (if (is Mover P1) (+ (to ) 6) (- (to ) 6)))) (if (> (count (if (is Mover P1) (+ (to ) (* 6 2)) (- (to ) (* 6 2)))) 0) (fromTo (from (if (is Mover P1) (+ (to ) (* 6 2)) (- (to ) (* 6 2)))) (to (handSite Mover)) (count (if (is Mover P1) (+ (to ) (* 6 2)) (- (to ) (* 6 2))))))))) (moveAgain )))))) (nextPhase (>= (count Turns) 2) "Playing")) (phase "Playing" (play (move Select (from (if (is Prev Mover) (sites {(last To true)}) (sites Mover "Home")) (> (count (from )) 0)) (then (sow "Track" (mover ) (if (= (count (to )) 1) (if (is In (to ) (sites Mover "Inner")) (if (> (count (if (is Mover P1) (+ (to ) 6) (- (to ) 6))) 0) (and (fromTo (from (if (is Mover P1) (+ (to ) 6) (- (to ) 6))) (to (handSite Mover)) (count (if (is Mover P1) (+ (to ) 6) (- (to ) 6)))) (if (> (count (if (is Mover P1) (+ (to ) (* 6 2)) (- (to ) (* 6 2)))) 0) (fromTo (from (if (is Mover P1) (+ (to ) (* 6 2)) (- (to ) (* 6 2)))) (to (handSite Mover)) (count (if (is Mover P1) (+ (to ) (* 6 2)) (- (to ) (* 6 2))))))))) (moveAgain )))))))} (end (if (no Moves Mover) (byScore {(score P1 (+ (count Cell (handSite P1)) (count (sites P1)))) (score P2 (+ (count Cell (handSite P2)) (count (sites P2))))})))))
Line 3
description: 4x7-10 board (seven most common). Three counters in each hole, except the leftmost four in the inner row which have, from right to left: 0-0-1-2. On the first turn, sowing occurs in a clockwise direction. On the second turn, the player may sow in either direction, but must continue in the chosen direction for the rest of the game. When the final counter lands in an empty hole in the inner row, the contents of the hole in the opponent's inner row are also captured. If there are also contents in the opponent's outer row hole opposite, these are also taken. When a capture is made, the player may then capture the counters in any one of the opponent's holes as well. If the final counter lands in an occupied hole, the player picks up these counters and continues sowing. The player who captures all of the opponent's counters wins.
Ludii code: (game "Chisolo" (players 2) (equipment {(mancalaBoard 4 7 None {(track "TrackCCW1" "0,E,N1,W" true P1) (track "TrackCCW2" "14,E,N1,W" true P2) (track "TrackCW1" "6,W,N1,E" true P1) (track "TrackCW2" "21,E,S1,W" true P2)}) (regions "Home" P1 (sites Track "TrackCCW1")) (regions "Home" P2 (sites Track "TrackCCW2")) (regions "Inner" P1 (difference (sites Track "TrackCCW1") (sites Bottom))) (regions "Inner" P2 (difference (sites Track "TrackCCW2") (sites Top))) (regions "FourLeftInner" P1 (sites {7 8 9 10})) (regions "FourLeftInner" P2 (sites {17 18 19 20})) (piece "Seed" Shared) (hand Each)}) (rules (start {(set Count 3 (difference (union (sites P1 "Home") (sites P2 "Home")) (union (sites P1 "FourLeftInner") (sites P2 "FourLeftInner")))) (set Count 1 (sites {8 19})) (set Count 2 (sites {7 20}))}) {(phase "SowingCW" (play (if (and (is Prev Mover) (= (var "CaptureOther") 1)) (move (from (sites Next) (is Occupied (from ))) (to (handSite Mover)) (count (from )) (then (set Var "CaptureOther" 0))) (move Select (from (if (is Prev Mover) (sites {(last To true)}) (sites Mover "Home")) (is Occupied (from ))) (then (sow "TrackCW" (mover ) (if (< 1 (count (to ))) (moveAgain ) (if (is In (to ) (sites Mover "Inner")) (if (is Occupied (if (is Mover P1) (+ (to ) 7) (- (to ) 7))) (and {(fromTo (from (if (is Mover P1) (+ (to ) 7) (- (to ) 7))) (to (handSite Mover)) (count (if (is Mover P1) (+ (to ) 7) (- (to ) 7)))) (if (is Occupied (if (is Mover P1) (+ (to ) (* 7 2)) (- (to ) (* 7 2)))) (fromTo (from (if (is Mover P1) (+ (to ) (* 7 2)) (- (to ) (* 7 2)))) (to (handSite Mover)) (count (if (is Mover P1) (+ (to ) (* 7 2)) (- (to ) (* 7 2)))))) (moveAgain ) (set Var "CaptureOther" 1)}))))))))) (nextPhase Mover (not (is Next Mover)) "Sowing")) (phase "Sowing" (play (if (and (is Prev Mover) (= (var "CaptureOther") 1)) (move (from (sites Next) (is Occupied (from ))) (to (handSite Mover)) (count (from )) (then (set Var "CaptureOther" 0))) (or (if (or (<= (value Player Mover) 0) (= (value Player Mover) 1)) (move Select (from (if (is Prev Mover) (sites {(last To true)}) (sites Mover "Home")) (is Occupied (from ))) (then (and (sow "TrackCW" (mover ) (if (< 1 (count (to ))) (moveAgain ) (if (is In (to ) (sites Mover "Inner")) (if (is Occupied (if (is Mover P1) (+ (to ) 7) (- (to ) 7))) (and {(fromTo (from (if (is Mover P1) (+ (to ) 7) (- (to ) 7))) (to (handSite Mover)) (count (if (is Mover P1) (+ (to ) 7) (- (to ) 7)))) (if (is Occupied (if (is Mover P1) (+ (to ) (* 7 2)) (- (to ) (* 7 2)))) (fromTo (from (if (is Mover P1) (+ (to ) (* 7 2)) (- (to ) (* 7 2)))) (to (handSite Mover)) (count (if (is Mover P1) (+ (to ) (* 7 2)) (- (to ) (* 7 2)))))) (moveAgain ) (set Var "CaptureOther" 1)}))))) (set Value Mover 1))))) (if (or (<= (value Player Mover) 0) (= (value Player Mover) 2)) (move Select (from (if (is Prev Mover) (sites {(last To true)}) (sites Mover "Home")) (is Occupied (from ))) (then (and (sow "TrackCCW" (mover ) (if (< 1 (count (to ))) (moveAgain ) (if (is In (to ) (sites Mover "Inner")) (if (is Occupied (if (is Mover P1) (+ (to ) 7) (- (to ) 7))) (and {(fromTo (from (if (is Mover P1) (+ (to ) 7) (- (to ) 7))) (to (handSite Mover)) (count (if (is Mover P1) (+ (to ) 7) (- (to ) 7)))) (if (is Occupied (if (is Mover P1) (+ (to ) (* 7 2)) (- (to ) (* 7 2)))) (fromTo (from (if (is Mover P1) (+ (to ) (* 7 2)) (- (to ) (* 7 2)))) (to (handSite Mover)) (count (if (is Mover P1) (+ (to ) (* 7 2)) (- (to ) (* 7 2)))))) (moveAgain ) (set Var "CaptureOther" 1)}))))) (set Value Mover 2)))))))))} (end (forEach Player (no Moves Player) (result Player Loss)))))
Line 3
description: 4x8 board. Two counters in each hole. Play begins with each player taking the two counters in the leftmost hole of either the inner or outer row and placing them both in the following hole in an anti-clockwise direction, and continuing with the two counters in the next hole, until there is an alternating pattern of holes with four counters followed by empty holes in all of the player's holes. On the next turn, the player sows from one of the holes on the end of one of their rows. Sowing occurs in an anti-clockwise direction. After this turn, sowing can be from any hole on the player's side of the board. Single counters cannot be sown.  When the final counter falls into an occupied hole, the player picks up these counters and continues to sow. When the final counter is supposed to fall into an empty hole, it is not placed there but placed in the next hole. When the final counter falls into an occupied hole in the inner row, any counters in the opponent's two holes opposite are captured. These are then sown on the player's side of the board, beginning with the first occupied hole immediately after an empty hole before the hole from which the capture was made. Play continues until one player can no longer play, and the opponent wins.
Ludii code: (game "Mangola" (players 2) (equipment {(mancalaBoard 4 8 None {(track "TrackCCW1" "0,E,N1,W" true P1) (track "TrackCCW2" "16,E,N1,W" true P2) (track "TrackCW1" "7,W,N1,E" true P1) (track "TrackCW2" "23,W,N1,E" true P2)}) (regions "Home" P1 (sites Track "TrackCCW1")) (regions "Home" P2 (sites Track "TrackCCW2")) (regions "Inner" P1 (difference (sites Track "TrackCCW1") (sites Bottom))) (regions "Inner" P2 (difference (sites Track "TrackCCW2") (sites Top))) (regions "LeftMost" P1 (intersection (sites Left) (sites Track "TrackCCW1"))) (regions "LeftMost" P2 (intersection (sites Right) (sites Track "TrackCCW2"))) (regions "EndHoles" P1 (intersection (union (sites Left) (sites Right)) (sites Track "TrackCCW1"))) (regions "EndHoles" P2 (intersection (union (sites Left) (sites Right)) (sites Track "TrackCCW2"))) (piece "Seed" Shared) (hand Each)}) (rules (start (set Count 2 (union (sites P1 "Home") (sites P2 "Home")))) {(phase "Opening1" (play (move Select (from (if (is Prev Mover) (sites {(trackSite Move (last To true) "TrackCCW" 1)}) (sites Mover "LeftMost")) (> (count (from )) 0)) (then (sow 2 "TrackCCW" (mover ) (if (is Occupied (trackSite Move (to ) "TrackCCW" 1)) (moveAgain )))))) (nextPhase Mover (not (is Next Mover)) "Opening2")) (phase "Opening2" (play (move Select (from (if (is Prev Mover) (sites {(var "Replay")}) (sites Mover "EndHoles")) (> (count (from )) 1)) (then (sow "TrackCCW" (mover ) (if (< 1 (count (to ))) (and {(moveAgain ) (set Var "Replay" (to )) (if (and {(is In (to ) (sites Mover "Inner")) (is Occupied (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2)))) (is Occupied (if (is Mover P1) (+ (to ) 8) (- (to ) 8)))}) (and {(fromTo (from (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2)))) (to (trackSite Move (trackSite FirstSite Mover "TrackCW" (to ) (is Empty (to ))) "TrackCCW" 1)) (count (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2))))) (fromTo (from (if (is Mover P1) (+ (to ) 8) (- (to ) 8))) (to (trackSite Move (trackSite FirstSite Mover "TrackCW" (to ) (is Empty (to ))) "TrackCCW" 1)) (count (if (is Mover P1) (+ (to ) 8) (- (to ) 8)))) (sow (trackSite Move (trackSite FirstSite Mover "TrackCW" (to ) (is Empty (to ))) "TrackCCW" 1) (+ (count (if (is Mover P1) (+ (to ) 8) (- (to ) 8))) (count (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2))))) "TrackCCW" (mover ))}))}) (fromTo (from (to )) (to (trackSite Move (to ) "TrackCCW" 1)) 1)))))) (nextPhase Mover (not (is Next Mover)) "Sowing")) (phase "Sowing" (play (move Select (from (if (is Prev Mover) (sites {(var "Replay")}) (sites Mover "Home")) (> (count (from )) 1)) (then (sow "TrackCCW" (mover ) (if (< 1 (count (to ))) (and {(moveAgain ) (set Var "Replay" (to )) (if (and {(is In (to ) (sites Mover "Inner")) (is Occupied (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2)))) (is Occupied (if (is Mover P1) (+ (to ) 8) (- (to ) 8)))}) (and {(fromTo (from (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2)))) (to (trackSite Move (trackSite FirstSite Mover "TrackCW" (to ) (is Empty (to ))) "TrackCCW" 1)) (count (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2))))) (fromTo (from (if (is Mover P1) (+ (to ) 8) (- (to ) 8))) (to (trackSite Move (trackSite FirstSite Mover "TrackCW" (to ) (is Empty (to ))) "TrackCCW" 1)) (count (if (is Mover P1) (+ (to ) 8) (- (to ) 8)))) (sow (trackSite Move (trackSite FirstSite Mover "TrackCW" (to ) (is Empty (to ))) "TrackCCW" 1) (+ (count (if (is Mover P1) (+ (to ) 8) (- (to ) 8))) (count (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2))))) "TrackCCW" (mover ))}))}) (fromTo (from (to )) (to (trackSite Move (to ) "TrackCCW" 1)) 1)))))))} (end (forEach Player (no Moves Player) (result Player Loss)))))
Line 3
description: 4x5 or 8 board. One counter in each hole.  Players alternate turns picking up the counters in one of their holes and sowing them in an anti-clockwise direction. When the final counter lands in a hole with counters, these counters are picked up and sowing continues. When the final counter lands in an empty hole in the inner row, any counters in the opponent's opposite inner row hole are captured, and if this capture was possible, any counters in the outer row hole are also captured. The player who captures all of the opponent's counters wins.
Ludii code: (game "Nchayo" (players 2) (equipment {(mancalaBoard 4 5 None {(track "Track1" "0,E,N1,W" true P1) (track "Track2" "10,E,N1,W" true P2)}) (regions "Home" P1 (sites Track "Track1")) (regions "Home" P2 (sites Track "Track2")) (regions "Inner" P1 (difference (sites Track "Track1") (sites Bottom))) (regions "Inner" P2 (difference (sites Track "Track2") (sites Top))) (piece "Seed" Shared) (hand Each)}) (rules (start (set Count 1 (sites Board))) (play (move Select (from (if (is Prev Mover) (sites {(last To true)}) (sites Mover "Home")) (is Occupied (from ))) (then (sow "Track" (mover ) (if (< 1 (count (to ))) (moveAgain ) (if (is In (to ) (sites Mover "Inner")) (if (is Occupied (if (is Mover P1) (+ (to ) 5) (- (to ) 5))) (and (fromTo (from (if (is Mover P1) (+ (to ) 5) (- (to ) 5))) (to (handSite Mover)) (count (if (is Mover P1) (+ (to ) 5) (- (to ) 5)))) (if (is Occupied (if (is Mover P1) (+ (to ) (* 5 2)) (- (to ) (* 5 2)))) (fromTo (from (if (is Mover P1) (+ (to ) (* 5 2)) (- (to ) (* 5 2)))) (to (handSite Mover)) (count (if (is Mover P1) (+ (to ) (* 5 2)) (- (to ) (* 5 2)))))))))))))) (end (if (no Moves Next) (byScore {(score P1 (+ (count Cell (handSite P1)) (count (sites P1 "Home")))) (score P2 (+ (count Cell (handSite P2)) (count (sites P2 "Home"))))})))))
Line 3
description: 4x5 board. Five counters per hole. Players can sow from any hole. Sowing occurs orthogonally in any direction, and a player can change direction orthogonally at any point in the move, but can never double back. When the last counter falls into a hole, sowing continues if there are counters in the following holes; these are picked up and sowing continues from there.  The hole from which the sowing continues will always be the next one in the opposite direction from the penultimate hole in which a counter was dropped. Therefore, if the sowing ends when a sowing hits an edge or corner, sowing does not continue. When the hole after the end of a sowing is empty, the counters in the next hole following it are captured, but captures cannot be made when the final counter falls into a hole from which a new direction must be chosen. Captures cannot be made from the central two holes of the board. The player who captures the most counters wins.
        
Ludii code: (game "Dongjintian (Four Players)" (players 4) (equipment {(mancalaBoard 4 5 None) (piece "Seed" Shared) (hand Each) (regions "ProtectingHoles" (sites {7 12}))}) (rules (start (set Count 5 (sites Board))) (play (if (and (is Prev Mover) (!= 0 (var "NumToSow"))) (if (can Move (move Select (from (last To)) (to (difference (sites Around (last To)) (sites (values Remembered "SowedSites")))) (then (and (add (piece (id "Seed" Shared)) (to (last To))) (if (< 1 (var "NumToSow")) (and {(set Var "NumToSow" (- (var "NumToSow") 1)) (moveAgain ) (remember Value "SowedSites" (last From))}) (and {(forget Value "SowedSites" All) (set Var "NumToSow" 0) (if (!= (last To) (ahead (last To) 1 (directions Vertex (last From) (last To)))) (if (is Occupied (ahead (last To) 1 (directions Vertex (last From) (last To)))) (moveAgain ) (if (!= (last To) (ahead (last To) 2 (directions Vertex (last From) (last To)))) (if (is Occupied (ahead (last To) 2 (directions Vertex (last From) (last To)))) (and (fromTo (from (ahead (last To) 2 (directions Vertex (last From) (last To)))) (to (handSite Mover)) (count (ahead (last To) 2 (directions Vertex (last From) (last To))))) (if (and (!= (last To) (ahead (last To) 3 (directions Vertex (last From) (last To)))) (!= (last To) (ahead (last To) 4 (directions Vertex (last From) (last To))))) (if (and (is Occupied (ahead (last To) 4 (directions Vertex (last From) (last To)))) (is Empty (ahead (last To) 3 (directions Vertex (last From) (last To))))) (fromTo (from (ahead (last To) 4 (directions Vertex (last From) (last To)))) (to (handSite Mover)) (count (ahead (last To) 4 (directions Vertex (last From) (last To))))))))))))})))))) (move Select (from (last To)) (to (difference (sites Around (last To)) (sites (values Remembered "SowedSites")))) (then (and (add (piece (id "Seed" Shared)) (to (last To))) (if (< 1 (var "NumToSow")) (and {(set Var "NumToSow" (- (var "NumToSow") 1)) (moveAgain ) (remember Value "SowedSites" (last From))}) (and {(forget Value "SowedSites" All) (set Var "NumToSow" 0) (if (!= (last To) (ahead (last To) 1 (directions Vertex (last From) (last To)))) (if (is Occupied (ahead (last To) 1 (directions Vertex (last From) (last To)))) (moveAgain ) (if (!= (last To) (ahead (last To) 2 (directions Vertex (last From) (last To)))) (if (is Occupied (ahead (last To) 2 (directions Vertex (last From) (last To)))) (and (fromTo (from (ahead (last To) 2 (directions Vertex (last From) (last To)))) (to (handSite Mover)) (count (ahead (last To) 2 (directions Vertex (last From) (last To))))) (if (and (!= (last To) (ahead (last To) 3 (directions Vertex (last From) (last To)))) (!= (last To) (ahead (last To) 4 (directions Vertex (last From) (last To))))) (if (and (is Occupied (ahead (last To) 4 (directions Vertex (last From) (last To)))) (is Empty (ahead (last To) 3 (directions Vertex (last From) (last To))))) (fromTo (from (ahead (last To) 4 (directions Vertex (last From) (last To)))) (to (handSite Mover)) (count (ahead (last To) 4 (directions Vertex (last From) (last To))))))))))))}))))) (do (and {(add (piece (id "Seed" Shared)) (to (last To)) (var "NumToSow")) (forget Value "SowedSites" All) (set Var "NumToSow" 0)}) (move Pass))) (if (is Prev Mover) (move (from (ahead (last To) 1 (directions Vertex (last From) (last To)))) (to (sites Around (from ))) (then (and {(if (is Occupied (last From)) (and {(moveAgain ) (set Var "NumToSow" (count (last From))) (remember Value "SowedSites" (last From))}) (if (!= (last To) (ahead (last To) 1 (directions Vertex (last From) (last To)))) (if (is Occupied (ahead (last To) 1 (directions Vertex (last From) (last To)))) (moveAgain ) (if (!= (last To) (ahead (last To) 2 (directions Vertex (last From) (last To)))) (if (is Occupied (ahead (last To) 2 (directions Vertex (last From) (last To)))) (and (fromTo (from (ahead (last To) 2 (directions Vertex (last From) (last To)))) (to (handSite Mover)) (count (ahead (last To) 2 (directions Vertex (last From) (last To))))) (if (and (!= (last To) (ahead (last To) 3 (directions Vertex (last From) (last To)))) (!= (last To) (ahead (last To) 4 (directions Vertex (last From) (last To))))) (if (and (is Occupied (ahead (last To) 4 (directions Vertex (last From) (last To)))) (is Empty (ahead (last To) 3 (directions Vertex (last From) (last To))))) (fromTo (from (ahead (last To) 4 (directions Vertex (last From) (last To)))) (to (handSite Mover)) (count (ahead (last To) 4 (directions Vertex (last From) (last To))))))))))))) (remove (last From) (count (last From)))}))) (move (from (sites Board) (is Occupied (from ))) (to (sites Around (from ))) (then (and {(if (is Occupied (last From)) (and {(moveAgain ) (set Var "NumToSow" (count (last From))) (remember Value "SowedSites" (last From))}) (if (!= (last To) (ahead (last To) 1 (directions Vertex (last From) (last To)))) (if (is Occupied (ahead (last To) 1 (directions Vertex (last From) (last To)))) (moveAgain ) (if (!= (last To) (ahead (last To) 2 (directions Vertex (last From) (last To)))) (if (is Occupied (ahead (last To) 2 (directions Vertex (last From) (last To)))) (and (fromTo (from (ahead (last To) 2 (directions Vertex (last From) (last To)))) (to (handSite Mover)) (count (ahead (last To) 2 (directions Vertex (last From) (last To))))) (if (and (!= (last To) (ahead (last To) 3 (directions Vertex (last From) (last To)))) (!= (last To) (ahead (last To) 4 (directions Vertex (last From) (last To))))) (if (and (is Occupied (ahead (last To) 4 (directions Vertex (last From) (last To)))) (is Empty (ahead (last To) 3 (directions Vertex (last From) (last To))))) (fromTo (from (ahead (last To) 4 (directions Vertex (last From) (last To)))) (to (handSite Mover)) (count (ahead (last To) 4 (directions Vertex (last From) (last To))))))))))))) (remove (last From) (count (last From)))})))))) (end (if (<= (count Pieces All (sites Board)) 1) (byScore {(score P1 (count Cell (handSite P1))) (score P2 (count Cell (handSite P2))) (score P3 (count Cell (handSite P3))) (score P4 (count Cell (handSite P4)))})))))
Line 3
description: 4x8 board. Two counters in each hole. Players sow in an anti-clockwise direction from any of their holes. Singletons may not be sowed. Players capture when the sowing ends in a player's inner row and the opponent's inner and outer row holes opposite contain counters; these are captured and sown in the player's rows starting from the same hole that the previous sowing began. If the final counter lands in an occupied hole but capture is not possible, the counters in this hole are picked up and sowing continues. If the final counter ends in an empty hole, the turn ends. Captures cannot be made on each player's first turn. Play continues until one player has no holes with two or more counters, and the opponent wins.
Ludii code: (game "Nsumbi" (players 2) (equipment {(mancalaBoard 4 8 None {(track "Track1" "0,E,N1,W" true P1) (track "Track2" "16,E,N1,W" true P2)}) (regions "Home" P1 (sites Track "Track1")) (regions "Home" P2 (sites Track "Track2")) (regions "Inner" P1 (difference (sites Track "Track1") (sites Bottom))) (regions "Inner" P2 (difference (sites Track "Track2") (sites Top))) (piece "Seed" Shared)}) (rules (start (set Count 2 (union (sites P1 "Home") (sites P2 "Home")))) {(phase "Opening" (play (move Select (from (sites Mover)) (then (sow "Track" (mover ))))) (nextPhase Mover "Playing")) (phase "Playing" (play (move Select (from (if (is Prev Mover) (sites {(last To true)}) (sites Mover)) (< 1 (count (from )))) (then (sow "Track" (mover ) (if (and {(< 1 (count (to ))) (is In (to ) (sites Mover "Inner")) (> (count (if (is Mover P1) (+ (to ) 8) (- (to ) 8))) 0) (> (count (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2)))) 0)}) (and {(fromTo (from (if (is Mover P1) (+ (to ) 8) (- (to ) 8))) (to (last From)) (count (if (is Mover P1) (+ (to ) 8) (- (to ) 8)))) (fromTo (from (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2)))) (to (last From)) (count (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2))))) (sow (last From) (+ (count (if (is Mover P1) (+ (to ) 8) (- (to ) 8))) (count (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2))))) "Track" (mover ) true)}) (if (< 1 (count (to ))) (moveAgain ))))))))} (end (if (no Moves Next) (result Mover Win)))))
Line 3
description: 4x7 board, using only the outer two rows. Three counters in each hole. Sowing occurs in an anticlockwise direction. The first player takes the counters out of their leftmost hole and sows them. Instead of each player owning a row of holes, they own the series of holes which currently contain their counters. Players always sow from the rearmost of their holes. When the frontmost two holes of a player's sequence contain one counter each, the player gets another turn. When a player sows into the rear holes of the opponent, the player takes ownership of those holes. When one player is reduced to one counter, they jump to the nearest corner hole in the direction of play, and continue jumping from corner to corner until they capture counters belonging to the opponent, at which point they revert to the normal playing style. The first player to capture all their opponent's pieces wins.
Ludii code: (game "Ngulungu" (players 2) (equipment {(mancalaBoard 4 7 None {(track "Track" "0,E,27,W" true) (track "TrackCorner" "0,6,27,21" true) (track "ReverseTrack" "6,W,21,E" true)}) (piece "Seed" Each)}) (rules (start {(place "Seed1" (sites Bottom) {3}) (place "Seed2" (sites Top) {3})}) (play (if (and (all Sites (sites Occupied Mover) (is In (sites Corners))) (= 1 (count Pieces Mover))) (move (from (trackSite FirstSite (trackSite FirstSite (not (is Mover (who (to ))))) (is Mover (who (to ))))) (to (trackSite FirstSite "TrackCorner" (from ) (is Enemy (who (to )))) (apply (and (remove (to ) (count (to ))) (add (piece (id "Seed" Mover)) (to (to )) (count (to ))))))) (move Select (from (trackSite FirstSite (trackSite FirstSite (not (is Mover (who (to ))))) (is Mover (who (to ))))) (then (sow (if (and (!= (mover ) (what (to ))) (is Occupied (to ))) (and (remove (to ) (count (to ))) (add (piece (id "Seed" Mover)) (to (to )) (count (to ))))) (if (and (= 1 (count (trackSite Move (to ) "ReverseTrack" 1))) (= 1 (count (to )))) (moveAgain ))))))) (end (forEach NonMover (no Pieces Player) (result Player Loss)))))
Line 3
description: 4x8 board. 32 counters per player. Players may arrange the counters however they like in their holes. Players sow by taking the counters from one of their holes and dropping them one by one in an anti-clockwise direction only in the two rows closest to them. When the last counter lands in an empty hole, the turn is over. When the last counter falls into an occupied hole, the contents of this hole are picked up and sowing continues. If the final counter falls into an occupied hole in the inner row, and the two holes opposite it in the opponent's rows are occupied, the counters in these two rows of the opponent are taken. They are then sown on the player's side of the board beginning from the hole that received the first counter of the sowing that led to the capture. Both of the opponent's holes must be occupied to capture. Clockwise sowing is allowed in certain circumstances. If a clockwise move from the four holes on the left hand side of the players board (i.e., the left two holes in the outer row or the left two hole in the inner row) can lead to a capture, a clockwise move is allowed. Sowing cannot occur with single counters. The player who can no longer move loses.
Ludii code: (game "Mweso" (players 2) (equipment {(mancalaBoard 4 8 None {(track "TrackCCW1" "0,E,N1,W" true P1) (track "TrackCCW2" "16,E,N1,W" true P2) (track "TrackCW1" "7,W,N1,E" true P1) (track "TrackCW2" "24,E,S1,W" true P2)}) (piece "Seed" Shared) (regions "Home" P1 (sites Track "TrackCCW1")) (regions "Home" P2 (sites Track "TrackCCW2")) (regions "Inner" P1 (difference (sites Track "TrackCCW1") (sites Bottom))) (regions "Inner" P2 (difference (sites Track "TrackCCW2") (sites Top))) (regions "Left" P1 (intersection (sites Track "TrackCCW1") (expand (sites Left)))) (regions "Left" P2 (intersection (sites Track "TrackCCW2") (expand (sites Right)))) (hand Each)}) (rules (start {(set Count 32 (handSite P1)) (set Count 32 (handSite P2))}) {(phase "Placing" (play (move (from (handSite Mover)) (to (sites Mover "Home")) 1)) (nextPhase Mover (is Empty (handSite Mover)) "Sowing")) (phase "Sowing" (play (or {(if (!= 2 (var "Direction")) (move Select (from (if (is Prev Mover) (sites {(var "Replay")}) (sites Mover "Home")) (< 1 (count (from )))) (then (sow "TrackCCW" (mover ) (if (< 1 (count (to ))) (and {(set Var "Direction" 1) (moveAgain ) (set Var "Replay" (to )) (if (is In (to ) (sites Mover "Inner")) (if (and (is Occupied (if (is Mover P1) (+ (to ) 8) (- (to ) 8))) (is Occupied (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2))))) (and {(fromTo (from (if (is Mover P1) (+ (to ) 8) (- (to ) 8))) (to (last From)) (count (if (is Mover P1) (+ (to ) 8) (- (to ) 8)))) (fromTo (from (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2)))) (to (last From)) (count (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2))))) (sow (last From) (+ (count (if (is Mover P1) (+ (to ) 8) (- (to ) 8))) (count (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2))))) "TrackCCW" (mover ))})))}) (set Var "Direction" 0)))))) (if (!= 1 (var "Direction")) (move Select (from (if (is Prev Mover) (sites {(var "Replay")}) (sites Mover "Left")) (and (< 1 (count (from ))) (if (is Prev Mover) true (if (is In (trackSite Move (from ) "TrackCW" (count (from ))) (sites Mover "Inner")) (and (is Occupied (if (is Mover P1) (+ (trackSite Move (from ) "TrackCW" (count (from ))) 8) (- (trackSite Move (from ) "TrackCW" (count (from ))) 8))) (is Occupied (if (is Mover P1) (+ (trackSite Move (from ) "TrackCW" (count (from ))) (* 8 2)) (- (trackSite Move (from ) "TrackCW" (count (from ))) (* 8 2))))) false)))) (then (sow "TrackCW" (mover ) (if (< 1 (count (to ))) (and {(set Var "Direction" 2) (moveAgain ) (set Var "Replay" (to )) (if (is In (to ) (sites Mover "Inner")) (if (and (is Occupied (if (is Mover P1) (+ (to ) 8) (- (to ) 8))) (is Occupied (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2))))) (and {(fromTo (from (if (is Mover P1) (+ (to ) 8) (- (to ) 8))) (to (last From)) (count (if (is Mover P1) (+ (to ) 8) (- (to ) 8)))) (fromTo (from (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2)))) (to (last From)) (count (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2))))) (sow (last From) (+ (count (if (is Mover P1) (+ (to ) 8) (- (to ) 8))) (count (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2))))) "TrackCCW" (mover ))})))}) (set Var "Direction" 0))))))})) (end (if (and (not (is Next Mover)) (no Moves Next)) (result Mover Win))))}))
Line 3
description: 4x8 board, occasionally 4x9 or 10. Two counters in each hole, except the leftmost hole in the inner row, which has zero, and the hole to its right, which has one. Sowing occurs in an anti-clockwise direction. Players sow from any hole in their two rows. When the final counter lands in an occupied hole, these counters are picked up and sowing continues. When the final counter lands in an empty hole in the inner row, the counters in the opponent's opposite hole in their inner row are captured. If there are also counters in the opponent's opposite hole in the outer row, these are also captured, but only when a capture from the inner row was also made. Players cannot sow single counters, unless there are no holes with multiple counters left, in which case single counters may be sown into an empty hole. Play continues until one player has captured all of the opponent's counters, thus winning the game.
Ludii code: (game "Njombwa (Two Counters)" (players 2) (equipment {(mancalaBoard 4 8 None {(track "Track1" "0,E,N1,W" true P1) (track "Track2" "16,E,N1,W" true P2)}) (regions "Home" P1 (sites Track "Track1")) (regions "Home" P2 (sites Track "Track2")) (regions "Inner" P1 (difference (sites Track "Track1") (sites Bottom))) (regions "Inner" P2 (difference (sites Track "Track2") (sites Top))) (piece "Seed" Shared)}) (rules (start {(set Count 2 (difference (sites Board) (sites {8 (+ 1 8) (- (* 8 3) 1) (- (* 8 3) 2)}))) (set Count 1 (sites {(+ 8 1) (- (* 8 3) 2)}))}) (play (if (all Sites (sites Mover "Home") (>= 1 (count (site )))) (move Select (from (sites Mover "Home") (and (is Occupied (from )) (is Empty (trackSite Move (from ) "Track" 1)))) (then (sow "Track" (mover )))) (move Select (from (if (is Prev Mover) (sites {(last To true)}) (sites Mover "Home")) (> (count (from )) 1)) (then (sow "Track" (mover ) (if (< 1 (count (to ))) (moveAgain ) (if (and (is In (to ) (sites Mover "Inner")) (is Occupied (if (is Mover P1) (+ (to ) 8) (- (to ) 8)))) (and (remove (if (is Mover P1) (+ (to ) 8) (- (to ) 8))) (if (is Occupied (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2)))) (remove (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2))))))))))))) (end (forEach NonMover (all Sites (sites Player) (= 0 (count (site )))) (result Player Loss)))))
Line 3
description: 4x6-21 board; 8 is most common, 12, 15, and 18 are also popular. Each player's rightmost hole is the musoro. Two counters in each hole in the players' outer rows, except each musoro which has three. Sowing occurs in an anti-clockwise direction. When the final counter lands in an occupied hole, these are picked up and sowing continues. If this final hole is one of the musoro, the player may choose to end their turn instead of continuing to sow. When the final counter lands in an empty hole in the inner row, any counters in the opposite hole in the opponent's inner row are captured. If there also are counters in the opposite hole in the opponent's outer row, these are also captured, but only if there was first a capture from the inner row hole. Players cannot sow from a hole with a single counter unless there are no holes with multiple counters. Single counters can only be sown into an empty hole. Play continues until one player has captured all of the opponent's counters, thus winning the game.
        
Ludii code: (game "Musoro Tsoro" (players 2) (equipment {(mancalaBoard 4 8 None {(track "Track1" "0,E,N1,W" true P1) (track "Track2" "16,E,N1,W" true P2)}) (regions "Home" P1 (sites Track "Track1")) (regions "Home" P2 (sites Track "Track2")) (regions "Inner" P1 (difference (sites Track "Track1") (sites Bottom))) (regions "Inner" P2 (difference (sites Track "Track2") (sites Top))) (regions "Outer" P1 (sites Bottom)) (regions "Outer" P2 (sites Top)) (piece "Seed" Shared)}) (rules (start {(place "Seed" (intersection (sites Top) (sites Left)) {3} 2) (place "Seed" (intersection (sites Bottom) (sites Right)) {3} 1) (set Count 2 (union (difference (sites Top) (sites Left)) (difference (sites Bottom) (sites Right))))}) (play (or (if (and (!= 0 (state (var ))) (is Prev Mover)) (move Pass)) (move Select (from (if (is Prev Mover) (sites {(var )}) (sites Mover "Home")) (if (not (all Sites (forEach (sites Mover) (< 1 (count (site )))) (= 0 (count (site ))))) (> (count (from )) 1) (and (= (count (from )) 1) (= 0 (count (trackSite Move (from ) Mover 1)))))) (then (and (sow "Track" (mover ) (if (= (count (to )) 1) (if (is In (to ) (sites Mover "Inner")) (if (> (count (if (is Mover P1) (+ (to ) 8) (- (to ) 8))) 0) (and (remove (if (is Mover P1) (+ (to ) 8) (- (to ) 8))) (if (> (count (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2)))) 0) (remove (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2)))))))) (and (moveAgain ) (set Var (to ))))) (forEach Site (sites Board) (if (!= 0 (state (site ))) (set State (site ) (state (site )))))))))) (end (forEach NonMover (all Sites (sites Player "Home") (= 0 (count (site )))) (result Player Loss)))))
Line 3
description: 4x8 board. The fourth hole from the right in the inner rows of each player is larger and square. Total of 64 counters. Starting position: in the inner row, the first four holes, number of counters from the right: 0; 2; 2; 6. Play begins with each player alternately introducing the remaining counters in their holes. Each is introduced in such a way as to capture an opponent's counters, by placing it into an occupied hole which is opposite one of the opponent's occupied inner-row holes. The opponent's counters are then captured and sown along the inner row from either the leftmost or rightmost hole. If the capture occurs in the rightmost or leftmost holes in the inner row, or the hole immediately adjacent to them in the inner row, the counters must be sown from the leftmost or rightmost hole (whichever is closest), and sown along the inner row. Captures on these subsequent sowings happen according to the same rules as in the second phase, with certain exceptions explained below. If no capture is available, a counter may be placed in any occupied hole in the inner hole except the square hole, and sows them in either direction. If the square hole is the only occupied hole in the inner row, the counter is placed there and the player sows only two seeds from it in either direction. If a loaded square hole is reduced to six counters, the player places a counter there and sows the entire contents, forfeiting the special status for this hole for the rest of the game. Moves that start without a capture on the first sowing which end in the square hole stops there without further sowing. Sowing cannot start from a square hole except to capture, except as described above. If a sowing from an initial capturing move ends in an occupied square hole and no capture is possible, the player may choose to stop there or continue to sow. Once the contents of this hole have been relayed or captured the square hole loses its special status and the player may not introduce a counter into hole with one counter if there are other holes in the inner row containing multiple counters. Once all of the counters are introduced, second phase starts. Players move by sowing seeds from a player's holes. Sowing can happen in any direction, but must continue in that direction throughout the turn except in the special cases below. When the final counter of a sowing lands in a hole in the inner row and there are counters in the opponent's hole in the inner row opposite, these are captured. The captured counters are placed in the leftmost or rightmost hole of the inner row and sown along the inner row. The leftmost or rightmost hole is chosen based on which continues the sowing direction of the move that made the capture. If the capture occurs in the rightmost or leftmost holes in the inner row, or the hole immediately adjacent to them in the inner row, the counters must be sown from the leftmost or rightmost hole (whichever is closest), and sown along the inner row, even if this incurs a change of direction. If the final counter lands in an occupied hole and a capture is not possible, the counters are picked up and sowing continues. If the final counter lands in an empty hole, the turn ends. A player must make a capturing move on their initial sowing if it is available. If a capturing move is not possible on the first sowing, no captures can be made on subsequent sowings in that turn. The game is won when the opponent's inner row is cleared of counters.
Ludii code: (game "Bao Kiswahili (East Africa)" (players 2) (equipment {(mancalaBoard 4 8 None {(track "TrackCCW1" "0,E,N1,W" true P1) (track "TrackCCW2" "16,E,N1,W" true P2) (track "TrackCW1" "7,W,N1,E" true P1) (track "TrackCW2" "23,W,N1,E" true P2)}) (piece "Seed" Shared) (hand Each) (regions "Home" P1 (expand (sites Bottom))) (regions "Home" P2 (expand (sites Top))) (regions "Inner" P1 (sites Row 1)) (regions "Inner" P2 (sites Row 2)) (regions "SquaresHoles" (sites {12 19})) (map "LeftMostInner" {(pair P1 8) (pair P2 23)}) (map "RightMostInner" {(pair P1 15) (pair P2 16)}) (map "AdjacentLeftMostInner" {(pair P1 9) (pair P2 22)}) (map "AdjacentRightMostInner" {(pair P1 14) (pair P2 17)})}) (rules (start {(set Count 22 (handSite P1)) (set Count 22 (handSite P2)) (set Count 2 (sites {"G2" "F2" "B3" "C3"})) (set Count 6 (sites {"E2" "D3"}))}) (play (if (is Prev Mover) (if (is Pending) (or (if (or (= 1 (var "Side")) (= 0 (var "Side"))) (do (fromTo (from (if (is Mover P1) (+ (last To true) 8) (- (last To true) 8))) (to (mapEntry "LeftMostInner" Mover)) (count (if (is Mover P1) (+ (last To true) 8) (- (last To true) 8)))) (move Select (from (mapEntry "LeftMostInner" Mover)) (then (sow (if (!= (value Player Mover) 1) (if (is In (last From) (sites "SquaresHoles")) (if (<= (count (last From)) 6) (count (last From)) (min 2 (count (last From)))) (count (last From))) (count (last From))) "TrackCW" (mover ) (if (is In (to ) (sites Mover "Inner")) (if (is Occupied (if (is Mover P1) (+ (to ) 8) (- (to ) 8))) (and {(moveAgain ) (set Pending) (if (is In (to ) (expand (sites Right))) (set Var "Side" 2) (if (is In (to ) (expand (sites Left))) (set Var "Side" 1) (set Var "Side" 0)))}) (if (< 1 (count (to ))) (if (or (= 1 (value Player Mover)) (and (!= 1 (value Player Mover)) (not (is In (to ) (sites "SquaresHoles"))))) (and {(moveAgain ) (set Var "Replay" (to )) (set Var "Direction" 1)}) (set Var "Direction" 0)))) (if (< 1 (count (to ))) (if (or (= 1 (value Player Mover)) (and (!= 1 (value Player Mover)) (not (is In (to ) (sites "SquaresHoles"))))) (and {(moveAgain ) (set Var "Replay" (to )) (set Var "Direction" 1)}) (set Var "Direction" 0)))) (then (if (and {(!= 1 (value Player Mover)) (is In (last From) (sites "SquaresHoles")) (< (count (last From)) 6)}) (set Value Mover 1)))))))) (if (or (= 2 (var "Side")) (= 0 (var "Side"))) (do (fromTo (from (if (is Mover P1) (+ (last To true) 8) (- (last To true) 8))) (to (mapEntry "RightMostInner" Mover)) (count (if (is Mover P1) (+ (last To true) 8) (- (last To true) 8)))) (move Select (from (mapEntry "RightMostInner" Mover)) (then (sow (if (!= (value Player Mover) 1) (if (is In (last From) (sites "SquaresHoles")) (if (<= (count (last From)) 6) (count (last From)) (min 2 (count (last From)))) (count (last From))) (count (last From))) "TrackCCW" (mover ) (if (is In (to ) (sites Mover "Inner")) (if (is Occupied (if (is Mover P1) (+ (to ) 8) (- (to ) 8))) (and {(moveAgain ) (set Pending) (if (is In (to ) (expand (sites Right))) (set Var "Side" 2) (if (is In (to ) (expand (sites Left))) (set Var "Side" 1) (set Var "Side" 0)))}) (if (< 1 (count (to ))) (if (or (= 1 (value Player Mover)) (and (!= 1 (value Player Mover)) (not (is In (to ) (sites "SquaresHoles"))))) (and {(moveAgain ) (set Var "Replay" (to )) (set Var "Direction" 2)}) (set Var "Direction" 0)))) (if (< 1 (count (to ))) (if (or (= 1 (value Player Mover)) (and (!= 1 (value Player Mover)) (not (is In (to ) (sites "SquaresHoles"))))) (and {(moveAgain ) (set Var "Replay" (to )) (set Var "Direction" 2)}) (set Var "Direction" 0)))) (then (if (and {(!= 1 (value Player Mover)) (is In (last From) (sites "SquaresHoles")) (< (count (last From)) 6)}) (set Value Mover 1))))))))) (or (if (or (= (var "Direction") 1) (= (var "Direction") 3)) (move Select (from (var "Replay")) (then (sow (if (!= (value Player Mover) 1) (if (is In (last From) (sites "SquaresHoles")) (if (<= (count (last From)) 6) (count (last From)) (min 2 (count (last From)))) (count (last From))) (count (last From))) "TrackCW" (mover ) (if (is In (to ) (sites Mover "Inner")) (if (is Occupied (if (is Mover P1) (+ (to ) 8) (- (to ) 8))) (and {(moveAgain ) (set Pending) (if (is In (to ) (expand (sites Right))) (set Var "Side" 2) (if (is In (to ) (expand (sites Left))) (set Var "Side" 1) (set Var "Side" 0)))}) (if (< 1 (count (to ))) (if (or (= 1 (value Player Mover)) (and (!= 1 (value Player Mover)) (not (is In (to ) (sites "SquaresHoles"))))) (and {(moveAgain ) (set Var "Replay" (to )) (set Var "Direction" 1)}) (set Var "Direction" 0)))) (if (< 1 (count (to ))) (if (or (= 1 (value Player Mover)) (and (!= 1 (value Player Mover)) (not (is In (to ) (sites "SquaresHoles"))))) (and {(moveAgain ) (set Var "Replay" (to )) (set Var "Direction" 1)}) (set Var "Direction" 0)))) (then (if (and {(!= 1 (value Player Mover)) (is In (last From) (sites "SquaresHoles")) (< (count (last From)) 6)}) (set Value Mover 1))))))) (if (or (= (var "Direction") 2) (= (var "Direction") 3)) (move Select (from (var "Replay")) (then (sow (if (!= (value Player Mover) 1) (if (is In (last From) (sites "SquaresHoles")) (if (<= (count (last From)) 6) (count (last From)) (min 2 (count (last From)))) (count (last From))) (count (last From))) "TrackCCW" (mover ) (if (is In (to ) (sites Mover "Inner")) (if (is Occupied (if (is Mover P1) (+ (to ) 8) (- (to ) 8))) (and {(moveAgain ) (set Pending) (if (is In (to ) (expand (sites Right))) (set Var "Side" 2) (if (is In (to ) (expand (sites Left))) (set Var "Side" 1) (set Var "Side" 0)))}) (if (< 1 (count (to ))) (if (or (= 1 (value Player Mover)) (and (!= 1 (value Player Mover)) (not (is In (to ) (sites "SquaresHoles"))))) (and {(moveAgain ) (set Var "Replay" (to )) (set Var "Direction" 2)}) (set Var "Direction" 0)))) (if (< 1 (count (to ))) (if (or (= 1 (value Player Mover)) (and (!= 1 (value Player Mover)) (not (is In (to ) (sites "SquaresHoles"))))) (and {(moveAgain ) (set Var "Replay" (to )) (set Var "Direction" 2)}) (set Var "Direction" 0)))) (then (if (and {(!= 1 (value Player Mover)) (is In (last From) (sites "SquaresHoles")) (< (count (last From)) 6)}) (set Value Mover 1))))))))) (if (is Occupied (handSite Mover)) (priority {(move (from (handSite Mover)) (to (sites Mover "Inner") (is Occupied (if (is Mover P1) (+ (to ) 8) (- (to ) 8)))) 1 (then (and {(moveAgain ) (set Pending) (if (is In (last To) (expand (sites Right))) (set Var "Side" 2) (if (is In (last To) (expand (sites Left))) (set Var "Side" 1) (set Var "Side" 0)))}))) (if (!= (value Player Mover) 1) (move (from (handSite Mover)) (to (difference (sites Mover "Inner") (sites "SquaresHoles")) (is Occupied (to ))) 1 (then (and {(moveAgain ) (set Var "Replay" (last To)) (set Var "Direction" 3)}))) (move (from (handSite Mover)) (to (sites Mover "Inner") (is Occupied (to ))) 1 (then (and {(moveAgain ) (set Var "Replay" (last To)) (set Var "Direction" 3)})))) (if (!= (value Player Mover) 1) (move (from (handSite Mover)) (to (sites "SquaresHoles") (is Occupied (to ))) 1 (then (and {(moveAgain ) (set Var "Replay" (last To)) (set Var "Direction" 3)}))))}) (priority {(or (move Select (from (sites Mover) (and (is Occupied (from )) (is Occupied (if (is Mover P1) (+ (trackSite Move (from ) "TrackCW" (count (from ))) 8) (- (trackSite Move (from ) "TrackCW" (count (from ))) 8))))) (then (sow "TrackCW" (mover ) (if (is In (to ) (sites Mover "Inner")) (if (is Occupied (if (is Mover P1) (+ (to ) 8) (- (to ) 8))) (and {(moveAgain ) (set Pending) (if (is In (to ) (expand (sites Right))) (set Var "Side" 2) (if (is In (to ) (expand (sites Left))) (set Var "Side" 1) (set Var "Side" 0)))}) (if (< 1 (count (to ))) (if (or (= 1 (value Player Mover)) (and (!= 1 (value Player Mover)) (not (is In (to ) (sites "SquaresHoles"))))) (and {(moveAgain ) (set Var "Replay" (to )) (set Var "Direction" 1)}) (set Var "Direction" 0)))) (if (< 1 (count (to ))) (if (or (= 1 (value Player Mover)) (and (!= 1 (value Player Mover)) (not (is In (to ) (sites "SquaresHoles"))))) (and {(moveAgain ) (set Var "Replay" (to )) (set Var "Direction" 1)}) (set Var "Direction" 0))))))) (move Select (from (sites Mover) (and (is Occupied (from )) (is Occupied (if (is Mover P1) (+ (trackSite Move (from ) "TrackCCW" (count (from ))) 8) (- (trackSite Move (from ) "TrackCCW" (count (from ))) 8))))) (then (sow "TrackCCW" (mover ) (if (is In (to ) (sites Mover "Inner")) (if (is Occupied (if (is Mover P1) (+ (to ) 8) (- (to ) 8))) (and {(moveAgain ) (set Pending) (if (is In (to ) (expand (sites Right))) (set Var "Side" 2) (if (is In (to ) (expand (sites Left))) (set Var "Side" 1) (set Var "Side" 0)))}) (if (< 1 (count (to ))) (if (or (= 1 (value Player Mover)) (and (!= 1 (value Player Mover)) (not (is In (to ) (sites "SquaresHoles"))))) (and {(moveAgain ) (set Var "Replay" (to )) (set Var "Direction" 2)}) (set Var "Direction" 0)))) (if (< 1 (count (to ))) (if (or (= 1 (value Player Mover)) (and (!= 1 (value Player Mover)) (not (is In (to ) (sites "SquaresHoles"))))) (and {(moveAgain ) (set Var "Replay" (to )) (set Var "Direction" 2)}) (set Var "Direction" 0)))))))) (or (move Select (from (if (!= (value Player Mover) 1) (sites Mover) (difference (sites Mover) (sites "SquaresHoles"))) (is Occupied (from ))) (then (sow "TrackCW" (mover ) (if (is In (to ) (sites Mover "Inner")) (if (is Occupied (if (is Mover P1) (+ (to ) 8) (- (to ) 8))) (and {(moveAgain ) (set Pending) (if (is In (to ) (expand (sites Right))) (set Var "Side" 2) (if (is In (to ) (expand (sites Left))) (set Var "Side" 1) (set Var "Side" 0)))}) (if (< 1 (count (to ))) (if (or (= 1 (value Player Mover)) (and (!= 1 (value Player Mover)) (not (is In (to ) (sites "SquaresHoles"))))) (and {(moveAgain ) (set Var "Replay" (to )) (set Var "Direction" 1)}) (set Var "Direction" 0)))) (if (< 1 (count (to ))) (if (or (= 1 (value Player Mover)) (and (!= 1 (value Player Mover)) (not (is In (to ) (sites "SquaresHoles"))))) (and {(moveAgain ) (set Var "Replay" (to )) (set Var "Direction" 1)}) (set Var "Direction" 0))))))) (move Select (from (if (!= (value Player Mover) 1) (sites Mover) (difference (sites Mover) (sites "SquaresHoles"))) (is Occupied (from ))) (then (sow "TrackCCW" (mover ) (if (is In (to ) (sites Mover "Inner")) (if (is Occupied (if (is Mover P1) (+ (to ) 8) (- (to ) 8))) (and {(moveAgain ) (set Pending) (if (is In (to ) (expand (sites Right))) (set Var "Side" 2) (if (is In (to ) (expand (sites Left))) (set Var "Side" 1) (set Var "Side" 0)))}) (if (< 1 (count (to ))) (if (or (= 1 (value Player Mover)) (and (!= 1 (value Player Mover)) (not (is In (to ) (sites "SquaresHoles"))))) (and {(moveAgain ) (set Var "Replay" (to )) (set Var "Direction" 2)}) (set Var "Direction" 0)))) (if (< 1 (count (to ))) (if (or (= 1 (value Player Mover)) (and (!= 1 (value Player Mover)) (not (is In (to ) (sites "SquaresHoles"))))) (and {(moveAgain ) (set Var "Replay" (to )) (set Var "Direction" 2)}) (set Var "Direction" 0))))))))})))) (end (forEach Player (all Sites (sites Player "Inner") (= 0 (count (site )))) (result Player Loss)))))
Line 3
description: 4 row board, of any number of holes. Four counters in each player's outer row. Sowing occurs from the player's rearmost hole and in an anti-clockwise direction. When the final counter lands in an empty hole in the inner row, any counters in the opposite hole in the opponent's inner row are captured. The player who captures all of the opponent's counters wins.
Ludii code: (game "Chiana wa Bwalo" (players 2) (equipment {(mancalaBoard 4 16 None {(track "Track1" "0,E,N1,W" true P1) (track "Track2" "32,E,N1,W" true P2)}) (regions "Home" P1 (sites Track "Track1")) (regions "Home" P2 (sites Track "Track2")) (regions "Inner" P1 (difference (sites Track "Track1") (sites Bottom))) (regions "Inner" P2 (difference (sites Track "Track2") (sites Top))) (piece "Seed" Shared) (hand Each)}) (rules (start (set Count 4 (union (sites Top) (sites Bottom)))) (play (move Select (from (sites Mover "Home") (> (count (from )) 0)) (then (sow "Track" (mover ) (if (and (= (count (to )) 1) (> (count (if (is Mover P1) (+ (to ) 16) (- (to ) 16))) 0)) (fromTo (from (if (is Mover P1) (+ (to ) 16) (- (to ) 16))) (to (handSite Mover)) (count (if (is Mover P1) (+ (to ) 16) (- (to ) 16))))))))) (end (if (no Moves Next) (byScore {(score P1 (+ (count Cell (handSite P1)) (count (sites P1 "Home")))) (score P2 (+ (count Cell (handSite P2)) (count (sites P2 "Home"))))})))))
Line 3
description: 4x7-10 board (seven most common). One counter in each hole, with the player's leftmost hole in the outer row empty. On the first turn, sowing occurs in a clockwise direction. On the second turn, the player may sow in either direction, but must continue in the chosen direction for the rest of the game. Captures are made when the final counter of a sowing lands in an empty hole in the inner row. Captures are only made from the opponent's opposite outer row hole, and only when their inner row hole is empty. If the final counter lands in an occupied hole, the player picks up these counters and continues sowing. The player who captures all of the opponent's counters wins.
Ludii code: (game "Namudilakunze" (players 2) (equipment {(mancalaBoard 4 7 None {(track "TrackCCW1" "0,E,N1,W" true P1) (track "TrackCCW2" "14,E,N1,W" true P2) (track "TrackCW1" "6,W,N1,E" true P1) (track "TrackCW2" "20,W,N1,E" true P2)}) (piece "Seed" Shared) (regions "Home" P1 (sites Track "TrackCCW1")) (regions "Home" P2 (sites Track "TrackCCW2")) (regions "Inner" P1 (difference (sites Track "TrackCCW1") (sites Bottom))) (regions "Inner" P2 (difference (sites Track "TrackCCW2") (sites Top))) (hand Each)}) (rules (start (set Count 1 (difference (sites Board) (sites {0 (- (* 7 4) 1)})))) {(phase "FirstTurn" (play (move Select (from (if (is Prev Mover) (sites {(last To true)}) (sites Mover "Home")) (is Occupied (from ))) (then (sow "TrackCW" (mover ) (if (< 1 (count (to ))) (moveAgain ) (if (is In (to ) (sites Mover "Inner")) (if (is Occupied (if (is Mover P1) (+ (to ) 7) (- (to ) 7))) (remove (if (is Mover P1) (+ (to ) 7) (- (to ) 7))) (if (is Occupied (if (is Mover P1) (+ (to ) (* 7 2)) (- (to ) (* 7 2)))) (remove (if (is Mover P1) (+ (to ) (* 7 2)) (- (to ) (* 7 2)))))))))))) (nextPhase Mover (not (is Next Mover)) "Main")) (phase "Main" (play (or (if (or (>= 0 (value Player Mover)) (= (value Player Mover) 1)) (move Select (from (if (is Prev Mover) (sites {(last To true)}) (sites Mover "Home")) (is Occupied (from ))) (then (sow "TrackCCW" (mover ) (and (if (< 1 (count (to ))) (moveAgain ) (if (is In (to ) (sites Mover "Inner")) (if (is Empty (if (is Mover P1) (+ (to ) 7) (- (to ) 7))) (if (is Occupied (if (is Mover P1) (+ (to ) (* 7 2)) (- (to ) (* 7 2)))) (remove (if (is Mover P1) (+ (to ) (* 7 2)) (- (to ) (* 7 2)))))))) (if (!= 1 (value Player Mover)) (set Value Mover 1))))))) (if (or (>= 0 (value Player Mover)) (= (value Player Mover) 2)) (move Select (from (if (is Prev Mover) (sites {(last To true)}) (sites Mover "Home")) (is Occupied (from ))) (then (sow "TrackCW" (mover ) (and (if (< 1 (count (to ))) (moveAgain ) (if (is In (to ) (sites Mover "Inner")) (if (is Empty (if (is Mover P1) (+ (to ) 7) (- (to ) 7))) (if (is Occupied (if (is Mover P1) (+ (to ) (* 7 2)) (- (to ) (* 7 2)))) (remove (if (is Mover P1) (+ (to ) (* 7 2)) (- (to ) (* 7 2)))))))) (if (!= 2 (value Player Mover)) (set Value Mover 2))))))))))} (end (forEach NonMover (all Sites (sites Player "Home") (= 0 (count (site )))) (result Player Loss)))))
Line 3
description: 4x10 board. Forty counters in total. Play begins with one counter in each hole. One player then rearranges these counters however they like, as long as they remain on their side of the board and they remain on the board. They can arrange it so that they capture counters from the opponent's side according to the capture rules. The other player then does the same. Play begins with a player picking up counters from one of the holes with more than one on their side. Counters are sown in an anti-clockwise direction. When the last counter lands in an occupied hole, these counters are picked up and sowing continues until the last counter falls in an empty hole. When the last counter falls into an empty hole, either the turn ends or the player captures. Captures are only made from the inner row; if the corresponding hole in the opponent's inner row holds counters, these are captured; if there are also counters in the corresponding hole in the opponent's outer row, these are also captured. Play continues until one player has nothing left or one player has only single counters in their holes. If the player has no counters left, they have lost. If only single counters remain in a player's holes, they may now move single counters, but only into empty holes. Captures are made in the same way as before.
Ludii code: (game "Makonn" (players 2) (equipment {(mancalaBoard 4 10 None {(track "Track1" "0,E,N1,W" true P1) (track "Track2" "20,E,N1,W" true P2)}) (regions "Home" P1 (sites Track "Track1")) (regions "Home" P2 (sites Track "Track2")) (regions "Inner" P1 (difference (sites Track "Track1") (sites Bottom))) (regions "Inner" P2 (difference (sites Track "Track2") (sites Top))) (piece "Seed" Shared)}) (rules (start (set Count 1 (union (sites P1 "Home") (sites P2 "Home")))) {(phase "Rearrangement" (play (or (move (from (sites Mover "Home") (is Occupied (from ))) (to (sites Mover "Home") (!= (from ) (to ))) (then (and (if (and {(!= 1 (value Player Mover)) (is In (last To) (sites Mover "Inner")) (= 1 (count (last To)))}) (if (is Occupied (if (is Mover P1) (+ (last To) 10) (- (last To) 10))) (and {(set Value Mover 1) (remove (if (is Mover P1) (+ (last To) 10) (- (last To) 10))) (if (is Occupied (if (is Mover P1) (+ (last To) (* 10 2)) (- (last To) (* 10 2)))) (remove (if (is Mover P1) (+ (last To) (* 10 2)) (- (last To) (* 10 2)))))}))) (moveAgain )))) (move Pass))) (nextPhase Mover (was Pass) "Sowing")) (phase "Sowing" (play (move Select (from (if (is Prev Mover) (sites {(var "Replay")}) (sites Mover "Home")) (if (is Prev Mover) true (if (all Sites (sites Mover "Home") (>= 1 (count (site )))) (is Occupied (from )) (< 1 (count (from )))))) (then (sow "Track" (mover ) (if (< 1 (count (to ))) (and (set Var "Replay" (to )) (moveAgain )) (if (is Occupied (if (is Mover P1) (+ (to ) 10) (- (to ) 10))) (and (remove (if (is Mover P1) (+ (to ) 10) (- (to ) 10))) (if (is Occupied (if (is Mover P1) (+ (to ) (* 10 2)) (- (to ) (* 10 2)))) (remove (if (is Mover P1) (+ (to ) (* 10 2)) (- (to ) (* 10 2)))))))))))))} (end (if (all Sites (sites Next "Home") (= 0 (count (site )))) (result Next Loss)))))
Line 3
description: 4x12-20 board. Play begins with a number of counters that is three times the number of holes in a row minus two for a game with an even number of holes in a row; three times the number of holes minus one for odd. Counters are distributed beginning in the leftmost hole in the outer row, placing two counters in each hole in an anti-clockwise direction. Play begins from any of the player's holes, sowing anti-clockwise. When the final counter lands in an occupied hole, these are picked up and sowing continues, unless a capture can be made. Captures are made when the final counter falls into an occupied hole in the inner row, and the opponent's hole opposite contains counters. If it is, they are captured, and if the hole in to outer row opposite also contains counters, these are also captured. These are then sown from the hole following the one from which the capture occurred. If the final counter falls into an empty hole, the turn is over. Single counters cannot be sown. Play ends when one player cannot move.
Ludii code: (game "Owela (Benguela)" (players 2) (equipment {(mancalaBoard 4 12 None {(track "Track1" "0,E,N1,W" true P1) (track "Track2" "24,E,N1,W" true P2)}) (regions "Home" P1 (sites Track "Track1")) (regions "Home" P2 (sites Track "Track2")) (regions "Inner" P1 (difference (sites Track "Track1") (sites Bottom))) (regions "Inner" P2 (difference (sites Track "Track2") (sites Top))) (regions "Outer" P1 (sites Bottom)) (regions "Outer" P2 (sites Top)) (regions "InnerInit" P1 (sites {19 20 21 22 23})) (regions "InnerInit" P2 (sites {24 25 26 27 28})) (piece "Seed" Shared) (hand Each)}) (rules (start (set Count 2 (union {(sites P1 "Outer") (sites P1 "InnerInit") (sites P2 "Outer") (sites P2 "InnerInit")}))) (play (move Select (from (if (is Prev Mover) (if (is Pending) (sites {(value Pending)}) (sites {(last To true)})) (sites Mover "Home")) (> (count (from )) 1)) (then (sow "Track" (mover ) (if (> (count (to )) 1) (if (and (is In (to ) (sites Mover "Inner")) (> (count (if (is Mover P1) (+ (to ) 12) (- (to ) 12))) 0)) (and {(fromTo (from (to )) (to (handSite Mover)) (count (to ))) (fromTo (from (if (is Mover P1) (+ (to ) 12) (- (to ) 12))) (to (handSite Mover)) (count (if (is Mover P1) (+ (to ) 12) (- (to ) 12)))) (if (> (count (if (is Mover P1) (+ (to ) (* 12 2)) (- (to ) (* 12 2)))) 0) (fromTo (from (if (is Mover P1) (+ (to ) (* 12 2)) (- (to ) (* 12 2)))) (to (handSite Mover)) (count (if (is Mover P1) (+ (to ) (* 12 2)) (- (to ) (* 12 2)))))) (if (> (count (if (is Mover P1) (trackSite Move (to ) "Track1" 1) (trackSite Move (to ) "Track2" 1))) 1) (and (set Pending (if (is Mover P1) (trackSite Move (to ) "Track1" 1) (trackSite Move (to ) "Track2" 1))) (moveAgain )))}) (moveAgain ))))))) (end (if (no Moves Mover) (byScore {(score P1 (+ (count Cell (handSite P1)) (count (sites P1)))) (score P2 (+ (count Cell (handSite P2)) (count (sites P2))))})))))
Line 3
description: 4x8 board. Play begins with two counters in each hole. Opening moves: Players place all of the counters in the outer row into their rightmost hole. They then take one counter from each of the holes in the inner row and redistribute them into the outer row, one in each hole. Then, each player sows counters in an anti-clockwise direction beginning from the rightmost hole in the inner row, proceeding, picking up the contents of holes when the last counter falls into an occupied hole and continuing sowing. However, the final counter that would fall into the rightmost hole in the outer row (which should now contain 17 counters) is not placed there, but rather on the second to right hole in the inner row, which should now contain one counter. Initial phase: In the initial phase, the rightmost hole in the inner and outer row for each player are out of play. All sowing and capturing only occurs on the remaining holes. Sowing occurs in an anti-clockwise direction. When the final counter of a sowing lands in an empty hole, the turn ends. When it falls into an occupied hole in the player's inner row the contents of the opponent's opposite holes in the inner and outer row are captured. These are then sown in the player's holes beginning with the hole from where the previous sowing began. If the final counter of a sowing falls into an occupied hole that cannot make a capture, then the counters in this hole are picked up and sowing continues. Second phase: The initial phase ends when a player plays from the rightmost hole in the outer row. This can be by necessity or by choice. Once this happens, that player must play in all of their holes. The opponent may remain in the initial phase after this point until they play from their rightmost hole. The same sowing and capturing rules as before. Play continues until one player can no longer move.
Ludii code: (game "Isolo" (players 2) (equipment {(mancalaBoard 4 8 None {(track "TrackCCW1" "0,E,N1,W" true P1) (track "TrackCCW2" "16,E,N1,W" true P2)}) (regions "Home" P1 (sites Track "TrackCCW1")) (regions "Home" P2 (sites Track "TrackCCW2")) (regions "Inner" P1 (difference (sites Track "TrackCCW1") (sites Bottom))) (regions "Inner" P2 (difference (sites Track "TrackCCW2") (sites Top))) (regions "Outer" P1 (sites Bottom)) (regions "Outer" P2 (sites Top)) (piece "Seed" Shared) (hand Each) (map "RightmostOuter" {(pair P1 7) (pair P2 24)}) (map "RightmostInner" {(pair P1 15) (pair P2 16)}) (map "SecondRightmostInner" {(pair P1 14) (pair P2 17)})}) (rules (start (set Count 2 (union (sites P1 "Home") (sites P2 "Home")))) {(phase "Opening1" (play (forEach Site (difference (sites Mover "Outer") (mapEntry "RightmostOuter" Mover)) (if (is Occupied (site )) (move (from (site )) (to (mapEntry "RightmostOuter" Mover)) (count (site )))))) (nextPhase Mover (all Sites (difference (sites Mover "Outer") (mapEntry "RightmostOuter" Mover)) (is Empty (site ))) "Opening2")) (phase "Opening2" (play (forEach Site (sites Mover "Inner") (if (= 2 (count (site ))) (move (from (site )) (to (if (is Mover P1) (- (site ) 8) (+ (site ) 8))) 1)))) (nextPhase Mover (all Sites (sites Mover "Inner") (= (count (site )) 1)) "Opening3")) (phase "Opening3" (play (move Select (from (if (is Prev Mover) (sites {(last To true)}) (sites {(mapEntry "RightmostInner" Mover)}))) (then (sow "TrackCCW" (mover ) (if (!= (to ) (mapEntry "RightmostOuter" Mover)) (moveAgain ) (fromTo (from (to )) (to (mapEntry "SecondRightmostInner" Mover)) 1)))))) (nextPhase Mover (not (is Next Mover)) "InitialSowing")) (phase "InitialSowing" (play (move Select (from (if (is Prev Mover) (sites {(last To true)}) (sites Mover "Home")) (is Occupied (from ))) (then (sow "TrackCCW" (mover ) (if (< 1 (count (to ))) (if (is In (to ) (sites Mover "Inner")) (if (or (is Occupied (if (is Mover P1) (+ (to ) 8) (- (to ) 8))) (is Occupied (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2))))) (and {(if (is Occupied (if (is Mover P1) (+ (to ) 8) (- (to ) 8))) (fromTo (from (if (is Mover P1) (+ (to ) 8) (- (to ) 8))) (to (last From)) (count (if (is Mover P1) (+ (to ) 8) (- (to ) 8))))) (if (is Occupied (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2)))) (fromTo (from (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2)))) (to (last From)) (count (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2)))))) (sow (last From) (+ (count (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2)))) (count (if (is Mover P1) (+ (to ) 8) (- (to ) 8)))) "TrackCCW" (mover ) (is In (to ) (sites {(mapEntry "RightmostOuter" Mover) (mapEntry "RightmostInner" Mover)})))}) (moveAgain )) (moveAgain ))) (is In (to ) (sites {(mapEntry "RightmostOuter" Mover) (mapEntry "RightmostInner" Mover)})))))) (nextPhase Mover (is In (last From) (sites {(mapEntry "RightmostOuter" Mover) (mapEntry "RightmostInner" Mover)})) "InitialSowing")) (phase "Sowing" (play (move Select (from (sites Mover "Home") (is Occupied (from ))) (then (sow "TrackCCW" (mover ) (if (< 1 (count (to ))) (if (is In (to ) (sites Mover "Inner")) (if (or (is Occupied (if (is Mover P1) (+ (to ) 8) (- (to ) 8))) (is Occupied (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2))))) (and {(if (is Occupied (if (is Mover P1) (+ (to ) 8) (- (to ) 8))) (fromTo (from (if (is Mover P1) (+ (to ) 8) (- (to ) 8))) (to (last From)) (count (if (is Mover P1) (+ (to ) 8) (- (to ) 8))))) (if (is Occupied (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2)))) (fromTo (from (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2)))) (to (last From)) (count (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2)))))) (sow (last From) (+ (count (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2)))) (count (if (is Mover P1) (+ (to ) 8) (- (to ) 8)))) "TrackCCW" (mover ))}) (moveAgain )) (moveAgain ))))))))} (end (forEach Player (no Moves Player) (result Player Loss)))))
Line 3
description: 4-row board, of any number of holes. Only the outer rows are used. Four counters in each hole in the outer row. Sowing occurs in an anti-clockwise direction. Players do not own rows, instead, over the course of their sowing, their counters are always grouped together, and sowing must occur from the rearmost counter in the player's series. If, after sowing, a player's series has one counter in the foremost hole and two in the next hole behind it, the player sows again from the rearmost hole. If the player overtakes the opponent's series, the player captures any counters in the opponent's series and places all of them in the hole immediately behind the player's series, now becoming the rearmost hole. If the rearmost hole contains a single counter, it is moved into the next hole which then becomes the rearmost hole for the next turn. If a player is reduced to a single counter, it can be moved two holes on the player's turn. The player who successfully captures all of the opponent's counters wins. 
Ludii code: (game "Chiana wa Kunja" (players 2) (equipment {(mancalaBoard 4 16 None (track "Track" "0,E,63,W" true)) (piece "Seed" Each) (hand Shared)}) (rules (start {(place "Seed1" (sites Bottom) {4}) (place "Seed2" (sites Top) {4})}) (play (or (move Select (from (trackSite FirstSite (trackSite FirstSite (not (is Mover (who (to ))))) (is Mover (who (to ))))) (then (do (and (forEach Site (sites Track "Track" (last From) (trackSite Move (last From) (count (last From)))) (if (!= (mover ) (who (site ))) (and (remove (site ) (count (site ))) (add (piece (id "Seed" Mover)) (to Cell (handSite Shared)) (count (site )))))) (set Var "NumSowed" (count (last From)))) (sow ) (then (and {(if (< 1 (var "NumSowed")) (if (and (= 1 (count (trackSite Move (last From) "Track" (var "NumSowed")))) (= 2 (count (trackSite Move (last From) "Track" (- (var "NumSowed") 1))))) (moveAgain ))) (if (!= 0 (what Cell (handSite Shared))) (fromTo (from Cell (handSite Shared)) (to (last From)) (count Cell (handSite Shared)))) (set Var "NumSowed" 0)}))))) (if (and (= 1 (count Pieces Mover)) (is Empty (trackSite Move (from ) "Track" 1))) (move (from (trackSite FirstSite (trackSite FirstSite (not (is Mover (who (to ))))) (is Mover (who (to ))))) (to (trackSite Move (from ) "Track" 2) (apply (and (remove (to ) (count (to ))) (add (piece (id "Seed" Mover)) (to (to )) (count (to )))))))))) (end (if (no Moves Next) (result Mover Win)))))
Line 3
description: 4x8 board, occasionally 4x9 or 10. One counter in each hole. Sowing occurs in an anti-clockwise direction. The players start by each making a stylised move. Sowing begins from the rightmost hole in the outer row. When the final counter lands in an occupied hole, these counters are picked up and sowing continues. When the sowing reaches the hole immediately before the one from which the sowing began (I.e,, the second-to-right hole in the outer row), these two counters are picked up and both placed in the rightmost hole in the outer row. The player then removes the two counters in the second-to-right hole in the inner row from the board. When both players complete this move, the main phase of the game begins. Players sow from any hole in their two rows. When the final counter lands in an occupied hole, these counters are picked up and sowing continues. When the final counter lands in an empty hole in the inner row, the counters in the opponent's opposite hole in their inner row are captured. If there are also counters in the opponent's opposite hole in the outer row, these are also captured, but only when a capture from the inner row was also made. Players cannot sow single counters, unless there are no holes with multiple counters left, in which case single counters may be sown into an empty hole. Play continues until one player has captured all of the opponent's counters, thus winning the game.
Ludii code: (game "Njombwa (One Counter)" (players 2) (equipment {(mancalaBoard 4 8 None {(track "Track1" "0,E,N1,W" true P1) (track "Track2" "16,E,N1,W" true P2)}) (regions "Home" P1 (sites Track "Track1")) (regions "Home" P2 (sites Track "Track2")) (regions "Inner" P1 (difference (sites Track "Track1") (sites Bottom))) (regions "Inner" P2 (difference (sites Track "Track2") (sites Top))) (regions "Outer" P1 (sites Bottom)) (regions "Outer" P2 (sites Top)) (piece "Seed" Shared)}) (rules (start (set Count 1 (sites Board))) {(phase "Opening1" (play (move Select (from (if (is Prev Mover) (sites {(last To true)}) (if (is Mover P1) (intersection (sites Mover "Outer") (sites Right)) (intersection (sites Mover "Outer") (sites Left)))) (> (count (from )) 0)) (then (sow "Track" (mover ) (if (and (not (is In (trackSite Move (to ) "Track" 1) (if (is Mover P1) (intersection (sites Mover "Outer") (sites Right)) (intersection (sites Mover "Outer") (sites Left))))) (< 1 (count (to )))) (moveAgain )))))) (nextPhase Mover (not (is Next Mover)) "Opening2")) (phase "Opening2" (play (move (from (sites Mover "Home") (is In (trackSite Move (from ) "Track" 1) (if (is Mover P1) (intersection (sites Mover "Outer") (sites Right)) (intersection (sites Mover "Outer") (sites Left))))) (to (if (is Mover P1) (intersection (sites Mover "Outer") (sites Right)) (intersection (sites Mover "Outer") (sites Left)))) 2)) (nextPhase Mover "Opening3")) (phase "Opening3" (play (move Remove (if (is Mover P1) (intersection (sites Mover "Inner") (difference (expand (sites Right)) (sites Right))) (intersection (sites Mover "Inner") (difference (expand (sites Left)) (sites Left)))))) (nextPhase Mover "Sowing")) (phase "Sowing" (play (if (all Sites (sites Mover "Home") (>= 1 (count (site )))) (move Select (from (sites Mover "Home") (and (is Occupied (from )) (is Empty (trackSite Move (from ) "Track" 1)))) (then (sow "Track" (mover )))) (move Select (from (if (is Prev Mover) (sites {(last To true)}) (sites Mover "Home")) (> (count (from )) 1)) (then (sow "Track" (mover ) (if (< 1 (count (to ))) (moveAgain ) (if (and (is In (to ) (sites Mover "Inner")) (is Occupied (if (is Mover P1) (+ (to ) 8) (- (to ) 8)))) (and (remove (if (is Mover P1) (+ (to ) 8) (- (to ) 8))) (if (is Occupied (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2)))) (remove (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2))))))))))))))} (end (forEach NonMover (all Sites (sites Player) (= 0 (count (site )))) (result Player Loss)))))
Line 3
description: 4x8 board. Two counters in each hole. Before play, players may arrange their counters as they see fit in their holes. Players alternate turns sowing the counters from one of their holes in an anticlockwise direction. When the final counter lands in an empty hole, their turn is over. If the final counter lands in an occupied hole, the contents of the two opposite hole in the opponent's rows are captured. If both do not have counters, then the player picks up the counters from the hole the last counter fell into and continues sowing. The player who captures all of the opponent's counters wins.
Ludii code: (game "Lisolo" (players 2) (equipment {(mancalaBoard 4 8 None {(track "Track1" "0,E,N1,W" true P1) (track "Track2" "16,E,N1,W" true P2)}) (piece "Seed" Shared) (regions "Home" P1 (sites Track "Track1")) (regions "Home" P2 (sites Track "Track2")) (regions "Inner" P1 (difference (sites Track "Track1") (sites Bottom))) (regions "Inner" P2 (difference (sites Track "Track2") (sites Top)))}) (rules (start (set Count 2 (union (sites P1 "Home") (sites P2 "Home")))) {(phase "Opening" (play (or (forEach Site (sites Mover "Home") (if (is Occupied (site )) (move (from (site )) (to (forEach (sites Mover "Home") (!= (to ) (site ))))))) (move Pass))) (nextPhase (all Passed) "Sowing")) (phase "Sowing" (play (move Select (from (if (is Prev Mover) (sites {(last To true)}) (sites Mover)) (> (count (from )) 0)) (then (sow "Track" (mover ) (if (> (count (to )) 1) (if (not (is In (to ) (sites Mover "Inner"))) (moveAgain ) (if (and (= 0 (count (if (is Mover P1) (+ (to ) 8) (- (to ) 8)))) (= 0 (count (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2)))))) (moveAgain ) (and (if (!= 0 (count (if (is Mover P1) (+ (to ) 8) (- (to ) 8)))) (remove (if (is Mover P1) (+ (to ) 8) (- (to ) 8)) (count (if (is Mover P1) (+ (to ) 8) (- (to ) 8))))) (if (!= 0 (count (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2))))) (remove (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2))) (count (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2)))))))))))))))} (end (forEach Player (= 0 (count (sites Player "Home"))) (result Player Loss)))))
Line 3
description: 4x8 board. The fifth hole from the left in the inner row is rectangular, the rest are circular. 64 counters. Play begins with one counter in each hole in the inner row. Players take turns placing their remaining counters on the board in their inner rows. When they place a counter, they capture the hole facing it in the opponent's inner row, and sows the counters from either the leftmost or the rightmost hole of the player's inner row, sowing along the inner row. However, if the capture occurs from the rightmost, leftmost, or the next hole adjacent to each in the inner row, the captured pieces must be placed in the leftmost or rightmost hole, whichever is closer. The player may choose which hole to place captured counters in when captures are made from the central four holes in the inner row. The player must capture if possible, if not possible they place a counter into any of the holes in their inner row, pick up the contents of that hole, and sow in either direction. While sowing, if the final counter falls into an occupied hole and the opponent's hole opposite it has counters, the counters in the opponent's hole are captured. If the final counter falls into an occupied hole and the hole opposite it is empty, the counters are picked up and sowing continues in the same direction. If the final counter falls into an empty hole, the turn ends. If during this phase, the opponent's inner row is cleared of counters, the player wins. If all of the counters have been introduced and both players still have counters in their inner row, play proceeds to a second phase. Second Phase: Counters are picked up from any hole on the player's side and sown in either direction. The same capture, sowing, and victory rules apply as before. Captures, however, can only be made on subsequent sowings if there was a capture in the first round of a sowing.
Ludii code: (game "Bao Kiswahili (DR Congo)" (players 2) (equipment {(mancalaBoard 4 8 None {(track "TrackCCW1" "0,E,N1,W" true P1) (track "TrackCCW2" "16,E,N1,W" true P2) (track "TrackCW1" "7,W,N1,E" true P1) (track "TrackCW2" "23,W,N1,E" true P2)}) (piece "Seed" Shared) (hand Each) (regions "Home" P1 (expand (sites Bottom))) (regions "Home" P2 (expand (sites Top))) (regions "Inner" P1 (sites Row 1)) (regions "Inner" P2 (sites Row 2)) (map "LeftMostInner" {(pair P1 8) (pair P2 23)}) (map "RightMostInner" {(pair P1 15) (pair P2 16)}) (map "AdjacentLeftMostInner" {(pair P1 9) (pair P2 22)}) (map "AdjacentRightMostInner" {(pair P1 14) (pair P2 17)})}) (rules (start {(set Count 24 (handSite P1)) (set Count 24 (handSite P2)) (set Count 1 (union (sites Row 1) (sites Row 2)))}) {(phase "Placement" (play (if (is Prev Mover) (if (is Pending) (or (if (or (= 1 (value Player Mover)) (= 0 (value Player Mover))) (do (fromTo (from (if (is Mover P1) (+ (last To true) 8) (- (last To true) 8))) (to (mapEntry "LeftMostInner" Mover)) (count (if (is Mover P1) (+ (last To true) 8) (- (last To true) 8)))) (move Select (from (mapEntry "LeftMostInner" Mover)) (then (sow "TrackCW" (mover ) (if (is In (to ) (sites Mover "Inner")) (if (is Occupied (if (is Mover P1) (+ (to ) 8) (- (to ) 8))) (and {(moveAgain ) (set Pending) (if (is In (to ) (expand (sites Right))) (set Value Mover 2) (if (is In (to ) (expand (sites Left))) (set Value Mover 1) (set Value Mover 0)))}) (if (< 1 (count (to ))) (and {(moveAgain ) (set Var "Replay" (to )) (set Var "Direction" 1)}))) (if (< 1 (count (to ))) (and {(moveAgain ) (set Var "Replay" (to )) (set Var "Direction" 1)})))))))) (if (or (= 2 (value Player Mover)) (= 0 (value Player Mover))) (do (fromTo (from (if (is Mover P1) (+ (last To true) 8) (- (last To true) 8))) (to (mapEntry "RightMostInner" Mover)) (count (if (is Mover P1) (+ (last To true) 8) (- (last To true) 8)))) (move Select (from (mapEntry "RightMostInner" Mover)) (then (sow "TrackCCW" (mover ) (if (is In (to ) (sites Mover "Inner")) (if (is Occupied (if (is Mover P1) (+ (to ) 8) (- (to ) 8))) (and {(moveAgain ) (set Pending) (if (is In (to ) (expand (sites Right))) (set Value Mover 2) (if (is In (to ) (expand (sites Left))) (set Value Mover 1) (set Value Mover 0)))}) (if (< 1 (count (to ))) (and {(moveAgain ) (set Var "Replay" (to )) (set Var "Direction" 2)}))) (if (< 1 (count (to ))) (and {(moveAgain ) (set Var "Replay" (to )) (set Var "Direction" 2)}))))))))) (or (if (or (= (var "Direction") 1) (= (var "Direction") 3)) (move Select (from (var "Replay")) (then (sow "TrackCW" (mover ) (if (is In (to ) (sites Mover "Inner")) (if (is Occupied (if (is Mover P1) (+ (to ) 8) (- (to ) 8))) (and {(moveAgain ) (set Pending) (if (is In (to ) (expand (sites Right))) (set Value Mover 2) (if (is In (to ) (expand (sites Left))) (set Value Mover 1) (set Value Mover 0)))}) (if (< 1 (count (to ))) (and {(moveAgain ) (set Var "Replay" (to )) (set Var "Direction" 1)}))) (if (< 1 (count (to ))) (and {(moveAgain ) (set Var "Replay" (to )) (set Var "Direction" 1)}))))))) (if (or (= (var "Direction") 2) (= (var "Direction") 3)) (move Select (from (var "Replay")) (then (sow "TrackCCW" (mover ) (if (is In (to ) (sites Mover "Inner")) (if (is Occupied (if (is Mover P1) (+ (to ) 8) (- (to ) 8))) (and {(moveAgain ) (set Pending) (if (is In (to ) (expand (sites Right))) (set Value Mover 2) (if (is In (to ) (expand (sites Left))) (set Value Mover 1) (set Value Mover 0)))}) (if (< 1 (count (to ))) (and {(moveAgain ) (set Var "Replay" (to )) (set Var "Direction" 2)}))) (if (< 1 (count (to ))) (and {(moveAgain ) (set Var "Replay" (to )) (set Var "Direction" 2)}))))))))) (if (is Occupied (handSite Mover)) (priority {(move (from (handSite Mover)) (to (sites Mover "Inner") (is Occupied (if (is Mover P1) (+ (to ) 8) (- (to ) 8)))) 1 (then (and {(moveAgain ) (set Pending) (if (is In (last To) (expand (sites Right))) (set Value Mover 2) (if (is In (last To) (expand (sites Left))) (set Value Mover 1) (set Value Mover 0)))}))) (move (from (handSite Mover)) (to (sites Mover "Inner")) 1 (then (and {(moveAgain ) (set Var "Replay" (last To)) (set Var "Direction" 3)})))}) (or (move Select (from (sites Mover) (is Occupied (from ))) (then (sow "TrackCW" (mover ) (if (< 1 (count (to ))) (and {(moveAgain ) (set Var "Replay" (to )) (set Var "Direction" 1)}))))) (move Select (from (sites Mover) (is Occupied (from ))) (then (sow "TrackCCW" (mover ) (if (< 1 (count (to ))) (and {(moveAgain ) (set Var "Replay" (to )) (set Var "Direction" 2)}))))))))))} (end (forEach Player (all Sites (sites Player "Inner") (= 0 (count (site )))) (result Player Loss)))))
Line 3
description: Play begins with two seeds in each hole. Each player owns the two rows closest to them. Play proceeds by taking the seeds from one hole and sowing them one by one in consecutive holes in an anti-clockwise direction. If the last seed falls in a hole in the inner row, and the opponent's hole opposite it is not empty, then the opponent's seeds in that hole are captured. Players can only play from holes with single counters when there is no other option, and they may not sow into another hole that already contains a counter. Play continues until one player no longer has any seeds.
Ludii code: (game "Hawalis" (players 2) (equipment {(mancalaBoard 4 7 None {(track "Track1" "0,E,N1,W" true P1) (track "Track2" "14,E,N1,W" true P2)}) (regions "Home" P1 (sites Track "Track1")) (regions "Home" P2 (sites Track "Track2")) (regions "Inner" P1 (difference (sites Track "Track1") (sites Bottom))) (regions "Inner" P2 (difference (sites Track "Track2") (sites Top))) (piece "Seed" Shared) (hand Each)}) (rules (start (set Count 2 (union (sites P1 "Home") (sites P2 "Home")))) (play (priority (move Select (from (sites Mover "Home") (> (count (from )) 1)) (then (sow "Track" (mover ) (and {(= (count (to )) 1) (is In (to ) (sites Mover "Inner")) (> (count (if (is Mover P1) (+ (to ) 7) (- (to ) 7))) 0)}) (fromTo (from (if (is Mover P1) (+ (to ) 7) (- (to ) 7))) (to (handSite Mover)) (count (if (is Mover P1) (+ (to ) 7) (- (to ) 7))))))) (move Select (from (sites Mover "Home") (= (count (from )) 1)) (then (sow "Track" (mover ) (and {(= (count (to )) 1) (is In (to ) (sites Mover "Inner")) (> (count (if (is Mover P1) (+ (to ) 7) (- (to ) 7))) 0)}) (fromTo (from (if (is Mover P1) (+ (to ) 7) (- (to ) 7))) (to (handSite Mover)) (count (if (is Mover P1) (+ (to ) 7) (- (to ) 7))))))))) (end (if (no Moves Mover) (byScore {(score P1 (+ (count Cell (handSite P1)) (count (sites P1 "Home")))) (score P2 (+ (count Cell (handSite P2)) (count (sites P2 "Home"))))})))))
Line 3
description: 4x6-16 board. Number of counters per player is four times the number of holes in a row minus two. Counters are distributed only in the outer row, with two counters in each hole, except the hole on the far left which contains the rest. The counters are then redistributed so that there is one in every hole, except the one on the extreme left in the inner and outer hole. The one on the left in the inner hole remains empty and the one in the outer row retains the same number initially placed there. Play begins from any of the player's holes, sowing anti-clockwise. When the final counter lands in an occupied hole, these are picked up and sowing continues, unless a capture can be made. Captures are made when the final counter falls into an occupied hole in the inner row, and the opponent's hole opposite contains counters. If it is, they are captured, and if the hole in to outer row opposite also contains counters, these are also captured. These are then sown from the hole following the one from which the capture occurred. If the final counter falls into an empty hole, the turn is over. Single counters cannot be sown. Play ends when one player cannot move.
Ludii code: (game "Muvalavala (Quioco)" (players 2) (equipment {(mancalaBoard 4 6 None {(track "Track1" "0,E,N1,W" true P1) (track "Track2" "12,E,N1,W" true P2)}) (piece "Seed" Shared) (regions "Home" P1 (sites Track "Track1")) (regions "Home" P2 (sites Track "Track2")) (regions "Inner" P1 (difference (sites Track "Track1") (sites Bottom))) (regions "Inner" P2 (difference (sites Track "Track2") (sites Top))) (regions "Outer" P1 (sites Bottom)) (regions "Outer" P2 (sites Top))}) (rules (start {(set Count 1 (union {(difference (sites P1 "Home") (sites Left)) (difference (sites P2 "Home") (sites Right))})) (set Count (- (- (* 4 6) 2) (* 2 (- 6 1))) (union (intersection (sites Left) (sites P1 "Outer")) (intersection (sites Right) (sites P2 "Outer"))))}) (play (move Select (from (if (is Prev Mover) (sites {(last To true)}) (sites Mover "Home")) (> (count (from )) 1)) (then (sow "Track" (mover ) (if (and {(> (count (to )) 1) (is In (to ) (sites Mover "Inner")) (> (count (if (is Mover P1) (+ (to ) 6) (- (to ) 6))) 0)}) (and {(fromTo (from (if (is Mover P1) (+ (to ) 6) (- (to ) 6))) (to (to )) (count (if (is Mover P1) (+ (to ) 6) (- (to ) 6)))) (if (> (count (if (is Mover P1) (+ (to ) (* 6 2)) (- (to ) (* 6 2)))) 0) (fromTo (from (if (is Mover P1) (+ (to ) (* 6 2)) (- (to ) (* 6 2)))) (to (to )) (count (if (is Mover P1) (+ (to ) (* 6 2)) (- (to ) (* 6 2)))))) (sow (to ) (+ (count (if (is Mover P1) (+ (to ) 6) (- (to ) 6))) (count (if (is Mover P1) (+ (to ) (* 6 2)) (- (to ) (* 6 2))))) "Track" (mover ))}) (if (> (count (to )) 1) (moveAgain ))))))) (end (if (no Moves Next) (result Mover Win)))))
Line 3
description: 4x16-22 board. Two counters in each player's outer row and the right half of the holes in the inner row. The opening move is stylized; each player must make one of the following moves on their first turn:
            
            Take counters from the hole that is two to the right of the center of the board in the outer row. Sow them to the right starting in the hole third from the center in the inner row;
            
            Take counters from the hole that is three to the right of the center of the board in the outer row. Sown them to the right starting from the hole second from the center in the inner row;
            
            Take counters from the hole next to the center of the board in the inner row. Sow them to the right;
            
            Take counters from the hole next to the left of the center of the board in the outer row. Sow them to the right starting from the hole next to the right of the center of the board.
            
        Players then sow from any of their holes in an anti-clockwise direction. If the last counter of a sowing lands in an empty hole, the turn ends. If the last counter falls into an occupied hole, the counters in that hole are picked up and sowing continues, unless the hole in the inner row on the opponent's side opposite the one the player last sowed into is occupied, in which case any counters in this hole and any in the opponent's opposite outer row hole are captured. The captured counters are then sown on the player's side of the board, starting with the hole following the one from which the capture was made. Sowing cannot occur from holes with single counters. The game ends when one player can no longer move.
Ludii code: (game "Hus (Nama)" (players 2) (equipment {(mancalaBoard 4 16 None {(track "TrackCCW1" "0,E,N1,W" true P1) (track "TrackCCW2" "32,E,N1,W" true P2)}) (regions "Home" P1 (sites Track "TrackCCW1")) (regions "Home" P2 (sites Track "TrackCCW2")) (regions "Inner" P1 (difference (sites Track "TrackCCW1") (sites Bottom))) (regions "Inner" P2 (difference (sites Track "TrackCCW2") (sites Top))) (regions "Outer" P1 (difference (sites Track "TrackCCW1") (sites P1 "Inner"))) (regions "Outer" P2 (difference (sites Track "TrackCCW2") (sites P2 "Inner"))) (regions "HalfRightInner" P1 (sites {24 25 26 27 28 29 30 31})) (regions "HalfRightInner" P2 (sites {32 33 34 35 36 37 38 39})) (piece "Seed" Shared) (hand Each)}) (rules (start (set Count 2 (union {(sites P1 "Outer") (sites P2 "Outer") (sites P1 "HalfRightInner") (sites P2 "HalfRightInner")}))) {(phase "OpeningP1" P1 (play (or {(move Select (from (- (/ 16 2) 2)) (then (and (fromTo (from (last To)) (to (+ (/ 16 2) 1)) 2) (sow (+ (/ 16 2) 1) 2 "TrackCCW" (mover ))))) (move Select (from (+ (/ 16 2) 2)) (then (and (fromTo (from (last To)) (to (+ (+ 16 (/ 16 2)) 1))) (fromTo (from (last To)) (to (+ (+ 16 (/ 16 2)) 2)))))) (move Select (from (+ 16 (/ 16 2))) (then (and (fromTo (from (last To)) (to (+ (+ 16 (/ 16 2)) 1))) (fromTo (from (last To)) (to (+ (+ 16 (/ 16 2)) 2)))))) (move Select (from (- (/ 16 2) 1)) (then (sow "TrackCCW" (mover ))))})) (nextPhase Mover "Sowing")) (phase "OpeningP2" P2 (play (or {(move Select (from (+ (- (* 4 16) (/ 16 2)) 1)) (then (and (fromTo (from (last To)) (to (- (- (* 4 16) (/ 16 2)) 2)) 2) (sow (- (- (* 4 16) (/ 16 2)) 2) 2 "TrackCCW" (mover ))))) (move Select (from (- (- (* 4 16) (/ 16 2)) 3)) (then (and (fromTo (from (last To)) (to (- (- (* 3 16) (/ 16 2)) 2))) (fromTo (from (last To)) (to (- (- (* 3 16) (/ 16 2)) 3)))))) (move Select (from (- (- (* 3 16) (/ 16 2)) 1)) (then (and (fromTo (from (last To)) (to (- (- (* 3 16) (/ 16 2)) 2))) (fromTo (from (last To)) (to (- (- (* 3 16) (/ 16 2)) 3)))))) (move Select (from (- (* 4 16) (/ 16 2))) (then (sow "TrackCCW" (mover ))))})) (nextPhase Mover "Sowing")) (phase "Sowing" (play (move Select (from (if (is Prev Mover) (sites {(var "Replay")}) (sites Mover "Home")) (< 1 (count (from )))) (then (sow "TrackCCW" (mover ) (if (< 1 (count (to ))) (if (is In (to ) (sites Mover "Inner")) (if (is Occupied (if (is Mover P1) (+ (to ) 16) (- (to ) 16))) (and {(fromTo (from (if (is Mover P1) (+ (to ) 16) (- (to ) 16))) (to (to )) (count (if (is Mover P1) (+ (to ) 16) (- (to ) 16)))) (if (is Occupied (if (is Mover P1) (+ (to ) (* 16 2)) (- (to ) (* 16 2)))) (and (fromTo (from (if (is Mover P1) (+ (to ) (* 16 2)) (- (to ) (* 16 2)))) (to (to )) (count (if (is Mover P1) (+ (to ) (* 16 2)) (- (to ) (* 16 2))))) (sow (to ) (+ (count (if (is Mover P1) (+ (to ) (* 16 3)) (- (to ) (* 16 3)))) (count (if (is Mover P1) (+ (to ) (* 16 2)) (- (to ) (* 16 2))))) "TrackCCW" (mover ))) (sow (to ) (count (if (is Mover P1) (+ (to ) 16) (- (to ) 16))) "TrackCCW" (mover )))}) (and (moveAgain ) (set Var "Replay" (to )))) (if (is Occupied (if (is Mover P1) (+ (to ) (* 16 2)) (- (to ) (* 16 2)))) (and {(fromTo (from (if (is Mover P1) (+ (to ) (* 16 2)) (- (to ) (* 16 2)))) (to (to )) (count (if (is Mover P1) (+ (to ) (* 16 2)) (- (to ) (* 16 2))))) (if (is Occupied (if (is Mover P1) (+ (to ) (* 16 3)) (- (to ) (* 16 3)))) (and (fromTo (from (if (is Mover P1) (+ (to ) (* 16 3)) (- (to ) (* 16 3)))) (to (to )) (count (if (is Mover P1) (+ (to ) (* 16 3)) (- (to ) (* 16 3))))) (sow (to ) (+ (count (if (is Mover P1) (+ (to ) (* 16 3)) (- (to ) (* 16 3)))) (count (if (is Mover P1) (+ (to ) (* 16 2)) (- (to ) (* 16 2))))) "TrackCCW" (mover ))) (sow (to ) (count (if (is Mover P1) (+ (to ) (* 16 2)) (- (to ) (* 16 2)))) "TrackCCW" (mover )))}) (and (moveAgain ) (set Var "Replay" (to )))))))))) (end (forEach NonMover (no Moves Player) (result Player Loss))))}))
Line 3
description: 4x8 board. Four pieces in each of the holes in the inner two rows. Sowing occurs in an anti-clockwise direction. Single counters cannot be sown. When the final counter of a sowing falls into an occupied hole, these counters are picked up and the sowing continues. If this hole is in the player's inner row, the counters in the opponent's opposite holes in both rows are captured. Both the inner and outer opposite holes must contain counters for a capture to occur. Play continues with the captured counters, and the player sows these beginning with the next hole after the last one on the player's side from which they picked up holes. Captures cannot be made on the first move. Clockwise sowing can begin from the following holes only if it will allow a capture to occur: the rightmost and leftmost holes of the outer row, the second from the right and second from the left holes in the inner row. Direction can be changed in the middle of a turn if the final counter lands in one of these holes and a clockwise move will result in a capture. When no capture is available, the player must resume in an anti-clockwise direction. When the final counter falls into an empty hole, the turn ends. 
Ludii code: (game "Kubuguza" (players 2) (equipment {(mancalaBoard 4 8 None {(track "TrackCCW1" "0,E,N1,W" true P1) (track "TrackCCW2" "16,E,N1,W" true P2) (track "TrackCW1" "7,W,N1,E" true P1) (track "TrackCW2" "23,W,N1,E" true P2)}) (regions "Home" P1 (sites Track "TrackCCW1")) (regions "Home" P2 (sites Track "TrackCCW2")) (regions "Inner" P1 (difference (sites Track "TrackCCW1") (sites Bottom))) (regions "Inner" P2 (difference (sites Track "TrackCCW2") (sites Top))) (regions "HolesCW" P1 (sites {15 8 1 6})) (regions "HolesCW" P2 (sites {16 23 25 30})) (piece "Seed" Shared) (hand Each)}) (rules (start (set Count 3 (union (sites P1 "Inner") (sites P2 "Inner")))) (play (or (move Select (from (if (is Prev Mover) (sites {(var "Replay")}) (sites Mover "Home")) (> (count (from )) 1)) (then (sow "TrackCCW" (mover ) (if (< 1 (count (to ))) (and (if (and {(> (count Turns) 2) (is In (to ) (sites Mover "Inner")) (is Occupied (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2)))) (is Occupied (if (is Mover P1) (+ (to ) 8) (- (to ) 8)))}) (and {(fromTo (from (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2)))) (to (last From)) (count (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2))))) (fromTo (from (if (is Mover P1) (+ (to ) 8) (- (to ) 8))) (to (last From)) (count (if (is Mover P1) (+ (to ) 8) (- (to ) 8)))) (set Var "Replay" (last From))}) (set Var "Replay" (to ))) (moveAgain )))))) (move Select (from (if (is Prev Mover) (sites {(var "Replay")}) (sites Mover "HolesCW")) (and {(> (count (from )) 1) (is In (from ) (sites Mover "HolesCW")) (if (is In (trackSite Move (from ) "TrackCW" (count (from ))) (sites Mover "Inner")) (and (is Occupied (if (is Mover P1) (+ (trackSite Move (from ) "TrackCW" (count (from ))) (* 8 2)) (- (trackSite Move (from ) "TrackCW" (count (from ))) (* 8 2)))) (is Occupied (if (is Mover P1) (+ (trackSite Move (from ) "TrackCW" (count (from ))) 8) (- (trackSite Move (from ) "TrackCW" (count (from ))) 8)))) false)})) (then (sow "TrackCW" (mover ) (if (< 1 (count (to ))) (and (if (and {(> (count Turns) 2) (is In (to ) (sites Mover "Inner")) (is Occupied (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2)))) (is Occupied (if (is Mover P1) (+ (to ) 8) (- (to ) 8)))}) (and {(fromTo (from (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2)))) (to (last From)) (count (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2))))) (fromTo (from (if (is Mover P1) (+ (to ) 8) (- (to ) 8))) (to (last From)) (count (if (is Mover P1) (+ (to ) 8) (- (to ) 8)))) (set Var "Replay" (last From))}) (set Var "Replay" (to ))) (moveAgain )))))))) (end (forEach Player (no Moves Player) (result Player Loss)))))
Line 3
description: 4x8 board. One hole, the Nyumba, is square, and is the hole immediately to the right of center in the player's inner row. The holes on both ends of both players' inner rows are Kichwa, and the next holes in from those are the Kimbi. Players sow from one of their holes in either direction on the board. When the final counter lands in an occupied hole, these counters are picked up and sowing continues, when a capture is not possible. When the final counter lands in an empty hole, the turn ends.  Play begins with six counters in the Nyumba, two in each of the holes to its right, and 22 counters to be entered on the board.
            
            Namua is the stage of the game where there are still counters to be placed on the board. During Namua, the Nyumba is the house, as long as it has at least six counters in it and it has not been emptied. Players place counters into an occupied hole in their front row. If this hole is opposite one of the opponent's occupied holes, the opponent's counters in that hole are captured. Captures must be made if possible. If a capture is not possible, the counter is placed into a hole and the contents of that hole are sown. The house cannot be emptied, but if it is the only occupied hole, the counter placed into it, and only that one counter, can be sown to one of the adjacent holes.  Sowing from a Kichwa in the direction of the back row is not allowed unless it is the only occupied hole in the front row. Players cannot place a counter in holes with single counters  unless only holes in the front row with single counters exist or the house is still present. If the final counter of a sowing lands in the house, the turn ends. Once all of the counters are placed on the board for both players, Namua ends.
            
            The next stage begins. The rules for the house mentioned above during the Namua stage no longer apply, but the rules below remain in effect until the first capture in this phase of the game has been made.  Players alternate turns taking the counters from one of their holes that has more than one and less than sixteen counters and sowing them. When the final counter lands in an occupied hole in the front row opposite one of the opponent's occupied holes, the opponent's counters are captured, unless the hole from which sowing began contained sixteen or more counters. Captures must be made if possible. Single counters cannot be sown. Sowing must occur from an inner row hole when possible. A Kichwa cannot be sown toward the back row if it is the only occupied hole in the front row. 
            
            Capturing rules:  The counters captured from the opponent's hole are captured and sown on the player's front row. If they were captured from a Kimbi or Kichwa, they must be sown from the nearest Kichwa. If they were not captured from one of these holes, they must be sown from the Kichwa in the direction toward which the sowing was proceeding when the capture was made. If the capture was not made from a Kimbi or Kichwa and it was not made while sowing, the player can choose which Kichwa to sow from. Further captures in the same turn must be made with this sowing if possible, and are made if the final counter lands in an occupied hole in the inner row which is opposite an occupied hole in the opponent's inner row. If a capture is not possible, the sowing must end in the house. When the final counter lands in the house, the player may choose to continue sowing from the house or to end their turn. If the player cannot capture and cannot drop the final counter in the house, they must sow into an occupied hole, and continue sowing from that hole. The player may sow such that the final counter lands in an empty hole only when none of the other options are possible.
            
            When a player sows in such a way that they do not capture and the opponent is unable to capture on their next turn but the player will be able to capture on their own following move, the opponent cannot sow from this hole. The opponent is able to sow from such a hole if they can capture from this hole; if the hole in question is the house (this remains true for all phases of the game); if it is the only occupied hole in the front row; or if it is the only hole in the front row with greater than one counter. This rule does not apply during the Namua phase.
            
        A player wins when their opponent's inner row holes are empty. This includes in the middle of sowing (e.g., sowing into the outer row directly from a Kichwa when it is the only occupied hole in the front row). A player may also lose if they only  have single counters in their holes. 
Ludii code: (game "Bao" (players 2) (equipment {(mancalaBoard 4 8 None {(track "TrackCCW1" "0,E,N1,W" true P1) (track "TrackCCW2" "16,E,N1,W" true P2) (track "TrackCW1" "7,W,N1,E" true P1) (track "TrackCW2" "23,W,N1,E" true P2)}) (piece "Seed" Shared) (hand Each) (regions "Home" P1 (expand (sites Bottom))) (regions "Home" P2 (expand (sites Top))) (regions "Inner" P1 (sites Row 1)) (regions "Inner" P2 (sites Row 2)) (regions "SquaresHoles" (sites {19 12})) (regions "RightSquare" (sites {18 13})) (map "LeftMostInner" {(pair P1 8) (pair P2 23)}) (map "RightMostInner" {(pair P1 15) (pair P2 16)}) (map "AdjacentLeftMostInner" {(pair P1 9) (pair P2 22)}) (map "AdjacentRightMostInner" {(pair P1 14) (pair P2 17)})}) (rules (start {(set Count 22 (handSite P1)) (set Count 22 (handSite P2)) (set Count 6 (sites "SquaresHoles")) (set Count 2 (sites "RightSquare"))}) (play (if (is Prev Mover) (if (is Pending) (or (if (or (= 1 (var "Side")) (= 0 (var "Side"))) (do (fromTo (from (if (is Mover P1) (+ (last To true) 8) (- (last To true) 8))) (to (mapEntry "LeftMostInner" Mover)) (count (if (is Mover P1) (+ (last To true) 8) (- (last To true) 8)))) (move Select (from (mapEntry "LeftMostInner" Mover)) (then (sow (if (!= (value Player Mover) 1) (if (is In (last From) (sites "SquaresHoles")) (if (<= (count (from )) 6) (count (last From)) (min 1 (count (last From)))) (count (last From))) (count (last From))) "TrackCW" (mover ) (if (is In (to ) (sites Mover "Inner")) (if (is Occupied (if (is Mover P1) (+ (to ) 8) (- (to ) 8))) (and {(moveAgain ) (set Pending) (if (is In (to ) (expand (sites Right))) (set Var "Side" 2) (if (is In (to ) (expand (sites Left))) (set Var "Side" 1) (set Var "Side" 0)))}) (if (< 1 (count (to ))) (if (or (= 1 (value Player Mover)) (and (!= 1 (value Player Mover)) (not (is In (to ) (sites "SquaresHoles"))))) (and {(moveAgain ) (set Var "Replay" (to )) (set Var "Direction" 1)}) (set Var "Direction" 0)))) (if (< 1 (count (to ))) (if (or (= 1 (value Player Mover)) (and (!= 1 (value Player Mover)) (not (is In (to ) (sites "SquaresHoles"))))) (and {(moveAgain ) (set Var "Replay" (to )) (set Var "Direction" 1)}) (set Var "Direction" 0)))) (then (if (and {(!= 1 (value Player Mover)) (is In (last From) (sites "SquaresHoles")) (< (count (last From)) 6)}) (set Value Mover 1)))))))) (if (or (= 2 (var "Side")) (= 0 (var "Side"))) (do (fromTo (from (if (is Mover P1) (+ (last To true) 8) (- (last To true) 8))) (to (mapEntry "RightMostInner" Mover)) (count (if (is Mover P1) (+ (last To true) 8) (- (last To true) 8)))) (move Select (from (mapEntry "RightMostInner" Mover)) (then (sow (if (!= (value Player Mover) 1) (if (is In (last From) (sites "SquaresHoles")) (if (<= (count (from )) 6) (count (last From)) (min 1 (count (last From)))) (count (last From))) (count (last From))) "TrackCCW" (mover ) (if (is In (to ) (sites Mover "Inner")) (if (is Occupied (if (is Mover P1) (+ (to ) 8) (- (to ) 8))) (and {(moveAgain ) (set Pending) (if (is In (to ) (expand (sites Right))) (set Var "Side" 2) (if (is In (to ) (expand (sites Left))) (set Var "Side" 1) (set Var "Side" 0)))}) (if (< 1 (count (to ))) (if (or (= 1 (value Player Mover)) (and (!= 1 (value Player Mover)) (not (is In (to ) (sites "SquaresHoles"))))) (and {(moveAgain ) (set Var "Replay" (to )) (set Var "Direction" 2)}) (set Var "Direction" 0)))) (if (< 1 (count (to ))) (if (or (= 1 (value Player Mover)) (and (!= 1 (value Player Mover)) (not (is In (to ) (sites "SquaresHoles"))))) (and {(moveAgain ) (set Var "Replay" (to )) (set Var "Direction" 2)}) (set Var "Direction" 0)))) (then (if (and {(!= 1 (value Player Mover)) (is In (last From) (sites "SquaresHoles")) (< (count (last From)) 6)}) (set Value Mover 1))))))))) (or (if (and (if (!= (var "Replay") (mapEntry "RightMostInner" Mover)) true (all Sites (difference (sites Mover "Inner") (mapEntry "RightMostInner" Mover)) (is Empty (site )))) (or (= (var "Direction") 1) (= (var "Direction") 3))) (move Select (from (var "Replay")) (then (sow (if (!= (value Player Mover) 1) (if (is In (last From) (sites "SquaresHoles")) (if (<= (count (from )) 6) (count (last From)) (min 1 (count (last From)))) (count (last From))) (count (last From))) "TrackCW" (mover ) (if (is In (to ) (sites Mover "Inner")) (if (is Occupied (if (is Mover P1) (+ (to ) 8) (- (to ) 8))) (and {(moveAgain ) (set Pending) (if (is In (to ) (expand (sites Right))) (set Var "Side" 2) (if (is In (to ) (expand (sites Left))) (set Var "Side" 1) (set Var "Side" 0)))}) (if (< 1 (count (to ))) (if (or (= 1 (value Player Mover)) (and (!= 1 (value Player Mover)) (not (is In (to ) (sites "SquaresHoles"))))) (and {(moveAgain ) (set Var "Replay" (to )) (set Var "Direction" 1)}) (set Var "Direction" 0)))) (if (< 1 (count (to ))) (if (or (= 1 (value Player Mover)) (and (!= 1 (value Player Mover)) (not (is In (to ) (sites "SquaresHoles"))))) (and {(moveAgain ) (set Var "Replay" (to )) (set Var "Direction" 1)}) (set Var "Direction" 0)))) (then (if (and {(!= 1 (value Player Mover)) (is In (last From) (sites "SquaresHoles")) (< (count (last From)) 6)}) (set Value Mover 1))))))) (if (and (if (!= (var "Replay") (mapEntry "LeftMostInner" Mover)) true (all Sites (difference (sites Mover "Inner") (mapEntry "LeftMostInner" Mover)) (is Empty (site )))) (or (= (var "Direction") 2) (= (var "Direction") 3))) (move Select (from (var "Replay")) (then (sow (if (!= (value Player Mover) 1) (if (is In (last From) (sites "SquaresHoles")) (if (<= (count (from )) 6) (count (last From)) (min 1 (count (last From)))) (count (last From))) (count (last From))) "TrackCCW" (mover ) (if (is In (to ) (sites Mover "Inner")) (if (is Occupied (if (is Mover P1) (+ (to ) 8) (- (to ) 8))) (and {(moveAgain ) (set Pending) (if (is In (to ) (expand (sites Right))) (set Var "Side" 2) (if (is In (to ) (expand (sites Left))) (set Var "Side" 1) (set Var "Side" 0)))}) (if (< 1 (count (to ))) (if (or (= 1 (value Player Mover)) (and (!= 1 (value Player Mover)) (not (is In (to ) (sites "SquaresHoles"))))) (and {(moveAgain ) (set Var "Replay" (to )) (set Var "Direction" 2)}) (set Var "Direction" 0)))) (if (< 1 (count (to ))) (if (or (= 1 (value Player Mover)) (and (!= 1 (value Player Mover)) (not (is In (to ) (sites "SquaresHoles"))))) (and {(moveAgain ) (set Var "Replay" (to )) (set Var "Direction" 2)}) (set Var "Direction" 0)))) (then (if (and {(!= 1 (value Player Mover)) (is In (last From) (sites "SquaresHoles")) (< (count (last From)) 6)}) (set Value Mover 1))))))))) (if (is Occupied (handSite Mover)) (priority {(move (from (handSite Mover)) (to (sites Mover "Inner") (and (is Occupied (to )) (is Occupied (if (is Mover P1) (+ (to ) 8) (- (to ) 8))))) 1 (then (and {(moveAgain ) (set Pending) (if (is In (last To) (expand (sites Right))) (set Var "Side" 2) (if (is In (last To) (expand (sites Left))) (set Var "Side" 1) (set Var "Side" 0)))}))) (if (!= (value Player Mover) 1) (move (from (handSite Mover)) (to (difference (sites Mover "Inner") (sites "SquaresHoles")) (is Occupied (to ))) 1 (then (and {(moveAgain ) (set Var "Replay" (last To)) (set Var "Direction" 3)}))) (move (from (handSite Mover)) (to (sites Mover "Inner") (is Occupied (to ))) 1 (then (and {(moveAgain ) (set Var "Replay" (last To)) (set Var "Direction" 3)})))) (if (!= (value Player Mover) 1) (move (from (handSite Mover)) (to (intersection (sites "SquaresHoles") (sites Mover "Inner")) (is Occupied (to ))) 1 (then (and {(moveAgain ) (set Var "Replay" (last To)) (set Var "Direction" 3)}))))}) (priority {(or (move Select (from (sites Mover) (and (or (< 1 (count (from ))) (> 16 (count (from )))) (is Occupied (if (is Mover P1) (+ (trackSite Move (from ) "TrackCW" (count (from ))) 8) (- (trackSite Move (from ) "TrackCW" (count (from ))) 8))))) (then (sow "TrackCW" (mover ) (if (is In (to ) (sites Mover "Inner")) (if (is Occupied (if (is Mover P1) (+ (to ) 8) (- (to ) 8))) (and {(moveAgain ) (set Pending) (if (is In (to ) (expand (sites Right))) (set Var "Side" 2) (if (is In (to ) (expand (sites Left))) (set Var "Side" 1) (set Var "Side" 0)))}) (if (< 1 (count (to ))) (if (or (= 1 (value Player Mover)) (and (!= 1 (value Player Mover)) (not (is In (to ) (sites "SquaresHoles"))))) (and {(moveAgain ) (set Var "Replay" (to )) (set Var "Direction" 1)}) (set Var "Direction" 0)))) (if (< 1 (count (to ))) (if (or (= 1 (value Player Mover)) (and (!= 1 (value Player Mover)) (not (is In (to ) (sites "SquaresHoles"))))) (and {(moveAgain ) (set Var "Replay" (to )) (set Var "Direction" 1)}) (set Var "Direction" 0))))))) (move Select (from (sites Mover) (and (or (< 1 (count (from ))) (> 16 (count (from )))) (is Occupied (if (is Mover P1) (+ (trackSite Move (from ) "TrackCCW" (count (from ))) 8) (- (trackSite Move (from ) "TrackCCW" (count (from ))) 8))))) (then (sow "TrackCCW" (mover ) (if (is In (to ) (sites Mover "Inner")) (if (is Occupied (if (is Mover P1) (+ (to ) 8) (- (to ) 8))) (and {(moveAgain ) (set Pending) (if (is In (to ) (expand (sites Right))) (set Var "Side" 2) (if (is In (to ) (expand (sites Left))) (set Var "Side" 1) (set Var "Side" 0)))}) (if (< 1 (count (to ))) (if (or (= 1 (value Player Mover)) (and (!= 1 (value Player Mover)) (not (is In (to ) (sites "SquaresHoles"))))) (and {(moveAgain ) (set Var "Replay" (to )) (set Var "Direction" 2)}) (set Var "Direction" 0)))) (if (< 1 (count (to ))) (if (or (= 1 (value Player Mover)) (and (!= 1 (value Player Mover)) (not (is In (to ) (sites "SquaresHoles"))))) (and {(moveAgain ) (set Var "Replay" (to )) (set Var "Direction" 2)}) (set Var "Direction" 0)))))))) (or (move Select (from (if (!= (value Player Mover) 1) (sites Mover) (difference (sites Mover) (sites "SquaresHoles"))) (or (< 1 (count (from ))) (> 16 (count (from ))))) (then (sow "TrackCW" (mover ) (if (is In (to ) (sites Mover "Inner")) (if (is Occupied (if (is Mover P1) (+ (to ) 8) (- (to ) 8))) (and {(moveAgain ) (set Pending) (if (is In (to ) (expand (sites Right))) (set Var "Side" 2) (if (is In (to ) (expand (sites Left))) (set Var "Side" 1) (set Var "Side" 0)))}) (if (< 1 (count (to ))) (if (or (= 1 (value Player Mover)) (and (!= 1 (value Player Mover)) (not (is In (to ) (sites "SquaresHoles"))))) (and {(moveAgain ) (set Var "Replay" (to )) (set Var "Direction" 1)}) (set Var "Direction" 0)))) (if (< 1 (count (to ))) (if (or (= 1 (value Player Mover)) (and (!= 1 (value Player Mover)) (not (is In (to ) (sites "SquaresHoles"))))) (and {(moveAgain ) (set Var "Replay" (to )) (set Var "Direction" 1)}) (set Var "Direction" 0))))))) (move Select (from (if (!= (value Player Mover) 1) (sites Mover) (difference (sites Mover) (sites "SquaresHoles"))) (or (< 1 (count (from ))) (> 16 (count (from ))))) (then (sow "TrackCCW" (mover ) (if (is In (to ) (sites Mover "Inner")) (if (is Occupied (if (is Mover P1) (+ (to ) 8) (- (to ) 8))) (and {(moveAgain ) (set Pending) (if (is In (to ) (expand (sites Right))) (set Var "Side" 2) (if (is In (to ) (expand (sites Left))) (set Var "Side" 1) (set Var "Side" 0)))}) (if (< 1 (count (to ))) (if (or (= 1 (value Player Mover)) (and (!= 1 (value Player Mover)) (not (is In (to ) (sites "SquaresHoles"))))) (and {(moveAgain ) (set Var "Replay" (to )) (set Var "Direction" 2)}) (set Var "Direction" 0)))) (if (< 1 (count (to ))) (if (or (= 1 (value Player Mover)) (and (!= 1 (value Player Mover)) (not (is In (to ) (sites "SquaresHoles"))))) (and {(moveAgain ) (set Var "Replay" (to )) (set Var "Direction" 2)}) (set Var "Direction" 0))))))))})))) (end (forEach Player (no Moves Player) (result Player Loss)))))
Line 3
description: 4x8 board. Two counters in each hole. Sowing proceeds in an anti-clockwise direction. The first move must begin from the second hole from the right in the player's outer row, and proceed as follows, and is played simultaneously by both players: sow the two counters from that first hole, capture the counters in the opponent's two opposite holes and sow them, starting in the rightmost hole in the outer row, capture from the opposite two holes on the opponent's side and sow them again from the same hole. When the final counter falls in an occupied hole, those counters are picked up and sowing continues. The opening move ends when the final counter falls in an empty hole. The main phase then begins. When the final counter falls into an occupied hole in the player's inner row and both of the opposite holes on the opponent's side of the board are occupied, the counters in the opposite holes are captured and sown beginning in the first hole that was sown into to begin the sowing that caused the capture. When the final counter falls into an occupied hole and a capture is not possible, the contents of the hole are picked up and sowing continues. When the final counter lands in an empty hole, the turn ends. Players cannot sow from a hole containing a single counter. The player who captures all of their opponent's counters wins.
        
Ludii code: (game "Otep" (players 2) (equipment {(mancalaBoard 4 8 None {(track "Track1" "0,E,N1,W" true P1) (track "Track2" "16,E,N1,W" true P2)}) (regions "Home" P1 (sites Track "Track1")) (regions "Home" P2 (sites Track "Track2")) (regions "Inner" P1 (difference (sites Track "Track1") (sites Bottom))) (regions "Inner" P2 (difference (sites Track "Track2") (sites Top))) (piece "Seed" Shared) (map "SecondRightOuter" {(pair P1 14) (pair P2 17)}) (map "RightOuter" {(pair P1 15) (pair P2 16)}) (hand Each)}) (rules (start (set Count 2 (sites Board))) {(phase "Opening1" (play (move Select (from (mapEntry "SecondRightOuter" Mover)) (then (sow "Track" (mover ) (and (fromTo (from (if (is Mover P1) (+ (last From) 8) (- (last From) 8))) (to (mapEntry "RightOuter" Mover)) 2) (fromTo (from (if (is Mover P1) (+ (last From) (* 8 2)) (- (last From) (* 8 2)))) (to (mapEntry "RightOuter" Mover)) 2)))))) (nextPhase Mover "Opening2")) (phase "Opening2" (play (move Select (from (mapEntry "RightOuter" Mover)) (then (sow "Track" (mover ) (and (fromTo (from (if (is Mover P1) (+ (last From) 8) (- (last From) 8))) (to (mapEntry "RightOuter" Mover)) 2) (fromTo (from (if (is Mover P1) (+ (last From) (* 8 2)) (- (last From) (* 8 2)))) (to (mapEntry "RightOuter" Mover)) 2)))))) (nextPhase Mover "Opening3")) (phase "Opening3" (play (move Select (from (if (is Prev Mover) (sites {(last To true)}) (sites {(mapEntry "RightOuter" Mover)}))) (then (sow "Track" (mover ) (if (< 1 (count (to ))) (moveAgain )))))) (nextPhase Mover (not (is Next Prev)) "Sowing")) (phase "Sowing" (play (move Select (from (if (is Prev Mover) (sites {(last To true)}) (sites Mover)) (> (count (from )) 1)) (then (sow "Track" (mover ) (if (and {(is In (to ) (sites Mover "Inner")) (< 1 (count (to ))) (is Occupied (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2)))) (is Occupied (if (is Mover P1) (+ (to ) 8) (- (to ) 8)))}) (and {(fromTo (from (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2)))) (to (last From)) (count (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2))))) (fromTo (from (if (is Mover P1) (+ (to ) 8) (- (to ) 8))) (to (last From)) (count (if (is Mover P1) (+ (to ) 8) (- (to ) 8)))) (sow (last From) (+ (count (if (is Mover P1) (+ (to ) 8) (- (to ) 8))) (count (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2))))) "Track" (mover ))}) (if (< 1 (count (to ))) (moveAgain ))))))))} (end (forEach Player (no Moves Player) (result Player Loss)))))
Line 3
description: 4x4, 8, 10, 16, or 22 board. Two counters in each hole. Sowing occurs in an anti-clockwise direction. When the final counter of a sowing lands in an occupied hole, the contents are picked up and sowing continues. When the final counter lands in an empty hole in the player's inner row, the contents of the opponent's hole in the inner row opposite it are captured, and if there are counters also in the corresponding outer row hole, these are also captured. The player may also capture from another hole from the opponent's side of the board of their choosing. The turn ends. If the final counter lands in an empty hole in the player's outer row, the turn ends. Play continues until one player captures all of the opponent's counters, thus winning.
Ludii code: (game "Tshuba" (players 2) (equipment {(mancalaBoard 4 4 None {(track "Track1" "0,E,N1,W" true P1) (track "Track2" "8,E,N1,W" true P2)}) (regions "Home" P1 (sites Track "Track1")) (regions "Home" P2 (sites Track "Track2")) (regions "Inner" P1 (difference (sites Track "Track1") (sites Bottom))) (regions "Inner" P2 (difference (sites Track "Track2") (sites Top))) (piece "Seed" Shared) (hand Each)}) (rules (start (set Count 2 (union (sites P1 "Home") (sites P2 "Home")))) (play (if (= 1 (var "ExtraCapture")) (move Remove (difference (sites Next "Home") (sites Empty)) (count (to )) (then (set Var "ExtraCapture" 0))) (move Select (from (if (is Prev Mover) (sites {(last To true)}) (sites Mover)) (< 0 (count (from )))) (then (sow "Track" (mover ) (if (< 1 (count (to ))) (moveAgain ) (if (is In (to ) (sites Mover "Inner")) (and {(if (> (count (if (is Mover P1) (+ (to ) 4) (- (to ) 4))) 0) (remove (if (is Mover P1) (+ (to ) 4) (- (to ) 4)) (count (if (is Mover P1) (+ (to ) 4) (- (to ) 4))))) (if (> (count (if (is Mover P1) (+ (to ) (* 4 2)) (- (to ) (* 4 2)))) 0) (remove (if (is Mover P1) (+ (to ) (* 4 2)) (- (to ) (* 4 2))) (count (if (is Mover P1) (+ (to ) (* 4 2)) (- (to ) (* 4 2)))))) (set Var "ExtraCapture" 1) (moveAgain )})))))))) (end (if (all Sites (sites Next "Home") (= 0 (count (site )))) (result Mover Win)))))
Line 3
description: 4x8 board. Two counters in each hole. Opening play: Two players play simultaneously, lifting and sowing counters from their outer rows. Rules for sowing and capturing are the same as in the main phase of the game. Sowing cannot begin from the fourth or fifth hole from the left in the player's outer hole. Players play until both drop the final counter in an empty hole, the first to do so plays first in the main phase. Players then move alternately.  Main phase: Play begins from any hole on the player's side of the board with counters in it. Singletons cannot move. Sowing happens in an anti-clockwise direction. If the last counter lands in an empty hole, the turn is over. For capturing: Holes are in 'opposition' when one player has the front row hole occupied and the opponent has both of the holes opposite it occupied. If the last hole in a sowing is in opposition, the player takes the counters in both of the opponent's holes and places them in the empty hole from which the player lifted the counters. The player then sows the captured counters from this hole. Further captures in the sowing can occur in the same way. However, each player has two hole from which clockwise plays can be made: the leftmost hole in the outer row and the second from the left in the inner row. Clockwise moves can only be made from these holes if they immediately lead to a capture. When the captured counters are sown, starting from the same hole, they can also be sown clockwise if they lead to a capture. If they cannot lead to a capture, they are sown anti-clockwise. Another alternative the player has is that, if the player plays clockwise from one of these holes and therefore makes a capture, the captured counters may be placed in the hole and left there, and the player may play instead from the other hole from which clockwise captures are allowed in a clockwise direction, if it leads to a capture. The player may continue playing from this hole as above until the possibilities to move are exhausted, and then may move from any hole in an anti-clockwise direction. Multiple captures can only be made in a clockwise direction from these holes if it is made on the first sowing of the turn. Otherwise, only one clockwise capture can be made and sowing must proceed in an anti-clockwise direction. If the last counter lands on a hole that is occupied but not in opposition, these counters are picked up and sowing continues. Play ends when one player captures all the opponent's counters or one player cannot play. The player who cannot play loses. A player may also win by capturing the counters from both of the opponent's end holes in the inner row in a single turn.
Ludii code: (game "Mweiso" (players 2) (equipment {(mancalaBoard 4 8 None {(track "TrackCCW1" "0,E,N1,W" true P1) (track "TrackCCW2" "16,E,N1,W" true P2) (track "TrackCW1" "7,W,N1,E" true P1) (track "TrackCW2" "24,E,S1,W" true P2)}) (regions "Home" P1 (sites Track "TrackCCW1")) (regions "Home" P2 (sites Track "TrackCCW2")) (regions "Inner" P1 (difference (sites Track "TrackCCW1") (sites Bottom))) (regions "Inner" P2 (difference (sites Track "TrackCCW2") (sites Top))) (regions "Outer" P1 (difference (sites Bottom) (sites {3 4}))) (regions "Outer" P2 (difference (sites Top) (sites {27 28}))) (map "LeftMostOuter" {(pair P1 0) (pair P2 31)}) (map "SecondLeftInner" {(pair P1 9) (pair P2 22)}) (piece "Seed" Shared) (hand Each)}) (rules (start (set Count 2 (union (sites P1 "Home") (sites P2 "Home")))) {(phase "OuterPhase" (play (move Select (from (if (is Prev Mover) (sites {(var "Replay")}) (sites Mover "Outer")) (if (is Prev Mover) (< 0 (count (from ))) (< 1 (count (from ))))) (then (sow "TrackCCW" (mover ) (if (< 1 (count (to ))) (and (moveAgain ) (if (and {(is Occupied (if (is Mover P1) (+ (to ) 8) (- (to ) 8))) (is Occupied (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2)))) (is In (to ) (sites Mover "Inner"))}) (and {(fromTo (from (if (is Mover P1) (+ (to ) 8) (- (to ) 8))) (to (last From)) (count (if (is Mover P1) (+ (to ) 8) (- (to ) 8)))) (fromTo (from (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2)))) (to (last From)) (count (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2))))) (set Var "Replay" (from ))}) (set Var "Replay" (to ))))))))) (nextPhase Mover (= 1 (count (last To true))) "MainPhase")) (phase "MainPhase" (play (or (move Select (from (if (is Prev Mover) (sites {(var "Replay")}) (sites {(mapEntry "LeftMostOuter" Mover) (mapEntry "SecondLeftInner" Mover)})) (and {(if (is Prev Mover) (< 0 (count (from ))) (< 1 (count (from )))) (is In (from ) (sites {(mapEntry "LeftMostOuter" Mover) (mapEntry "SecondLeftInner" Mover)})) (is In (trackSite Move (from ) "TrackCW" (count (from ))) (sites Mover "Inner")) (is Occupied (if (is Mover P1) (+ (trackSite Move (from ) "TrackCW" (count (from ))) 8) (- (trackSite Move (from ) "TrackCW" (count (from ))) 8))) (is Occupied (if (is Mover P1) (+ (trackSite Move (from ) "TrackCW" (count (from ))) (* 8 2)) (- (trackSite Move (from ) "TrackCW" (count (from ))) (* 8 2))))})) (then (sow "TrackCW" (mover ) (if (< 1 (count (to ))) (and (moveAgain ) (if (and {(is Occupied (if (is Mover P1) (+ (to ) 8) (- (to ) 8))) (is Occupied (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2)))) (is In (to ) (sites Mover "Inner"))}) (and {(fromTo (from (if (is Mover P1) (+ (to ) 8) (- (to ) 8))) (to (last From)) (count (if (is Mover P1) (+ (to ) 8) (- (to ) 8)))) (fromTo (from (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2)))) (to (last From)) (count (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2))))) (set Var "Replay" (from ))}) (set Var "Replay" (to )))))))) (move Select (from (if (is Prev Mover) (sites {(var "Replay")}) (sites Mover)) (if (is Prev Mover) (< 0 (count (from ))) (< 1 (count (from ))))) (then (sow "TrackCCW" (mover ) (if (< 1 (count (to ))) (and (moveAgain ) (if (and {(is Occupied (if (is Mover P1) (+ (to ) 8) (- (to ) 8))) (is Occupied (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2)))) (is In (to ) (sites Mover "Inner"))}) (and {(fromTo (from (if (is Mover P1) (+ (to ) 8) (- (to ) 8))) (to (last From)) (count (if (is Mover P1) (+ (to ) 8) (- (to ) 8)))) (fromTo (from (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2)))) (to (last From)) (count (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2))))) (set Var "Replay" (from ))}) (set Var "Replay" (to )))))))))) (end (if (no Moves Next) (result Mover Win))))}))
Line 3
description: 4x6-21 board; 8 is most common, 12, 15, and 18 are also popular. Two counters in each hole in the players' outer rows. Before the game starts, players choose to make additional captures from one, two, or three holes. Sowing occurs in an anti-clockwise direction, only in the two rows belonging to the player. When the final counter lands in an occupied hole, these are picked up and sowing continues. When the final counter lands in an empty hole in the inner row, any counters in the opposite hole in the opponent's inner row are captured. If there also are counters in the opposite hole in the opponent's outer row, these are also captured, but only if there was first a capture from the inner row hole. The player then captures again, from the agreed-upon number of extra holes, chosen from any of the opponent's holes. Players cannot sow from a hole with a single counter unless there are no holes with multiple counters. Single counters can only be sown into an empty hole. Play continues until one player has captured all of the opponent's counters, thus winning the game.
Ludii code: (game "Tsoro (Additional Capture)" (players 2) (equipment {(mancalaBoard 4 8 None {(track "Track1" "0,E,N1,W" true P1) (track "Track2" "16,E,N1,W" true P2)}) (regions "Home" P1 (sites Track "Track1")) (regions "Home" P2 (sites Track "Track2")) (regions "Inner" P1 (difference (sites Track "Track1") (sites Bottom))) (regions "Inner" P2 (difference (sites Track "Track2") (sites Top))) (piece "Seed" Shared)}) (rules (start (set Count 2 (union (sites Top) (sites Bottom)))) (play (if (< 0 (var )) (move Remove (forEach (sites Next) (< 0 (count (site )))) (then (and (if (< 1 (var )) (moveAgain )) (set Var (- (var ) 1))))) (move Select (from (if (is Prev Mover) (sites {(last To true)}) (sites Mover "Home")) (if (not (all Sites (forEach (sites Mover) (< 1 (count (site )))) (= 0 (count (site ))))) (> (count (from )) 1) (and (= (count (from )) 1) (= 0 (count (trackSite Move (from ) Mover 1)))))) (then (sow "Track" (mover ) (if (= (count (to )) 1) (if (is In (to ) (sites Mover "Inner")) (if (> (count (if (is Mover P1) (+ (to ) 8) (- (to ) 8))) 0) (and {(remove (if (is Mover P1) (+ (to ) 8) (- (to ) 8))) (if (> (count (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2)))) 0) (remove (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2))))) (moveAgain ) (set Var 3)}))) (moveAgain ))))))) (end (forEach NonMover (all Sites (sites Player "Home") (= 0 (count (site )))) (result Player Loss)))))
Line 3
description: 4x8 board. Two counters in each hole. Sowing proceeds in an anti-clockwise direction. The first move must begin from the second hole from the right in the player's outer row, and proceed as follows, and is played simultaneously by both players: sow the two counters from that first hole, capture the counters in the opponent's two opposite holes and sow them, starting in the rightmost hole in the outer row, capture from the opposite two holes on the opponent's side and sow them again from the same hole. When the final counter falls in an occupied hole, those counters are picked up and sowing continues. The opening move ends when the final counter falls in an empty hole. The main phase then begins. When the final counter falls into an occupied hole in the player's inner row and both of the opposite holes on the opponent's side of the board are occupied, the counters in the opposite holes are captured and sown beginning in the first hole that was sown into to begin the sowing that caused the capture. When the final counter falls into an occupied hole and a capture is not possible, the contents of the hole are picked up and sowing continues. When the final counter lands in an empty hole, the turn ends. Players cannot sow from a hole containing a single counter. The player who captures all of their opponent's counters wins.
Ludii code: (game "Ryakati" (players 2) (equipment {(mancalaBoard 4 8 None {(track "Track1" "0,E,N1,W" true P1) (track "Track2" "16,E,N1,W" true P2)}) (regions "Home" P1 (sites Track "Track1")) (regions "Home" P2 (sites Track "Track2")) (regions "Inner" P1 (difference (sites Track "Track1") (sites Bottom))) (regions "Inner" P2 (difference (sites Track "Track2") (sites Top))) (map "RightMostOuter" {(pair P1 7) (pair P2 24)}) (map "SecondHoleRightOuter" {(pair P1 6) (pair P2 25)}) (piece "Seed" Shared) (hand Each)}) (rules (start (set Count 2 (sites Board))) {(phase "Opening1" (play (move Select (from (mapEntry "SecondHoleRightOuter" Mover)) (then (sow "Track" (mover ) (and (fromTo (from (if (is Mover P1) (+ (to ) 8) (- (to ) 8))) (to (mapEntry "RightMostOuter" Mover)) 2) (fromTo (from (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2)))) (to (mapEntry "RightMostOuter" Mover)) 2)))))) (nextPhase Mover "Opening2")) (phase "Opening2" (play (move Select (from (mapEntry "RightMostOuter" Mover)) (then (sow 4 "Track" (mover ) (and (fromTo (from (if (is Mover P1) (+ (to ) 8) (- (to ) 8))) (to (mapEntry "RightMostOuter" Mover)) 2) (fromTo (from (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2)))) (to (mapEntry "RightMostOuter" Mover)) 2)) true)))) (nextPhase Mover "Opening3")) (phase "Opening3" (play (move Select (from (if (is Prev Mover) (var "Replay") (mapEntry "RightMostOuter" Mover))) (then (sow (if (is Prev Mover) (count (last To)) 4) "Track" (mover ) (if (< 1 (count (to ))) (and (moveAgain ) (set Var "Replay" (to )))) (not (is Prev Mover)))))) (nextPhase Mover (not (is Next Mover)) "Sowing")) (phase "Sowing" (play (move Select (from (if (is Prev Mover) (sites {(var "Replay")}) (sites Mover "Home")) (> (count (from )) 1)) (then (sow "Track" (mover ) (if (< 1 (count (to ))) (if (and {(is In (to ) (sites Mover "Inner")) (is Occupied (if (is Mover P1) (+ (to ) 8) (- (to ) 8))) (is Occupied (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2))))}) (and {(fromTo (from (if (is Mover P1) (+ (to ) 8) (- (to ) 8))) (to (last From)) (count (if (is Mover P1) (+ (to ) 8) (- (to ) 8)))) (fromTo (from (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2)))) (to (last From)) (count (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2))))) (sow (last From) (+ (count (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2)))) (count (if (is Mover P1) (+ (to ) 8) (- (to ) 8)))) "Track" (mover ))}) (and (moveAgain ) (set Var "Replay" (to ))))))))))} (end (forEach NonMover (all Sites (sites Player "Home") (= 0 (count (site )))) (result Player Loss)))))
Line 3
description: 4x6, 9, 12, or 15. Two counters in each hole. Players begin by sowing from the rightmost hole in the inner row, placing one counter in each of the first two holes, then picking up the counters from the next hole and continuing to sow until the next hole after the sowing is empty (this should be the hole from which the sowing began). Each player then takes two counters from any of the holes in their inner row and places them in any empty hole in the outer row. The player then captures the counters in the opponent's opposite holes. The player then removes the contents of any one of the opponent's holes. Once both players have done this, the main phase begins. Players move by sowing from any of the holes on their side of the board in an anti-clockwise direction. When the final counter lands in an occupied hole, these are picked up and sowing continues. When they fall into an empty hole, the sowing ends. If this hole is in the inner row, the contents of the opponent's opposite hole in the inner row are also taken. If there are also counters in the opponent's outer row opposite, these are also taken. The player may also capture the contents of any other hole in the inner or outer row. Single counters may be moved. The player who captures all of their opponent's counters wins.
Ludii code: (game "Nchuwa" (players 2) (equipment {(mancalaBoard 4 6 None {(track "TrackCCW1" "0,E,N1,W" true P1) (track "TrackCCW2" "12,E,N1,W" true P2)}) (regions "Home" P1 (sites Track "TrackCCW1")) (regions "Home" P2 (sites Track "TrackCCW2")) (regions "Inner" P1 (sites Row 1)) (regions "Inner" P2 (sites Row 2)) (regions "Outer" P1 (sites Row 0)) (regions "Outer" P2 (sites Row 3)) (piece "Seed" Shared)}) (rules (start (set Count 2 (union (sites P1 "Home") (sites P2 "Home")))) {(phase "Opening1" (play (move Select (from (if (is Mover P1) (intersection (sites Right) (sites Row 1)) (intersection (sites Left) (sites Row 2)))) (then (sow "TrackCCW" (mover ) (set Value Mover (trackSite Move (to ) 1)))))) (nextPhase Mover "Opening2")) (phase "Opening2" (play (move Select (from (value Player Mover)) (then (sow "TrackCCW" (mover ) (if (= (count (trackSite Move (to ) 1)) 0) (set Value Mover -1) (set Value Mover (trackSite Move (to ) 1))))))) (nextPhase Mover (= (value Player Mover) -1) "Opening3")) (phase "Opening3" (play (move (from (forEach (sites Mover "Inner") (!= 0 (count (site ))))) (to (forEach (sites Mover "Outer") (= 0 (count (site ))))) 2)) (nextPhase Mover "Opening4")) (phase "Opening4" (play (move Remove (sites Next "Home"))) (nextPhase Mover "Opening5")) (phase "Opening5" (play (move Remove (sites Next "Home"))) (nextPhase Mover "Playing")) (phase "Playing" (play (move Select (from (if (is Prev Mover) (sites {(last To true)}) (sites Mover "Home")) (> (count (from )) 0)) (then (sow "TrackCCW" (mover ) (if (= (count (to )) 1) (if (is In (to ) (sites Mover "Inner")) (if (> (count (if (is Mover P1) (+ (to ) 6) (- (to ) 6))) 0) (and (remove (if (is Mover P1) (+ (to ) 6) (- (to ) 6))) (if (> (count (if (is Mover P1) (+ (to ) (* 6 2)) (- (to ) (* 6 2)))) 0) (remove (if (is Mover P1) (+ (to ) (* 6 2)) (- (to ) (* 6 2)))))))) (moveAgain )))))))} (end (forEach Player (= 0 (count (sites Player "Home"))) (result Player Loss)))))
Line 3
description: 4x8 board. The counters begin in the following arrangement, starting from a player's left most hole in the outer row and proceeding anticlockwise: 0,0,1,0,0,1,6,0,8,0,1,0,0,1,6,8. To start, players may not sow into or sow from the leftmost and rightmost holes in both of their rows. When it is no longer possible for the player to make a legal move using only these twelve holes, they may then play using all of the holes. The opponent must continue using only twelve holes until they also cannot make a legal move with them. Sowing proceeds in an anti-clockwise direction. When the final counter falls into an occupied hole in the player's inner row and both of the opposite holes on the opponent's side of the board are occupied, the counters in the opposite holes are captured and sown beginning in the first hole that was sown into to begin the sowing that caused the capture. When the final counter falls into an occupied hole and a capture is not possible, the contents of the hole are picked up and sowing continues. When the final counter lands in an empty hole, the turn ends. Players cannot sow from a hole containing a single counter. The player who captures all of their opponent's counters wins.
        
Ludii code: (game "Lobudok" (players 2) (equipment {(mancalaBoard 4 8 None {(track "Track1" "0,E,N1,W" true P1) (track "Track2" "16,E,N1,W" true P2)}) (regions "Home" P1 (sites Track "Track1")) (regions "Home" P2 (sites Track "Track2")) (regions "Inner" P1 (difference (sites Track "Track1") (sites Bottom))) (regions "Inner" P2 (difference (sites Track "Track2") (sites Top))) (regions "SideHoles" P1 (intersection (sites Track "Track1") (union (sites Left) (sites Right)))) (regions "SideHoles" P2 (intersection (sites Track "Track2") (union (sites Right) (sites Left)))) (piece "Seed" Shared) (hand Each)}) (rules (start {(set Count 1 (sites {2 5 13 10 29 26 18 21})) (set Count 8 (sites {15 16 8 23})) (set Count 6 (sites {6 9 22 25}))}) (play (or (move Select (from (if (is Prev Mover) (sites {(last To true)}) (difference (sites Mover "Home") (sites Mover "SideHoles"))) (> (count (from )) 1)) (then (sow "Track" (mover ) (if (and {(is In (to ) (sites Mover "Inner")) (< 1 (count (to ))) (is Occupied (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2)))) (is Occupied (if (is Mover P1) (+ (to ) 8) (- (to ) 8)))}) (and {(fromTo (from (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2)))) (to (last From)) (count (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2))))) (fromTo (from (if (is Mover P1) (+ (to ) 8) (- (to ) 8))) (to (last From)) (count (if (is Mover P1) (+ (to ) 8) (- (to ) 8)))) (sow (last From) (+ (count (if (is Mover P1) (+ (to ) 8) (- (to ) 8))) (count (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2))))) "Track" (mover ) (and (!= 1 (value Player Mover)) (is In (to ) (sites "SideHoles"))))}) (if (< 1 (count (to ))) (moveAgain ))) (and (!= 1 (value Player Mover)) (is In (to ) (sites "SideHoles")))))) (if (if (= 1 (value Player Mover)) true (all Sites (difference (sites Mover "Home") (sites Mover "SideHoles")) (<= (count (site )) 1))) (move Select (from (if (is Prev Mover) (sites {(last To true)}) (sites Mover "SideHoles")) (> (count (from )) 1)) (then (and (sow "Track" (mover ) (if (and {(is In (to ) (sites Mover "Inner")) (< 1 (count (to ))) (is Occupied (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2)))) (is Occupied (if (is Mover P1) (+ (to ) 8) (- (to ) 8)))}) (and {(fromTo (from (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2)))) (to (last From)) (count (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2))))) (fromTo (from (if (is Mover P1) (+ (to ) 8) (- (to ) 8))) (to (last From)) (count (if (is Mover P1) (+ (to ) 8) (- (to ) 8)))) (sow (last From) (+ (count (if (is Mover P1) (+ (to ) 8) (- (to ) 8))) (count (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2))))) "Track" (mover ))}) (if (< 1 (count (to ))) (moveAgain )))) (if (= 0 (value Player Mover)) (set Value Mover 1)))))))) (end (forEach Player (no Moves Player) (result Player Loss)))))
Line 3
description: 4x6-7 board. Two counters in each hole; before beginning each player rearranges these as they wish, with the following rules: The leftmost hole in the outer row must have the most counters; holes in the inner row may only have one counter. Initial phase: In this phase, only holes with two or fewer counters may be used to sow. Sowing occurs in an anti-clockwise direction, and when a counter lands in an occupied hole the sowing continues. When the final counter lands in an empty hole, the turn ends. If the empty hole is in the player's inner row, counters in the opponent's inner row opposite are captured, and if there are also counters in the opponent's outer row hole opposite, these are also taken. The initial phase ends for a player when two of the player's counters have been taken. On the next turn they must play from the hole with the largest number of counters, and from that point they may move from any hole. The rules for play remain the same as in the initial phase otherwise. The player who captures all of the opponent's counters wins.
Ludii code: (game "Quela" (players 2) (equipment {(mancalaBoard 4 6 None {(track "TrackCCW1" "0,E,N1,W" true P1) (track "TrackCCW2" "12,E,N1,W" true P2)}) (regions "Home" P1 (sites Track "TrackCCW1")) (regions "Home" P2 (sites Track "TrackCCW2")) (regions "Inner" P1 (difference (sites Track "TrackCCW1") (sites Bottom))) (regions "Inner" P2 (difference (sites Track "TrackCCW2") (sites Top))) (map "LeftMost" {(pair P1 0) (pair P2 23)}) (piece "Seed" Shared) (hand Each)}) (rules (start (set Count 2 (union (sites P1 "Home") (sites P2 "Home")))) {(phase "Rearrangement" (play (or (move (from (sites Mover "Home") (is Occupied (from ))) (to (difference (sites Mover) (from )))) (if (and (all Sites (difference (sites Mover "Home") (mapEntry "LeftMost" Mover)) (> (count (mapEntry Mover)) (count (site )))) (all Sites (sites Mover "Inner") (= 1 (count (site ))))) (move Pass)))) (nextPhase (all Passed) "InitialPhase")) (phase "InitialPhase" (play (move Select (from (if (is Prev Mover) (sites {(last To true)}) (sites Mover "Home")) (or (is Prev Mover) (and (> 3 (count (from ))) (is Occupied (from ))))) (then (sow "TrackCCW" (mover ) (if (< 1 (count (to ))) (moveAgain ) (if (is In (to ) (sites Mover "Inner")) (if (is Occupied (if (is Mover P1) (+ (to ) 6) (- (to ) 6))) (and (fromTo (from (if (is Mover P1) (+ (to ) 6) (- (to ) 6))) (to (handSite Mover)) (count (if (is Mover P1) (+ (to ) 6) (- (to ) 6)))) (if (is Occupied (if (is Mover P1) (+ (to ) (* 6 2)) (- (to ) (* 6 2)))) (fromTo (from (if (is Mover P1) (+ (to ) (* 6 2)) (- (to ) (* 6 2)))) (to (handSite Mover)) (count (if (is Mover P1) (+ (to ) (* 6 2)) (- (to ) (* 6 2)))))))))))))) {(nextPhase P1 (< 1 (count Cell (handSite P2))) "MiddlePhase") (nextPhase P2 (< 1 (count Cell (handSite P1))) "MiddlePhase")}) (phase "MiddlePhase" (play (move Select (from (forEach (sites Mover "Home") (= (max (results (sites Mover "Home") (sites Mover "Home") (count (to )))) (count (site ))))) (then (sow "TrackCCW" (mover ) (if (< 1 (count (to ))) (moveAgain ) (if (is In (to ) (sites Mover "Inner")) (if (is Occupied (if (is Mover P1) (+ (to ) 6) (- (to ) 6))) (and (fromTo (from (if (is Mover P1) (+ (to ) 6) (- (to ) 6))) (to (handSite Mover)) (count (if (is Mover P1) (+ (to ) 6) (- (to ) 6)))) (if (is Occupied (if (is Mover P1) (+ (to ) (* 6 2)) (- (to ) (* 6 2)))) (fromTo (from (if (is Mover P1) (+ (to ) (* 6 2)) (- (to ) (* 6 2)))) (to (handSite Mover)) (count (if (is Mover P1) (+ (to ) (* 6 2)) (- (to ) (* 6 2)))))))))))))) (nextPhase Mover "FinalPhase")) (phase "FinalPhase" (play (move Select (from (if (is Prev Mover) (sites {(last To true)}) (sites Mover "Home")) (is Occupied (from ))) (then (sow "TrackCCW" (mover ) (if (< 1 (count (to ))) (moveAgain ) (if (is In (to ) (sites Mover "Inner")) (if (is Occupied (if (is Mover P1) (+ (to ) 6) (- (to ) 6))) (and (fromTo (from (if (is Mover P1) (+ (to ) 6) (- (to ) 6))) (to (handSite Mover)) (count (if (is Mover P1) (+ (to ) 6) (- (to ) 6)))) (if (is Occupied (if (is Mover P1) (+ (to ) (* 6 2)) (- (to ) (* 6 2)))) (fromTo (from (if (is Mover P1) (+ (to ) (* 6 2)) (- (to ) (* 6 2)))) (to (handSite Mover)) (count (if (is Mover P1) (+ (to ) (* 6 2)) (- (to ) (* 6 2)))))))))))))) (end (if (no Moves Next) (result Mover Win))))}))
Line 3
description: 4x6-21 board; 8 is most common, 12, 15, and 18 are also popular. Two counters in each hole in the players' outer rows. Sowing occurs in an anti-clockwise direction, only in the two rows belonging to the player. When the final counter lands in an occupied hole, these are picked up and sowing continues. When the final counter lands in an empty hole in the inner row, any counters in the opposite hole in the opponent's inner row are captured. If there also are counters in the opposite hole in the opponent's outer row, these are also captured, but only if there was first a capture from the inner row hole. Captured counters are then sown on the player's own side of the board, starting with the hole following the one from which the capture was triggered. Players cannot sow from a hole with a single counter unless there are no holes with multiple counters. Single counters can only be sown into an empty hole. Play continues until one player has captured all of the opponent's counters, thus winning the game.
        
Ludii code: (game "Tsoro (Reentered Captures)" (players 2) (equipment {(mancalaBoard 4 8 None {(track "Track1" "0,E,N1,W" true P1) (track "Track2" "16,E,N1,W" true P2)}) (regions "Home" P1 (sites Track "Track1")) (regions "Home" P2 (sites Track "Track2")) (regions "Inner" P1 (difference (sites Track "Track1") (sites Bottom))) (regions "Inner" P2 (difference (sites Track "Track2") (sites Top))) (piece "Seed" Shared)}) (rules (start (set Count 2 (union (sites Top) (sites Bottom)))) (play (move Select (from (if (is Prev Mover) (sites {(last To true)}) (sites Mover "Home")) (if (not (all Sites (forEach (sites Mover) (< 1 (count (site )))) (= 0 (count (site ))))) (> (count (from )) 1) (and (= (count (from )) 1) (= 0 (count (trackSite Move (from ) Mover 1)))))) (then (sow "Track" (mover ) (if (= (count (to )) 1) (if (is In (to ) (sites Mover "Inner")) (if (> (count (if (is Mover P1) (+ (to ) 8) (- (to ) 8))) 0) (and {(fromTo (from (if (is Mover P1) (+ (to ) 8) (- (to ) 8))) (to (to )) (count (if (is Mover P1) (+ (to ) 8) (- (to ) 8)))) (if (> (count (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2)))) 0) (fromTo (from (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2)))) (to (to )) (count (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2)))))) (sow (to ) (+ (count (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2)))) (count (if (is Mover P1) (+ (to ) 8) (- (to ) 8)))) "Track" (mover ))}))) (moveAgain )))))) (end (forEach NonMover (all Sites (sites Player "Home") (= 0 (count (site )))) (result Player Loss)))))
Line 3
description: 4x10-12 board (even numbers only). One counter in each hole, except for the third hole from the left of the inner row, which contains two, and the rightmost hole of the inner row, which is empty. Play must begin from the hole containing two counters. Sowing occurs in an anti-clockwise direction. When the final counter lands in an occupied hole. These are picked up and sowing continues. When the final counter falls in an empty hole, the contents of the hole in the opponent's  inner row opposite this hole are captured; if there are also counters in the opponent's outer row, these are also captured, along with the contents of any other two holes on the opponent's side of the board. Single counters can be moved only when there are no holes with multiple counters and they may only be moved to an empty hole. The player who captures all of the opponent's counters wins.
Ludii code: (game "Spreta" (players 2) (equipment {(mancalaBoard 4 10 None {(track "Track1" "0,E,N1,W" true P1) (track "Track2" "20,E,N1,W" true P2)}) (regions "Home" P1 (sites Track "Track1")) (regions "Home" P2 (sites Track "Track2")) (regions "Inner" P1 (difference (sites Track "Track1") (sites Bottom))) (regions "Inner" P2 (difference (sites Track "Track2") (sites Top))) (regions "Outer" P1 (sites Bottom)) (regions "Outer" P2 (sites Top)) (piece "Seed" Shared)}) (rules (start {(set Count 1 (union {(sites P1 "Outer") (sites P2 "Outer") (difference (sites P1 "Inner") (sites {12 19})) (difference (sites P2 "Inner") (sites {27 20}))})) (set Count 2 (sites {12 27}))}) {(phase "Opening" (play (move Select (from (sites Mover) (= 2 (count (from )))) (then (sow "Track" (mover ))))) (nextPhase Mover "Playing")) (phase "Playing" (play (if (or (= 1 (var "ExtraCapture")) (= 2 (var "ExtraCapture"))) (move Remove (difference (sites Next "Home") (sites Empty)) (count (to )) (then (if (= 1 (var "ExtraCapture")) (and (moveAgain ) (set Var "ExtraCapture" 2)) (set Var "ExtraCapture" 0)))) (priority {(move Select (from (if (is Prev Mover) (sites {(last To true)}) (sites Mover)) (< 1 (count (from )))) (then (sow "Track" (mover ) (if (< 1 (count (to ))) (moveAgain ) (if (is In (to ) (sites Mover "Inner")) (and {(if (> (count (if (is Mover P1) (+ (to ) 10) (- (to ) 10))) 0) (remove (if (is Mover P1) (+ (to ) 10) (- (to ) 10)) (count (if (is Mover P1) (+ (to ) 10) (- (to ) 10))))) (if (> (count (if (is Mover P1) (+ (to ) (* 10 2)) (- (to ) (* 10 2)))) 0) (remove (if (is Mover P1) (+ (to ) (* 10 2)) (- (to ) (* 10 2))) (count (if (is Mover P1) (+ (to ) (* 10 2)) (- (to ) (* 10 2)))))) (set Var "ExtraCapture" 1) (moveAgain )})))))) (move Select (from (if (is Prev Mover) (sites {(last To true)}) (sites Mover)) (and (= 1 (count (from ))) (= 0 (count (trackSite Move (from ) 1))))) (then (sow "Track" (mover ) (if (< 1 (count (to ))) (moveAgain ) (if (is In (to ) (sites Mover "Inner")) (and {(if (> (count (if (is Mover P1) (+ (to ) 10) (- (to ) 10))) 0) (remove (if (is Mover P1) (+ (to ) 10) (- (to ) 10)) (count (if (is Mover P1) (+ (to ) 10) (- (to ) 10))))) (if (> (count (if (is Mover P1) (+ (to ) (* 10 2)) (- (to ) (* 10 2)))) 0) (remove (if (is Mover P1) (+ (to ) (* 10 2)) (- (to ) (* 10 2))) (count (if (is Mover P1) (+ (to ) (* 10 2)) (- (to ) (* 10 2)))))) (set Var "ExtraCapture" 1) (moveAgain )}))))))}))))} (end (if (all Sites (sites Next "Home") (= 0 (count (site )))) (result Mover Win)))))
Line 3
description: 4x10-20 holes, with even numbers. Two counters in each hole, except the rightmost hole in the inner row of each player, which has zero, and the hole to its left, which has one. Sowing occurs in an anti-clockwise direction. When the final counter lands in an occupied hole, these are picked up and sowing continues. When the final counter lands in an empty hole in the inner row, the counters in the opposite hole in the opponent's inner row are captured. If counters are captured from the inner row, and there are also counters in the outer row, the counters in the outer row are also captured. If counters in the inner and outer row are captured, the player may also capture counters from two other holes on the opponent's side of the board. Single counters cannot be sown until there are no holes with multiple counters on the player's side of the board, and then single counters may only be sown into empty holes. Play continues until one player captures all of their opponent's counters, thus winning the game.
Ludii code: (game "Msuwa" (players 2) (equipment {(mancalaBoard 4 10 None {(track "Track1" "0,E,N1,W" true P1) (track "Track2" "20,E,N1,W" true P2)}) (regions "Home" P1 (sites Track "Track1")) (regions "Home" P2 (sites Track "Track2")) (regions "Inner" P1 (difference (sites Track "Track1") (sites Bottom))) (regions "Inner" P2 (difference (sites Track "Track2") (sites Top))) (piece "Seed" Shared)}) (rules (start {(set Count 2 (difference (sites Board) (sites {18 19 20 21}))) (set Count 1 (sites {18 21}))}) (play (if (and (is Prev Mover) (< 0 (var ))) (move Remove (forEach (sites Next "Home") (< 0 (count (site )))) (then (and (if (> (var ) 1) (moveAgain )) (set Var (- (var ) 1))))) (if (not (all Sites (forEach (sites Mover "Home") (< 1 (count (site )))) (= 0 (count (site ))))) (move Select (from (if (is Prev Mover) (sites {(last To true)}) (sites Mover "Home")) (< 1 (count (from )))) (then (sow "Track" (mover ) (if (< 1 (count (to ))) (moveAgain ) (if (is In (to ) (sites Mover "Inner")) (if (< 0 (count (if (is Mover P1) (+ (to ) 10) (- (to ) 10)))) (and (remove (if (is Mover P1) (+ (to ) 10) (- (to ) 10))) (if (< 0 (count (if (is Mover P1) (+ (to ) (* 10 2)) (- (to ) (* 10 2))))) (and {(remove (if (is Mover P1) (+ (to ) (* 10 2)) (- (to ) (* 10 2)))) (set Var 2) (moveAgain )}))))))))) (move Select (from (sites Mover "Home") (and (= 1 (count (from ))) (= 0 (count (trackSite Move (from ) 1))))) (then (sow "Track" (mover ) (if (is In (to ) (sites Mover "Inner")) (if (< 0 (count (if (is Mover P1) (+ (to ) 10) (- (to ) 10)))) (and (remove (if (is Mover P1) (+ (to ) 10) (- (to ) 10))) (if (< 0 (count (if (is Mover P1) (+ (to ) (* 10 2)) (- (to ) (* 10 2))))) (and {(remove (if (is Mover P1) (+ (to ) (* 10 2)) (- (to ) (* 10 2)))) (set Var 2) (moveAgain )}))))))))))) (end (forEach NonMover (all Sites (sites Player "Home") (= 0 (count (site )))) (result Player Loss)))))
Line 3
description: 4x8 board. Two counters in each hole. Opening play: Two players play simultaneously, lifting and sowing counters from their outer rows. Rules for sowing and capturing are the same as in the main phase of the game except that all holes in each player's outer rows are considered to be in opposition and back captures can be made from them. Once a counter has been sown into the inner row, this ceases and captures can only be made from the inner row. The opening ends when both players reach an empty hole, and the first player to do so begins play in the main phase. Main phase: Play begins from any hole on the player's side of the board with counters in it. Singletons cannot move. Sowing happens in an anti-clockwise direction. If the last counter lands in an empty hole, the turn is over. For capturing: four holes are in opposition when one player has the front row hole occupied and the opponent has both of the holes opposite it occupied. If the last hole in a sowing is in opposition, the player takes the counters in both of the opponent's holes and places them in the empty hole from which the player lifted the counters. The player then sows the captured counters from this hole. Further captures in the sowing can occur in the same way. If the last counter lands on a hole that is occupied but not in opposition, these counters are picked up and sowing continues. Play ends when one player captures all the opponent's counters or one player cannot play. The player who cannot play loses.
Ludii code: (game "Pereauni" (players 2) (equipment {(mancalaBoard 4 8 None {(track "TrackCCW1" "0,E,N1,W" true P1) (track "TrackCCW2" "16,E,N1,W" true P2)}) (regions "Home" P1 (sites Track "TrackCCW1")) (regions "Home" P2 (sites Track "TrackCCW2")) (regions "Inner" P1 (difference (sites Track "TrackCCW1") (sites Bottom))) (regions "Inner" P2 (difference (sites Track "TrackCCW2") (sites Top))) (regions "Outer" P1 (sites Bottom)) (regions "Outer" P2 (sites Top)) (piece "Seed" Shared)}) (rules (start (set Count 2 (union (sites P1 "Home") (sites P2 "Home")))) {(phase "OuterPhase" (play (move Select (from (if (is Prev Mover) (sites {(var "Replay")}) (sites Mover "Outer")) (if (is Prev Mover) (< 0 (count (from ))) (< 1 (count (from ))))) (then (sow (if (is Prev Mover) (var "Count") (count (last From))) "TrackCCW" (mover ) (and (if (< 1 (count (to ))) (and (moveAgain ) (if (and (is Occupied (if (is Mover P1) (+ (to ) 8) (- (to ) 8))) (is In (to ) (sites Mover "Inner"))) (and {(fromTo (from (if (is Mover P1) (+ (to ) 8) (- (to ) 8))) (to (if (is Mover P1) (- (to ) 8) (+ (to ) 8))) (count (if (is Mover P1) (+ (to ) 8) (- (to ) 8)))) (if (is Occupied (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2)))) (fromTo (from (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2)))) (to (if (is Mover P1) (- (to ) 8) (+ (to ) 8))) (count (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2)))))) (set Var "Replay" (if (is Mover P1) (- (to ) 8) (+ (to ) 8))) (if (= 1 (count (if (is Mover P1) (- (to ) 8) (+ (to ) 8)))) (set Var "Count" (+ {1 (count (if (is Mover P1) (+ (to ) 8) (- (to ) 8))) (count (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2))))})) (set Var "Count" (+ (count (if (is Mover P1) (+ (to ) 8) (- (to ) 8))) (count (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2)))))))}) (and (set Var "Replay" (to )) (set Var "Count" (count (to ))))))) (if (!= 1 (value Player Mover)) (set Value Mover 1))))))) (nextPhase Mover (= 1 (count (last To true))) "MainPhase")) (phase "MainPhase" (play (move Select (from (if (is Prev Mover) (sites {(var "Replay")}) (sites Mover)) (if (is Prev Mover) (< 0 (count (from ))) (< 1 (count (from ))))) (then (sow (if (is Prev Mover) (var "Count") (count (last From))) "TrackCCW" (mover ) (if (< 1 (count (to ))) (and (moveAgain ) (if (and {(is Occupied (if (is Mover P1) (+ (to ) 8) (- (to ) 8))) (is In (to ) (sites Mover "Inner"))}) (and {(fromTo (from (if (is Mover P1) (+ (to ) 8) (- (to ) 8))) (to (if (is Mover P1) (- (to ) 8) (+ (to ) 8))) (count (if (is Mover P1) (+ (to ) 8) (- (to ) 8)))) (if (is Occupied (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2)))) (fromTo (from (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2)))) (to (if (is Mover P1) (- (to ) 8) (+ (to ) 8))) (count (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2)))))) (set Var "Replay" (if (is Mover P1) (- (to ) 8) (+ (to ) 8))) (if (= 1 (count (if (is Mover P1) (- (to ) 8) (+ (to ) 8)))) (set Var "Count" (+ {1 (count (if (is Mover P1) (+ (to ) 8) (- (to ) 8))) (count (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2))))})) (set Var "Count" (+ (count (if (is Mover P1) (+ (to ) 8) (- (to ) 8))) (count (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2)))))))}) (and (set Var "Replay" (to )) (set Var "Count" (count (to ))))))))))))} (end (if (no Moves Next) (result Mover Win)))))
Line 3
description: 4x6, 8, or 10 holes. Eight is most common. Two counters in each hole. Sowing begins from any hole on the player's side, in either direction, but the direction chosen on the first turn must be maintained throughout the game. If the final counter lands in an empty hole, the turn ends. If the final counter lands in the outer row in an occupied hole, these are picked up and sowing continues. If the final counter lands in an occupied hole in the inner row, and the opponent's inner row hole opposite contains more than one counter, these are captured and the sowing continues from the hole from which the capture was made using the captured counters and the final counter from the sowing that caused the capture. If the opponent has no counters in any of their inner row holes, the counters in their outer row holes can be captured, in the same manner.
            
        Evidence Map
Ludii code: (game "Katra" (players 2) (equipment {(mancalaBoard 4 8 None {(track "TrackCCW1" "0,E,N1,W" true P1) (track "TrackCCW2" "16,E,N1,W" true P2) (track "TrackCW1" "7,W,N1,E" true P1) (track "TrackCW2" "24,E,S1,W" true P2)}) (regions "Home" P1 (sites Track "TrackCCW1")) (regions "Home" P2 (sites Track "TrackCCW2")) (regions "Outer" P1 (sites Bottom)) (regions "Outer" P2 (sites Top)) (piece "Seed" Shared) (hand Each)}) (rules (start (set Count 2 (union (sites P1 "Home") (sites P2 "Home")))) (play (or (if (!= (value Player Mover) 2) (move Select (from (if (is Prev Mover) (sites {(var "Replay")}) (sites Mover "Home")) (> (count (from )) 0)) (then (and (sow "TrackCCW" (mover ) (if (< 1 (count (to ))) (if (is In (to ) (sites Mover "Outer")) (and (moveAgain ) (set Var "Replay" (to ))) (if (< 1 (count (if (is Mover P1) (+ (to ) 8) (- (to ) 8)))) (and {(fromTo (from (if (is Mover P1) (+ (to ) 8) (- (to ) 8))) (to (to )) (count (if (is Mover P1) (+ (to ) 8) (- (to ) 8)))) (moveAgain ) (set Var "Replay" (to ))}) (if (< 1 (count (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2))))) (and {(fromTo (from (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2)))) (to (to )) (count (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2))))) (moveAgain ) (set Var "Replay" (to ))})))))) (if (!= (value Player Mover) 1) (set Value Mover 1)))))) (if (!= (value Player Mover) 1) (move Select (from (if (is Prev Mover) (sites {(var "Replay")}) (sites Mover "Home")) (> (count (from )) 0)) (then (and (sow "TrackCW" (mover ) (if (< 1 (count (to ))) (if (is In (to ) (sites Mover "Outer")) (and (moveAgain ) (set Var "Replay" (to ))) (if (< 1 (count (if (is Mover P1) (+ (to ) 8) (- (to ) 8)))) (and {(fromTo (from (if (is Mover P1) (+ (to ) 8) (- (to ) 8))) (to (to )) (count (if (is Mover P1) (+ (to ) 8) (- (to ) 8)))) (moveAgain ) (set Var "Replay" (to ))}) (if (< 1 (count (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2))))) (and {(fromTo (from (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2)))) (to (to )) (count (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2))))) (moveAgain ) (set Var "Replay" (to ))})))))) (if (!= (value Player Mover) 2) (set Value Mover 2)))))))) (end (forEach NonMover (no Moves Player) (result Player Loss)))))
Line 3
description: 4x8 board. Four counters in each of the holes in each player's inner row. Sowing occurs in an anti-clockwise direction, with the first counter being sown into the hole from which the counters were picked up. When the final counter lands in an empty hole, the player's turn ends. When the final counter lands in an occupied hole in the inner row, the player captures the counters in the opponent's opposite inner row hole, and continues sowing with these counters and the counters in the hole where the final counter was dropped.. When the final counter lands in an occupied hole but a capture is not possible, these counters are picked up and sowing continues. Play continues until one player can no longer play, and the opponent wins.
Ludii code: (game "Kisolo (Lali)" (players 2) (equipment {(mancalaBoard 4 8 None {(track "Track1" "0,E,N1,W" true P1) (track "Track2" "16,E,N1,W" true P2)}) (regions "Home" P1 (sites Track "Track1")) (regions "Home" P2 (sites Track "Track2")) (regions "Inner" P1 (difference (sites Track "Track1") (sites Bottom))) (regions "Inner" P2 (difference (sites Track "Track2") (sites Top))) (piece "Seed" Shared) (hand Each)}) (rules (start (set Count 4 (union (sites P1 "Inner") (sites P2 "Inner")))) (play (move Select (from (if (is Prev Mover) (sites {(last To true)}) (sites Mover "Home")) (< 1 (count (from )))) (then (sow "Track" (mover ) (if (> (count (to )) 1) (and (moveAgain ) (if (and (!= (count (if (is Mover P1) (+ (to ) 8) (- (to ) 8))) 0) (is In (to ) (sites Mover "Inner"))) (fromTo (from (if (is Mover P1) (+ (to ) 8) (- (to ) 8))) (to (to )) (count (if (is Mover P1) (+ (to ) 8) (- (to ) 8))))))) true)))) (end (if (and (!= (next ) (mover )) (no Moves Next)) (result Mover Win)))))
Line 3
description: 4x12 board. Four counters in each hole. Players alternate turns sowing the counters from one hole in an anti-clockwise direction. When the counters fall into a hole in their inner row, the contents of the opponent's opposite inner row hole are captured, as are any in the opponent's corresponding outer row hole, but only if counters were captured from the inner row hole. The player who captures the most counters wins.
Ludii code: (game "Moruba" (players 2) (equipment {(mancalaBoard 4 12 None {(track "Track1" "0,E,N1,W" true P1) (track "Track2" "24,E,N1,W" true P2)}) (regions "Home" P1 (sites Track "Track1")) (regions "Home" P2 (sites Track "Track2")) (regions "Inner" P1 (difference (sites Track "Track1") (sites Bottom))) (regions "Inner" P2 (difference (sites Track "Track2") (sites Top))) (piece "Seed" Shared) (hand Each)}) (rules (start (set Count 4 (union (sites P1 "Home") (sites P2 "Home")))) (play (move Select (from (sites Mover "Home") (> (count (from )) 0)) (then (sow "Track" (mover ) (and {(is In (to ) (sites Mover "Inner")) (> (count (if (is Mover P1) (+ (to ) 12) (- (to ) 12))) 0)}) (and (fromTo (from (if (is Mover P1) (+ (to ) 12) (- (to ) 12))) (to (handSite Mover)) (count (if (is Mover P1) (+ (to ) 12) (- (to ) 12)))) (if (> (count (if (is Mover P1) (+ (to ) (* 12 2)) (- (to ) (* 12 2)))) 0) (fromTo (from (if (is Mover P1) (+ (to ) (* 12 2)) (- (to ) (* 12 2)))) (to (handSite Mover)) (count (if (is Mover P1) (+ (to ) (* 12 2)) (- (to ) (* 12 2))))))))))) (end (if (no Moves Mover) (byScore {(score P1 (count Cell (handSite P1))) (score P2 (count Cell (handSite P2)))})))))
Line 3
description: 4x8 board, occasionally 4x9 or 10. 29 counters in each player's leftmost hole in their outer row, two in the hole to the right of it and one in the hole to the right of that one. Sowing occurs in an anti-clockwise direction in the player's two rows. Each player begins with a stylised move, by sowing the contents of the hole with two counters. Players alternate turns sowing only from their hole with two counters. When finally a single counter is sown into an inner-row hole that is opposite a hole with a single counter in the opponent's inner row, this counter is captured. The opponent then sows their two remaining counters, capturing two from the opponent. Then, the players sow from their hole with 29 counters, picking up the contents of a hole when the final counter lands in an occupied hole, ending the turn when the final counter lands in an empty hole. When both players have completed this phase, the main phase of the game begins. Players sow from any hole in their two rows. When the final counter lands in an occupied hole, these counters are picked up and sowing continues. When the final counter lands in an empty hole in the inner row, the counters in the opponent's opposite hole in their inner row are captured. If there are also counters in the opponent's opposite hole in the outer row, these are also captured, but only when a capture from the inner row was also made. Players cannot sow single counters, unless there are no holes with multiple counters left, in which case single counters may be sown into an empty hole. Play continues until one player has captured all of the opponent's counters, thus winning the game.
Ludii code: (game "Njombwa" (players 2) (equipment {(mancalaBoard 4 8 None {(track "Track1" "0,E,N1,W" true P1) (track "Track2" "16,E,N1,W" true P2)}) (regions "Home" P1 (sites Track "Track1")) (regions "Home" P2 (sites Track "Track2")) (regions "Inner" P1 (difference (sites Track "Track1") (sites Bottom))) (regions "Inner" P2 (difference (sites Track "Track2") (sites Top))) (piece "Seed" Shared)}) (rules (start {(set Count 29 (sites {0 (- (* 4 8) 1)})) (set Count 2 (sites {1 (- (* 4 8) 2)})) (set Count 1 (sites {2 (- (* 4 8) 3)}))}) {(phase "Opening1" (play (move Select (from (forEach (sites Mover "Home") (= 2 (count (site ))))) (then (sow "Track" (mover ) (if (and (is In (to ) (sites Mover "Inner")) (is Occupied (if (is Mover P1) (+ (to ) 8) (- (to ) 8)))) (remove (if (is Mover P1) (+ (to ) 8) (- (to ) 8)))))))) (nextPhase (all Sites (sites Mover "Home") (!= 2 (count (site )))) "Opening2")) (phase "Opening2" (play (move Select (from (if (is Prev Mover) (sites {(last To true)}) (forEach (sites Mover "Home") (= 29 (count (site ))))) (> (count (from )) 0)) (then (sow "Track" (mover ) (if (< 1 (count (to ))) (moveAgain )))))) (nextPhase (not (is Next Mover)) "Sowing")) (phase "Sowing" (play (if (all Sites (sites Mover "Home") (>= 1 (count (site )))) (move Select (from (sites Mover "Home") (and (is Occupied (from )) (is Empty (trackSite Move (from ) "Track" 1)))) (then (sow "Track" (mover )))) (move Select (from (if (is Prev Mover) (sites {(last To true)}) (sites Mover "Home")) (> (count (from )) 1)) (then (sow "Track" (mover ) (if (< 1 (count (to ))) (moveAgain ) (if (and (is In (to ) (sites Mover "Inner")) (is Occupied (if (is Mover P1) (+ (to ) 8) (- (to ) 8)))) (and (remove (if (is Mover P1) (+ (to ) 8) (- (to ) 8))) (if (is Occupied (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2)))) (remove (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2))))))))))))))} (end (forEach NonMover (all Sites (sites Player) (= 0 (count (site )))) (result Player Loss)))))
Line 3
description: 4x9 board. Two counters in each hole. Players alternate turns sowing from one of the holes in their rows in an anti-clockwise direction. When a counter falls into a hole in their inner row, the player captures the counters from both of the opposite holes on the opponent's side of the board; if one of the two opposite holes is empty, no capture is made. Captures counters are sown on the player's side of the board. Play continues until one player captures all of the counters or one player forfeits.
Ludii code: (game "Ngolo" (players 2) (equipment {(mancalaBoard 4 9 None {(track "Track1" "0,E,N1,W" true P1) (track "Track2" "18,E,N1,W" true P2)}) (regions "Home" P1 (sites Track "Track1")) (regions "Home" P2 (sites Track "Track2")) (regions "Inner" P1 (difference (sites Track "Track1") (sites Bottom))) (regions "Inner" P2 (difference (sites Track "Track2") (sites Top))) (piece "Seed" Shared)}) (rules (start (set Count 2 (union (sites P1 "Home") (sites P2 "Home")))) (play (or (move Pass) (move Select (from (sites Mover "Home") (< 0 (count (from )))) (then (sow "Track" (mover ) (if (and {(!= (count (if (is Mover P1) (+ (to ) (* 9 2)) (- (to ) (* 9 2)))) 0) (!= (count (if (is Mover P1) (+ (to ) 9) (- (to ) 9))) 0) (is In (to ) (sites Mover "Inner"))}) (and {(fromTo (from (if (is Mover P1) (+ (to ) (* 9 2)) (- (to ) (* 9 2)))) (to (to )) (count (if (is Mover P1) (+ (to ) (* 9 2)) (- (to ) (* 9 2))))) (fromTo (from (if (is Mover P1) (+ (to ) 9) (- (to ) 9))) (to (to )) (count (if (is Mover P1) (+ (to ) 9) (- (to ) 9)))) (sow (to ) (+ (count (if (is Mover P1) (+ (to ) 9) (- (to ) 9))) (count (if (is Mover P1) (+ (to ) (* 9 2)) (- (to ) (* 9 2))))) "Track" (mover ))}))))))) (end {(if (= (count (sites Next "Home")) 0) (result Mover Win)) (if (was Pass) (result Next Win))})))
Line 3
description: 4x12-24 (only even numbers allowed) board. Play begins with two counters in the outer row of each players' holes and two counter in each of the four holes on the right hand side of both players' inner row of holes. Player picks up contents of any hole containing two or more counters and sows them anti-clockwise. If the final counter of the sowing falls into an empty hole, the turn is over. If the last counter falls into an occupied hole, sowing continues by picking up the counters in that hole and continuing in the same direction. If the last counter falls into an occupied hole in the player's inner row, and the opponent's two holes opposite it are occupied, these are captured and sowing continues using these counters beginning at the next hole after the one which caused the capture. Play ends when one player cannot move; i.e. when they have only single counters in holes or all their counters have been captured.
Ludii code: (game "Hus (Damara)" (players 2) (equipment {(mancalaBoard 4 12 None {(track "Track1" "0,E,N1,W" true P1) (track "Track2" "24,E,N1,W" true P2)}) (regions "Home" P1 (sites Track "Track1")) (regions "Home" P2 (sites Track "Track2")) (regions "Inner" P1 (difference (sites Track "Track1") (sites Bottom))) (regions "Inner" P2 (difference (sites Track "Track2") (sites Top))) (regions "Outer" P1 (sites Bottom)) (regions "Outer" P2 (sites Top)) (piece "Seed" Shared) (hand Each)}) (rules (start (set Count 2 (union {(expand (intersection (sites Row 1) (sites Right)) 3 W) (expand (intersection (sites Row 2) (sites Left)) 3 E) (sites P1 "Outer") (sites P2 "Outer")}))) (play (move Select (from (if (is Prev Mover) (if (is Pending) (sites {(value Pending)}) (sites {(last To true)})) (sites Mover "Home")) (> (count (from )) 0)) (then (sow "Track" (mover ) (if (> (count (to )) 1) (if (and {(is In (to ) (sites Mover "Inner")) (> (count (if (is Mover P1) (+ (to ) 12) (- (to ) 12))) 0) (> (count (if (is Mover P1) (+ (to ) (* 12 2)) (- (to ) (* 12 2)))) 0)}) (and {(fromTo (from (to )) (to (handSite Mover)) (count (to ))) (fromTo (from (if (is Mover P1) (+ (to ) 12) (- (to ) 12))) (to (handSite Mover)) (count (if (is Mover P1) (+ (to ) 12) (- (to ) 12)))) (fromTo (from (if (is Mover P1) (+ (to ) (* 12 2)) (- (to ) (* 12 2)))) (to (handSite Mover)) (count (if (is Mover P1) (+ (to ) (* 12 2)) (- (to ) (* 12 2))))) (if (> (count (trackSite Move (to ) "Track" 1)) 1) (and (set Pending (trackSite Move (to ) "Track" 1)) (moveAgain )))}) (moveAgain ))))))) (end (if (no Moves Mover) (byScore {(score P1 (+ (count Cell (handSite P1)) (count (sites P1)))) (score P2 (+ (count Cell (handSite P2)) (count (sites P2))))})))))
Line 3
description: 4x8 board. Two counters in each hole. Opening play: Two players play simultaneously, lifting and sowing counters from their outer rows. The game must begin from one of the rightmost two holes. Rules for sowing and capturing are the same as in the main phase of the game. The opening ends when both players reach an empty hole, and the first player to do so begins play in the main phase. Main phase: Play begins from any hole on the player's side of the board with counters in it. Singletons cannot move. Sowing happens in an anti-clockwise direction. If the last counter lands in an empty hole, the turn is over. For capturing: Holes are in 'opposition' when one player has the inner row hole occupied and the opponent has at least the opposite hole in the inner row occupied; if the outer row hole is also occupied it is also in opposition. However, if the opponent's inner row hole is empty and the outer row is occupied, it is not in opposition. If the last hole in a sowing falls into a hole that is is in opposition, the player takes the counters in the opponent's holes in opposition and places them in the outer row hole next to the hole from which the capture occurred. The player then sows the captured counters from this hole. If the capture is only of one counter, the contents of the appropriate outer row hole on the player's side are sown along with the one captured counter. Further captures in the sowing can occur in the same way. If a player can make a capture on the first sowing they must. Otherwise, they can choose any hole on their side to sow. However, each player has four holes from which clockwise plays can be made: the leftmost two holes in both the inner and outer rows. Clockwise moves can only be made from these holes if they immediately lead to a capture. When the captured counters are sown, they may, starting from the same hole, also be sown clockwise as long as they lead to a capture. If they cannot lead to a capture, they are sown anti-clockwise in the normal way from the outer row hole opposite the hole from which the capture was made. A player is not required to capture in a clockwise direction. If the last counter lands on a hole that is occupied but not in opposition, these counters are picked up and sowing continues. Play ends when one player captures all the opponent's counters or one player cannot play. The player who cannot play loses.
Ludii code: (game "Choro (Lango)" (players 2) (equipment {(mancalaBoard 4 8 None {(track "TrackCCW1" "0,E,N1,W" true P1) (track "TrackCCW2" "16,E,N1,W" true P2) (track "TrackCW1" "7,W,N1,E" true P1) (track "TrackCW2" "24,E,S1,W" true P2)}) (regions "Home" P1 (sites Track "TrackCCW1")) (regions "Home" P2 (sites Track "TrackCCW2")) (regions "Inner" P1 (difference (sites Track "TrackCCW1") (sites Bottom))) (regions "Inner" P2 (difference (sites Track "TrackCCW2") (sites Top))) (regions "Outer" P1 (sites Bottom)) (regions "Outer" P2 (sites Top)) (regions "FourLeftMost" P1 (intersection (expand (sites Left)) (expand (sites Bottom)))) (regions "FourLeftMost" P2 (intersection (expand (sites Right)) (expand (sites Top)))) (regions "TwoRightMostOuter" P1 (intersection (expand (sites Right)) (sites Bottom))) (regions "TwoRightMostOuter" P2 (intersection (expand (sites Left)) (sites Top))) (piece "Seed" Shared)}) (rules (start (set Count 2 (union (sites P1 "Home") (sites P2 "Home")))) {(phase "OuterPhase" (play (move Select (from (if (is Prev Mover) (sites {(var "Replay")}) (if (= 1 (value Player Mover)) (sites Mover "Outer") (sites Mover "TwoRightMostOuter"))) (if (is Prev Mover) (< 0 (count (from ))) (and (if (= 0 (count Sites (forEach (sites Mover "Outer") (and {(< 1 (count (site ))) (is In (trackSite Move (site ) "TrackCCW" (count (site ))) (sites Mover "Inner")) (is Occupied (if (is Mover P1) (+ (trackSite Move (site ) "TrackCCW" (count (site ))) 8) (- (trackSite Move (site ) "TrackCCW" (count (site ))) 8)))})))) true (is In (from ) (forEach (sites Mover "Outer") (and {(< 1 (count (site ))) (is In (trackSite Move (site ) "TrackCCW" (count (site ))) (sites Mover "Inner")) (is Occupied (if (is Mover P1) (+ (trackSite Move (site ) "TrackCCW" (count (site ))) 8) (- (trackSite Move (site ) "TrackCCW" (count (site ))) 8)))})))) (< 1 (count (from )))))) (then (sow (if (is Prev Mover) (var "Count") (count (last From))) "TrackCCW" (mover ) (and (if (< 1 (count (to ))) (and (moveAgain ) (if (and (is Occupied (if (is Mover P1) (+ (to ) 8) (- (to ) 8))) (is In (to ) (sites Mover "Inner"))) (and {(fromTo (from (if (is Mover P1) (+ (to ) 8) (- (to ) 8))) (to (if (is Mover P1) (- (to ) 8) (+ (to ) 8))) (count (if (is Mover P1) (+ (to ) 8) (- (to ) 8)))) (if (is Occupied (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2)))) (fromTo (from (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2)))) (to (if (is Mover P1) (- (to ) 8) (+ (to ) 8))) (count (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2)))))) (set Var "Replay" (if (is Mover P1) (- (to ) 8) (+ (to ) 8))) (if (= 1 (count (if (is Mover P1) (- (to ) 8) (+ (to ) 8)))) (set Var "Count" (+ {1 (count (if (is Mover P1) (+ (to ) 8) (- (to ) 8))) (count (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2))))})) (set Var "Count" (+ (count (if (is Mover P1) (+ (to ) 8) (- (to ) 8))) (count (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2)))))))}) (and (set Var "Replay" (to )) (set Var "Count" (count (to ))))))) (if (!= 1 (value Player Mover)) (set Value Mover 1))))))) (nextPhase Mover (= 1 (count (last To true))) "MainPhase")) (phase "MainPhase" (play (or (move Select (from (if (is Prev Mover) (sites {(var "Replay")}) (sites Mover "FourLeftMost")) (and {(if (is Prev Mover) (< 0 (count (from ))) (< 1 (count (from )))) (is In (from ) (sites Mover "FourLeftMost")) (is In (trackSite Move (from ) "TrackCW" (count (from ))) (sites Mover "Inner")) (is Occupied (if (is Mover P1) (+ (trackSite Move (from ) "TrackCW" (count (from ))) 8) (- (trackSite Move (from ) "TrackCW" (count (from ))) 8)))})) (then (sow (if (is Prev Mover) (var "Count") (count (last From))) "TrackCW" (mover ) (if (< 1 (count (to ))) (and (moveAgain ) (if (and (is Occupied (if (is Mover P1) (+ (to ) 8) (- (to ) 8))) (is In (to ) (sites Mover "Inner"))) (and {(fromTo (from (if (is Mover P1) (+ (to ) 8) (- (to ) 8))) (to (if (is Mover P1) (- (to ) 8) (+ (to ) 8))) (count (if (is Mover P1) (+ (to ) 8) (- (to ) 8)))) (if (is Occupied (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2)))) (fromTo (from (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2)))) (to (if (is Mover P1) (- (to ) 8) (+ (to ) 8))) (count (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2)))))) (set Var "Replay" (if (is Mover P1) (- (to ) 8) (+ (to ) 8))) (if (= 1 (count (if (is Mover P1) (- (to ) 8) (+ (to ) 8)))) (set Var "Count" (+ {1 (count (if (is Mover P1) (+ (to ) 8) (- (to ) 8))) (count (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2))))})) (set Var "Count" (+ (count (if (is Mover P1) (+ (to ) 8) (- (to ) 8))) (count (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2)))))))}) (and (set Var "Replay" (to )) (set Var "Count" (count (to )))))))))) (move Select (from (if (is Prev Mover) (sites {(var "Replay")}) (sites Mover)) (if (is Prev Mover) (< 0 (count (from ))) (and (if (= 0 (count Sites (forEach (sites Mover) (and {(< 1 (count (site ))) (is In (trackSite Move (site ) "TrackCCW" (count (site ))) (sites Mover "Inner")) (is Occupied (if (is Mover P1) (+ (trackSite Move (site ) "TrackCCW" (count (site ))) 8) (- (trackSite Move (site ) "TrackCCW" (count (site ))) 8)))})))) true (is In (from ) (forEach (sites Mover) (and {(< 1 (count (site ))) (is In (trackSite Move (site ) "TrackCCW" (count (site ))) (sites Mover "Inner")) (is Occupied (if (is Mover P1) (+ (trackSite Move (site ) "TrackCCW" (count (site ))) 8) (- (trackSite Move (site ) "TrackCCW" (count (site ))) 8)))})))) (< 1 (count (from )))))) (then (sow (if (is Prev Mover) (var "Count") (count (last From))) "TrackCCW" (mover ) (if (< 1 (count (to ))) (and (moveAgain ) (if (and {(is Occupied (if (is Mover P1) (+ (to ) 8) (- (to ) 8))) (is In (to ) (sites Mover "Inner"))}) (and {(fromTo (from (if (is Mover P1) (+ (to ) 8) (- (to ) 8))) (to (if (is Mover P1) (- (to ) 8) (+ (to ) 8))) (count (if (is Mover P1) (+ (to ) 8) (- (to ) 8)))) (if (is Occupied (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2)))) (fromTo (from (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2)))) (to (if (is Mover P1) (- (to ) 8) (+ (to ) 8))) (count (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2)))))) (set Var "Replay" (if (is Mover P1) (- (to ) 8) (+ (to ) 8))) (if (= 1 (count (if (is Mover P1) (- (to ) 8) (+ (to ) 8)))) (set Var "Count" (+ {1 (count (if (is Mover P1) (+ (to ) 8) (- (to ) 8))) (count (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2))))})) (set Var "Count" (+ (count (if (is Mover P1) (+ (to ) 8) (- (to ) 8))) (count (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2)))))))}) (and (set Var "Replay" (to )) (set Var "Count" (count (to )))))))))))))} (end (if (no Moves Next) (result Mover Win)))))
Line 3
description: 4x8 board. Two counters in each hole. Each player may sow in either direction on their first move, but must continue in the same direction for the remainder of the game. When the final counter of a sowing lands in an occupied hole, the counters in that hole are picked up and sowing continues. If the final hole of a sowing is in the inner row, regardless of whether it is occupied or empty, the player then captures the counters in both of the opponent's holes opposite it, and continues sowing with these counters as well as the ones in the final hole of sowing. Captures cannot be made when the final hole of a sowing was empty, and the opponent's opposite holes have only a single counter. When the final counter lands in an empty hole, the turn is over. The player who captures all the counters wins.
Ludii code: (game "Katra Boaoaka" (players 2) (equipment {(mancalaBoard 4 8 None {(track "TrackCCW1" "0,E,N1,W" true P1) (track "TrackCCW2" "16,E,N1,W" true P2) (track "TrackCW1" "7,W,N1,E" true P1) (track "TrackCW2" "24,E,S1,W" true P2)}) (regions "Home" P1 (sites Track "TrackCCW1")) (regions "Home" P2 (sites Track "TrackCCW2")) (regions "Inner" P1 (difference (sites Track "TrackCCW1") (sites Bottom))) (regions "Inner" P2 (difference (sites Track "TrackCCW2") (sites Top))) (piece "Seed" Shared) (hand Each)}) (rules (start (set Count 2 (union (sites P1 "Home") (sites P2 "Home")))) (play (or (if (!= (value Player Mover) 2) (move Select (from (if (is Prev Mover) (sites {(var "Replay")}) (sites Mover "Home")) (> (count (from )) 0)) (then (and (sow "TrackCCW" (mover ) (and (if (< 1 (count (to ))) (and (moveAgain ) (set Var "Replay" (to )))) (if (is In (to ) (sites Mover "Inner")) (if (not (and {(= 1 (count (to ))) (= 1 (count (if (is Mover P1) (+ (to ) 8) (- (to ) 8)))) (= 1 (count (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2)))))})) (if (or (is Occupied (if (is Mover P1) (+ (to ) 8) (- (to ) 8))) (is Occupied (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2))))) (and {(fromTo (from (if (is Mover P1) (+ (to ) 8) (- (to ) 8))) (to (to )) (count (if (is Mover P1) (+ (to ) 8) (- (to ) 8)))) (fromTo (from (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2)))) (to (to )) (count (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2))))) (if (= 1 (count (to ))) (and (moveAgain ) (set Var "Replay" (to ))))})))))) (if (!= (value Player Mover) 1) (set Value Mover 1)))))) (if (!= (value Player Mover) 1) (move Select (from (if (is Prev Mover) (sites {(var "Replay")}) (sites Mover "Home")) (> (count (from )) 0)) (then (and (sow "TrackCW" (mover ) (and (if (< 1 (count (to ))) (and (moveAgain ) (set Var "Replay" (to )))) (if (is In (to ) (sites Mover "Inner")) (if (not (and {(= 1 (count (to ))) (= 1 (count (if (is Mover P1) (+ (to ) 8) (- (to ) 8)))) (= 1 (count (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2)))))})) (if (or (is Occupied (if (is Mover P1) (+ (to ) 8) (- (to ) 8))) (is Occupied (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2))))) (and {(fromTo (from (if (is Mover P1) (+ (to ) 8) (- (to ) 8))) (to (to )) (count (if (is Mover P1) (+ (to ) 8) (- (to ) 8)))) (fromTo (from (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2)))) (to (to )) (count (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2))))) (if (= 1 (count (to ))) (and (moveAgain ) (set Var "Replay" (to ))))})))))) (if (!= (value Player Mover) 2) (set Value Mover 2)))))))) (end (forEach NonMover (no Moves Player) (result Player Loss)))))
Line 3
description: 4x8 board. Three counters in each hole. Players pick up counters from any of their holes and sow them in either direction. If the last counter falls into an occupied hole, they pick the counters in this hole up and continue sowing. Sowing ends when the last counter falls into an empty hole. If the empty hole is in the inner row, the player captures any of the counters in the opponent's two holes opposite it. Play ends when all of one player's seeds have been captured.
Ludii code: (game "Bao Ki Arabu (Zanzibar 1)" (players 2) (equipment {(mancalaBoard 4 8 None {(track "TrackCCW1" "0,E,N1,W" true P1) (track "TrackCCW2" "16,E,N1,W" true P2) (track "TrackCW1" "7,W,N1,E" true P1) (track "TrackCW2" "24,E,S1,W" true P2)}) (regions "Home" P1 (sites Track "TrackCCW1")) (regions "Home" P2 (sites Track "TrackCCW2")) (regions "Inner" P1 (difference (sites Track "TrackCCW1") (sites Bottom))) (regions "Inner" P2 (difference (sites Track "TrackCCW2") (sites Top))) (piece "Seed" Shared) (hand Each)}) (rules (start (set Count 3 (sites Board))) (play (or (move Select (from (if (is Prev Mover) (if (is Pending) (sites {(last To true)})) (sites Mover "Home")) (> (count (from )) 0)) (then (sow "TrackCW" (mover ) (if (= (count (to )) 1) (if (is In (to ) (sites Mover "Inner")) (and (if (> (count (if (is Mover P1) (+ (to ) 8) (- (to ) 8))) 0) (fromTo (from (if (is Mover P1) (+ (to ) 8) (- (to ) 8))) (to (handSite Mover)) (count (if (is Mover P1) (+ (to ) 8) (- (to ) 8))))) (if (> (count (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2)))) 0) (fromTo (from (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2)))) (to (handSite Mover)) (count (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2)))))))) (and (moveAgain ) (set Pending)))))) (move Select (from (if (is Prev Mover) (if (not (is Pending)) (sites {(last To true)})) (sites Mover "Home")) (> (count (from )) 0)) (then (sow "TrackCCW" (mover ) (if (= (count (to )) 1) (if (is In (to ) (sites Mover "Inner")) (and (if (> (count (if (is Mover P1) (+ (to ) 8) (- (to ) 8))) 0) (fromTo (from (if (is Mover P1) (+ (to ) 8) (- (to ) 8))) (to (handSite Mover)) (count (if (is Mover P1) (+ (to ) 8) (- (to ) 8))))) (if (> (count (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2)))) 0) (fromTo (from (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2)))) (to (handSite Mover)) (count (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2)))))))) (moveAgain ))))))) (end (if (no Moves Mover) (byScore {(score P1 (+ (count Cell (handSite P1)) (count (sites P1 "Home")))) (score P2 (+ (count Cell (handSite P2)) (count (sites P2 "Home"))))})))))
Line 3
description: 4x10-20 board, with even numbers. Two counters in each hole, except the rightmost hole in the inner row of each player, which has zero. Sowing occurs in an anti-clockwise direction. When the final counter lands in an occupied hole, these are picked up and sowing continues. When the final counter lands in an empty hole in the inner row, the counters in the opposite hole in the opponent's inner row are captured. If counters are captured from the inner row, and there are also counters in the outer row, the counters in the outer row are also captured. If counters in the inner and outer row are captured, the player may also capture counters from one other hole on the opponent's side of the board. Single counters cannot be sown until there are no holes with multiple counters on the player's side of the board, and then single counters may only be sown into empty holes. Play continues until one player captures all of their opponent's counters, thus winning the game.
Ludii code: (game "Nsolo" (players 2) (equipment {(mancalaBoard 4 10 None {(track "Track1" "0,E,N1,W" true P1) (track "Track2" "20,E,N1,W" true P2)}) (regions "Home" P1 (sites Track "Track1")) (regions "Home" P2 (sites Track "Track2")) (regions "Inner" P1 (difference (sites Track "Track1") (sites Bottom))) (regions "Inner" P2 (difference (sites Track "Track2") (sites Top))) (piece "Seed" Shared)}) (rules (start (set Count 2 (union {(sites Bottom) (sites Top) (difference (sites P1 "Inner") (sites Right)) (difference (sites P2 "Inner") (sites Left))}))) (play (if (and (is Prev Mover) (= (var "Replay") -1)) (move Remove (sites Next "Home")) (if (all Sites (sites Mover "Home") (>= 1 (count (site )))) (move Select (from (sites Mover "Home") (and (is Occupied (from )) (is Empty (trackSite Move (from ) "Track" 1)))) (then (sow "Track" (mover )))) (move Select (from (if (is Prev Mover) (sites {(var "Replay")}) (sites Mover "Home")) (> (count (from )) 1)) (then (sow "Track" (mover ) (if (< 1 (count (to ))) (if (and (is In (to ) (sites Mover "Inner")) (is Occupied (if (is Mover P1) (+ (to ) 10) (- (to ) 10)))) (and (remove (if (is Mover P1) (+ (to ) 10) (- (to ) 10))) (if (is Occupied (if (is Mover P1) (+ (to ) (* 10 2)) (- (to ) (* 10 2)))) (and {(moveAgain ) (set Var "Replay" -1) (remove (if (is Mover P1) (+ (to ) (* 10 2)) (- (to ) (* 10 2))))}))) (and (moveAgain ) (set Var "Replay" (to ))))))))))) (end (forEach NonMover (all Sites (sites Player "Home") (= 0 (count (site )))) (result Player Loss)))))
Line 3
description: 4x7 board. Play begins with three counters in each hole of the outer rows. Players pick up all of the counters in one hole and sow them anti-clockwise. Holes with single counters can be chosen for sowing. When the final counter is sown, the counters in the following hole are picked up and sowing continues with those counters. If this hole is empty, play ends. Captures are made from the player's inner row at the beginning of a turn or a subsequent sowing within a turn. Counters are captured when a player's inner row has occupied holes. Counters in the opponent's holes opposite a player's occupied holes are captured: either from both of the opponent's rows or only the inner row if the corresponding hole in the outer row is empty. If the inner row is empty but the outer row is occupied, there is no capture, and when both rows are occupied they both must be captured. Captures are also made on a subsequent sowing within a turn, in the same manner as above but from the hole the next sowing begins, i.e., the one following the hole in which the last seed of the previous sowing is made. Captured counters are placed in the player's outer row opposite the hole from which the capture was made. Game is won when the opponent's outer row is emptied.
Ludii code: (game "Kisolo" (players 2) (equipment {(mancalaBoard 4 7 None {(track "TrackCCW1" "0,E,N1,W" true P1) (track "TrackCCW2" "14,E,N1,W" true P2)}) (regions "Home" P1 (sites Track "TrackCCW1")) (regions "Home" P2 (sites Track "TrackCCW2")) (regions "Inner" P1 (difference (sites Track "TrackCCW1") (sites Bottom))) (regions "Inner" P2 (difference (sites Track "TrackCCW2") (sites Top))) (regions "Outer" P1 (difference (sites Track "TrackCCW1") (sites P1 "Inner"))) (regions "Outer" P2 (difference (sites Track "TrackCCW2") (sites P2 "Inner"))) (piece "Seed" Shared)}) (rules (start {(set Count 3 (union (sites P1 "Outer") (sites P2 "Outer")))}) (play (if (and (or (= 0 (count MovesThisTurn)) (is In 1 (sites Pending))) (!= 0 (count Sites (forEach (difference (sites Mover "Inner") (sites Empty)) (is Occupied (if (is Mover P1) (+ (site ) 7) (- (site ) 7))))))) (move Select (from (forEach (difference (sites Mover "Inner") (sites Empty)) (is Occupied (if (is Mover P1) (+ (site ) 7) (- (site ) 7))))) (then (and {(fromTo (from (if (is Mover P1) (+ (last To) 7) (- (last To) 7))) (to (if (is Mover P1) (- (last To) 7) (+ (last To) 7)))) (if (is Occupied (if (is Mover P1) (+ (last To) (* 7 2)) (- (last To) (* 7 2)))) (fromTo (from (if (is Mover P1) (+ (last To) (* 7 2)) (- (last To) (* 7 2)))) (to (if (is Mover P1) (- (last To) 7) (+ (last To) 7))))) (moveAgain )} (then (if (!= 0 (count Sites (forEach (difference (sites Mover "Inner") (sites Empty)) (is Occupied (if (is Mover P1) (+ (site ) 7) (- (site ) 7)))))) (set Pending 1)))))) (move Select (from (if (and (is In 2 (sites Pending)) (is Prev Mover)) (sites {(trackSite Move (last To true) "TrackCCW" 1)}) (sites Mover "Home")) (> (count (from )) 0)) (then (sow "TrackCCW" (mover ) (if (is Occupied (trackSite Move (to ) "TrackCCW" 1)) (and {(if (and (is In (trackSite Move (to ) "TrackCCW" 1) (sites Mover "Inner")) (is Occupied (if (is Mover P1) (+ (trackSite Move (to ) "TrackCCW" 1) 7) (- (trackSite Move (to ) "TrackCCW" 1) 7)))) (and (fromTo (from (if (is Mover P1) (+ (trackSite Move (to ) "TrackCCW" 1) 7) (- (trackSite Move (to ) "TrackCCW" 1) 7))) (to (if (is Mover P1) (- (trackSite Move (to ) "TrackCCW" 1) 7) (+ (trackSite Move (to ) "TrackCCW" 1) 7)))) (if (is Occupied (if (is Mover P1) (+ (trackSite Move (to ) "TrackCCW" 1) (* 7 2)) (- (trackSite Move (to ) "TrackCCW" 1) (* 7 2)))) (fromTo (from (if (is Mover P1) (+ (trackSite Move (to ) "TrackCCW" 1) (* 7 2)) (- (trackSite Move (to ) "TrackCCW" 1) (* 7 2)))) (to (if (is Mover P1) (- (trackSite Move (to ) "TrackCCW" 1) 7) (+ (trackSite Move (to ) "TrackCCW" 1) 7))))))) (moveAgain ) (set Pending 2)}))))))) (end (forEach Player (all Sites (sites Player "Outer") (= 0 (count (site )))) (result Player Loss)))))
Line 3
description: 4x8 board, played only along the perimeter. One to four counters per hole. Any number of players, holes are distributed equally among the players. Sowing occurs in an anti-clockwise direction. Each player owns the holes in which their counters are located at the beginning of their turn, and they must sow from the leftmost hole. When a counter falls into a hole containing counters belonging to the opponent, this hole and the counters in it are captured by the player, but remain in place and in play. When a player has a single counter and empty holes in from of it, this counter leaps to the next hole occupied by the opponent. The player who captures all of the opponent's holes wins. 
Ludii code: (game "Quendo" (players 4) (equipment {(mancalaBoard 4 8 None {(track "Track" "0,E,N,W,S2" true)}) (piece "Seed" Each) (hand Each)}) (rules (start {(place "Seed1" (sites {0 1 2 3 4}) {4}) (place "Seed2" (sites {5 6 7 15 23}) {4}) (place "Seed3" (sites {31 30 29 28 27}) {4}) (place "Seed4" (sites {26 25 24 16 8}) {4})}) (play (if (!= 1 (count Pieces Mover)) (move Select (from (trackSite FirstSite (trackSite FirstSite (not (is Mover (who (to ))))) (is Mover (who (to ))))) (then (sow (if (and (!= (mover ) (what (to ))) (is Occupied (to ))) (and (remove (to ) (count (to ))) (add (piece (id "Seed" Mover)) (to (to )) (count (to )))))))) (move (from (trackSite FirstSite (trackSite FirstSite (not (is Mover (who (to ))))) (is Mover (who (to ))))) (to (trackSite FirstSite (from ) (is Enemy (who (to )))) (apply (and (remove (to ) (count (to ))) (add (piece (id "Seed" Mover)) (to (to )) (count (to ))))))))) (end (forEach NonMover (no Pieces Player) (result Player Loss)))))
Line 3
description: 4x10-20 holes, with even numbers. Two counters in each hole in the outer row. Sowing occurs in an anti-clockwise direction. When the final counter lands in an occupied hole, these are picked up and sowing continues. When the final counter lands in an empty hole in the inner row, the counters in the opposite hole in the opponent's inner row are captured. If counters are captured from the inner row, and there are also counters in the outer row, the counters in the outer row are also captured. If counters in the inner and outer row are captured, the player may also capture counters from two other holes on the opponent's side of the board. Single counters cannot be sown until there are no holes with multiple counters on the player's side of the board, and then single counters may only be sown into empty holes. Play continues until one player captures all of their opponent's counters, thus winning the game.
        
Ludii code: (game "Msuwa wa Kunja" (players 2) (equipment {(mancalaBoard 4 10 None {(track "Track1" "0,E,N1,W" true P1) (track "Track2" "20,E,N1,W" true P2)}) (regions "Home" P1 (sites Track "Track1")) (regions "Home" P2 (sites Track "Track2")) (regions "Inner" P1 (difference (sites Track "Track1") (sites Bottom))) (regions "Inner" P2 (difference (sites Track "Track2") (sites Top))) (piece "Seed" Shared)}) (rules (start (set Count 2 (union (sites Top) (sites Bottom)))) (play (if (and (is Prev Mover) (< 0 (var ))) (move Remove (forEach (sites Next "Home") (< 0 (count (site )))) (then (and (if (> (var ) 1) (moveAgain )) (set Var (- (var ) 1))))) (if (not (all Sites (forEach (sites Mover "Home") (< 1 (count (site )))) (= 0 (count (site ))))) (move Select (from (if (is Prev Mover) (sites {(last To true)}) (sites Mover "Home")) (< 1 (count (from )))) (then (sow "Track" (mover ) (if (< 1 (count (to ))) (moveAgain ) (if (is In (to ) (sites Mover "Inner")) (if (< 0 (count (if (is Mover P1) (+ (to ) 10) (- (to ) 10)))) (and (remove (if (is Mover P1) (+ (to ) 10) (- (to ) 10))) (if (< 0 (count (if (is Mover P1) (+ (to ) (* 10 2)) (- (to ) (* 10 2))))) (and {(remove (if (is Mover P1) (+ (to ) (* 10 2)) (- (to ) (* 10 2)))) (set Var 2) (moveAgain )}))))))))) (move Select (from (sites Mover "Home") (and (= 1 (count (from ))) (= 0 (count (trackSite Move (from ) 1))))) (then (sow "Track" (mover ) (if (is In (to ) (sites Mover "Inner")) (if (< 0 (count (if (is Mover P1) (+ (to ) 10) (- (to ) 10)))) (and (remove (if (is Mover P1) (+ (to ) 10) (- (to ) 10))) (if (< 0 (count (if (is Mover P1) (+ (to ) (* 10 2)) (- (to ) (* 10 2))))) (and {(remove (if (is Mover P1) (+ (to ) (* 10 2)) (- (to ) (* 10 2)))) (set Var 2) (moveAgain )}))))))))))) (end (forEach NonMover (all Sites (sites Player "Home") (= 0 (count (site )))) (result Player Loss)))))
Line 3
description: 4x8 board. Two counters in each hole. Opening play: Players simultaneously arrange their counters in the following patter, beginning from the bottom left and proceeding anti-clockwise: 0, 6, 0, 0, 0, 0, 0, 17, 0, 3, 0, 3, 0, 3, 0, 0. Players then move alternately. The first three turns are made by sowing from the holes with three holes, proceeding in order from the one furthest to the left, sowing two in the next hole and one in the following. They then sow from the next hole to the right with three counters on the next turn in the same way. Main phase: Play begins from any hole on the player's side of the board with counters in it. Singletons cannot move. Sowing happens in an anti-clockwise direction. If the last counter lands in an empty hole, the turn is over. For capturing: Holes are in 'opposition' when one player has the front row hole occupied and the opponent has both of the holes opposite it occupied. If the last hole in a sowing is in opposition, the player takes the counters in both of the opponent's holes and places them in the empty hole from which the player lifted the counters. The player then sows the captured counters from this hole. Further captures in the sowing can occur in the same way. However, each player has two hole from which clockwise plays can be made: the leftmost hole in the outer row and the second from the left in the inner row. Clockwise moves can only be made from these holes if they immediately lead to a capture. When the captured counters are sown, starting from the same hole, they can also be sown clockwise if they lead to a capture. If they cannot lead to a capture, they are sown anti-clockwise. Another alternative the player has is that, if the player plays clockwise from one of these holes and therefore makes a capture, the captured counters may be placed in the hole and left there, and the player may play instead from the other hole from which clockwise captures are allowed in a clockwise direction, if it leads to a capture. The player may continue playing from this hole as above until the possibilities to move are exhausted, and then may move from any hole in an anti-clockwise direction. Multiple captures can only be made in a clockwise direction from these holes if it is made on the first sowing of the turn. Otherwise, only one clockwise capture can be made and sowing must proceed in an anti-clockwise direction. If the last counter lands on a hole that is occupied but not in opposition, these counters are picked up and sowing continues. Play ends when one player captures all the opponent's counters or one player cannot play. The player who cannot play loses. A player may also win by capturing the counters from both of the opponent's end holes in the inner row in a single turn.
Ludii code: (game "Ikibuguzo (Opening 1)" (players 2) (equipment {(mancalaBoard 4 8 None {(track "TrackCCW1" "0,E,N1,W" true P1) (track "TrackCCW2" "16,E,N1,W" true P2) (track "TrackCW1" "7,W,N1,E" true P1) (track "TrackCW2" "24,E,S1,W" true P2)}) (regions "Home" P1 (sites Track "TrackCCW1")) (regions "Home" P2 (sites Track "TrackCCW2")) (regions "Inner" P1 (difference (sites Track "TrackCCW1") (sites Bottom))) (regions "Inner" P2 (difference (sites Track "TrackCCW2") (sites Top))) (map "FirstMove" {(pair P1 10) (pair P2 21)}) (map "SecondMove" {(pair P1 12) (pair P2 19)}) (map "ThirdMove" {(pair P1 14) (pair P2 17)}) (map "LeftMostOuter" {(pair P1 0) (pair P2 31)}) (map "SecondLeftInner" {(pair P1 9) (pair P2 22)}) (piece "Seed" Shared) (hand Each)}) (rules (start {(set Count 6 (sites {"G4" "B1"})) (set Count 17 (sites {"H1" "A4"})) (set Count 3 (sites {"G2" "E2" "C2" "B3" "D3" "F3"}))}) {(phase "FirstMove" (play (move (from (mapEntry "FirstMove" Mover)) (to (trackSite Move (from ) "TrackCCW" 1)) 2 (then (fromTo (from (mapEntry "FirstMove" Mover)) (to (trackSite Move (from ) "TrackCCW" 2)) 1)))) (nextPhase Mover "SecondMove")) (phase "SecondMove" (play (move (from (mapEntry "SecondMove" Mover)) (to (trackSite Move (from ) "TrackCCW" 1)) 2 (then (fromTo (from (mapEntry "SecondMove" Mover)) (to (trackSite Move (from ) "TrackCCW" 2)) 1)))) (nextPhase Mover "ThirdMove")) (phase "ThirdMove" (play (move (from (mapEntry "ThirdMove" Mover)) (to (trackSite Move (from ) "TrackCCW" 1)) 2 (then (fromTo (from (mapEntry "ThirdMove" Mover)) (to (trackSite Move (from ) "TrackCCW" 2)) 1)))) (nextPhase Mover "MainPhase")) (phase "MainPhase" (play (or (move Select (from (if (is Prev Mover) (sites {(var "Replay")}) (sites {(mapEntry "LeftMostOuter" Mover) (mapEntry "SecondLeftInner" Mover)})) (and {(if (is Prev Mover) (< 0 (count (from ))) (< 1 (count (from )))) (is In (from ) (sites {(mapEntry "LeftMostOuter" Mover) (mapEntry "SecondLeftInner" Mover)})) (is In (trackSite Move (from ) "TrackCW" (count (from ))) (sites Mover "Inner")) (is Occupied (if (is Mover P1) (+ (trackSite Move (from ) "TrackCW" (count (from ))) 8) (- (trackSite Move (from ) "TrackCW" (count (from ))) 8))) (is Occupied (if (is Mover P1) (+ (trackSite Move (from ) "TrackCW" (count (from ))) (* 8 2)) (- (trackSite Move (from ) "TrackCW" (count (from ))) (* 8 2))))})) (then (sow "TrackCW" (mover ) (if (< 1 (count (to ))) (and (moveAgain ) (if (and {(is Occupied (if (is Mover P1) (+ (to ) 8) (- (to ) 8))) (is Occupied (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2)))) (is In (to ) (sites Mover "Inner"))}) (and {(fromTo (from (if (is Mover P1) (+ (to ) 8) (- (to ) 8))) (to (last From)) (count (if (is Mover P1) (+ (to ) 8) (- (to ) 8)))) (fromTo (from (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2)))) (to (last From)) (count (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2))))) (set Var "Replay" (from ))}) (set Var "Replay" (to )))))))) (move Select (from (if (is Prev Mover) (sites {(var "Replay")}) (sites Mover)) (if (is Prev Mover) (< 0 (count (from ))) (< 1 (count (from ))))) (then (sow "TrackCCW" (mover ) (if (< 1 (count (to ))) (and (moveAgain ) (if (and {(is Occupied (if (is Mover P1) (+ (to ) 8) (- (to ) 8))) (is Occupied (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2)))) (is In (to ) (sites Mover "Inner"))}) (and {(fromTo (from (if (is Mover P1) (+ (to ) 8) (- (to ) 8))) (to (last From)) (count (if (is Mover P1) (+ (to ) 8) (- (to ) 8)))) (fromTo (from (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2)))) (to (last From)) (count (if (is Mover P1) (+ (to ) (* 8 2)) (- (to ) (* 8 2))))) (set Var "Replay" (from ))}) (set Var "Replay" (to )))))))))) (end (if (no Moves Next) (result Mover Win))))}))
Line 3
description: Oval board. Two semi-circles on the ends are stores, the middle section divided into two rows of five squares. Five counters in each of the rows of squares and one large stone in each end space. Sowing begins in any of the squares on the player's side of the board, and proceeds in either direction. Sowing also includes both end spaces. When the final counter is sown, the contents of the next square are picked up and sowing continues. If the end space is the next space, the turn ends. When the space after the one in which the final counter fell is empty, the contents of the hole after the empty hole are captured, including the end spaces. If there is an unbroken sequence of alternating empty and occupied squares, the contents of the occupied squares are captured. If there are two or more empty squares, the turn ends. If at any time the squares in a player's rows are empty, the player must place one of their captured counters into each of their squares. The game ends when both of the large stones in the end spaces are captured. The remaining counters belong to the player on whose row they are placed. The player with the most counters wins, with the large stones counting as ten. A new game begins. Players fill their holes with their captured stones. The player with fewer counters must then \"sell\" holes on their side to the opponent to have enough counters to fill the holes. If the difference in the number of captured counters is less than ten, the opponent is given half-ownership of a space, and the contents of it at the end of the game are split between the two players. If the difference is ten, the opponent then may take all of the stones from a sold space at the end of the game. The player may regain sold spaces on subsequent rounds by capturing ten counters more than their opponent. The game is then played as before. Games are played until three or four squares in the same row have been sold.
Ludii code: (game "O An Quan" (players 2) (equipment {(mancalaBoard 2 5 true {(track "TrackCCW" "0,1,E,11,10,W" true) (track "TrackCW" "0,6,E,11,5,W" true)}) (piece "Seed" Shared) (piece "Ball" Shared) (hand Each 2) (regions P1 (sites Bottom)) (regions P2 (sites Top)) (map {(pair P1 FirstSite) (pair P2 LastSite)}) (regions "EndHoles" (sites {"A1" "G1"}))}) (rules (start {(place Stack "Seed" (union (sites Bottom) (sites Top)) 5) (place Stack "Ball" (sites {"A1" "G1"})) (set RememberValue "OwnedP1" (sites Bottom)) (set RememberValue "OwnedP2" (sites Top))}) {(phase "Sowing" (play (or {(if (!= (var "Direction") 2) (move Select (from (if (is Prev Mover) (sites {(var "Replay")}) (if (is Mover P1) (sites (values Remembered "OwnedP1")) (sites (values Remembered "OwnedP2")))) (!= 0 (size Stack (from )))) (then (and {(forEach Value 1 (size Stack (last From)) (fromTo (from (last From) (- (size Stack (last From)) (value ))) (to (trackSite Move (last From) "TrackCCW" (value ))) true)) (if (or (is In (trackSite Move (last From) "TrackCCW" (+ 1 (size Stack (last From)))) (sites "EndHoles")) (>= (size Stack (last From)) 10)) (set Var "Direction" 0) (if (!= 0 (size Stack (trackSite Move (last From) "TrackCCW" (+ 1 (size Stack (last From)))))) (and {(set Var "Direction" 1) (moveAgain ) (set Var "Replay" (trackSite Move (last From) "TrackCCW" (+ 1 (size Stack (last From)))))}) (and (set Var "Direction" 0) (if (is Occupied (trackSite Move (last From) "TrackCCW" (+ 2 (size Stack (last From))))) (forEach Level (trackSite Move (last From) "TrackCCW" (+ 2 (size Stack (last From)))) FromTop (if (= (id "Seed" Shared) (what (trackSite Move (last From) "TrackCCW" (+ 2 (size Stack (last From)))) (level ))) (fromTo (from (trackSite Move (last From) "TrackCCW" (+ 2 (size Stack (last From)))) (level )) (to (handSite Mover))) (fromTo (from (trackSite Move (last From) "TrackCCW" (+ 2 (size Stack (last From)))) (level )) (to (handSite Mover 1)))))))))})))) (if (!= (var "Direction") 1) (move Select (from (if (is Prev Mover) (sites {(var "Replay")}) (if (is Mover P1) (sites (values Remembered "OwnedP1")) (sites (values Remembered "OwnedP2")))) (!= 0 (size Stack (from )))) (then (and (forEach Value 1 (size Stack (last From)) (fromTo (from (last From) (- (size Stack (last From)) (value ))) (to (trackSite Move (last From) "TrackCW" (value ))) true)) (if (or (is In (trackSite Move (last From) "TrackCW" (+ 1 (size Stack (last From)))) (sites "EndHoles")) (>= (size Stack (last From)) 10)) (set Var "Direction" 0) (if (!= 0 (size Stack (trackSite Move (last From) "TrackCW" (+ 1 (size Stack (last From)))))) (and {(set Var "Direction" 2) (moveAgain ) (set Var "Replay" (trackSite Move (last From) "TrackCW" (+ 1 (size Stack (last From)))))}) (and (set Var "Direction" 0) (if (is Occupied (trackSite Move (last From) "TrackCW" (+ 2 (size Stack (last From))))) (forEach Level (trackSite Move (last From) "TrackCW" (+ 2 (size Stack (last From)))) FromTop (if (= (id "Seed" Shared) (what (trackSite Move (last From) "TrackCW" (+ 2 (size Stack (last From)))) (level ))) (fromTo (from (trackSite Move (last From) "TrackCW" (+ 2 (size Stack (last From)))) (level )) (to (handSite Mover))) (fromTo (from (trackSite Move (last From) "TrackCW" (+ 2 (size Stack (last From)))) (level )) (to (handSite Mover 1)))))))))))))} (then (if (= 2 (count Cell (sites {(handSite P1 1) (handSite P2 1)}))) (and {(forEach Site (intersection (sites (values Remembered "OwnedP1")) (sites (values Remembered "OwnedP2"))) (if (is Occupied (site )) (and (forEach Level (site ) FromTop (if (>= (level ) (/ (size Stack (site )) 2)) (fromTo (from (site ) (level )) (to (handSite P1)) true))) (forEach Level (site ) FromTop (if (< (level ) (/ (size Stack (site )) 2)) (fromTo (from (site ) (level )) (to (handSite P2)) true)))))) (forEach Site (union (difference (sites (values Remembered "OwnedP1")) (sites (values Remembered "OwnedP2"))) (sites {(mapEntry P1)})) (if (is Occupied (site )) (forEach Level (site ) FromTop (fromTo (from (site ) (level )) (to (handSite P1)) true)))) (forEach Site (union (difference (sites (values Remembered "OwnedP2")) (sites (values Remembered "OwnedP1"))) (sites {(mapEntry P2)})) (if (is Occupied (site )) (forEach Level (site ) FromTop (fromTo (from (site ) (level )) (to (handSite P2)) true)))) (forget Value "OwnedP1" All) (forget Value "OwnedP2" All)}) (and (if (and (if (= 1 P1) (no Pieces All (sites (values Remembered "OwnedP1"))) (no Pieces All (sites (values Remembered "OwnedP2")))) (>= (size Stack Cell (handSite P1)) (if (= 1 P1) (count Sites (sites (values Remembered "OwnedP1"))) (count Sites (sites (values Remembered "OwnedP2")))))) (forEach Value 1 (if (= 1 P1) (count Sites (sites (values Remembered "OwnedP1"))) (count Sites (sites (values Remembered "OwnedP2")))) (fromTo (from Cell (handSite P1) (- (size Stack Cell (handSite P1)) (value ))) (to (regionSite (sites (values Remembered "OwnedP1")) (- (value ) 1))) true))) (if (and (if (= 1 P2) (no Pieces All (sites (values Remembered "OwnedP1"))) (no Pieces All (sites (values Remembered "OwnedP2")))) (>= (size Stack Cell (handSite P2)) (if (= 1 P2) (count Sites (sites (values Remembered "OwnedP1"))) (count Sites (sites (values Remembered "OwnedP2")))))) (forEach Value 1 (if (= 1 P2) (count Sites (sites (values Remembered "OwnedP1"))) (count Sites (sites (values Remembered "OwnedP2")))) (fromTo (from Cell (handSite P2) (- (size Stack Cell (handSite P2)) (value ))) (to (regionSite (sites (values Remembered "OwnedP2")) (- (value ) 1))) true)))))))) (end (if (all Sites (sites Board) (= 0 (count (site )))) {(if (>= 9 (size Stack Cell (handSite P1))) (result P2 Win)) (if (>= 9 (size Stack Cell (handSite P2))) (result P1 Win))})) (nextPhase (all Sites (sites Board) (= 0 (count (site )))) "BetweenRounds")) (phase "BetweenRounds" (play (if (<= 5 (size Stack Cell (handSite Mover))) (move Select (from Cell (handSite Mover)) (to (trackSite FirstSite "TrackCCW" (mapEntry Mover) (and (not (is In (to ) (sites "EndHoles"))) (is Empty (to ))))) (then (and {(forEach Value 1 5 (fromTo (from Cell (last From) (- (size Stack Cell (last From)) (value ))) (to (last To)) true)) (if (is Mover P1) (remember Value "OwnedP1" (last To)) (remember Value "OwnedP2" (last To))) (if (<= 10 (count Cell (handSite Mover))) (moveAgain ) (if (or (= 8 (count Cell (handSite Mover))) (= 9 (count Cell (handSite Mover)))) (and {(forEach Value 1 (- (count Cell (handSite Mover)) 5) (fromTo (from Cell (handSite Mover) (- (- (size Stack Cell (handSite Mover)) 5) (value ))) (to (trackSite FirstSite "TrackCCW" (trackSite FirstSite "TrackCCW" (mapEntry Mover) (and (not (is In (to ) (sites "EndHoles"))) (is Empty (to )))) (and {(not (is In (to ) (sites "EndHoles"))) (is Empty (to )) (!= (trackSite FirstSite "TrackCCW" (mapEntry Mover) (and (not (is In (to ) (sites "EndHoles"))) (is Empty (to )))) (to ))}))) true)) (forEach Value 1 (- 5 (- (count Cell (handSite Mover)) 5)) (fromTo (from Cell (handSite Next) (- (size Stack Cell (handSite Next)) (value ))) (to (trackSite FirstSite "TrackCCW" (trackSite FirstSite "TrackCCW" (mapEntry Mover) (and (not (is In (to ) (sites "EndHoles"))) (is Empty (to )))) (and {(not (is In (to ) (sites "EndHoles"))) (is Empty (to )) (!= (trackSite FirstSite "TrackCCW" (mapEntry Mover) (and (not (is In (to ) (sites "EndHoles"))) (is Empty (to )))) (to ))}))) true)) (if (is Mover P1) (remember Value "OwnedP1" (trackSite FirstSite "TrackCCW" (trackSite FirstSite "TrackCCW" (mapEntry Mover) (and (not (is In (to ) (sites "EndHoles"))) (is Empty (to )))) (and {(not (is In (to ) (sites "EndHoles"))) (is Empty (to )) (!= (trackSite FirstSite "TrackCCW" (mapEntry Mover) (and (not (is In (to ) (sites "EndHoles"))) (is Empty (to )))) (to ))}))) (remember Value "OwnedP2" (trackSite FirstSite "TrackCCW" (trackSite FirstSite "TrackCCW" (mapEntry Mover) (and (not (is In (to ) (sites "EndHoles"))) (is Empty (to )))) (and {(not (is In (to ) (sites "EndHoles"))) (is Empty (to )) (!= (trackSite FirstSite "TrackCCW" (mapEntry Mover) (and (not (is In (to ) (sites "EndHoles"))) (is Empty (to )))) (to ))})))) (if (is Mover P2) (remember Value "OwnedP1" (trackSite FirstSite "TrackCCW" (trackSite FirstSite "TrackCCW" (mapEntry Mover) (and (not (is In (to ) (sites "EndHoles"))) (is Empty (to )))) (and {(not (is In (to ) (sites "EndHoles"))) (is Empty (to )) (!= (trackSite FirstSite "TrackCCW" (mapEntry Mover) (and (not (is In (to ) (sites "EndHoles"))) (is Empty (to )))) (to ))}))) (remember Value "OwnedP2" (trackSite FirstSite "TrackCCW" (trackSite FirstSite "TrackCCW" (mapEntry Mover) (and (not (is In (to ) (sites "EndHoles"))) (is Empty (to )))) (and {(not (is In (to ) (sites "EndHoles"))) (is Empty (to )) (!= (trackSite FirstSite "TrackCCW" (mapEntry Mover) (and (not (is In (to ) (sites "EndHoles"))) (is Empty (to )))) (to ))}))))})))}))) (then (if (and (is Empty Cell (handSite P1)) (is Empty Cell (handSite P2))) (if (= (size Stack Cell (handSite P1 1)) 2) (and (fromTo (from Cell (handSite P1 1) 1) (to (mapEntry P1)) true) (fromTo (from Cell (handSite P1 1) 0) (to (mapEntry P2)) true)) (if (= (size Stack Cell (handSite P2 1)) 2) (and (fromTo (from Cell (handSite P2 1) 1) (to (mapEntry P1)) true) (fromTo (from Cell (handSite P2 1) 0) (to (mapEntry P2)) true)) (and (fromTo (from Cell (handSite P1 1) 0) (to (mapEntry P1)) true) (fromTo (from Cell (handSite P2 1) 0) (to (mapEntry P2)) true)))))))) (nextPhase (and (is Empty Cell (handSite P1)) (is Empty Cell (handSite P2))) "Sowing"))}))
Line 3
description: 2x6 board. Play begins with four counters in each hole. A player picks up the contents of any of their holes and sowing them in an anti-clockwise direction, picking up the contents of the last hole in which his counters fall, and continuing sowing. This continues until the last counter falls in an empty hole. Then it is the other player's turn. A hole is captured when the last ball is dropped into an opponent's hole containing three counters, making it four. A player cannot then take from one of these holes that they have captured. Therefore, the player cannot begin a turn from their own captured hole nor can they continue sowing from it if their last counter falls into it. If the last counter of a sowing falls into an opponent's captured hole, one of those counters are removed from the board and placed in the store, and the sowing continues with the contents of any of the player's holes. Ownership of a hole continues even if it becomes empty. When a player cannot move (i.e., there are no counters in their holes except any that are in captured holes), the opponent continues to move until the player is able to move. Play continues until all counters are either placed in the store or in captured holes and thus cannot be moved. Players then count their pieces by placing four in each hole, and the player who has more than their original number takes ownership of one of the opponent's holes for every four counters more than the original number that have been taken. If no player took four more than the original, the player with three extra gets the hole, if each player has two extra they draw lots to see who gets an extra hole. Play then begins again as before. The game ends when one player owns all of the counters, and thus all of the holes.
Ludii code: (game "Qelat" (players 2) (equipment {(mancalaBoard 2 6 None {(track "TrackCCW" "0,E,N,W" true) (track "TrackCW" "5,W,N,E" true)}) (piece "Seed" Shared) (hand Each) (regions P1 (sites Bottom)) (regions P2 (sites Top)) (map "RightMost" {(pair P1 5) (pair P2 6)})}) (rules (start {(set RememberValue "OwnedP1" (sites Bottom)) (set RememberValue "OwnedP2" (sites Top)) (set Count 4 (sites Track))}) {(phase "Sowing" (play (or {(move Select (from (if (and (is Prev Mover) (= 1 (var "ContinueSowing"))) (sites {(var "Replay")}) (if (is Mover P1) (sites (values Remembered "OwnedP1")) (sites (values Remembered "OwnedP2")))) (and (< 0 (count (from ))) (= 0 (state (from ))))) (then (sow "TrackCCW" (if (and {(= 0 (state (to ))) (= 4 (count (to ))) (is In (to ) (if (is Mover P1) (sites (values Remembered "OwnedP2")) (sites (values Remembered "OwnedP1"))))}) (set State (to ) (mover )) (if (< 1 (count (to ))) (if (= 0 (state (to ))) (and {(moveAgain ) (set Var "Replay" (to )) (set Var "ContinueSowing" 1)}) (if (!= (mover ) (state (to ))) (and {(fromTo (from (to )) (to (handSite Mover)) (min 2 (count (to )))) (set State (to ) (state (to ))) (moveAgain ) (set Var "ContinueSowing" 0)}))))))))} (then (if (all Sites (forEach (sites Board) (= 0 (state (site )))) (= 0 (count (site )))) (and {(forEach Site (forEach (sites Board) (= 1 (state (site )))) (fromTo (from (site )) (to (handSite P1)) (count (site )))) (forEach Site (forEach (sites Board) (= 2 (state (site )))) (fromTo (from (site )) (to (handSite P2)) (count (site )))) (forget Value "OwnedP1" All) (forget Value "OwnedP2" All)}))))) (end (if (all Sites (sites Board) (= 0 (count (site )))) {(if (= 0 (count Cell (handSite P1))) (result P2 Win)) (if (= 0 (count Cell (handSite P2))) (result P1 Win))})) (nextPhase (all Sites (sites Board) (= 0 (count (site )))) "BetweenRounds")) (phase "BetweenRounds" (play (if (<= 4 (count Cell (handSite Mover))) (move (from (handSite Mover)) (to (trackSite FirstSite "TrackCW" (mapEntry "RightMost" Mover) (is Empty (to )))) 4 (then (and {(if (is Mover P1) (remember Value "OwnedP1" (last To)) (remember Value "OwnedP2" (last To))) (if (<= 4 (count Cell (handSite Mover))) (moveAgain ) (if (= 3 (count Cell (handSite Mover))) (and {(fromTo (from (handSite Mover)) (to (trackSite FirstSite "TrackCW" (mapEntry "RightMost" Mover) (is Empty (to )))) 3) (fromTo (from (handSite Next)) (to (trackSite FirstSite "TrackCW" (mapEntry "RightMost" Mover) (is Empty (to )))) 1) (if (is Mover P1) (remember Value "OwnedP1" (trackSite FirstSite "TrackCW" (mapEntry "RightMost" Mover) (is Empty (to )))) (remember Value "OwnedP2" (trackSite FirstSite "TrackCW" (mapEntry "RightMost" Mover) (is Empty (to )))))}) (if (= 2 (count Cell (handSite Mover))) (and {(fromTo (from (handSite Mover)) (to (trackSite FirstSite "TrackCW" (mapEntry "RightMost" Mover) (is Empty (to )))) 2) (fromTo (from (handSite Next)) (to (trackSite FirstSite "TrackCW" (mapEntry "RightMost" Mover) (is Empty (to )))) 2) (if (< 50 (value Random (range 1 100))) (remember Value "OwnedP1" (trackSite FirstSite "TrackCW" (mapEntry "RightMost" Mover) (is Empty (to )))) (remember Value "OwnedP2" (trackSite FirstSite "TrackCW" (mapEntry "RightMost" Mover) (is Empty (to )))))}))))}))))) (nextPhase (and (is Empty (handSite P1)) (is Empty (handSite P2))) "Sowing"))}))
Line 3
description: 2x8 board, with a store on either end. Each player owns the store to their right. Eight counters in each hole. Players alternate turns sowing in an anti-clockwise direction from one of the holes on their side of the board. Sowing always includes the player's store (but not the opponent's store), and sowing cannot begin from the store. When the final counter lands in an occupied hole, the contents of that hole are picked up and sowing continues. If the last counter lands in the player's store, they may choose any of the holes on their side of the board and continue sowing from it. When the final counter lands in an empty hole, the counters in the opposite hole are captured. Play continues until all of the counters are captured. A new round begins. Players fill the holes on their side of the board with their captured counters. If a player cannot fill a hole with the required number of counters, the hole is closed and is out of play for that round. Play continues as before. Play continues in successive rounds until one player closes all of their opponent's holes and wins. 
Ludii code: (game "Ovalhu" (players 2) (equipment {(mancalaBoard 2 8 {(track "Track1" "1,E,17,16,W" true P1) (track "Track2" "1,E,N,W,0" true P2)}) (piece "Seed" Shared) (map {(pair P1 LastSite) (pair P2 FirstSite)}) (regions P1 (sites Bottom)) (regions P2 (sites Top))}) (rules (start {(set RememberValue "Playable" (union (sites Top) (sites Bottom))) (set Count 8 (union (sites Bottom) (sites Top)))}) {(phase "Sowing" (play (or {(move Select (from (if (and (is Pending) (is Prev Mover)) (sites {(var "Replay")}) (sites Mover)) (and (is Occupied (from )) (is In (from ) (sites (values Remembered "Playable"))))) (then (sow "Track" (mover ) (if (or (is In (to ) (sites {(mapEntry P1) (mapEntry P2)})) (< 1 (count (to )))) (and (moveAgain ) (if (not (is In (to ) (sites {(mapEntry P1) (mapEntry P2)}))) (and (set Pending) (set Var "Replay" (to ))))) (if (is Occupied (if (is In (to ) (sites Bottom)) (+ (to ) 8) (- (to ) 8))) (fromTo (from (if (is In (to ) (sites Bottom)) (+ (to ) 8) (- (to ) 8))) (to (mapEntry Mover)) (count (if (is In (to ) (sites Bottom)) (+ (to ) 8) (- (to ) 8)))))) (and (not (is In (to ) (sites {(mapEntry P1) (mapEntry P2)}))) (not (is In (to ) (sites (values Remembered "Playable"))))))))} (then (if (no Pieces All (union (sites Top) (sites Bottom))) (forget Value "Playable" All))))) (end (if (no Pieces All (union (sites Top) (sites Bottom))) {(if (> 8 (count (mapEntry P1))) (result P2 Win)) (if (> 8 (count (mapEntry P2))) (result P1 Win))})) (nextPhase (no Pieces All (union (sites Top) (sites Bottom))) "BetweenRounds")) (phase "BetweenRounds" (play (if (not (all Sites (sites Mover) (is Occupied (site )))) (if (<= 8 (count (mapEntry Mover))) (move (from (mapEntry Mover)) (to (sites Mover) (is Empty (to ))) 8 (then (remember Value "Playable" (last To))))))) (nextPhase (all Passed) "Sowing"))}))
Line 3
description: 2x6 board. Four counters in each hole. A player picks up all of the counters in one of the holes in their row and sows them one-by-one in a counterclockwise direction in consecutive holes from the hole the pieces originated. The starting hole is always left empty, even if a player sows in a complete circuit of the board, the original house is skipped and sowing continues in the next hole after it. When the final counter falls into an occupied hole, these are picked up and sowing continues. When the final counter of a sowing lands on in an empty hole in the player's own row, the contents of the hole in the opponent's row opposite it are captured. If the opponent's holes are all empty, the other player must make a move placing counters in the opponent's row. If not possible, the player captures all the counters in their row. The player who has captured the most counters wins. If the game continues in a repeating loop, the players can agree to end the game and capture the counters remaining in their row.
Ludii code: (game "Yovodji" (players 2) (equipment {(mancalaBoard 2 6 None (track "Track" "0,E,N,W" true)) (regions P1 (sites Bottom)) (regions P2 (sites Top)) (piece "Seed" Shared) (hand Each)}) (rules (start (set Count 4 (sites Track))) (play (if (is Proposed "End") (or (move Vote "End") (move Vote "No")) (or (if (is Cycle) (move Propose "End")) (move Select (from (if (is Prev Mover) (sites {(last To true)}) (sites Mover)) (< 0 (count (from )))) (then (sow (if (and (is In (to ) (sites Next)) (or (= (count (to )) 2) (= (count (to )) 3))) (fromTo (from (to )) (to (handSite Mover)) (count (to ))) (if (< 1 (count (to ))) (moveAgain ) (if (and (is In (to ) (sites Mover)) (< 1 (count (if (is Mover P1) (+ (to ) 6) (- (to ) 6))))) (fromTo (from (if (is Mover P1) (+ (to ) 6) (- (to ) 6))) (to (handSite Mover)) (count (if (is Mover P1) (+ (to ) 6) (- (to ) 6))))))) false (and (is In (from ) (sites Next)) (or (= (count (from )) 2) (= (count (from )) 3))))))))) (end (if (or (no Moves Mover) (is Decided "End")) (byScore {(score P1 (+ (count Cell (handSite P1)) (count (sites P1)))) (score P2 (+ (count Cell (handSite P2)) (count (sites P2))))})))))
Line 3
description: The board has two rows of six holes with a larger hole on either end. Play begins with four seeds in each hole. Each player controls the row nearest them. Seeds are sown consecutively in a counterclockwise pattern including the player's own larger hole but not the opponent's. If the last seed is placed in an opponent's empty hole, that seed and any opposite are captured and put in the player's larger hole. If the last seed falls in the larger hole, the player gets another turn. When one player has no seeds in any of their holes, the game ends. The other player captures all of the other seeds, and the player with the most captured seeds wins.
Ludii code: (game "Kalah" (players 2) (equipment {(mancalaBoard 2 6 (track "Track" "0,ESE,E,ENE,WNW,N,W" true)) (regions P1 (sites Bottom)) (regions P2 (sites Top)) (map {(pair P1 LastSite) (pair P2 FirstSite)}) (piece "Seed" Shared)}) (rules (start (set Count 4 (union (sites P1) (sites P2)))) (play (move Select (from (sites Mover) (> (count (from )) 0)) (then (sow (if (= (to ) (mapEntry (mover ))) (moveAgain ) (if (and {(is In (to ) (sites Mover)) (= (count (to )) 1) (> (count (if (is Mover P1) (+ (to ) 6) (- (to ) 6))) 0)}) (and (fromTo (from (to )) (to (mapEntry (mover ))) (count (to ))) (fromTo (from (if (is Mover P1) (+ (to ) 6) (- (to ) 6))) (to (mapEntry (mover ))) (count (if (is Mover P1) (+ (to ) 6) (- (to ) 6))))))) (= (to ) (mapEntry (next ))))))) (end (if (no Moves Mover) (byScore {(score P1 (+ (count (mapEntry P1)) (count (sites P1)))) (score P2 (+ (count (mapEntry P2)) (count (sites P2))))})))))
Line 3
description: 2x6 board. Play begins with four counters in each hole. Moves begin from any hole in the player's row and sowing proceeds in an anti-clockwise direction. If the final counter of a sowing lands in an occupied hole, these counters are lifted and sowing continues. If the final counter lands in an empty hole, any counters in the opposite hole are taken and the turn ends. Play continues until one player cannot move. When this happens, the other player captures the remaining counters and the game ends. The player with the most counters wins.
Ludii code: (game "French Wari" (players 2) (equipment {(mancalaBoard 2 6 None (track "Track" "0,E,N,W" true)) (regions P1 (sites Bottom)) (regions P2 (sites Top)) (piece "Seed" Shared) (hand Each)}) (rules (start (set Count 4 (sites Track))) (play (move Select (from (if (is Prev Mover) (sites {(last To true)}) (sites Mover)) (> (count (from )) 0)) (then (sow (if (> (count (to )) 1) (moveAgain ) (if (> (count (if (is In (to ) (sites Bottom)) (+ (to ) 6) (- (to ) 6))) 0) (fromTo (from (if (is In (to ) (sites Bottom)) (+ (to ) 6) (- (to ) 6))) (to (handSite Mover)) (count (if (is In (to ) (sites Bottom)) (+ (to ) 6) (- (to ) 6)))))))))) (end (if (no Moves Mover) (byScore {(score P1 (+ (count Cell (handSite P1)) (count (sites P1)))) (score P2 (+ (count Cell (handSite P2)) (count (sites P2))))})))))
Line 3
description: 2x7 board with two stores. Seven counters in each hole. Players move from one of the holes in their row, sowing in a clockwise direction, and including the player's store, which is to the left, but not the opponent's store. If the final counter of a sowing lands in an occupied hole (not a store), sowing continues. If it lands into an empty hole, the turn is over. If the empty hole is in the player's own row, the contents of the hole opposite in the opponent's row are captured and placed in the store. The person who captures the most counters wins.
Ludii code: (game "Chongka'" (players 2) (equipment {(mancalaBoard 2 7 {(track "Track1" "7,W,WNW,ENE,E" true P1) (track "Track2" "7,W,N,E,ESE" true P2)}) (piece "Seed" Shared) (regions P1 (sites Bottom)) (regions P2 (sites Top)) (map {(pair P1 FirstSite) (pair P2 LastSite)})}) (rules (start (set Count 7 (union (sites P1) (sites P2)))) (play (move Select (from (if (is Prev Mover) (sites {(last To true)}) (sites Mover)) (> (count (from )) 0)) (then (sow "Track" (mover ) (if (and {(> (count (to )) 1) (is In (to ) (union (sites P1) (sites P2)))}) (moveAgain ) (if (and (is In (to ) (sites Mover)) (> (count (if (is Mover P1) (+ (to ) 7) (- (to ) 7))) 0)) (fromTo (from (if (is Mover P1) (+ (to ) 7) (- (to ) 7))) (to (mapEntry Mover)) (count (if (is Mover P1) (+ (to ) 7) (- (to ) 7)))))))))) (end (if (and (no Moves Mover) (no Moves Next)) (byScore {(score P1 (count (mapEntry P1))) (score P2 (count (mapEntry P2)))})))))
Line 3
description: 2x6 board. Five counters in each hole. Play begins from any hole in a player's row and sown anti-clockwise. When the final counter falls into an occupied hole, the counters in that hole are picked up and sowing continues. If the final counter falls into an empty hole, the turn ends; if this hole is in the player's own row, the contents of the opponent's hole are captured if they contain one, two, four, or more counters. If it contains three counters, one of the opponent's counters is taken and placed into the hole where sowing ended, so that each now has two counters. These holes cannot be sown from for the rest of the game and are owned by the player whose turn created them. Players cannot change their move mid-turn and counting of counters is forbidden. Play ends when one player can no longer play. The opponent then takes all of the counters in their own row, and each player takes the counters that have accumulated in their captured holes. A new game begins. The player with the fewest counters arranges them in their holes, distributing them as equally as possible. The opponent then mirrors this arrangement in their holes, placing aside any extras for use in subsequent games. If the player is reduced to four counters or less, these are arranged one to a hole and any empty holes are not used for the game (by either player). The player who captures all the counters wins.
Ludii code: (game "Leyla Gobale (Gabradarre)" (players 2) (equipment {(mancalaBoard 2 6 None (track "TrackCCW" "0,E,N,W" true)) (piece "Seed" Shared) (regions P1 (sites Bottom)) (regions P2 (sites Top)) (hand Each) (map "CorrespondingHoles" {(pair 0 11) (pair 1 10) (pair 2 9) (pair 3 8) (pair 4 7) (pair 5 6) (pair 6 5) (pair 7 4) (pair 8 3) (pair 9 2) (pair 10 1) (pair 11 0)})}) (rules (start {(set RememberValue "Playable" (union (sites Top) (sites Bottom))) (set Count 5 (sites Track))}) {(phase "Sowing" (play (or {(move Select (from (if (is Prev Mover) (sites {(var "Replay")}) (sites Mover)) (and {(is Occupied (from )) (= 0 (state (from ))) (is In (from ) (sites (values Remembered "Playable")))})) (then (sow (if (< 1 (count (to ))) (if (= 0 (state (to ))) (and (moveAgain ) (set Var "Replay" (to )))) (if (is In (to ) (sites Mover)) (if (!= 3 (count (if (is In (to ) (sites Bottom)) (+ (to ) 6) (- (to ) 6)))) (if (!= 0 (count (if (is In (to ) (sites Bottom)) (+ (to ) 6) (- (to ) 6)))) (fromTo (from (if (is In (to ) (sites Bottom)) (+ (to ) 6) (- (to ) 6))) (to (handSite Mover)) (count (if (is In (to ) (sites Bottom)) (+ (to ) 6) (- (to ) 6))))) (and {(fromTo (from (if (is In (to ) (sites Bottom)) (+ (to ) 6) (- (to ) 6))) (to (to )) 1) (set State (to ) (mover )) (set State (if (is In (to ) (sites Bottom)) (+ (to ) 6) (- (to ) 6)) (mover ))})))))))} (then (if (and (not (is Next Mover)) (or (all Sites (sites P1) (or (not (is In (site ) (sites (values Remembered "Playable")))) (or (!= 0 (state (site ))) (is Empty (site ))))) (all Sites (sites P2) (or (not (is In (site ) (sites (values Remembered "Playable")))) (or (!= 0 (state (site ))) (is Empty (site ))))))) (and {(forEach Site (sites P1) (if (= 0 (state (site ))) (fromTo (from (site )) (to (handSite P1)) (count (site ))))) (forEach Site (sites P2) (if (= 0 (state (site ))) (fromTo (from (site )) (to (handSite P2)) (count (site ))))) (forEach Site (sites Board) (if (= (state (site )) P1) (fromTo (from (site )) (to (handSite P1)) (count (site ))) (if (= (state (site )) P2) (fromTo (from (site )) (to (handSite P2)) (count (site )))))) (if (< (+ {(count Cell (handSite P1)) (count (forEach (sites Board) (= (state (site )) P1))) (count (forEach (sites P1) (= (state (site )) 0)))}) (+ {(count Cell (handSite P2)) (count (forEach (sites Board) (= (state (site )) P2))) (count (forEach (sites P2) (= (state (site )) 0)))})) (set NextPlayer (player 1)) (set NextPlayer (player 2))) (forget Value "Playable" All)}))))) (end (if (all Sites (sites Board) (= 0 (count (site )))) {(if (= 0 (count Cell (handSite P1))) (result P2 Win)) (if (= 0 (count Cell (handSite P2))) (result P1 Win))})) (nextPhase (all Sites (sites Board) (= 0 (count (site )))) "BetweenRounds")) (phase "BetweenRounds" (play (move (from (handSite Mover)) (to (forEach (sites Mover) (= (count (site )) (min (results (sites Mover) (sites Mover) (count (to ))))))) 1 (then (and (remember Value "Playable" (last To) true) (if (< 0 (count Cell (handSite Mover))) (moveAgain ) (forEach Site (sites Mover) (if (is Occupied (site )) (fromTo (from (handSite Next)) (to (mapEntry "CorrespondingHoles" (site ))) (count (site )))))))))) (nextPhase (or (is Empty (handSite P1)) (is Empty (handSite P2))) "Sowing"))}))
Line 3
description: 2x6 board, which two stores. Four counters in each hole. Sowing proceeds in an anti-clockwise direction. When the final counter of a sowing falls in to an occupied hole, these counters are picked up and sowing continues. When the final hole lands in an empty hole, if the hole is in the player's row, the contents of the opponent's opposite hole are captured. If the empty hole is in the opponent's row, the turn ends. A player must play so that the opponent is able to play on their next turn, if possible. The player who captures the most counters wins. 
Ludii code: (game "J'odu" (players 2) (equipment {(mancalaBoard 2 6 (track "Track" "1,E,N,W" true)) (regions P1 (sites Bottom)) (regions P2 (sites Top)) (map {(pair P1 FirstSite) (pair P2 LastSite)}) (piece "Seed" Shared)}) (rules (start (set Count 4 (sites Track))) (play (do (move Select (from (if (is Prev Mover) (sites {(last To true)}) (sites Mover)) (< 0 (count (from )))) (then (sow (if (> (count (to )) 1) (moveAgain ) (if (is In (to ) (sites Mover)) (fromTo (from (if (is Mover P1) (+ (to ) 6) (- (to ) 6))) (to (mapEntry (mover ))) (count (if (is Mover P1) (+ (to ) 6) (- (to ) 6))))))))) (< 0 (count (if (is Mover P1) (sites P2) (sites P1)))))) (end (if (no Moves Mover) (byScore {(score P1 (+ (count (mapEntry P1)) (count (sites P1)))) (score P2 (+ (count (mapEntry P2)) (count (sites P2))))})))))
Line 3
description: 2x5 board. Five counters in each hole. Sowing occurs in an anti-clockwise direction. When the final counters of a sowing lands in a hole, the contents of the next hole are picked up and sowing continues. When the final counter lands in a hole, and the next hole, from which sowing would normally continue, is empty, the player captures any counters in the next hole after the empty one. and the turn ends. Play continues until no more captures are possible, and the player who captured the most counters wins.
Ludii code: (game "Pachgarhwa" (players 2) (equipment {(mancalaBoard 2 5 None (track "Track" "0,E,N,W" true)) (regions P1 (sites Bottom)) (regions P2 (sites Top)) (piece "Seed" Shared) (hand Each)}) (rules (start (set Count 5 (sites Track))) (play (move Select (from (if (is Prev Mover) (sites {(value Pending)}) (sites Mover)) (> (count (from )) 0)) (then (sow true (if (is Occupied (trackSite Move (to ) 1)) (and {(set Pending (to )) (fromTo (from (trackSite Move (to ) 1)) (to (handSite Mover)) (count (trackSite Move (to ) 1))) (moveAgain )}) (if (is Occupied (trackSite Move (to ) 2)) (fromTo (from (trackSite Move (to ) 2)) (to (handSite Mover)) (count (trackSite Move (to ) 2))))))))) (end (if (= 1 (count (sites Board))) (byScore {(score P1 (+ (count Cell (handSite P1)) (count (sites P1)))) (score P2 (+ (count Cell (handSite P2)) (count (sites P2))))})))))
Line 3
description: 2x7 board with two stores. Four counters in each hole. Sowing occurs in either a clockwise or anti-clockwise direction; the first player chooses the direction and all subsequent moves are made in that direction. Players sow beginning from holes in their row. In the course of sowing, a player cannot sow into a hole containing three counters; if one is encountered, it is skipped and the counter is sowed into the next hole without three. If the final counter falls into a hole containing three counters, the contents of the hole are captured and the contents of the next hole are picked up and sowing continues. Otherwise, if the last counter falls into a hole with counters, these are picked up and sowing continues, or if it falls into an empty hole the turn ends. Throughout the game, single counters cannot be moved if a player has a hole with multiple counters, and a single counter in the front hole cannot be moved if there are other single counters in the player's row. The round ends when one player's holes are empty. The player with counters remaining in their holes captures these counters.
            
            A second round begins with the winner of the first round placing four counters in each of their holes, leaving any surplus in the store. The loser of round one places four counters in as many consecutive holes on their side of the board as possible, and any remaining counters in the next hole. If this hole contains one, it is called puta, if two, naga, if three, wala. Holes with no counters are excluded from play for this round. If the loser has a puta hole, the opponent removes three counters from their hole opposite; if a naga, the opponent removes two from the opposite hole, if a wala, the opponent removes one. The removed counters go into their store. Puta and naga holes are marked with a piece of paper or straw in them. Empty holes are excluded from play in this round. The losing player begins the round, moving in the direction of the excluded holes, and played in the same way as the first round.  The player with empty holes begins play in the direction of the empty hole. Counters cannot be captured or sowed from puta or naga holes. Play continues as before.
            
            When one player has fewer than twelve counters at the beginning of a round, they may arrange them differently at the beginning. They may put one or two counters in one end hole and not more than four in the other end hole, and one or two counters in the intermediate holes, leaving some empty and, thus, excluded. The opponent then puts four counters in each of their holes. There are no puta, naga, or wala holes in this round. The player with more counters plays as before, but the one with less has captures that are determined by the number of counters placed in the first end hole. If there were two in the end hole, the player captures when dropping the final counter into a hole to make it three; or when it makes two if there was one counter in the first end hole. Otherwise, the player does not sow in holes with one or two counters.  
            
        Play continues until one player cannot sow at the beginning of a round.
Ludii code: (game "Puhulmutu" (players 2) (equipment {(mancalaBoard 2 7 {(track "TrackCCW" "1,E,N,W" true) (track "TrackCW" "7,W,N,E" true)}) (piece "Seed" Shared) (regions P1 (sites Bottom)) (regions P2 (sites Top)) (map {(pair P1 FirstSite) (pair P2 LastSite)})}) (rules (start {(set Count 4 (sites Track)) (set RememberValue "Playable" (union (sites Top) (sites Bottom)))}) {(phase "StartingMove" (play (or (move Select (from (sites Mover) (and (is Occupied (from )) (is In (from ) (sites (values Remembered "Playable"))))) (then (and (sow "TrackCCW" (if (= 4 (count (to ))) (and (if (!= 0 (count (trackSite Move (to ) "TrackCCW" 1))) (and (moveAgain ) (set Var "Replay" (trackSite Move (to ) "TrackCCW" 1)))) (fromTo (from (to )) (to (mapEntry Mover)) 4)) (if (< 1 (count (to ))) (and (moveAgain ) (set Var "Replay" (to ))))) (or (not (is In (to ) (sites (values Remembered "Playable")))) (and (= 3 (count (to ))) (!= 1 (value ))))) (set Var "Direction" 1)))) (move Select (from (sites Mover) (and (is Occupied (from )) (is In (from ) (sites (values Remembered "Playable"))))) (then (and (sow "TrackCW" (if (= 4 (count (to ))) (and (if (!= 0 (count (trackSite Move (to ) "TrackCW" 1))) (and (moveAgain ) (set Var "Replay" (trackSite Move (to ) "TrackCW" 1)))) (fromTo (from (to )) (to (mapEntry Mover)) 4)) (if (< 1 (count (to ))) (and (moveAgain ) (set Var "Replay" (to ))))) (or (not (is In (to ) (sites (values Remembered "Playable")))) (and (= 3 (count (to ))) (!= 1 (value ))))) (set Var "Direction" 2)))))) (nextPhase "Sowing")) (phase "Sowing" (play (if (= 1 (var "Direction")) (move Select (from (if (and (not (is Pending)) (is Prev Mover)) (sites {(var "Replay")}) (sites Mover)) (and {(is Occupied (from )) (is In (from ) (sites (values Remembered "Playable"))) (not (is In (from ) (sites (values Remembered "Blocked")))) (if (not (all Sites (forEach (sites Mover) (is In (site ) (sites (values Remembered "Playable")))) (>= 1 (count (site ))))) (< 1 (count (from ))))})) (then (sow "TrackCCW" (if (= 4 (count (to ))) (and (if (!= 0 (count (trackSite Move (to ) "TrackCCW" 1))) (and (moveAgain ) (set Var "Replay" (trackSite Move (to ) "TrackCCW" 1)))) (if (not (is In (to ) (sites (values Remembered "Blocked")))) (fromTo (from (to )) (to (mapEntry Mover)) 4))) (if (< 1 (count (to ))) (and (moveAgain ) (set Var "Replay" (to ))))) (or (not (is In (to ) (sites (values Remembered "Playable")))) (and (= 3 (count (to ))) (!= 1 (value ))))))) (move Select (from (if (and (not (is Pending)) (is Prev Mover)) (sites {(var "Replay")}) (sites Mover)) (and {(is Occupied (from )) (is In (from ) (sites (values Remembered "Playable"))) (not (is In (from ) (sites (values Remembered "Blocked")))) (if (not (all Sites (forEach (sites Mover) (is In (site ) (sites (values Remembered "Playable")))) (>= 1 (count (site ))))) (< 1 (count (from ))))})) (then (sow "TrackCW" (if (= 4 (count (to ))) (and (if (!= 0 (count (trackSite Move (to ) "TrackCW" 1))) (and (moveAgain ) (set Var "Replay" (trackSite Move (to ) "TrackCW" 1)))) (if (not (is In (to ) (sites (values Remembered "Blocked")))) (fromTo (from (to )) (to (mapEntry Mover)) 4))) (if (< 1 (count (to ))) (and (moveAgain ) (set Var "Replay" (to ))))) (or (not (is In (to ) (sites (values Remembered "Playable")))) (and (= 3 (count (to ))) (!= 1 (value ))))))) (then (if (no Moves Next) (and {(forEach Site (sites P1) (if (is Occupied (site )) (fromTo (from (site )) (to (mapEntry P1)) (count (site ))))) (forEach Site (sites P2) (if (is Occupied (site )) (fromTo (from (site )) (to (mapEntry P2)) (count (site ))))) (forget Value "Playable" All) (forget Value "Blocked" All) (if (< (+ (count (mapEntry P1)) (count (sites P1))) (+ (count (mapEntry P2)) (count (sites P2)))) (and (set NextPlayer (player 2)) (set Var "Winner" 2)) (and (set NextPlayer (player 1)) (set Var "Winner" 1)))}))))) (end (if (no Moves Next) {(if (> 2 (count (mapEntry P1))) (result P2 Win)) (if (> 2 (count (mapEntry P2))) (result P1 Win))})) (nextPhase (no Moves Next) "BetweenRounds")) (phase "BetweenRounds" (play (if (and (not (is Prev Mover)) (!= (mover ) (var "Winner"))) (or (move (from (mapEntry Mover)) (to (if (is Mover P1) (intersection (sites Bottom) (expand (sites Right))) (intersection (sites Top) (expand (sites Left)))) (is Empty (to ))) (min 4 (count (mapEntry Mover))) (then (and {(remember Value "Playable" (last To)) (if (> 4 (count (last To))) (and (fromTo (from (if (is Mover P1) (+ (to ) 7) (- (to ) 7))) (to (mapEntry Next)) (- 4 (count (last To)))) (remember Value "Blocked" (last To)))) (moveAgain ) (if (= 0 (count (mapEntry Mover))) (set Pending)) (set Var "Direction" 2)}))) (move (from (mapEntry Mover)) (to (if (is Mover P1) (intersection (sites Bottom) (expand (sites Left))) (intersection (sites Top) (expand (sites Right)))) (is Empty (to ))) (min 4 (count (mapEntry Mover))) (then (and {(remember Value "Playable" (last To)) (if (> 4 (count (last To))) (and (fromTo (from (if (is Mover P1) (+ (to ) 7) (- (to ) 7))) (to (mapEntry Next)) (- 4 (count (last To)))) (remember Value "Blocked" (last To)))) (moveAgain ) (if (= 0 (count (mapEntry Mover))) (set Pending)) (set Var "Direction" 1)})))) (if (!= (mover ) (var "Winner")) (move (from (mapEntry Mover)) (to (if (= (var "Direction") 1) (trackSite Move (last To) "TrackCCW" 1) (trackSite Move (last To) "TrackCW" 1)) (is Empty (to ))) (min 4 (count (mapEntry Mover))) (then (and {(remember Value "Playable" (last To)) (moveAgain ) (if (= 0 (count (mapEntry Mover))) (set Pending))}))) (move (from (mapEntry Mover)) (to (sites Mover) (is Empty (to ))) 4 (then (and (remember Value "Playable" (last To)) (if (not (all Sites (sites Mover) (is Occupied (site )))) (moveAgain )))))))) (nextPhase (and (!= (var "Winner") (mover )) (= 0 (count (mapEntry Mover)))) "Sowing"))}))
Line 3
description: 2x6 board. Four counters in each hole. The game begins with a stylised move. One player takes one counter from their rightmost hole, and holds in in their hand. They then take one counter from the next hole, moving in an anti-clockwise direction, and place it in the next hole. They then take a counter from the next hole after that, and placing it in the next hole, continuing until there is an alternating pattern of a hole with five counters followed by a hole with three counters. The original hole from which the first counter was taken will have four counters. The player will then place the first counter taken into the next hole in the opponent's row, causing it to hold four counters. This creates a weg, a hole captured by that player, which is involved in capturing (see below). Players alternate making this first move in subsequent rounds. The next phase begins once this stylised move is completed. Sowing occurs in an anti-clockwise direction. If the final counter of a sowing falls into a hole containing counters, these are picked up and sowing continues. A player's turn ends when the final counter falls into an empty hole. When the final counter of a sowing falls into a hole containing three counters, it creates a weg, and the turn ends. Players cannot sow from a weg they've captured. A player may capture counters from an opponent's weg when the final counter of a sowing falls into the opponent's weg on the player's turn. The final counter and one counter in the weg are captured. The player may then take the counters from any of their holes and sow from there. If a player cannot play, they must pass their turn, but may play again if this becomes possible in a subsequent turn. Play ends when there are no possible moves left on the board. Players then capture the counters in their wegs. A new round begins. The players fill as many of their holes with four counters as they are able. The player with more counters will capture as many holes from the opponent in which they can place four or more counters. If the player has three remaining counters after holes are filled with four, the opponent would cede their one remaining counter to the opponent to make four and the player captures one further hole. If there are two remaining, the players draw lots to determine which player owns the remaining hole. The player who played second in the previous round begins the new round with the same stylized move, and play continues as before after that. Play continues until one player owns no holes; the opponent wins.
Ludii code: (game "Gabata (Shoa and Adegrat)" (players 2) (equipment {(mancalaBoard 2 6 None {(track "TrackCCW" "0,E,N,W" true) (track "TrackCW" "5,W,N,E" true)}) (piece "Seed" Shared) (hand Each) (regions P1 (sites Bottom)) (regions P2 (sites Top)) (map "RightMost" {(pair P1 5) (pair P2 6)})}) (rules (start {(set RememberValue "OwnedP1" (sites Bottom)) (set RememberValue "OwnedP2" (sites Top)) (set Count 4 (sites Track))}) {(phase "Opening" (play (if (is Mover P1) (move Select (from (if (and (not (is Pending)) (is Prev Mover)) (sites {(trackSite Move (last From) "TrackCCW" 2)}) (sites {10}))) (then (sow 1 "TrackCCW" (if (not (is In (trackSite Move (from ) "TrackCCW" 2) (intersection (sites Bottom) (sites Right)))) (moveAgain ) (set State 11 (mover )))))) (move Select (from (if (and (not (is Pending)) (is Prev Mover)) (sites {(trackSite Move (last From) "TrackCCW" 2)}) (sites {1}))) (then (sow 1 "TrackCCW" (if (not (is In (trackSite Move (from ) "TrackCCW" 2) (intersection (sites Top) (sites Left)))) (moveAgain ) (set State 0 (mover )))))))) (nextPhase (if (is Mover P1) (is In (trackSite Move (last From) "TrackCCW" 2) (intersection (sites Bottom) (sites Right))) (is In (trackSite Move (last From) "TrackCCW" 2) (intersection (sites Top) (sites Left)))) "Sowing")) (phase "Sowing" (play (or {(move Select (from (if (is Prev Mover) (sites {(var "Replay")}) (if (is Mover P1) (sites (values Remembered "OwnedP1")) (sites (values Remembered "OwnedP2")))) (and (< 0 (count (from ))) (= 0 (state (from ))))) (then (sow "TrackCCW" (if (and (= 0 (state (to ))) (= 4 (count (to )))) (set State (to ) (mover )) (if (< 1 (count (to ))) (if (= 0 (state (to ))) (and (moveAgain ) (set Var "Replay" (to ))) (if (!= (mover ) (state (to ))) (and (fromTo (from (to )) (to (handSite Mover)) (min 2 (count (to )))) (set State (to ) (state (to )))))))))))} (then (if (all Sites (forEach (sites Board) (= 0 (state (site )))) (= 0 (count (site )))) (and {(forEach Site (forEach (sites Board) (= 1 (state (site )))) (fromTo (from (site )) (to (handSite P1)) (count (site )))) (forEach Site (forEach (sites Board) (= 2 (state (site )))) (fromTo (from (site )) (to (handSite P2)) (count (site )))) (forget Value "OwnedP1" All) (forget Value "OwnedP2" All) (set Var "Round" (+ 1 (var "Round")))}))))) (end (if (all Sites (sites Board) (= 0 (count (site )))) {(if (>= 1 (count Cell (handSite P1))) (result P2 Win)) (if (>= 1 (count Cell (handSite P2))) (result P1 Win))})) (nextPhase (all Sites (sites Board) (= 0 (count (site )))) "BetweenRounds")) (phase "BetweenRounds" (play (if (<= 4 (count Cell (handSite Mover))) (move (from (handSite Mover)) (to (trackSite FirstSite "TrackCW" (mapEntry "RightMost" Mover) (is Empty (to )))) 4 (then (and {(if (is Mover P1) (remember Value "OwnedP1" (last To)) (remember Value "OwnedP2" (last To))) (if (<= 4 (count Cell (handSite Mover))) (moveAgain ) (if (= 3 (count Cell (handSite Mover))) (and {(fromTo (from (handSite Mover)) (to (trackSite FirstSite "TrackCW" (mapEntry "RightMost" Mover) (is Empty (to )))) 3) (fromTo (from (handSite Next)) (to (trackSite FirstSite "TrackCW" (mapEntry "RightMost" Mover) (is Empty (to )))) 1) (if (is Mover P1) (remember Value "OwnedP1" (trackSite FirstSite "TrackCW" (mapEntry "RightMost" Mover) (is Empty (to )))) (remember Value "OwnedP2" (trackSite FirstSite "TrackCW" (mapEntry "RightMost" Mover) (is Empty (to )))))}) (if (= 2 (count Cell (handSite Mover))) (and {(fromTo (from (handSite Mover)) (to (trackSite FirstSite "TrackCW" (mapEntry "RightMost" Mover) (is Empty (to )))) 2) (fromTo (from (handSite Next)) (to (trackSite FirstSite "TrackCW" (mapEntry "RightMost" Mover) (is Empty (to )))) 2) (if (< 50 (value Random (range 1 100))) (remember Value "OwnedP1" (trackSite FirstSite "TrackCW" (mapEntry "RightMost" Mover) (is Empty (to )))) (remember Value "OwnedP2" (trackSite FirstSite "TrackCW" (mapEntry "RightMost" Mover) (is Empty (to )))))}))))}))) (then (if (and (is Empty (handSite P1)) (is Empty (handSite P2))) (and (if (is Even (var "Round")) (set NextPlayer (player 2)) (set NextPlayer (player 1))) (set Pending)))))) (nextPhase (and (is Empty (handSite P1)) (is Empty (handSite P2))) "Opening"))}))
Line 3
description: 2x6 board. Five counters in each hole. Sowing occurs from any hole in the player's row in a clockwise direction. If the final counter lands into an empty hole, it is captured. If there is an unbroken line of holes behind it also having single counters, these are also captured. The player who captures the most counters wins.
Ludii code: (game "Vai Lung Thlan" (players 2) (equipment {(mancalaBoard 2 6 None (track "Track" "5,W,N,E" true)) (regions P1 (sites Bottom)) (regions P2 (sites Top)) (piece "Seed" Shared) (hand Each)}) (rules (start (set Count 5 (sites Track))) (play (move Select (from (sites Mover) (< 0 (count (from )))) (then (sow (= (count (to )) 1) (fromTo (from (to )) (to (handSite Mover)) (count (to ))) true)))) (end (if (no Moves Mover) (byScore {(score P1 (count Cell (handSite P1))) (score P2 (count Cell (handSite P2)))})))))
Line 3
description: 2x7 board, with two stores. Each player owns the store to their left. Seven counters per hole. Players take counters from one hole and sow them in a clockwise direction starting in the next hole from which the counters were taken. Players include their own store when sowing but ignore their opponent's store. If last counter falls into an empty hole, move ends. If it is on the player's side, the counters in the opponent's hole opposite are taken and added to the player's store. If the last counter falls into the player's store, the player may sow counters from another hole on their side. If the last counter drops into an occupied hole on either side of the board, the counters are picked up and sowing continues until the last counter drops into an empty hole. When all of the counters are in the players' stores, a new round begins. Players fill their holes with the counters in their store. Any holes which cannot be filled with seven counters are out of play for this round; any extra counters go back in the store. Play continues until one player cannot fill any holes, and the opponent wins.
Ludii code: (game "Sungka" (players 2) (equipment {(mancalaBoard 2 7 (track "Track" "7,W,WNW,ENE,E,ESE" true)) (regions P1 (sites Bottom)) (regions P2 (sites Top)) (map {(pair P1 FirstSite) (pair P2 LastSite)}) (piece "Seed" Shared)}) (rules (start (set Count 7 (union (sites P1) (sites P2)))) {(phase "Sowing" (play (move Select (from (if (and (is Prev Mover) (not (is Pending))) (sites {(var )}) (sites Mover)) (< 0 (count (from )))) (then (sow (if (= (to ) (mapEntry Mover)) (and (moveAgain ) (set Pending)) (if (and {(is In (to ) (sites Mover)) (= (count (to )) 1) (< 0 (count (if (is Mover P1) (+ (to ) 7) (- (to ) 7))))}) (fromTo (from (if (is Mover P1) (+ (to ) 7) (- (to ) 7))) (to (mapEntry (mover ))) (count (if (is Mover P1) (+ (to ) 7) (- (to ) 7)))) (if (> (count (to )) 1) (and (moveAgain ) (set Var (to )))))) (= (to ) (mapEntry Next)))))) (end (if (all Passed) {(if (> 7 (count (mapEntry P1))) (result P2 Win)) (if (> 7 (count (mapEntry P2))) (result P1 Win))})) (nextPhase (all Passed) "BetweenRounds")) (phase "BetweenRounds" (play (if (<= 7 (count (mapEntry Mover))) (move (from (mapEntry Mover)) (to (intersection (sites Empty) (sites Mover))) 7))) (nextPhase (all Passed) "Sowing"))}))
Line 3
description: The board has two rows of six play pits with a larger scoring pit on either end. Play begins with four seeds in each hole, with one or two seeds moved to make the initial position fair, i.e. two perfect players will draw. Each player controls the row nearest them. Play consists of choosing one of the player's non-empty play pits, removing the pieces from it, and sowing the pieces one per pit consecutively in a counterclockwise pattern including the player's own scoring pit but not the opponent's. If the last piece is placed in a player's empty pit, that piece and any opposite are captured and put in the player's scoring pit. If the last seed falls in the scoring pit, the player gets another turn. When one player has no pieces in any of their play pits, the game ends. The other player captures all of the other pieces, and the player with the most scored pieces wins.
Ludii code: (game "FairKalah" (players 2) (equipment {(mancalaBoard 2 6 (track "Track" "0,ESE,E,ENE,WNW,N,W" true)) (regions P1 (sites Bottom)) (regions P2 (sites Top)) (map {(pair P1 LastSite) (pair P2 FirstSite)}) (piece "Seed" Shared)}) (rules (start {(set Count 4 1) (set Count 4 2) (set Count 5 3) (set Count 4 4) (set Count 3 5) (set Count 4 6) (set Count 0 13) (set Count 4 12) (set Count 4 11) (set Count 4 10) (set Count 4 9) (set Count 4 8) (set Count 4 7) (set Count 0 0)}) (play (move Select (from (sites Mover) (> (count (from )) 0)) (then (sow (if (= (to ) (mapEntry (mover ))) (moveAgain ) (if (and {(is In (to ) (sites Mover)) (= (count (to )) 1) (>= (count (if (is Mover P1) (+ (to ) 6) (- (to ) 6))) 0)}) (and (fromTo (from (to )) (to (mapEntry (mover ))) (count (to ))) (fromTo (from (if (is Mover P1) (+ (to ) 6) (- (to ) 6))) (to (mapEntry (mover ))) (count (if (is Mover P1) (+ (to ) 6) (- (to ) 6))))))) (= (to ) (mapEntry (next ))))))) (end (if (or (= (count (sites Bottom)) 0) (= (count (sites Top)) 0)) (byScore {(score P1 (+ (count (mapEntry P1)) (count (sites P1)))) (score P2 (+ (count (mapEntry P2)) (count (sites P2))))})))))
Line 3
description: 2x6 board. Three counters in each hole. Play begins with a stylized move. One player takes all of the counters from their leftmost hole, and proceeding in an anti-clockwise direction, takes all of the counters from the holes in their row. They then begin sowing these counters into the opponent's row, proceeding around the board in an anti-clockwise direction. When the final counter lands in an occupied hole, these counters are picked up and sowing continues. When the final counter lands in an empty hole, the turn ends. The main phase of the game begins, in which sowing continues in the same manner, but the player may begin their turn from any hole in their row. At the end of sowing, any holes containing four counters are captured by the owner of the row in which the hole is located, unless it is the hole in which the final counter fell, in which case the player captures them and the turn ends. If at the end of the game there are not sufficient counters to cause a hole to contain four, the players decide how the counters are allocated, and a new round begins. The players fill as many of their holes with four counters as they are able. The player with more counters will capture as many holes from the opponent in which they can place three or counters. If the player has two remaining counters after holes are filled with three, the opponent would cede their one remaining counter to the player to make three and the player captures one further hole. The player who played second in the previous round begins the new round with the same stylized move, and play continues as before after that. Play continues until one player owns no holes; the opponent wins.
Ludii code: (game "Gabata (Wuqro)" (players 2) (equipment {(mancalaBoard 2 6 None (track "Track" "0,E,N,W" true)) (piece "Seed" Shared) (hand Each) (regions P1 (sites Bottom)) (regions P2 (sites Top)) (map "LeftMost" {(pair P1 0) (pair P2 11)})}) (rules (start {(set RememberValue "OwnedP1" (sites Bottom)) (set RememberValue "OwnedP2" (sites Top)) (set Count 3 (sites Track))}) {(phase "Opening" (play (if (is Prev Mover) (move Select (from (var "Replay")) (then (sow (if (< 1 (count (to ))) (and (moveAgain ) (set Var "Replay" (to ))) (set Var "Round" (+ 1 (var "Round"))))))) (move (from 0) (to 11) (count (to )) (then (and {(forEach Site (sites Mover) (if (is Occupied (site )) (fromTo (from (site )) (to 11) (count (site ))))) (moveAgain ) (set Var "Replay" 11)}))))) (nextPhase (not (is Next Mover)) "Sowing")) (phase "Sowing" (play (or {(move Select (from (if (is Prev Mover) (sites {(var "Replay")}) (if (is Mover P1) (sites (values Remembered "OwnedP1")) (sites (values Remembered "OwnedP2")))) (is Occupied (from ))) (then (do (set Var "NumSowed" (count (last To))) (sow (if (< 1 (count (to ))) (if (= 4 (count (to ))) (fromTo (from (to )) (to (handSite Mover)) 4) (and (moveAgain ) (set Var "Replay" (to )))))) (then (and (forEach Site (sites Track (last From) (trackSite Move (last From) "Track" (- (var "NumSowed") 1))) (if (= 4 (count (site ))) (fromTo (from (site )) (to (handSite Mover)) 4))) (set Var "NumSowed" 0))))))} (then (if (= 4 (count (sites Board))) (and {(forEach Site (sites Board) (fromTo (from (site )) (to (handSite Mover)) (count (site )))) (forget Value "OwnedP1" All) (forget Value "OwnedP2" All) (set Var "Round" (+ 1 (var "Round")))}) (if (all Sites (sites Board) (= 0 (count (site )))) (and {(forget Value "OwnedP1" All) (forget Value "OwnedP2" All) (set Var "Round" (+ 1 (var "Round")))})))))) (end (if (all Sites (sites Board) (= 0 (count (site )))) {(if (> 2 (count Cell (handSite P1))) (result P2 Win)) (if (> 2 (count Cell (handSite P2))) (result P1 Win))})) (nextPhase (all Sites (sites Board) (= 0 (count (site )))) "BetweenRounds")) (phase "BetweenRounds" (play (if (<= 3 (count Cell (handSite Mover))) (move (from (handSite Mover)) (to (trackSite FirstSite "Track" (mapEntry "LeftMost" Mover) (is Empty (to )))) 3 (then (and {(if (is Mover P1) (remember Value "OwnedP1" (last To)) (remember Value "OwnedP2" (last To))) (if (<= 3 (count Cell (handSite Mover))) (moveAgain ) (if (= 2 (count Cell (handSite Mover))) (and {(fromTo (from (handSite Mover)) (to (trackSite FirstSite "Track" (mapEntry "LeftMost" Mover) (is Empty (to )))) 2) (fromTo (from (handSite Next)) (to (trackSite FirstSite "Track" (mapEntry "LeftMost" Mover) (is Empty (to )))) 1) (if (is Mover P1) (remember Value "OwnedP1" (trackSite FirstSite "Track" (mapEntry "LeftMost" Mover) (is Empty (to )))) (remember Value "OwnedP2" (trackSite FirstSite "Track" (mapEntry "LeftMost" Mover) (is Empty (to )))))})))}))) (then (if (and (is Empty (handSite P1)) (is Empty (handSite P2))) (and (if (is Even (var "Round")) (set NextPlayer (player 2)) (set NextPlayer (player 1))) (set Pending)))))) (nextPhase (and (is Empty (handSite P1)) (is Empty (handSite P2))) "Opening"))}))
Line 3
description: 2x40-50 board. Each team controls one row. Play begins with each hole containing four counters (usually seeds or pebbles). A player picks up the counters in a hole in his team's row and sows them in a counterclockwise fashion, one in each consecutive hole. If the last counter is deposited into a hole containing counter, those counters are picked up and the player continues sowing. The turn continues in this fashion until the last counter falls into an empty hole. If this empty hole is on the player's side, the counters in the opposite hole in the other team's row are captured. The counter also causing the capture is taken. Play continues until one team cannot move, and the remaining counters are captured by the other team. The team with the most seeds wins.
Ludii code: (game "En Gehe" (players 2) (equipment {(mancalaBoard 2 40 None (track "Track" "0,E,N,W" true)) (regions P1 (sites Bottom)) (regions P2 (sites Top)) (piece "Seed" Shared) (hand Each)}) (rules (start (set Count 4 (sites Track))) (play (move Select (from (if (is Prev Mover) (sites {(last To true)}) (sites Mover)) (> (count (from )) 0)) (then (sow (if (> (count (to )) 1) (moveAgain ) (if (and (is In (to ) (sites Mover)) (> (count (if (is Mover P1) (+ (to ) 40) (- (to ) 40))) 0)) (and (fromTo (from (if (is Mover P1) (+ (to ) 40) (- (to ) 40))) (to (handSite Mover)) (count (if (is Mover P1) (+ (to ) 40) (- (to ) 40)))) (fromTo (from (to )) (to (handSite Mover)) (count (to )))))))))) (end (if (no Moves Mover) (byScore {(score P1 (+ (count Cell (handSite P1)) (count (sites P1)))) (score P2 (+ (count Cell (handSite P2)) (count (sites P2))))})))))
Line 3
description: 2x4 board with two stores on the ends. Six counters in each hole. Instead of owning the row of holes closest to them, players own the holes on the left half of the board. Play begins from any of the player's holes, sowing in either direction. When the last counter is sown, making the hole contain two or four counters, these are captured. If the adjacent holes also contain two or four counters, these are also captured. If the last counter falls into a hole, making it contain a number other than two or four, and adjacent holes contain two or four, the counters from only one of these adjacent holes may be captured. Play ends when each player is reduced to one counter. A second round begins with each player placing six counters in as many of their holes as they can, returning surplus to the store. Play continues as before. Rounds are played until one player loses all their counters.
Ludii code: (game "Gifia" (players 2) (equipment {(mancalaBoard 2 4 {(track "TrackCCW" "1,E,N,W" true) (track "TrackCW" "4,W,N,E" true)}) (regions P1 (difference (expand (sites Left) 2) (sites Left))) (regions P2 (difference (expand (sites Right) 2) (sites Right))) (map {(pair P1 FirstSite) (pair P2 LastSite)}) (piece "Seed" Shared)}) (rules (start (set Count 6 (sites Track))) {(phase "Sowing" (play (if (is Prev Mover) (or (move (from (ahead (last To true) W)) (to (mapEntry Mover)) (count (ahead (last To true) W))) (move (from (ahead (last To true) E)) (to (mapEntry Mover)) (count (ahead (last To true) E)))) (or (move Select (from (sites Mover) (is Occupied (from ))) (then (sow "TrackCCW" (if (or (= 2 (count (to ))) (= 4 (count (to )))) (and {(fromTo (from (to )) (to (mapEntry Mover)) (count (to ))) (if (!= (to ) (ahead (to ) W)) (if (or (= 2 (count (ahead (to ) W))) (= 4 (count (ahead (to ) W)))) (fromTo (from (ahead (to ) W)) (to (mapEntry Mover)) (count (ahead (to ) W))))) (if (!= (to ) (ahead (to ) E)) (if (or (= 2 (count (ahead (to ) E))) (= 4 (count (ahead (to ) E)))) (fromTo (from (ahead (to ) E)) (to (mapEntry Mover)) (count (ahead (to ) E)))))}) (if (and (if (!= (to ) (ahead (to ) W)) (if (or (= 2 (count (ahead (to ) W))) (= 4 (count (ahead (to ) W)))) false)) (if (!= (to ) (ahead (to ) E)) (if (or (= 2 (count (ahead (to ) E))) (= 4 (count (ahead (to ) E)))) false))) (moveAgain )))))) (move Select (from (sites Mover) (is Occupied (from ))) (then (sow "TrackCW" (if (or (= 2 (count (to ))) (= 4 (count (to )))) (and {(fromTo (from (to )) (to (mapEntry Mover)) (count (to ))) (if (!= (to ) (ahead (to ) W)) (if (or (= 2 (count (ahead (to ) W))) (= 4 (count (ahead (to ) W)))) (fromTo (from (ahead (to ) W)) (to (mapEntry Mover)) (count (ahead (to ) W))))) (if (!= (to ) (ahead (to ) E)) (if (or (= 2 (count (ahead (to ) E))) (= 4 (count (ahead (to ) E)))) (fromTo (from (ahead (to ) E)) (to (mapEntry Mover)) (count (ahead (to ) E)))))}) (if (and (if (!= (to ) (ahead (to ) W)) (if (or (= 2 (count (ahead (to ) W))) (= 4 (count (ahead (to ) W)))) false)) (if (!= (to ) (ahead (to ) E)) (if (or (= 2 (count (ahead (to ) E))) (= 4 (count (ahead (to ) E)))) false))) (moveAgain ))))))) (then (if (and (>= 1 (count Pieces All (sites P1))) (>= 1 (count Pieces All (sites P2)))) (and (forEach Site (sites P1) (fromTo (from (site )) (to (mapEntry P1)) (count (site )))) (forEach Site (sites P2) (fromTo (from (site )) (to (mapEntry P2)) (count (site ))))))))) (end (if (no Pieces All (union (sites Top) (sites Bottom))) {(if (> 6 (count (mapEntry P1))) (result P2 Win)) (if (> 6 (count (mapEntry P2))) (result P1 Win))})) (nextPhase (no Pieces All (union (sites Top) (sites Bottom))) "BetweenRounds")) (phase "BetweenRounds" (play (if (not (all Sites (sites Mover) (is Occupied (site )))) (if (<= 6 (count (mapEntry Mover))) (move (from (mapEntry Mover)) (to (sites Mover) (is Empty (to ))) 6)))) (nextPhase (all Passed) "Sowing"))}))
Line 3
description: 2x6 board with two stores. Seven counters in each hole. Play moves in an anti-clockwise direction and players sow into the store on their right hand side. A move may begin from any of the player's holes except their store. If the last counter falls into the store, they can sow again from any of the holes in their row. If it lands in a hole with counters in it, these are picked up and sowing continues. If the last counter falls into an empty hole the move ends, but if the hole is in the player's own row, any counters in the hole opposite it are captured and placed in the store. When no more moves can be made, a new round begins and each player fills as many holes as they can by putting seven in each. Surplus counters are placed in the store. Any unfilled holes are excluded from play. Play continues until one player cannot fill a hole with seven counters, and the opponent wins.
Ludii code: (game "Galatjang" (players 2) (equipment {(mancalaBoard 2 6 {(track "Track1" "1,E,ENE,WNW,W" true P1) (track "Track2" "12,W,WSW,ESE,E" true P2)}) (piece "Seed" Shared) (regions "Home" P1 (sites Bottom)) (regions "Home" P2 (sites Top)) (map {(pair P1 LastSite) (pair P2 FirstSite)})}) (rules (start {(set Count 7 (union (sites Bottom) (sites Top))) (forEach Value 1 12 (set RememberValue (value )))}) {(phase "Round" (play (move Select (from (if (and (not (is Pending)) (is Prev Mover)) (sites {(last To true)}) (forEach (sites Mover "Home") (is In (site ) (values Remembered)))) (> (count (from )) 0)) (then (sow "Track" (mover ) (if (= (to ) (mapEntry Mover)) (and (moveAgain ) (set Pending)) (if (> (count (to )) 1) (moveAgain ) (if (and (is In (to ) (sites Mover "Home")) (> (count (if (is Mover P1) (+ (to ) 6) (- (to ) 6))) 0)) (fromTo (from (if (is Mover P1) (+ (to ) 6) (- (to ) 6))) (to (mapEntry Mover)) (count (if (is Mover P1) (+ (to ) 6) (- (to ) 6))))))) (then (if (all Sites (forEach (difference (union (sites Bottom) (sites Top)) (sites Empty)) (is In (site ) (values Remembered))) (= 0 (count (site )))) (and (forEach Site (difference (sites P1 "Home") (sites Empty)) (fromTo (from (site )) (to (mapEntry P1)) (count (site )))) (forEach Site (difference (sites P2 "Home") (sites Empty)) (fromTo (from (site )) (to (mapEntry P2)) (count (site ))))))))))) (nextPhase (all Sites (forEach (difference (union (sites Bottom) (sites Top)) (sites Empty)) (is In (site ) (values Remembered))) (= 0 (count (site )))) "BetweenRound")) (phase "BetweenRound" (play (if (>= (count (mapEntry Mover)) 7) (move (from (mapEntry Mover)) (to (intersection (sites Empty) (sites Mover "Home"))) 7) (then (if (or (and (> 7 (count (mapEntry P2))) (= 42 (count (sites Bottom)))) (and (> 7 (count (mapEntry P1))) (= 42 (count (sites Top))))) (and (forget Value All) (forEach Site (sites Board) (if (= 7 (count (site ))) (remember Value (site ))))))))) (nextPhase (or (and (> 7 (count (mapEntry P2))) (= 42 (count (sites Bottom)))) (and (> 7 (count (mapEntry P1))) (= 42 (count (sites Top))))) "Round"))} (end (if (> 7 (count (difference (sites Board) (mapEntry Mover)))) (result Mover Win)))))
Line 3
description: 2x6 board. Four counters per hole. Players sow in a clockwise direction from their left three holes or anti-clockwise from their right three holes. When the final counter of a sowing falls into a hole in the opponent's row or in the leftmost or rightmost hole of the player's own row, which contains three counters, making it now contain four, this hole is marked and counters cannot be sown from this hole. Sowing cannot occur from a hole with a single counter into a hole containing three in the opponent's row, but is allowed when the hole containing three is in the player's own row. A player cannot sow  a lone counter that was sown into their row by the opponent on the previous turn back into the hole from which it was just moved. If a player is unable to sow from their row, the opponent may continue to play until the player is able to move. Play continues until all of the counters are in marked holes. The player with the most counters in their marked holes wins.
Ludii code: (game "Andot" (players 2) (equipment {(mancalaBoard 2 6 None {(track "TrackCCW" "0,E,N,W" true) (track "TrackCW" "5,W,N,E" true)}) (regions "Home" P1 (sites Bottom)) (regions "Home" P2 (sites Top)) (regions "LeftThree" P1 (expand (intersection (sites Bottom) (sites Left)) 2 E)) (regions "LeftThree" P2 (expand (intersection (sites Top) (sites Right)) 2 W)) (regions "RightThree" P1 (expand (intersection (sites Bottom) (sites Right)) 2 W)) (regions "RightThree" P2 (expand (intersection (sites Top) (sites Left)) 2 E)) (regions "ExtremeHoles" P1 (intersection (union (sites Left) (sites Right)) (sites Bottom))) (regions "ExtremeHoles" P2 (intersection (union (sites Left) (sites Right)) (sites Top))) (piece "Seed" Shared)}) (rules (start (set Count 4 (sites Board))) (play (or (move Select (from (sites Mover "LeftThree") (and (or (and (= (count (from )) 1) (and (!= (from ) (trackSite Move (last From) "TrackCCW" 1)) (if (is In (trackSite Move (from ) "TrackCW" 1) (sites Next "Home")) (!= (count (trackSite Move (from ) "TrackCW" 1)) 3) true))) (> (count (from )) 1)) (= 0 (state (from ))))) (then (sow "TrackCW" (if (and (= (count (to )) 4) (is In (to ) (union (sites Mover "ExtremeHoles") (sites Next "Home")))) (set State (to ) (mover )))))) (move Select (from (sites Mover "RightThree") (and (or (and (= (count (from )) 1) (and (!= (from ) (trackSite Move (last From) "TrackCW" 1)) (if (is In (trackSite Move (from ) "TrackCCW" 1) (sites Next "Home")) (!= (count (trackSite Move (from ) "TrackCCW" 1)) 3) true))) (> (count (from )) 1)) (= 0 (state (from ))))) (then (sow "TrackCCW" (if (and (= (count (to )) 4) (is In (to ) (union (sites Mover "ExtremeHoles") (sites Next "Home")))) (set State (to ) (mover )))))))) (end (if (= 0 (count (forEach (sites Board) (= 0 (state (site )))))) (byScore {(score P1 (count (forEach (sites Board) (= (id P1) (state (site )))))) (score P2 (count (forEach (sites Board) (= (id P2) (state (site ))))))})))))
Line 3
description: 2x6 board. Four counters in each hole. Sowing proceeds in an anti-clockwise direction. When the final counter of a sowing lands in an occupied hole, the counters are picked up and sowing continues. When the final counter lands in an occupied hole in the player's own row causing it to contain four counters, these are captured and the turn ends. If the final counter falls into an empty hole, the turn ends. If at any point in the sowing a hole in the player's own row is made to contain four counters, they are taken. When there are only eight counters left on the board, the first player to make four counters in a hole captures all the remaining counters. At the end of the game, players place their captured counters four by four into the remaining holes. Players may thus capture holes from the opponent's row, one for every four counters placed in a hole. They may capture from these holes in the next round. Play continues until one player owns no holes.
Ludii code: (game "J'erin" (players 2) (equipment {(mancalaBoard 2 6 None (track "Track" "0,E,N,W" true)) (piece "Seed" Shared) (regions P1 (sites Bottom)) (regions P2 (sites Top)) (hand Each)}) (rules (start {(set Count 4 (sites Track)) (set RememberValue "OwnedP1" (sites Bottom)) (set RememberValue "OwnedP2" (sites Top))}) {(phase "Sowing" (play (or {(move Select (from (if (is Prev Mover) (sites {(last To true)}) (if (is Mover P1) (sites (values Remembered "OwnedP1")) (sites (values Remembered "OwnedP2")))) (< 0 (count (from )))) (then (do (set Var "NumSowed" (count (last To))) (if (and (>= 8 (count Pieces All (sites Board))) (not (all Sites (sites Track (trackSite Move (last From) "Track" 1) (trackSite Move (last From) "Track" (var "NumSowed"))) (!= 3 (count (site )))))) (forEach Site (sites Board) (if (is Occupied (site )) (fromTo (from (site )) (to Cell (handSite Mover)) (count (site ))))) (sow (if (if (= 4 (count (to ))) (not (is In (to ) (if (is Mover P1) (sites (values Remembered "OwnedP1")) (sites (values Remembered "OwnedP2"))))) (!= 0 (count (to )))) (moveAgain ))) (then (and (forEach Site (intersection (if (is Mover P1) (sites (values Remembered "OwnedP1")) (sites (values Remembered "OwnedP2"))) (sites Track (last From) (trackSite Move (last From) "Track" (var "NumSowed")))) (if (= 4 (count (site ))) (fromTo (from (site )) (to (handSite Mover)) 4))) (set Var "NumSowed" 0)))))))} (then (if (all Sites (sites Board) (= 0 (count (site )))) (and (forget Value "OwnedP1" All) (forget Value "OwnedP2" All)))))) (end (if (all Sites (sites Board) (= 0 (count (site )))) {(if (> 4 (count Cell (handSite P1))) (result P2 Win)) (if (> 4 (count Cell (handSite P2))) (result P1 Win))})) (nextPhase (all Sites (sites Board) (= 0 (count (site )))) "BetweenRounds")) (phase "BetweenRounds" (play (if (<= 4 (count Cell (handSite Mover))) (if (not (all Sites (sites Mover) (is Occupied (site )))) (move (from (handSite Mover)) (to (sites Mover) (is Empty (to ))) 4 (then (if (is Mover P1) (remember Value "OwnedP1" (last To)) (remember Value "OwnedP2" (last To))))) (move (from (handSite Mover)) (to (sites Board) (is Empty (to ))) 4 (then (if (is Mover P1) (remember Value "OwnedP1" (last To)) (remember Value "OwnedP2" (last To)))))))) (nextPhase (and (> 4 (count Cell (handSite P1))) (> 4 (count Cell (handSite P2)))) "Sowing"))}))
Line 3
description: 2x6, 8, or 12 holes. Four counters in each hole. Play begins from a player's righthand hole and counters are sown clockwise. After this, a player may begin sowing from any hole in their row. When the final counter falls into an occupied hole, the counters in that hole are picked up and sowing continues. If the final counter falls into an empty hole, the turn ends; if this hole is in the player's own row, the contents of the opponent's hole are captured if they contain one, two, four, or more counters. If it contains three counters, one of the opponent's counters is taken and placed into the hole where sowing ended, so that each now has two counters. These holes cannot be sown from for the rest of the game and are owned by the player whose turn created them. Play ends when one player can no longer play. The opponent then takes all of the counters in their own row, and each player takes the counters that have accumulated in their captured holes. The player with the most counters wins.
Ludii code: (game "Leyla Gobale (Somaliland)" (players 2) (equipment {(mancalaBoard 2 6 None (track "Track" "5,W,N,E" true)) (piece "Seed" Shared) (regions P1 (sites Bottom)) (regions P2 (sites Top)) (hand Each)}) (rules (start (set Count 4 (sites Track))) (play (or {(move Select (from (if (= 0 (count Moves)) (sites {5}) (if (is Prev Mover) (sites {(var "Replay")}) (sites Mover))) (and (is Occupied (from )) (= 0 (state (from ))))) (then (sow (if (< 1 (count (to ))) (if (= 0 (state (to ))) (and (moveAgain ) (set Var "Replay" (to )))) (if (is In (to ) (sites Mover)) (if (!= 3 (count (if (is In (to ) (sites Bottom)) (+ (to ) 6) (- (to ) 6)))) (if (!= 0 (count (if (is In (to ) (sites Bottom)) (+ (to ) 6) (- (to ) 6)))) (fromTo (from (if (is In (to ) (sites Bottom)) (+ (to ) 6) (- (to ) 6))) (to (handSite Mover)) (count (if (is In (to ) (sites Bottom)) (+ (to ) 6) (- (to ) 6))))) (and {(fromTo (from (if (is In (to ) (sites Bottom)) (+ (to ) 6) (- (to ) 6))) (to (to )) 1) (set State (to ) (mover )) (set State (if (is In (to ) (sites Bottom)) (+ (to ) 6) (- (to ) 6)) (mover ))})))))))} (then (if (and (not (is Next Mover)) (or (all Sites (sites P1) (or (!= 0 (state (site ))) (is Empty (site )))) (all Sites (sites P2) (or (!= 0 (state (site ))) (is Empty (site )))))) (and {(forEach Site (sites P1) (if (= 0 (state (site ))) (fromTo (from (site )) (to (handSite P1)) (count (site ))))) (forEach Site (sites P2) (if (= 0 (state (site ))) (fromTo (from (site )) (to (handSite P2)) (count (site ))))) (forEach Site (sites Board) (if (= (state (site )) P1) (fromTo (from (site )) (to (handSite P1)) (count (site ))) (if (= (state (site )) P2) (fromTo (from (site )) (to (handSite P2)) (count (site ))))))}))))) (end (if (all Sites (sites Board) (= 0 (count (site )))) (byScore {(score P1 (count Cell (handSite P1))) (score P2 (count Cell (handSite P2)))})))))
Line 3
description: Play begins with four counters in each hole. Players move by picking up all of the counters in any of the holes in their row and sowing them anti-clockwise. If the next hole after the one in which the final counter is dropped contains counters, these are picked up and sowing continues. If the next hole after the one in which the last counter was sown is empty, the counters in the hole after this one are taken and the turn is over. If that hole is empty, none are taken. When all of the holes in one row are empty, the player whose row still contains counters captures these counters. A new game begins. Each player fills as many of the holes in their row with four counters. The player which cannot fill all of their holes with four counters removes from play all of the holes that cannot be filled, and sets aside the extra counters. They play another round with the same rules as before, but without the eliminated hole(s). The game ends when one player must close all of the holes in their row, thus being unable to play.
Ludii code: (game "Bosh" (players 2) (equipment {(mancalaBoard 2 5 None (track "Track" "0,E,N,W" true)) (regions P1 (sites Bottom)) (regions P2 (sites Top)) (piece "Seed" Shared) (hand Each)}) (rules (start {(set Count 4 (sites Track)) (set RememberValue "OwnedP1" (sites Bottom)) (set RememberValue "OwnedP2" (sites Top))}) {(phase "Sowing" (play (or {(move Select (from (if (is Prev Mover) (sites {(trackSite Move (last To true) 1)}) (if (is Mover P1) (sites (values Remembered "OwnedP1")) (sites (values Remembered "OwnedP2")))) (> (count (from )) 0)) (then (sow (if (and (= (count (trackSite Move (to ) 1)) 0) (> (count (trackSite Move (to ) 2)) 0)) (fromTo (from (trackSite Move (to ) 2)) (to (handSite Mover)) (count (trackSite Move (to ) 2))) (if (> (count (trackSite Move (to ) 1)) 0) (moveAgain ))) (not (is In (to ) (union (values Remembered "OwnedP1") (values Remembered "OwnedP2")))))))} (then (if (or (no Pieces All (sites P1)) (no Pieces All (sites P2))) (and (forEach Site (sites P1) (fromTo (from (site )) (to (handSite P1)) (count (site )))) (forEach Site (sites P2) (fromTo (from (site )) (to (handSite P2)) (count (site ))))))))) (nextPhase (all Sites (sites Board) (= 0 (count (site )))) "BetweenRounds")) (phase "BetweenRounds" (play (if (<= 4 (count Cell (handSite Mover))) (move (from (handSite Mover)) (to (intersection (sites Empty) (sites Mover))) 4) (move Pass (then (forEach Site (if (is Mover P1) (sites (values Remembered "OwnedP1")) (sites (values Remembered "OwnedP2"))) (if (is Empty (site )) (if (is Mover P1) (forget Value "OwnedP1" (site )) (forget Value "OwnedP2" (site ))))))))) (end (if (all Passed) {(if (if (= 1 P1) (= 0 (size Array (values Remembered "OwnedP1"))) (= 0 (size Array (values Remembered "OwnedP2")))) (result P2 Win)) (if (if (= 2 P1) (= 0 (size Array (values Remembered "OwnedP1"))) (= 0 (size Array (values Remembered "OwnedP2")))) (result P1 Win))})) (nextPhase (all Passed) "Sowing"))}))
Line 3
description: 2x6 board. Four counters in each hole. Players draw lots to see who goes first. There is a choice of stylised opening move. One player takes a counter from their rightmost hole, then another from the opposite hole in the opponent's row, then proceeding in this fashion in an anti-clockwise direction until the holes alternate with five and three counters, until reaching the hole from which sowing began, which will hold four. The original counter is sown into the next hole in the opponent's row, making four, thus creating a tuz, which behaves as explained below. Alternatively, the player may rearrange the counters in a similar manner, but creating an alternating pattern of holes with three and five counters, and not creating a tuz. After this, players pick up the counters in any of the holes in their row and sow them in an anti-clockwise direction. If the last counter falls into a hole that is occupied, the player picks up the contents of this hole and continues to sow. When the last counter falls into an empty hole, the play ends. Capturing occurs when the last counter falls into a hole on the opponent's side of the board containing three counters, increasing it to four. This hole, a tuz, then belongs to the player who captured it. A player cannot pick up counters from this hole, and the opponent can only do so if the last counter of their sowing falls in the tuz, in which case the opponent takes one counter from it, along with the final counter. The tuz remains in the ownership of the person who captured it. If it remains empty and the opponent drops their last counter into the tuz, the last counter is removed. Play then continues by picking up the contents of another hole and continuing to sow. If a player cannot move, they pass, but the opponent may continue to make moves. The player could then resume play if the opponent's moves create a possibility for a move. Play ends when there are no more counters available to move. Each player owns the counters in their tuz or which they have removed from the board. A second round is played, each player placing four counters into each hole starting from the rightmost hole in their row. The player with more counters gains a hole from their opponent for every four extra balls they've captured. If an opponent has three extra after counting in such a way, they also gain a hole, and if each player has two remaining counters ownership is determined by chance. Play continues in several rounds like this until one player takes all the counters.
Ludii code: (game "Tuz" (players 2) (equipment {(mancalaBoard 2 6 None {(track "TrackCCW" "0,E,N,W" true) (track "TrackCW" "5,W,N,E" true)}) (piece "Seed" Shared) (hand Each) (regions P1 (sites Bottom)) (regions P2 (sites Top)) (map "RightMost" {(pair P1 5) (pair P2 6)})}) (rules (start {(set RememberValue "OwnedP1" (sites Bottom)) (set RememberValue "OwnedP2" (sites Top)) (set Count 4 (sites Track))}) {(phase "Opening" (play (move Select (from (if (is Prev Mover) (sites {(trackSite Move (last From) "TrackCCW" 2)}) (union (sites {10}) (intersection (sites Bottom) (sites Right))))) (then (sow 1 "TrackCCW" (if (not (is In (trackSite Move (from ) "TrackCCW" 2) (intersection (sites Bottom) (sites Right)))) (moveAgain ) (if (= 4 (count 11)) (set State 11 (mover )))))))) (nextPhase (is In (trackSite Move (last From) "TrackCCW" 2) (intersection (sites Bottom) (sites Right))) "Sowing")) (phase "Sowing" (play (or {(move Select (from (if (is Prev Mover) (sites {(var "Replay")}) (if (is Mover P1) (sites (values Remembered "OwnedP1")) (sites (values Remembered "OwnedP2")))) (and (< 0 (count (from ))) (= 0 (state (from ))))) (then (sow "TrackCCW" (if (and {(= 0 (state (to ))) (= 4 (count (to ))) (is In (to ) (if (is Mover P1) (sites (values Remembered "OwnedP2")) (sites (values Remembered "OwnedP1"))))}) (set State (to ) (mover )) (if (< 1 (count (to ))) (if (= 0 (state (to ))) (and (moveAgain ) (set Var "Replay" (to ))) (if (!= (mover ) (state (to ))) (and (fromTo (from (to )) (to (handSite Mover)) (min 2 (count (to )))) (set State (to ) (state (to )))))))))))} (then (if (all Sites (forEach (sites Board) (= 0 (state (site )))) (= 0 (count (site )))) (and {(forEach Site (forEach (sites Board) (= 1 (state (site )))) (fromTo (from (site )) (to (handSite P1)) (count (site )))) (forEach Site (forEach (sites Board) (= 2 (state (site )))) (fromTo (from (site )) (to (handSite P2)) (count (site )))) (forget Value "OwnedP1" All) (forget Value "OwnedP2" All)}))))) (end (if (all Sites (sites Board) (= 0 (count (site )))) {(if (= 0 (count Cell (handSite P1))) (result P2 Win)) (if (= 0 (count Cell (handSite P2))) (result P1 Win))})) (nextPhase (all Sites (sites Board) (= 0 (count (site )))) "BetweenRounds")) (phase "BetweenRounds" (play (if (<= 4 (count Cell (handSite Mover))) (move (from (handSite Mover)) (to (trackSite FirstSite "TrackCW" (mapEntry "RightMost" Mover) (is Empty (to )))) 4 (then (and {(if (is Mover P1) (remember Value "OwnedP1" (last To)) (remember Value "OwnedP2" (last To))) (if (<= 4 (count Cell (handSite Mover))) (moveAgain ) (if (= 3 (count Cell (handSite Mover))) (and {(fromTo (from (handSite Mover)) (to (trackSite FirstSite "TrackCW" (mapEntry "RightMost" Mover) (is Empty (to )))) 3) (fromTo (from (handSite Next)) (to (trackSite FirstSite "TrackCW" (mapEntry "RightMost" Mover) (is Empty (to )))) 1) (if (is Mover P1) (remember Value "OwnedP1" (trackSite FirstSite "TrackCW" (mapEntry "RightMost" Mover) (is Empty (to )))) (remember Value "OwnedP2" (trackSite FirstSite "TrackCW" (mapEntry "RightMost" Mover) (is Empty (to )))))}) (if (= 2 (count Cell (handSite Mover))) (and {(fromTo (from (handSite Mover)) (to (trackSite FirstSite "TrackCW" (mapEntry "RightMost" Mover) (is Empty (to )))) 2) (fromTo (from (handSite Next)) (to (trackSite FirstSite "TrackCW" (mapEntry "RightMost" Mover) (is Empty (to )))) 2) (if (< 50 (value Random (range 1 100))) (remember Value "OwnedP1" (trackSite FirstSite "TrackCW" (mapEntry "RightMost" Mover) (is Empty (to )))) (remember Value "OwnedP2" (trackSite FirstSite "TrackCW" (mapEntry "RightMost" Mover) (is Empty (to )))))}))))}))))) (nextPhase (and (is Empty (handSite P1)) (is Empty (handSite P2))) "Sowing"))}))
Line 3
description: 2x7 board with two stores. Four counters in each hole. Sowing occurs in either a clockwise or anti-clockwise direction; the first player chooses the direction and all subsequent moves are made in that direction. Players sow beginning from holes their row. If the final counter falls into an empty hole, the contents of the opposite hole in the other row are captured. If the last counter falls into a hole with counters, these are picked up and sowing continues.  Throughout the game, singletons cannot be moved if a player has a hole with multiple counters, and a singleton in the front hole cannot be moved if there are other singletons in the player's row. The round ends when one player's holes are empty. 
            
            A second round begins with the winner of the first round placing four counters in each of their holes, leaving any surplus in the store. The loser of round one places four counters in as many consecutive holes on their side of the board as possible, and any remaining counters in the next hole. If this hole contains one, it is called puta, if two, naga, if three, wala. Holes with no counters are excluded from play for this round. If the loser has a puta hole, the opponent removes three counters from their hole opposite; if a naga, the opponent removes two from the opposite hole, if a wala, the opponent removes one. The removed counters go into their store. Puta and naga holes are marked with a piece of paper or straw in them. Empty holes are excluded from play in this round. The losing player begins the round, moving in the direction of the excluded holes, and played in the same way as the first round. The player with empty holes begins play in the direction of the empty hole. Counters cannot be sown or captured from puta or naga holes. Play continues as before, but when the final counter falls into a puta or naga hole, the contents of the opposite hole in the other row are captured.
            
            When one player has fewer than twelve counters at the beginning of a round, they may arrange them differently at the beginning. They may put one or two counters in one end hole and not more than four in the other end hole, and one or two counters in the intermediate holes, leaving some empty and, thus, excluded. The opponent then puts four counters in each of their holes. There are no puta, naga, or wala holes in this round. The player with more counters plays as before, but the one with less has captures that are determined by the number of counters placed in the first end hole. If there were two in the end hole, the player captures when dropping the final counter into a hole to make it three; or when it makes two if there was one counter in the first end hole. Otherwise, the player does not sow in holes with one or two counters.
            
        Play continues until one player cannot sow at the beginning of a round.
Ludii code: (game "Daramuti" (players 2) (equipment {(mancalaBoard 2 7 {(track "TrackCCW" "1,E,N,W" true) (track "TrackCW" "7,W,N,E" true)}) (piece "Seed" Shared) (regions P1 (sites Bottom)) (regions P2 (sites Top)) (map {(pair P1 FirstSite) (pair P2 LastSite)})}) (rules (start {(set Count 4 (sites Track)) (set RememberValue "Playable" (union (sites Top) (sites Bottom)))}) {(phase "StartingMove" (play (or (move Select (from (sites Mover) (and (is Occupied (from )) (is In (from ) (sites (values Remembered "Playable"))))) (then (and (sow "TrackCCW" (if (= 1 (count (to ))) (if (is Occupied (if (is In (to ) (sites Bottom)) (+ (to ) 7) (- (to ) 7))) (fromTo (from (if (is In (to ) (sites Bottom)) (+ (to ) 7) (- (to ) 7))) (to (mapEntry Mover)) (count (if (is In (to ) (sites Bottom)) (+ (to ) 7) (- (to ) 7))))) (and (moveAgain ) (set Var "Replay" (to )))) (not (is In (to ) (sites (values Remembered "Playable"))))) (set Var "Direction" 1)))) (move Select (from (sites Mover) (and (is Occupied (from )) (is In (from ) (sites (values Remembered "Playable"))))) (then (and (sow "TrackCW" (if (= 1 (count (to ))) (if (is Occupied (if (is In (to ) (sites Bottom)) (+ (to ) 7) (- (to ) 7))) (fromTo (from (if (is In (to ) (sites Bottom)) (+ (to ) 7) (- (to ) 7))) (to (mapEntry Mover)) (count (if (is In (to ) (sites Bottom)) (+ (to ) 7) (- (to ) 7))))) (and (moveAgain ) (set Var "Replay" (to )))) (not (is In (to ) (sites (values Remembered "Playable"))))) (set Var "Direction" 2)))))) (nextPhase "Sowing")) (phase "Sowing" (play (if (= 1 (var "Direction")) (move Select (from (if (and (not (is Pending)) (is Prev Mover)) (sites {(var "Replay")}) (sites Mover)) (and {(is Occupied (from )) (is In (from ) (sites (values Remembered "Playable"))) (not (is In (from ) (sites (values Remembered "Blocked")))) (if (not (all Sites (forEach (sites Mover) (is In (site ) (sites (values Remembered "Playable")))) (>= 1 (count (site ))))) (< 1 (count (from ))))})) (then (sow "TrackCCW" (if (= 1 (count (to ))) (if (is Occupied (if (is In (to ) (sites Bottom)) (+ (to ) 7) (- (to ) 7))) (fromTo (from (if (is In (to ) (sites Bottom)) (+ (to ) 7) (- (to ) 7))) (to (mapEntry Mover)) (count (if (is In (to ) (sites Bottom)) (+ (to ) 7) (- (to ) 7))))) (and (moveAgain ) (set Var "Replay" (to )))) (not (is In (to ) (sites (values Remembered "Playable"))))))) (move Select (from (if (and (not (is Pending)) (is Prev Mover)) (sites {(var "Replay")}) (sites Mover)) (and {(is Occupied (from )) (is In (from ) (sites (values Remembered "Playable"))) (not (is In (from ) (sites (values Remembered "Blocked")))) (if (not (all Sites (forEach (sites Mover) (is In (site ) (sites (values Remembered "Playable")))) (>= 1 (count (site ))))) (< 1 (count (from ))))})) (then (sow "TrackCW" (if (= 1 (count (to ))) (if (is Occupied (if (is In (to ) (sites Bottom)) (+ (to ) 7) (- (to ) 7))) (fromTo (from (if (is In (to ) (sites Bottom)) (+ (to ) 7) (- (to ) 7))) (to (mapEntry Mover)) (count (if (is In (to ) (sites Bottom)) (+ (to ) 7) (- (to ) 7))))) (and (moveAgain ) (set Var "Replay" (to )))) (not (is In (to ) (sites (values Remembered "Playable"))))))) (then (if (no Moves Next) (and {(forEach Site (sites P1) (if (is Occupied (site )) (fromTo (from (site )) (to (mapEntry P1)) (count (site ))))) (forEach Site (sites P2) (if (is Occupied (site )) (fromTo (from (site )) (to (mapEntry P2)) (count (site ))))) (forget Value "Playable" All) (forget Value "Blocked" All) (if (< (+ (count (mapEntry P1)) (count (sites P1))) (+ (count (mapEntry P2)) (count (sites P2)))) (and (set NextPlayer (player 2)) (set Var "Winner" 2)) (and (set NextPlayer (player 1)) (set Var "Winner" 1)))}))))) (end (if (no Moves Next) {(if (> 2 (count (mapEntry P1))) (result P2 Win)) (if (> 2 (count (mapEntry P2))) (result P1 Win))})) (nextPhase (no Moves Next) "BetweenRounds")) (phase "BetweenRounds" (play (if (and (not (is Prev Mover)) (!= (mover ) (var "Winner"))) (or (move (from (mapEntry Mover)) (to (if (is Mover P1) (intersection (sites Bottom) (expand (sites Right))) (intersection (sites Top) (expand (sites Left)))) (is Empty (to ))) (min 4 (count (mapEntry Mover))) (then (and {(remember Value "Playable" (last To)) (if (> 4 (count (last To))) (and (fromTo (from (if (is In (to ) (sites Bottom)) (+ (to ) 7) (- (to ) 7))) (to (mapEntry Next)) (- 4 (count (last To)))) (remember Value "Blocked" (last To)))) (moveAgain ) (if (= 0 (count (mapEntry Mover))) (set Pending)) (set Var "Direction" 2)}))) (move (from (mapEntry Mover)) (to (if (is Mover P1) (intersection (sites Bottom) (expand (sites Left))) (intersection (sites Top) (expand (sites Right)))) (is Empty (to ))) (min 4 (count (mapEntry Mover))) (then (and {(remember Value "Playable" (last To)) (if (> 4 (count (last To))) (and (fromTo (from (if (is In (to ) (sites Bottom)) (+ (to ) 7) (- (to ) 7))) (to (mapEntry Next)) (- 4 (count (last To)))) (remember Value "Blocked" (last To)))) (moveAgain ) (if (= 0 (count (mapEntry Mover))) (set Pending)) (set Var "Direction" 1)})))) (if (!= (mover ) (var "Winner")) (move (from (mapEntry Mover)) (to (if (= (var "Direction") 1) (trackSite Move (last To) "TrackCCW" 1) (trackSite Move (last To) "TrackCW" 1)) (is Empty (to ))) (min 4 (count (mapEntry Mover))) (then (and {(remember Value "Playable" (last To)) (moveAgain ) (if (= 0 (count (mapEntry Mover))) (set Pending))}))) (move (from (mapEntry Mover)) (to (sites Mover) (is Empty (to ))) 4 (then (and (remember Value "Playable" (last To)) (if (not (all Sites (sites Mover) (is Occupied (site )))) (moveAgain )))))))) (nextPhase (and (!= (var "Winner") (mover )) (= 0 (count (mapEntry Mover)))) "Sowing"))}))
Line 3
description: 2x6 board with two stores. Four counters in each hole. Sowing occurs in an anti-clockwise direction. When the final counter lands in an occupied hole the counters are picked up and sowing continues, unless the hole contained three counters, causing it to contain four, in which case the counters are captured. An unbroken sequence of holes with four counters in them behind the hole from which the first capture was made are also captured. In addition, any holes which were sown into during the course of the turn which now contain four counters are captured by the owner of the row. Play continues until there are only eight counters left. The first player to make a capture with these eight counters captures them all. The player with the most counters wins.
Ludii code: (game "Duene" (players 2) (equipment {(mancalaBoard 2 6 (track "Track" "1,E,N,W" true)) (regions P1 (sites Bottom)) (regions P2 (sites Top)) (map {(pair P1 FirstSite) (pair P2 LastSite)}) (piece "Seed" Shared)}) (rules (start (set Count 4 (sites Track))) {(phase "Playing" (play (move Select (from (if (is Prev Mover) (sites {(var "To")}) (sites Mover)) (< 0 (count (from )))) (then (do (and (set Var "From" (last From)) (sow (and (set Var "To" (to )) (if (= (count (to )) 4) (fromTo (from (to )) (to (mapEntry (mover ))) (count (to ))) (if (> (count (to )) 1) (moveAgain )))) (= (count (to )) 4))) (and {(pass ) (forEach Site (forEach (sites Track (var "From") (var "To")) (and (is In (site ) (sites P1)) (= 4 (count (site ))))) (fromTo (from (site )) (to (mapEntry P1)) (count (site )))) (forEach Site (forEach (sites Track (var "From") (var "To")) (and (is In (site ) (sites P2)) (= 4 (count (site ))))) (fromTo (from (site )) (to (mapEntry P2)) (count (site ))))}))))) (nextPhase (<= (count (sites Track)) 8) "EndGame")) (phase "EndGame" (play (move Select (from (if (is Prev Mover) (sites {(var "To")}) (sites Mover)) (< 0 (count (from )))) (then (sow (if (= (count (to )) 4) (forEach Site (sites Track) (if (< 0 (count (site ))) (fromTo (from (site )) (to (mapEntry (mover ))) (count (site ))))) (if (> (count (to )) 1) (moveAgain ))))))))} (end (if (all Sites (sites Track) (= 0 (count (site )))) (byScore {(score P1 (+ (count (mapEntry P1)) (count (sites P1)))) (score P2 (+ (count (mapEntry P2)) (count (sites P2))))})))))
Line 3
description: 2x7 board. Six counters in each hole, except the central hole in each row, which contains one counter. Sowing occurs in an anti-clockwise direction. When the last counter is sown, the player picks up the counters in the next hole in the direction of the sowing and continues sowing with those counters. When the hole after the hole in which the final counter is sown is empty, the counters in the next hole are captured, as well as the counters in the hole opposite this hole, and the turn ends. Sowing cannot begin from the central hole of either row. When a capture would occur from one of these central holes, the counters are not captured until the end of the round. At the end of the round, if both players are eligible to capture from the hole, they split the counters, leaving one in the hole if it is an odd number, or two if it is an even number. If only one player captured from the holes, they leave one counter in each hole. If neither player made a capture from the hole, the counters remain in the hole. 
            
        When the players can no longer play, a new round begins. Each player then fills up as many holes, not counting the central holes, on their side of the board with six counters if possible. Any holes that do not contain counters are out of play. Play continues until one player captures all the counters, and is the winner.
Ludii code: (game "Omangunta Peeta" (players 2) (equipment {(mancalaBoard 2 7 None (track "Track" "0,E,N,W" true)) (regions P1 (sites Bottom)) (regions P2 (sites Top)) (piece "Seed" Shared) (hand Each)}) (rules (start {(set Count 6 (difference (sites Track) (sites Centre))) (set Count 1 (sites Centre)) (set RememberValue "Playable" (union (sites Top) (sites Bottom)))}) {(phase "Sowing" (play (or {(move Select (from (if (is Prev Mover) (sites {(var "Replay")}) (difference (sites Mover) (sites Centre))) (and (is Occupied (from )) (is In (from ) (sites (values Remembered "Playable"))))) (then (sow (if (is Occupied (trackSite Move (to ) "Track" 1)) (and (moveAgain ) (set Var "Replay" (to ))) (if (is In (trackSite Move (to ) "Track" 2) (sites Centre)) (set Value Mover 1) (and (if (is Occupied (trackSite Move (to ) "Track" 2)) (fromTo (from (trackSite Move (to ) "Track" 2)) (to (handSite Mover)) (count (trackSite Move (to ) "Track" 2)))) (if (is Occupied (if (is In (trackSite Move (to ) "Track" 2) (sites Bottom)) (+ (trackSite Move (to ) "Track" 2) 7) (- (trackSite Move (to ) "Track" 2) 7))) (fromTo (from (if (is In (trackSite Move (to ) "Track" 2) (sites Bottom)) (+ (trackSite Move (to ) "Track" 2) 7) (- (trackSite Move (to ) "Track" 2) 7))) (to (handSite Mover)) (count (if (is In (trackSite Move (to ) "Track" 2) (sites Bottom)) (+ (trackSite Move (to ) "Track" 2) 7) (- (trackSite Move (to ) "Track" 2) 7)))))))) (and (not (is In (to ) (sites Centre))) (not (is In (to ) (sites (values Remembered "Playable"))))))))} (then (if (all Sites (difference (sites Board) (sites Centre)) (= 0 (count (site )))) (and {(forget Value "Playable" All) (if (!= 0 (+ (count 3) (count 10))) (if (and (= 1 (value Player P1)) (= 1 (value Player P2))) (if (is Even (+ (count 3) (count 10))) (and {(fromTo (from 3) (to Cell (handSite P1)) (- (count 3) 1)) (fromTo (from 10) (to Cell (handSite P1)) (- (count 10) 1)) (fromTo (from Cell (handSite P1)) (to Cell (handSite P2)) (/ (- (+ (count 3) (count 10)) 2) 2))}) (and {(fromTo (from 3) (to Cell (handSite P1)) (- (count 3) 1)) (fromTo (from 10) (to Cell (handSite P1)) (count 10)) (fromTo (from Cell (handSite P1)) (to Cell (handSite P2)) (/ (- (+ (count 3) (count 10)) 1) 2))})) (if (= 1 (value Player P1)) (and (fromTo (from 3) (to Cell (handSite P1)) (- (count 3) 1)) (fromTo (from 10) (to Cell (handSite P1)) (- (count 10) 1))) (if (= 1 (value Player P2)) (and (fromTo (from 3) (to Cell (handSite P2)) (- (count 3) 1)) (fromTo (from 10) (to Cell (handSite P2)) (- (count 10) 1)))))))}))))) (end (if (all Sites (difference (sites Board) (sites Centre)) (= 0 (count (site )))) {(if (= 0 (count Cell (handSite P1))) (result P2 Win)) (if (= 0 (count Cell (handSite P2))) (result P1 Win))})) (nextPhase (all Sites (difference (sites Board) (sites Centre)) (= 0 (count (site )))) "BetweenRounds")) (phase "BetweenRounds" (play (if (not (all Sites (difference (sites Mover) (sites Centre)) (is Occupied (site )))) (if (<= 6 (count Cell (handSite Mover))) (move (from Cell (handSite Mover)) (to (difference (sites Mover) (sites Centre)) (is Empty (to ))) 6 (then (remember Value "Playable" (last To))))))) (nextPhase (all Passed) "Sowing"))}))
Line 3
description: 2x6 board. Three counters per hole. Sowing occurs in an anti-clockwise direction when starting from the right three holes of a player's row, or in a clockwise direction when starting from the player's left three holes. When the final counter falls into an occupied hole, these are picked up and sowing continues, except when this hole is made to contain four counters, in which case these counters are captured and the player takes another turn. These captures may not be made on the first turn. When the final counter lands in an empty hole, the turn ends. Play continues until one player is without counters in their row. The opponent then captures the remaining counters in their row, and the player that has captured the most counters wins.
Ludii code: (game "Wa'ache Waledat" (players 2) (equipment {(mancalaBoard 2 6 None {(track "TrackCCW" "0,E,N,W" true) (track "TrackCW" "5,W,N,E" true)}) (piece "Seed" Shared) (regions "Home" P1 (sites Bottom)) (regions "Home" P2 (sites Top)) (regions "RightHome" P1 (intersection (expand (sites Right) 2) (sites Bottom))) (regions "RightHome" P2 (intersection (expand (sites Right) 2) (sites Top))) (regions "LeftHome" P1 (intersection (expand (sites Left) 2) (sites Bottom))) (regions "LeftHome" P2 (intersection (expand (sites Left) 2) (sites Top))) (hand Each)}) (rules (start (set Count 3 (sites Track))) (play (or (if (or (>= 0 (var "Direction")) (= 1 (var "Direction"))) (move Select (from (if (and (is Prev Mover) (= 1 (var "ContinueSowing"))) (sites {(last To true)}) (sites Mover "RightHome")) (> (count (from )) 0)) (then (sow "TrackCCW" (if (< 1 (count (to ))) (and {(moveAgain ) (set Var "Direction" 1) (set Var "ContinueSowing" 1) (if (and (= 4 (count (to ))) (< 2 (count Turns))) (and (fromTo (from (to )) (to (handSite Mover)) 4) (set Var "ContinueSowing" 0)))}) (set Var "Direction" 0)))))) (if (or (>= 0 (var "Direction")) (= 2 (var "Direction"))) (move Select (from (if (and (is Prev Mover) (= 1 (var "ContinueSowing"))) (sites {(last To true)}) (sites Mover "LeftHome")) (> (count (from )) 0)) (then (sow "TrackCW" (if (< 1 (count (to ))) (and {(moveAgain ) (set Var "Direction" 2) (set Var "ContinueSowing" 1) (if (and (= 4 (count (to ))) (< 2 (count Turns))) (and (fromTo (from (to )) (to (handSite Mover)) 4) (set Var "ContinueSowing" 0)))}) (set Var "Direction" 0)))))) (then (if (or (all Sites (sites P1 "Home") (= 0 (count (site )))) (all Sites (sites P2 "Home") (= 0 (count (site ))))) (and (forEach Site (sites P1 "Home") (fromTo (from (site )) (to (handSite P1)) (count (site )))) (forEach Site (sites P2 "Home") (fromTo (from (site )) (to (handSite P2)) (count (site ))))))))) (end (if (all Sites (sites Board) (= 0 (count (site )))) (byScore {(score P1 (count Cell (handSite P1))) (score P2 (count Cell (handSite P2)))})))))
Line 3
description: 2x6 board, with a storage hole on either end. The game starts with four counters in each hole. A player picks up all of the counters in one of the holes in their row and sows them one-by-one in a counterclockwise direction in consecutive holes from the hole the pieces originated. The starting hole is always left empty, even if a player sows in a complete circuit of the board, the original house is skipped and sowing continues in the next hole after it. Players capture counters when the final counter is sown in the player's own row and the hole containing it has two or three counters (counting the counter just dropped into it). If the hole before it also has two or three counters, these are also captured and so on until reaching a hole without two or three counters or one not belonging to the player. If an opponent's holes are all empty, the other player must make a move placing counters in the opponent's row. If not possible, the player captures all the counters in their row. The player who has captured the most counters wins. If the game continues in a repeating loop, the players can agree to end the game and capture the counters remaining in their row.
        
Ludii code: (game "Fondji" (players 2) (equipment {(mancalaBoard 2 6 (track "Track" "1,E,N,W" true)) (regions P1 (sites Bottom)) (regions P2 (sites Top)) (map {(pair P1 FirstSite) (pair P2 LastSite)}) (piece "Seed" Shared)}) (rules (start (set Count 4 (sites Track))) (play (if (is Proposed "End") (or (move Vote "End") (move Vote "No")) (or (if (is Cycle) (move Propose "End")) (do (move Select (from (sites Mover) (< 0 (count (from )))) (then (sow (and (is In (to ) (sites Next)) (or (= (count (to )) 2) (= (count (to )) 3))) (fromTo (from (to )) (to (mapEntry (mover ))) (count (to ))) false true))) (< 0 (count (sites Next))))))) (end (if (or (no Moves Mover) (is Decided "End")) (byScore {(score P1 (+ (count (mapEntry P1)) (count (sites P1)))) (score P2 (+ (count (mapEntry P2)) (count (sites P2))))})))))
Line 3
description: 2x6 board, one store on either end. Four counters in each hole. Sowing occurs in an anti-clockwise direction and begins in the player's row. When the final counter lands in an occupied hole which is not followed by an empty hole, the contents are picked up and sowing continues. If the final counter falls in an occupied hole followed by an empty hole, or if it falls into an empty hole, the turn ends. Sowing always skips the hole from which the sowing began if it goes all the way around the board. When the final counter falls into an occupied hole in the opponent's row containing three counters, these are captured and the turn ends. Any holes in the opponent's row containing four counters in an unbroken consecutive sequence behind this hole are also captured. Single counters can only be sowed when the next hole is empty. Play continues until one player can no longer play. The player who has captured the most counters wins.
Ludii code: (game "Kay" (players 2) (equipment {(mancalaBoard 2 6 (track "Track" "1,E,N,W" true)) (piece "Seed" Shared) (regions "Home" P1 (sites Bottom)) (regions "Home" P2 (sites Top)) (map {(pair P1 FirstSite) (pair P2 LastSite)})}) (rules (start (set Count 4 (sites Track))) (play (move Select (from (if (is Prev Mover) (sites {(last To true)}) (sites Mover)) (or (< 1 (count (from ))) (and (= 1 (count (from ))) (is Empty (trackSite Move (from ) "Track" 1))))) (then (sow true (if (= 4 (count (to ))) (fromTo (from (to )) (to (mapEntry Mover)) (count (to ))) (if (< 1 (count (to ))) (if (is Occupied (trackSite Move (to ) "Track" 1)) (moveAgain )))) false (= 4 (count (to ))))))) (end (if (no Moves Next) (byScore {(score P1 (count (mapEntry P1))) (score P2 (count (mapEntry P2)))})))))
Line 3
description: 2x6 board. Four counters in each hole. Sowing occurs in an anti-clockwise direction. When the final counter of a sowing lands in an empty hole on the player's own row, the contents of the opponent's opposite hole are captured only if it contains one counter. If the final counter lands in an occupied hole, the contents of it are picked up and sowing continues. If the final counter lands in a hole in the opponent's row, causing it to contain four counters, the hole becomes a qasamo, and it can no longer be sown from. Play continues until all of the counters are captured or are in a qasamo. The player with the most counters captured and in all qasamo belonging to them wins.
Ludii code: (game "Gamacha (Nobility)" (players 2) (equipment {(mancalaBoard 2 6 None (track "Track" "0,E,N,W" true)) (piece "Seed" Shared) (regions P1 (sites Bottom)) (regions P2 (sites Top)) (hand Each)}) (rules (start (set Count 4 (sites Track))) (play (move Select (from (if (is Prev Mover) (sites {(last To true)}) (sites Mover)) (and (< 0 (count (from ))) (= 0 (state (from ))))) (then (sow (if (and (is In (to ) (sites Mover)) (= 1 (count (to )))) (if (= 1 (count (if (is Mover P1) (+ (to ) 6) (- (to ) 6)))) (fromTo (from (if (is Mover P1) (+ (to ) 6) (- (to ) 6))) (to (handSite Mover)) 1)) (if (< 1 (count (to ))) (and (moveAgain ) (if (and {(is In (to ) (sites Next)) (= 0 (state (to ))) (= 4 (count (to )))}) (set State (to ) (mover )))))))))) (end (if (all Sites (forEach (sites Board) (= 0 (state (site )))) (= 0 (count (site )))) (byScore {(score P1 (+ (count Cell (handSite P1)) (count (forEach (sites Board) (= (id P1) (state (site ))))))) (score P2 (+ (count Cell (handSite P2)) (count (forEach (sites Board) (= (id P2) (state (site )))))))})))))
Line 3
description: 2x7 board, with two stores. Seven counters in each hole. Players sow from any hole on their side of the board, in a clockwise direction, and sow into the store on their left, but not the one on the right. When the final counter of a sowing lands in an occupied hole that is not the store, the player picks up these counters and continues sowing. When then final counter lands in an empty hole, the turn ends. When the final counter lands in the store, the turn ends. Play continues until all of the counters are in the stores, and the player with the most counters in their store wins.
Ludii code: (game "Chungcajon" (players 2) (equipment {(mancalaBoard 2 7 {(track "Track1" "7,W,WNW,ENE,E" true P1) (track "Track2" "8,E,ESE,WSW,W" true P2)}) (regions P1 (sites Bottom)) (regions P2 (sites Top)) (map {(pair P1 FirstSite) (pair P2 LastSite)}) (piece "Seed" Shared)}) (rules (start (set Count 7 (union (sites P1) (sites P2)))) (play (move Select (from (if (is Prev Mover) (sites {(last To true)}) (sites Mover)) (> (count (from )) 0)) (then (sow "Track" (mover ) (and (> (count (to )) 1) (!= (to ) (mapEntry Mover))) (moveAgain ))))) (end (if (all Sites (union (sites P1) (sites P2)) (= 0 (count (site )))) (byScore {(score P1 (count (mapEntry P1))) (score P2 (count (mapEntry P2)))})))))
Line 3
description: 2x12 board. The board begins with the following pattern of counters in the holes, beginning from the bottom left row and proceeding in an anti-clockwise direction: 0-0-4-0-4-0-4-0-4-0-4-0-4-0-4-0-4-0-4-0-4-0-4-0. One player starts with an additional four counters in their left hand hole. The player with fewer counters on their first move places the counters from their seventh hole into the opponent's opposite hole. Sowing occurs in an anti-clockwise direction, and may only happen when the final counter lands either in an empty hole in the player's own row or in any hole in the opponent's row. When the final counter lands in an empty hole in the player's own row, the contents of the opposite hole in the opponent's row are captured. When the final counter lands in an occupied hole in the opponent's row, these counters are picked up and sowing continues. The final counter of this sowing is allowed to fall into an occupied hole in the player's own row, and these are picked up and sowing continues. Sowing ends when the final counter lands in an empty hole. The game ends when one player has no counters on their side of the board, and the opponent wins.
Ludii code: (game "Gamacha" (players 2) (equipment {(mancalaBoard 2 12 None (track "Track" "0,E,N,W" true)) (piece "Seed" Shared) (regions P1 (sites Bottom)) (regions P2 (sites Top)) (hand Each)}) (rules (start (set Count 4 (sites {"C1" "E1" "G1" "I1" "K1" "L2" "J2" "H2" "F2" "D2" "B2"}))) {(phase "Opening" (play (move (from 6) (to 18) 4)) (nextPhase "Sowing")) (phase "Sowing" (play (move Select (from (if (is Prev Mover) (sites {(last To true)}) (sites Mover)) (if (is Prev Mover) true (and (> (count (from )) 0) (if (is In (trackSite Move (from ) (count (from ))) (sites Next)) true (is Empty (trackSite Move (from ) (count (from )))))))) (then (sow (if (and (is In (to ) (sites Mover)) (<= (count (to )) 1)) (if (!= 0 (count (if (is Mover P1) (+ (to ) 12) (- (to ) 12)))) (fromTo (from (if (is Mover P1) (+ (to ) 12) (- (to ) 12))) (to (handSite Mover)) (count (if (is Mover P1) (+ (to ) 12) (- (to ) 12))))) (if (> (count (to )) 1) (moveAgain ))))))))} (end (forEach Player (all Sites (sites Player) (= 0 (count (site )))) (result Player Loss)))))
Line 3
description: 2x5 board. Ten counters in each hole. Sowing occurs in an anti-clockwise direction, sowing first into the hole from which the counters originally came. Opening phase: In the first ten turns, each player must sow from each of their five holes. Main phase: Captures are made when the last counter of a sowing falls into a hole preceding a hole containing one, three, or five counters. These counters are taken. Any subsequent holes also containing one, three, or five counters are captured, until a hole is reached that does not have one of these numbers of counters. The exception to this is in the first move when no captures are made. Sowing cannot begin from a hole with a single counter. A player wins when his opponent can no longer sow. However, if a player can no longer move, they can redistribute their captured beans into their holes, and if all five can be filled with ten, the game is a draw.
Ludii code: (game "Adjiboto" (players 2) (equipment {(mancalaBoard 2 5 None (track "Track" "0,E,N,W" true)) (piece "Seed" Shared) (hand Each) (regions P1 (sites Bottom)) (regions P2 (sites Top))}) (rules (start (set Count 10 (sites Track))) {(phase "Opening" (play (move Select (from (difference (sites Mover) (sites (if (is Mover P1) (values Remembered "SowedHolesP1") (values Remembered "SowedHolesP2")))) (< 1 (count (to )))) (then (and (sow true) (if (is Mover P1) (remember Value "SowedHolesP1" (last From) true) (remember Value "SowedHolesP2" (last From) true)))))) (nextPhase Mover (< 8 (count Turns)))) (phase "Main" (play (move Select (from (sites Mover) (< 1 (count (to )))) (then (sow (or {(= 1 (count (trackSite Move (to ) "Track" 1))) (= 3 (count (trackSite Move (to ) "Track" 1))) (= 5 (count (trackSite Move (to ) "Track" 1)))}) (fromTo (from (trackSite Move (to ) "Track" 1)) (to (handSite Mover)) (count (trackSite Move (to ) "Track" 1))) true true)))) (end (if (no Moves Next) {(if (< (count Cell (handSite Next)) 50) (result Mover Win)) (if (>= (count Cell (handSite Next)) 50) (result Mover Draw))})))}))
Line 3
description: Play begins with six counters in each hole. Sowing is anti-clockwise. If the last counter of a sowing lands in the player's own hole making it even, the counters are captured. If the contents of the hole before it is also even, these are also taken, continuing until an odd or empty hole is reached. If the last counter makes a hole odd, the turn ends. If a player has no counters in their holes at the end of the turn, the opponent must play so that the player can play on the next turn. Play ends when neither player is able to move; the last player who was able to move takes the remaining counters and the player with the most counters captured wins.
Ludii code: (game "Halusa" (players 2) (equipment {(mancalaBoard 2 6 None (track "Track" "0,E,N,W" true)) (regions P1 (sites Bottom)) (regions P2 (sites Top)) (piece "Seed" Shared) (hand Each)}) (rules (start (set Count 6 (sites Track))) (play (do (move Select (from (sites Mover) (> (count (from )) 0)) (then (sow (and (is In (to ) (sites Mover)) (is Even (count (to )))) (fromTo (from (to )) (to (handSite Mover)) (count (to ))) true))) (> (count (sites Next)) 0))) (end (if (no Moves Mover) (byScore {(score P1 (+ (count Cell (handSite P1)) (count (sites P1)))) (score P2 (+ (count Cell (handSite P2)) (count (sites P2))))})))))
Line 3
description: 2x12, 15, 18, 21, or 24 board. Two counters per hole. Typically played by a team of players, who consult each other about the moves to be made. Sowing occurs most commonly in an anti-clockwise direction, but can be played clockwise if the players agree. Play begins with one player picking up the counters in one of the holes in their row and sowing them, then picking up the counters in the hole following the one in which the last counter was sown, and continuing to sow in this way until there is a pattern of holes with three counters alternating with empty holes. The players then decide who gets to play first. Players sow counters from a hole in their row in the agreed-upon direction. When the final counter lands in an occupied hole, these counters are picked up and sowing continues. When the last counter falls into an empty hole, the sowing ends. If the sowing ends in the player's own row, any counters in the opponent's hole opposite are captured. Once both players are reduced to only single counters in their holes, when a player reaches the end of their row with a counter, it is captured instead of continuing to sow it to the opponent's rows. The player who is the last in possession of counters wins.
Ludii code: (game "Andada" (players 2) (equipment {(mancalaBoard 2 12 None (track "Track" "0,E,N,W" true)) (regions P1 (sites Bottom)) (regions P2 (sites Top)) (piece "Seed" Shared) (hand Each)}) (rules (start (set Count 2 (sites Track))) {(phase "Opening" (play (move Select (from (if (is Prev Mover) (sites {(trackSite Move (last To true) "Track" 1)}) (sites Mover)) (> (count (from )) 0)) (then (sow (then (if (is Occupied (trackSite Move (last To true) "Track" 1)) (moveAgain ))))))) (nextPhase (is Mover P2) "Playing")) (phase "Playing" (play (move Select (from (if (is Prev Mover) (sites {(last To true)}) (sites Mover)) (> (count (from )) 0)) (then (sow (if (= 1 (count (to ))) (if (all Sites (sites Board) (<= (count (site )) 1)) (if (is In (trackSite Move (to ) "Track" 1) (sites Next)) (fromTo (from (to )) (to (handSite Mover)) (count (to )))) (if (and (is Occupied (if (is Mover P1) (+ (to ) 12) (- (to ) 12))) (is In (to ) (sites Mover))) (fromTo (from (if (is Mover P1) (+ (to ) 12) (- (to ) 12))) (to (handSite Mover)) (count (if (is Mover P1) (+ (to ) 12) (- (to ) 12)))))) (moveAgain )))))) (end (forEach Player (all Sites (sites Player) (= 0 (count (site )))) (result Player Loss))))}))
Line 3
description: 2x6 board. Eight counters in each hole; two holes in one player's row and one in the opponent's row are left empty. Sowing in an anti-clockwise direction. No captures in first two turns. If the last counter falls into a hole that is occupied, these are picked up and the sowing continues. When the last counter of a sowing falls into an empty hole, the counters in the opposite hole are captured. The player continues play by moving the counter that made the capture into the next hole, and continuing play. If the last counter falls into an empty hole and the opposite hole is also empty, the turn ends. The player who captures the most counters wins.
Ludii code: (game "Mangala (Suez)" (players 2) (equipment {(mancalaBoard 2 6 None (track "Track" "0,E,N,W" true)) (piece "Seed" Shared) (regions P1 (sites Bottom)) (regions P2 (sites Top)) (hand Each)}) (rules (start (set Count 8 (sites Track))) {(phase "Opening" (play (move Remove (sites Mover) (count (to )))) (nextPhase (<= 3 (count Turns)) "Sowing")) (phase "Sowing" (play (move Select (from (if (is Prev Mover) (sites {(var "Replay")}) (sites Mover)) (is Occupied (from ))) (then (sow (if (< 1 (count (to ))) (and (moveAgain ) (set Var "Replay" (to ))) (if (<= 7 (count Turns)) (if (is Occupied (if (is In (to ) (sites Bottom)) (+ (to ) 6) (- (to ) 6))) (and {(fromTo (from (if (is In (to ) (sites Bottom)) (+ (to ) 6) (- (to ) 6))) (to (handSite Mover)) (count (if (is In (to ) (sites Bottom)) (+ (to ) 6) (- (to ) 6)))) (moveAgain ) (set Var "Replay" (to ))})))))))) (end (if (no Moves Next) (byScore {(score P1 (+ (count Cell (handSite P1)) (count (sites P1)))) (score P2 (+ (count Cell (handSite P2)) (count (sites P2))))}))))}))
Line 3
description: 2x6 board. Play begins with four counters in each hole. A player picks up the contents of any of their holes and sowing them in an anti-clockwise direction, picking up the contents of the last hole in which his counters fall, and continuing sowing. This continues until the last counter falls in an empty hole. Then it is the other player's turn. A hole is captured when the last ball is dropped into an opponent's hole containing three counters, making it four. A player cannot then take from one of these holes that they have captured. Therefore, the player cannot begin a turn from their own captured hole nor can they continue sowing from it. If the last counter of a sowing falls into an opponent's captured hole, nothing happens on the first instance, but every time after that, one of those counters are removed from the board and placed in the store, and the sowing ends. Ownership of a hole continues even if it becomes empty. When a player cannot move (i.e., there are no counters in their holes except any that are in captured holes), the opponent continues to move until the player is able to move. Play continues until all counters are either placed in the store or in captured holes and thus cannot be moved. Players then count their pieces by placing four in each hole, and the player who has more than their original number takes ownership of one of the opponent's holes for every four counters more than the original number that have been taken. If no player took four more than the original, the player with three extra gets the hole, if each player has two extra the weaker player is given the two extra counters. Play then begins again as before. The game ends when one player owns all of the counters, and thus all of the holes.
Ludii code: (game "Awagagae" (players 2) (equipment {(mancalaBoard 2 6 None (track "Track" "0,E,N,W" true)) (piece "Seed" Shared) (hand Each) (regions P1 (sites Bottom)) (regions P2 (sites Top))}) (rules (start {(set RememberValue "OwnedP1" (sites Bottom)) (set RememberValue "OwnedP2" (sites Top)) (set Count 4 (sites Track))}) {(phase "Sowing" (play (or {(move Select (from (if (is Prev Mover) (sites {(last To true)}) (if (is Mover P1) (sites (values Remembered "OwnedP1")) (sites (values Remembered "OwnedP2")))) (and (if (is Mover P1) (not (is In (from ) (values Remembered "CapturedP2"))) (not (is In (from ) (values Remembered "CapturedP1")))) (< 0 (count (from ))))) (then (sow "Track" (if (not (if (= (mover ) P1) (is In (to ) (values Remembered "CapturedP1")) (is In (to ) (values Remembered "CapturedP2")))) (if (and (is In (to ) (sites Next)) (= (count (to )) 4)) (if (is Mover P1) (remember Value "CapturedP1" (to )) (remember Value "CapturedP2" (to ))) (if (if (= (mover ) P1) (is In (to ) (values Remembered "CapturedP2")) (is In (to ) (values Remembered "CapturedP1"))) (fromTo (from (to )) (to (handSite Next)) 1) (if (> (count (to )) 1) (moveAgain ))))))))} (then (if (no Pieces (forEach (sites Board) (and (not (is In (site ) (values Remembered "CapturedP1"))) (not (is In (site ) (values Remembered "CapturedP2")))))) (and {(forEach Site (sites Board) (if (and (is In (site ) (values Remembered "CapturedP1")) (is Occupied (site ))) (fromTo (from (site )) (to (handSite P1)) (count (site ))))) (forEach Site (sites Board) (if (and (is In (site ) (values Remembered "CapturedP2")) (is Occupied (site ))) (fromTo (from (site )) (to (handSite P2)) (count (site ))))) (forget Value "OwnedP1" All) (forget Value "OwnedP2" All) (forget Value "CapturedP1" All) (forget Value "CapturedP2" All)}))))) (end (if (all Sites (sites Board) (= 0 (count (site )))) {(if (= 0 (count Cell (handSite P1))) (result P2 Win)) (if (= 0 (count Cell (handSite P2))) (result P1 Win))})) (nextPhase (all Sites (sites Board) (= 0 (count (site )))) "BetweenRounds")) (phase "BetweenRounds" (play (if (<= 4 (count Cell (handSite Mover))) (move (from (handSite Mover)) (to (if (all Sites (sites Mover) (is Occupied (site ))) (sites Next) (sites Mover)) (is Empty (to ))) 4 (then (and (if (is Mover P1) (remember Value "OwnedP1" (last To)) (remember Value "OwnedP2" (last To))) (if (and (> 4 (count Cell (handSite P1))) (> 4 (count Cell (handSite P2)))) (and {(fromTo (from Cell (handSite P1)) (to (sites Empty)) (count Cell (handSite P1))) (fromTo (from Cell (handSite P2)) (to (sites Empty)) (count Cell (handSite P2))) (if (= 3 (count Cell (handSite P1))) (remember Value "OwnedP1" (regionSite (sites Empty) 0)) (remember Value "OwnedP2" (regionSite (sites Empty) 0)))}))))))) (nextPhase (and (is Empty (handSite P1)) (is Empty (handSite P2))) "Sowing"))}))
Line 3
description: 2x6 board. Four counters in each hole. Players sow counters in a clockwise directions from one of the holes in their opponent's row. When the final counter lands in an occupied hole, the contents of that hole are picked up and sowing continues, unless the next hole is empty, in which case the contents of the next hole after the empty hole are captured. When the final counter falls in an empty hole, the turn ends. Play continues until all of the holes are empty in one of the rows. The player who captured the most counters wins.
Ludii code: (game "Tap Urdy" (players 2) (equipment {(mancalaBoard 2 6 None (track "Track" "5,W,N,E" true)) (regions P1 (sites Bottom)) (regions P2 (sites Top)) (hand Each) (piece "Seed" Shared)}) (rules (start (set Count 4 (sites Track))) (play (move Select (from (if (is Prev Mover) (sites {(last To true)}) (sites Next)) (< 0 (count (from )))) (then (sow (if (and (!= (count (trackSite Move (to ) 1)) 0) (> (count (to )) 1)) (moveAgain ) (if (and (= (count (trackSite Move (to ) 1)) 0) (> (count (to )) 1)) (fromTo (from (trackSite Move (to ) 2)) (to (handSite (mover ))) (count (trackSite Move (to ) 2))))))))) (end (if (or (all Sites (sites P1) (= 0 (count (site )))) (all Sites (sites P2) (= 0 (count (site ))))) (byScore {(score P1 (+ (count Cell (handSite P1)) (count (sites P1)))) (score P2 (+ (count Cell (handSite P2)) (count (sites P2))))})))))
Line 3
description: 2x6 board. Four counters in each hole. Sowing proceeds in an anti-clockwise direction. When the final counter of a sowing lands in an occupied hole, the contents are picked up and sowing continues. When the final counter falls in an empty hole, the turn ends. If the empty hole is in the player's row, any counters in the opponent's opposite hole are captured. If a player cannot play, they pass their turn until they are able. The player who captures all of the counters wins. Players then count their pieces by placing four in each hole, and the player who has more than their original number takes ownership of one of the opponent's holes for every four counters more than the original number that have been taken. If no player took four more than the original, the player with three extra gets the hole, if each player has two extra they draw lots to see who gets an extra hole. Play then begins again as before. Play continues until one player owns all of the holes.
Ludii code: (game "Hufesay" (players 2) (equipment {(mancalaBoard 2 6 None (track "Track" "0,E,N,W" true)) (regions "Home" P1 (sites Bottom)) (regions "Home" P2 (sites Top)) (piece "Seed" Shared) (hand Each) (map "LeftMost" {(pair P1 0) (pair P2 11)})}) (rules (start {(set Count 4 (sites Track)) (set RememberValue "OwnedP1" (sites Bottom)) (set RememberValue "OwnedP2" (sites Top))}) {(phase "Sowing" (play (or {(move Select (from (if (is Prev Mover) (sites {(last To true)}) (if (is Mover P1) (sites (values Remembered "OwnedP1")) (sites (values Remembered "OwnedP2")))) (is Occupied (from ))) (then (sow (if (> (count (to )) 1) (moveAgain ) (if (and (is In (to ) (sites Mover)) (> (count (if (is Mover P1) (+ (to ) 6) (- (to ) 6))) 0)) (fromTo (from (if (is Mover P1) (+ (to ) 6) (- (to ) 6))) (to (handSite Mover)) (count (if (is Mover P1) (+ (to ) 6) (- (to ) 6)))))))))} (then (if (or (all Sites (sites P1) (= 0 (count (site )))) (all Sites (sites P2) (= 0 (count (site ))))) (and {(forEach Site (sites (values Remembered "OwnedP1")) (if (is Occupied (site )) (fromTo (from (site )) (to (handSite P1)) (count (site ))))) (forEach Site (sites (values Remembered "OwnedP2")) (if (is Occupied (site )) (fromTo (from (site )) (to (handSite P2)) (count (site ))))) (forget Value "OwnedP1" All) (forget Value "OwnedP2" All) (if (>= (+ (count Cell (handSite P1)) (count (sites P1))) (+ (count Cell (handSite P2)) (count (sites P2)))) (set NextPlayer (player 1)) (set NextPlayer (player 2)))}))))) (end (if (all Sites (sites Board) (= 0 (count (site )))) {(if (> 4 (count Cell (handSite P1))) (result P2 Win)) (if (> 4 (count Cell (handSite P2))) (result P1 Win))})) (nextPhase (all Sites (sites Board) (= 0 (count (site )))) "BetweenRounds")) (phase "BetweenRounds" (play (if (<= 4 (count Cell (handSite Mover))) (move (from (handSite Mover)) (to (trackSite FirstSite (mapEntry "LeftMost" Mover) (is Empty (to )))) 4 (then (and {(if (is Mover P1) (remember Value "OwnedP1" (last To)) (remember Value "OwnedP2" (last To))) (if (<= 4 (count Cell (handSite Mover))) (moveAgain ) (if (= 3 (count Cell (handSite Mover))) (and {(fromTo (from (handSite Mover)) (to (trackSite FirstSite (mapEntry "LeftMost" Mover) (is Empty (to )))) 3) (fromTo (from (handSite Next)) (to (trackSite FirstSite (mapEntry "LeftMost" Mover) (is Empty (to )))) 1) (if (is Mover P1) (remember Value "OwnedP1" (trackSite FirstSite (mapEntry "LeftMost" Mover) (is Empty (to )))) (remember Value "OwnedP2" (trackSite FirstSite (mapEntry "LeftMost" Mover) (is Empty (to )))))}) (fromTo (from (handSite Mover)) (to (handSite Next)) (count Cell (handSite Mover)))))}))))) (nextPhase (and (is Empty (handSite P1)) (is Empty (handSite P2))) "Sowing"))}))
Line 3
description: 2x7 board with two stores. Four counters in each hole. Sowing occurs in either a clockwise or anti-clockwise direction; the first player chooses the direction and all subsequent moves are made in that direction. Players sow beginning from holes in their row. If the last counter falls into a hole with counters, the counters in the next hole are picked up and sowing continues, and if this hole is empty, the counters in the hole following the empty hole are captured. If there is an unbroken sequence of alternating empty and occupied holes, the counters in the occupied holes are captured until there are two empty or two occupied holes. If the final counter falls into an empty hole the turn ends. Throughout the game, singletons cannot be moved is a player has a hole with multiple counters, and a singleton in the front hole cannot be moved if there are other singletons in the player's row. The round ends when one player's holes are empty. 
            
            A second round begins with the winner of the first round placing four counters in each of their holes, leaving any surplus in the store. The loser of round one places four counters in as many consecutive holes on their side of the board as possible, and any remaining counters in the next hole. If this hole contains one, it is called puta, if two, naga, if three, wala. Holes with no counters are excluded from play for this round. If the loser has a puta hole, the opponent removes three counters from their hole opposite; if a naga, the opponent removes two from the opposite hole, if a wala, the opponent removes one. The removed counters go into their store. Puta and naga holes are marked with a piece of paper or straw in them. Empty holes are excluded from play in this round. The losing player begins the round, moving in the direction of the excluded holes, and played in the same way as the first round. The player with empty holes begins play in the direction of the empty hole. Counters cannot be captured or sowed from puta or naga holes. Play continues as before.
            
            When one player has fewer than twelve counters at the beginning of a round, they may arrange them differently at the beginning. They may put one or two counters in one end hole and not more than four in the other end hole, and one or two counters in the intermediate holes, leaving some empty and, thus, excluded. The opponent then puts four counters in each of their holes. There are no puta, naga, or wala holes in this round. The player with more counters plays as before, but the one with less has captures that are determined by the number of counters placed in the first end hole. If there were two in the end hole, the player captures when dropping the final counter into a hole to make it three; or when it makes two if there was one counter in the first end hole. Otherwise, the player does not sow in holes with one or two counters.
            
        Play continues until one player cannot sow at the beginning of a round.
Ludii code: (game "Walak-Pussa" (players 2) (equipment {(mancalaBoard 2 7 {(track "TrackCCW" "1,E,N,W" true) (track "TrackCW" "7,W,N,E" true)}) (piece "Seed" Shared) (regions P1 (sites Bottom)) (regions P2 (sites Top)) (map {(pair P1 FirstSite) (pair P2 LastSite)})}) (rules (start {(set Count 4 (sites Track)) (set RememberValue "Playable" (union (sites Top) (sites Bottom)))}) {(phase "StartingMove" (play (or (move Select (from (sites Mover) (and (is Occupied (from )) (is In (from ) (sites (values Remembered "Playable"))))) (then (and (sow "TrackCCW" (if (= 1 (count (to ))) (if (< 0 (count (trackSite Move (to ) "TrackCCW" 1))) (and (fromTo (from (trackSite Move (to ) "TrackCCW" 1)) (to (mapEntry Mover)) (count (trackSite Move (to ) "TrackCCW" 1))) (if (and (= 0 (count (trackSite Move (to ) "TrackCCW" 2))) (< 0 (count (trackSite Move (to ) "TrackCCW" 3)))) (and (fromTo (from (trackSite Move (to ) "TrackCCW" 3)) (to (mapEntry Mover)) (count (trackSite Move (to ) "TrackCCW" 3))) (if (and (= 0 (count (trackSite Move (to ) "TrackCCW" 4))) (< 0 (count (trackSite Move (to ) "TrackCCW" 5)))) (and (fromTo (from (trackSite Move (to ) "TrackCCW" 5)) (to (mapEntry Mover)) (count (trackSite Move (to ) "TrackCCW" 5))) (if (and (= 0 (count (trackSite Move (to ) "TrackCCW" 6))) (< 0 (count (trackSite Move (to ) "TrackCCW" 7)))) (fromTo (from (trackSite Move (to ) "TrackCCW" 7)) (to (mapEntry Mover)) (count (trackSite Move (to ) "TrackCCW" 7)))))))))) (and (moveAgain ) (set Var "Replay" (to )))) (not (is In (to ) (sites (values Remembered "Playable"))))) (set Var "Direction" 1)))) (move Select (from (sites Mover) (and (is Occupied (from )) (is In (from ) (sites (values Remembered "Playable"))))) (then (and (sow "TrackCW" (if (= 1 (count (to ))) (if (< 0 (count (trackSite Move (to ) "TrackCW" 1))) (and (fromTo (from (trackSite Move (to ) "TrackCW" 1)) (to (mapEntry Mover)) (count (trackSite Move (to ) "TrackCW" 1))) (if (and (= 0 (count (trackSite Move (to ) "TrackCW" 2))) (< 0 (count (trackSite Move (to ) "TrackCW" 3)))) (and (fromTo (from (trackSite Move (to ) "TrackCW" 3)) (to (mapEntry Mover)) (count (trackSite Move (to ) "TrackCW" 3))) (if (and (= 0 (count (trackSite Move (to ) "TrackCW" 4))) (< 0 (count (trackSite Move (to ) "TrackCW" 5)))) (and (fromTo (from (trackSite Move (to ) "TrackCW" 5)) (to (mapEntry Mover)) (count (trackSite Move (to ) "TrackCW" 5))) (if (and (= 0 (count (trackSite Move (to ) "TrackCW" 6))) (< 0 (count (trackSite Move (to ) "TrackCW" 7)))) (fromTo (from (trackSite Move (to ) "TrackCW" 7)) (to (mapEntry Mover)) (count (trackSite Move (to ) "TrackCW" 7)))))))))) (and (moveAgain ) (set Var "Replay" (to )))) (not (is In (to ) (sites (values Remembered "Playable"))))) (set Var "Direction" 2)))))) (nextPhase "Sowing")) (phase "Sowing" (play (if (= 1 (var "Direction")) (move Select (from (if (and (not (is Pending)) (is Prev Mover)) (sites {(var "Replay")}) (sites Mover)) (and {(is Occupied (from )) (is In (from ) (sites (values Remembered "Playable"))) (not (is In (from ) (sites (values Remembered "Blocked")))) (if (not (all Sites (forEach (sites Mover) (is In (site ) (sites (values Remembered "Playable")))) (>= 1 (count (site ))))) (< 1 (count (from ))))})) (then (sow "TrackCCW" (if (= 1 (count (to ))) (if (< 0 (count (trackSite Move (to ) "TrackCCW" 1))) (and (fromTo (from (trackSite Move (to ) "TrackCCW" 1)) (to (mapEntry Mover)) (count (trackSite Move (to ) "TrackCCW" 1))) (if (and (= 0 (count (trackSite Move (to ) "TrackCCW" 2))) (< 0 (count (trackSite Move (to ) "TrackCCW" 3)))) (and (fromTo (from (trackSite Move (to ) "TrackCCW" 3)) (to (mapEntry Mover)) (count (trackSite Move (to ) "TrackCCW" 3))) (if (and (= 0 (count (trackSite Move (to ) "TrackCCW" 4))) (< 0 (count (trackSite Move (to ) "TrackCCW" 5)))) (and (fromTo (from (trackSite Move (to ) "TrackCCW" 5)) (to (mapEntry Mover)) (count (trackSite Move (to ) "TrackCCW" 5))) (if (and (= 0 (count (trackSite Move (to ) "TrackCCW" 6))) (< 0 (count (trackSite Move (to ) "TrackCCW" 7)))) (fromTo (from (trackSite Move (to ) "TrackCCW" 7)) (to (mapEntry Mover)) (count (trackSite Move (to ) "TrackCCW" 7)))))))))) (and (moveAgain ) (set Var "Replay" (to )))) (not (is In (to ) (sites (values Remembered "Playable"))))))) (move Select (from (if (and (not (is Pending)) (is Prev Mover)) (sites {(var "Replay")}) (sites Mover)) (and {(is Occupied (from )) (is In (from ) (sites (values Remembered "Playable"))) (not (is In (from ) (sites (values Remembered "Blocked")))) (if (not (all Sites (forEach (sites Mover) (is In (site ) (sites (values Remembered "Playable")))) (>= 1 (count (site ))))) (< 1 (count (from ))))})) (then (sow "TrackCW" (if (= 1 (count (to ))) (if (< 0 (count (trackSite Move (to ) "TrackCW" 1))) (and (fromTo (from (trackSite Move (to ) "TrackCW" 1)) (to (mapEntry Mover)) (count (trackSite Move (to ) "TrackCW" 1))) (if (and (= 0 (count (trackSite Move (to ) "TrackCW" 2))) (< 0 (count (trackSite Move (to ) "TrackCW" 3)))) (and (fromTo (from (trackSite Move (to ) "TrackCW" 3)) (to (mapEntry Mover)) (count (trackSite Move (to ) "TrackCW" 3))) (if (and (= 0 (count (trackSite Move (to ) "TrackCW" 4))) (< 0 (count (trackSite Move (to ) "TrackCW" 5)))) (and (fromTo (from (trackSite Move (to ) "TrackCW" 5)) (to (mapEntry Mover)) (count (trackSite Move (to ) "TrackCW" 5))) (if (and (= 0 (count (trackSite Move (to ) "TrackCW" 6))) (< 0 (count (trackSite Move (to ) "TrackCW" 7)))) (fromTo (from (trackSite Move (to ) "TrackCW" 7)) (to (mapEntry Mover)) (count (trackSite Move (to ) "TrackCW" 7)))))))))) (and (moveAgain ) (set Var "Replay" (to )))) (not (is In (to ) (sites (values Remembered "Playable"))))))) (then (if (no Moves Next) (and {(forEach Site (sites P1) (if (is Occupied (site )) (fromTo (from (site )) (to (mapEntry P1)) (count (site ))))) (forEach Site (sites P2) (if (is Occupied (site )) (fromTo (from (site )) (to (mapEntry P2)) (count (site ))))) (forget Value "Playable" All) (forget Value "Blocked" All) (if (< (+ (count (mapEntry P1)) (count (sites P1))) (+ (count (mapEntry P2)) (count (sites P2)))) (and (set NextPlayer (player 2)) (set Var "Winner" 2)) (and (set NextPlayer (player 1)) (set Var "Winner" 1)))}))))) (end (if (no Moves Next) {(if (> 2 (count (mapEntry P1))) (result P2 Win)) (if (> 2 (count (mapEntry P2))) (result P1 Win))})) (nextPhase (no Moves Next) "BetweenRounds")) (phase "BetweenRounds" (play (if (and (not (is Prev Mover)) (!= (mover ) (var "Winner"))) (or (move (from (mapEntry Mover)) (to (if (is Mover P1) (intersection (sites Bottom) (expand (sites Right))) (intersection (sites Top) (expand (sites Left)))) (is Empty (to ))) (min 4 (count (mapEntry Mover))) (then (and {(remember Value "Playable" (last To)) (if (> 4 (count (last To))) (and (fromTo (from (if (is Mover P1) (+ (to ) 7) (- (to ) 7))) (to (mapEntry Next)) (- 4 (count (last To)))) (remember Value "Blocked" (last To)))) (moveAgain ) (if (= 0 (count (mapEntry Mover))) (set Pending)) (set Var "Direction" 2)}))) (move (from (mapEntry Mover)) (to (if (is Mover P1) (intersection (sites Bottom) (expand (sites Left))) (intersection (sites Top) (expand (sites Right)))) (is Empty (to ))) (min 4 (count (mapEntry Mover))) (then (and {(remember Value "Playable" (last To)) (if (> 4 (count (last To))) (and (fromTo (from (if (is Mover P1) (+ (to ) 7) (- (to ) 7))) (to (mapEntry Next)) (- 4 (count (last To)))) (remember Value "Blocked" (last To)))) (moveAgain ) (if (= 0 (count (mapEntry Mover))) (set Pending)) (set Var "Direction" 1)})))) (if (!= (mover ) (var "Winner")) (move (from (mapEntry Mover)) (to (if (= (var "Direction") 1) (trackSite Move (last To) "TrackCCW" 1) (trackSite Move (last To) "TrackCW" 1)) (is Empty (to ))) (min 4 (count (mapEntry Mover))) (then (and {(remember Value "Playable" (last To)) (moveAgain ) (if (= 0 (count (mapEntry Mover))) (set Pending))}))) (move (from (mapEntry Mover)) (to (sites Mover) (is Empty (to ))) 4 (then (and (remember Value "Playable" (last To)) (if (not (all Sites (sites Mover) (is Occupied (site )))) (moveAgain )))))))) (nextPhase (and (!= (var "Winner") (mover )) (= 0 (count (mapEntry Mover)))) "Sowing"))}))
Line 3
description: Two rows of six holes encircling a larger hole in the center. Two counters in each hole, except the center hole. Players move by removing the counters from one of the holes in their row and sowing them in an anti-clockwise direction. If the final counter of the sowing falls into an occupied hole, these counters are picked up and sowing continues. When the final counter falls into an empty hole, the turn ends. If the final counter falls into a hole already containing two others, the player takes these counters and covers the hole. The three counters are sown beginning with the following hole. When sowing, if a player reaches a covered hole in their row, they skip it and continue sowing with the next available hole. If the player reaches a covered hole in the opponent's row, the counter that would fall into it is instead deposited into the central hole. If this is the final counter, the turn ends. It is possible to sow a single counter. The player who can no longer sow from their row loses.
Ludii code: (game "Deka" (players 2) (equipment {(board (merge {(rectangle 1 5) (rectangle 3 1) (shift 0.0 2.0 (rectangle 1 5)) (shift 4.0 0.0 (rectangle 3 1)) (shift 2.0 1.0 (square 1))}) (track "Track" "0,E,N,W,S1" true) Vertex) (regions P1 (sites {0 1 2 3 4 11})) (regions P2 (sites {5 6 7 8 9 10})) (piece "Seed" Shared)}) (rules (start (set Count 2 (difference (sites Board) 12))) (play (or {(move Select (from (if (is Prev Mover) (sites {(var "Replay")}) (sites Mover)) (is Occupied (from ))) (then (sow (if (not (and (is In (to ) (sites Next)) (= (next ) (state (to ))))) (if (= 3 (count (to ))) (and {(fromTo (from (to )) (to (trackSite Move (to ) 1)) 3) (sow (trackSite Move (to ) 1) 3 (and (is In (to ) (sites Mover)) (= 1 (state (to ))))) (set State (to ) 1)}) (if (< 1 (count (to ))) (and (moveAgain ) (set Var "Replay" (to )))))) (and (is In (to ) (sites Mover)) (= (mover ) (state (to )))))))} (then (forEach Site (if (is Mover P1) (sites P2) (sites P1)) (if (= 1 (state (site ))) (and (fromTo (from (site )) (to (centrePoint )) (count (site ))) (set State (site ) 1))))))) (end (forEach Player (no Moves Player) (result Player Loss)))))
Line 3
description: Two rows of six holes with two stores. Each player owns the store to their right. Four counters in each hole. Sowing occurs from any hole in the player's row in an anti-clockwise direction. Sowing includes the player's store but not the opponent's. When the final counter lands into the player's store, they play again. When a player has no more counters in their row, they win, even if it is now the opponent's turn and they could place counters in the player's row.
Ludii code: (game "Waurie" (players 2) (equipment {(mancalaBoard 2 6 (track "Track" "0,ESE,E,ENE,WNW,W" true)) (regions P1 (sites Bottom)) (regions P2 (sites Top)) (map {(pair P1 LastSite) (pair P2 FirstSite)}) (piece "Seed" Shared)}) (rules (start (set Count 4 (union (sites P1) (sites P2)))) (play (move Select (from (sites Mover) (> (count (from )) 0)) (then (sow (if (= (to ) (mapEntry Mover)) (moveAgain )) (= (to ) (mapEntry Next)))))) (end (if (all Sites (sites Mover) (= 0 (count (site )))) (result Mover Win)))))
Line 3
description: 2x5 board. Five counters in each hole. Players take turns sowing in an anti-clockwise direction. When the final counter lands in a hole, the player picks up the contents of the next hole following this one, and continues sowing. If the player cannot pick up any counters from this hole, the players captures any counters from the hole after the empty hole, and the turn ends. Whenever any holes in the player's row contain four counters, they are captured by the player. Play continues until all of the counters have been captured. A new round begins. The players count their captured counters. If the difference between the two players' captured counters is greater than five, for each multiple of five in the difference a hole on the player with fewer counters' side is eliminated from play, and the excess counters that equal a multiple of five are placed aside for use in further rounds if necessary. When the difference is less than five, and when dealing with the remaining pieces after the multiples of five are dealt with, The following scenarios apply. When one player has one counter and the other has four, the player with one will give their stone to the one with four, but the player who has one counter will receive one counter from the hole from which sowing begins at the beginning of each player's turn. When one player has two counters and the other has three, the player with two gives these counters to the other player. With these five, the player creates a \"bha\" from one of holes in their row. The bha must be either the leftmost or rightmost hole. Every counter dropped into this hole during the course of play is captured by the owner of the hole. At the end of the round, the player who created the bha must return the number of counters given to them at the beginning of the round back to the other player. The holes which remain in play are then filled with five counters each from each player's captured counters and play continues as before. until one player captures all of the counters.
        
Ludii code: (game "Khutka Boia" (players 2) (equipment {(mancalaBoard 2 5 None (track "Track" "0,E,N,W" true)) (piece "Seed" Shared) (regions P1 (sites Bottom)) (regions P2 (sites Top)) (hand Each)}) (rules (start {(set Count 5 (sites Track)) (set RememberValue "Playable" (union (sites Top) (sites Bottom)))}) {(phase "Sowing" (play (or {(or {(move Select (from (if (is Prev Mover) (sites {(trackSite Move (last To true) "Track" 1)}) (sites Mover)) (and (is Occupied (from )) (is In (from ) (sites (values Remembered "Playable"))))) (then (do (if (= 1 (value Player Next)) (fromTo (from (last From)) (to (handSite Mover)) 1)) (sow (last From) (if (is Occupied (trackSite Move (to ) "Track" 1)) (moveAgain ) (if (is Occupied (trackSite Move (to ) "Track" 2)) (fromTo (from (trackSite Move (to ) "Track" 2)) (to (handSite Mover)) (count (trackSite Move (to ) "Track" 2))))) (not (is In (to ) (sites (values Remembered "Playable"))))))))} (then (and {(forEach Player (forEach Site (sites Player) (if (= 4 (count (site ))) (fromTo (from (site )) (to (handSite Player)) 4)))) (forEach Site (sites P1) (if (and (is Occupied (site )) (= 1 (state (site )))) (and (fromTo (from (site )) (to (handSite Player)) (count (site ))) (set State (site ) 1)))) (forEach Site (sites P2) (if (and (is Occupied (site )) (= 2 (state (site )))) (and (fromTo (from (site )) (to (handSite Player)) (count (site ))) (set State (site ) 2))))})))} (then (if (= 1 (count Pieces All (union (sites Top) (sites Bottom)))) (and {(forEach Site (sites P1) (fromTo (from (site )) (to (handSite P1)) (count (site )))) (forEach Site (sites P2) (fromTo (from (site )) (to (handSite P2)) (count (site )))) (forEach Site (sites Board) (if (!= 0 (state (site ))) (set State (site ) 0))) (set Value P1 0) (set Value P2 0) (forget Value "Playable" All)}))))) (end (if (all Sites (sites Board) (= 0 (count (site )))) {(if (= 0 (count Cell (handSite P1))) (result P2 Win)) (if (= 0 (count Cell (handSite P2))) (result P1 Win))})) (nextPhase (all Sites (sites Board) (= 0 (count (site )))) "BetweenRounds")) (phase "BetweenRounds" (play (if (not (all Sites (sites Mover) (is Occupied (site )))) (if (<= 5 (count Cell (handSite Mover))) (move (from (handSite Mover)) (to (sites Mover) (is Empty (to ))) 5 (then (remember Value "Playable" (last To))))))) (nextPhase (all Passed) "DecisionForNextRound")) (phase "DecisionForNextRound" (play (if (> 5 (abs (- (count Cell (handSite P1)) (count Cell (handSite P2))))) (do (if (= 1 (count Cell (handSite P1))) (and (set Value P1 1) (fromTo (from (handSite P1)) (to (handSite P2)) 1)) (if (= 1 (count Cell (handSite P2))) (and (set Value P2 1) (fromTo (from (handSite P2)) (to (handSite P1)) 1)) (if (= 2 (count Cell (handSite P2))) (set Var "Bha" 1) (if (= 2 (count Cell (handSite P1))) (set Var "Bha" 2))))) (if (= (var "Bha") P1) (move Select (from (intersection (union (sites Left) (sites Right)) (sites P1))) (then (and (set State (last To) 1) (set Var "Bha" 0)))) (if (= (var "Bha") P2) (move Select (from (intersection (union (sites Left) (sites Right)) (sites P2))) (then (and (set State (last To) 2) (set Var "Bha" 0)))) (move Pass)))) (move Pass))) (nextPhase "Sowing"))}))
Line 3
description: 2x6 board. Four counters in each hole.  A player picks up all of the counters in one of the holes in their row and sows them one-by-one in a clockwise direction in consecutive holes from the hole the pieces originated. The starting hole is always left empty, even if a player sows in a complete circuit of the board, the original house is skipped and sowing continues in the next hole after it. When the final counter falls into an occupied hole, these are picked up and sowing continues. When the final counter of a sowing lands in an empty hole in the player's own row, the contents of the hole in the opponent's row opposite it are captured. If the opponent's holes are all empty, the other player must make a move placing counters in the opponent's row. If not possible, the player captures all the counters in their row. The player who has captured the most counters wins. If the game continues in a repeating loop, the players can agree to end the game and capture the counters remaining in their row.
        
Ludii code: (game "Foji" (players 2) (equipment {(mancalaBoard 2 6 None (track "Track" "5,W,N,E" true)) (piece "Seed" Shared) (hand Each) (regions P1 (sites Bottom)) (regions P2 (sites Top))}) (rules (start (set Count 4 (sites Track))) (play (if (is Proposed "End") (or (move Vote "End") (move Vote "No")) (or (if (is Cycle) (move Propose "End")) (if (is Prev Mover) (move Select (from (sites {(last To true)})) (then (sow (if (< 1 (count (to ))) (moveAgain ) (if (is In (to ) (sites Mover)) (if (is Occupied (if (is Mover P1) (+ (to ) 6) (- (to ) 6))) (fromTo (from (if (is Mover P1) (+ (to ) 6) (- (to ) 6))) (to (handSite Mover)) (count (if (is Mover P1) (+ (to ) 6) (- (to ) 6))))))) false))) (do (move Select (from (sites Mover) (is Occupied (from ))) (then (sow (if (< 1 (count (to ))) (moveAgain ) (if (is In (to ) (sites Mover)) (if (is Occupied (if (is Mover P1) (+ (to ) 6) (- (to ) 6))) (fromTo (from (if (is Mover P1) (+ (to ) 6) (- (to ) 6))) (to (handSite Mover)) (count (if (is Mover P1) (+ (to ) 6) (- (to ) 6))))))) false))) (if (is Mover P1) (< 0 (count (sites P2))) (< 0 (count (sites P1))))))))) (end (if (or (no Moves Mover) (is Decided "End")) (byScore {(score P1 (+ (count Cell (handSite P1)) (count (sites P1)))) (score P2 (+ (count Cell (handSite P2)) (count (sites P2))))})))))
Line 3
description: 2x6 board. Four counters in each hole. The first player takes three counters from each of their holes, and sows them beginning in the opponent's first hole. Sowing proceeds in an anti-clockwise direction, and when the final counter lands in an occupied hole, these are picked up and sowing continues. While sowing, if a hole is made to contain four counters, these are captured by the player. When the final counter falls into an empty hole, the turn ends, unless the player was able to make a capture during the sowing, in which case they may play again. A player with no counters on their side must pass, and may continue playing when there are counters in their holes again. Play continues until all the counters are captured, and the player with the most counters wins. A second round is played, each player placing four counters into each hole starting from the rightmost hole in their row. The player with more counters gains a hole from their opponent for every four extra balls they've captured. If an opponent has three extra after counting in such a way, they also gain a hole, but not if there are one or two extra. Play continues in several rounds like this until one player captures all the holes.
        
Ludii code: (game "Lam Waladach" (players 2) (equipment {(mancalaBoard 2 6 None {(track "TrackCCW" "0,E,N,W" true) (track "TrackCW" "5,W,N,E" true)}) (piece "Seed" Shared) (hand Each) (regions P1 (sites Bottom)) (regions P2 (sites Top)) (map "RightMost" {(pair P1 5) (pair P2 6)})}) (rules (start {(set Count 4 (sites Track)) (set RememberValue "OwnedP1" (sites Bottom)) (set RememberValue "OwnedP2" (sites Top))}) {(phase "Opening" (play (move Select (from 11) (then (and (forEach Site (sites Mover) (fromTo (from (site )) (to 11) 3)) (sow 18 "TrackCCW" (if (< 1 (count (to ))) (and (moveAgain ) (set Var "Replay" (to )))) true))))) (nextPhase "Sowing")) (phase "Sowing" (play (or {(move Select (from (if (and (not (is Pending)) (is Prev Mover)) (sites {(var "Replay")}) (if (is Mover P1) (sites (values Remembered "OwnedP1")) (sites (values Remembered "OwnedP2")))) (> (count (from )) 0)) (then (do (set Var "NumSowed" (count (last To))) (sow "TrackCCW" (if (< 1 (count (to ))) (and (moveAgain ) (set Var "Replay" (to ))))) (then (and (forEach Site (sites Track (last From) (trackSite Move (last From) "Track" (var "NumSowed"))) (if (= 4 (count (site ))) (and (fromTo (from (site )) (to (handSite Mover)) 4) (and (moveAgain ) (set Pending))))) (set Var "NumSowed" 0))))))} (then (if (all Sites (sites Board) (= 0 (count (site )))) (and (forget Value "OwnedP1" All) (forget Value "OwnedP2" All)))))) (end (if (all Sites (sites Board) (= 0 (count (site )))) {(if (> 3 (count Cell (handSite P1))) (result P2 Win)) (if (> 3 (count Cell (handSite P2))) (result P1 Win))})) (nextPhase (all Sites (sites Board) (= 0 (count (site )))) "BetweenRounds")) (phase "BetweenRounds" (play (if (<= 3 (count Cell (handSite Mover))) (move (from (handSite Mover)) (to (trackSite FirstSite "TrackCW" (mapEntry "RightMost" Mover) (is Empty (to )))) (if (>= (count Cell (handSite Mover)) 4) 4 3) (then (if (is Mover P1) (remember Value "OwnedP1" (last To)) (remember Value "OwnedP2" (last To))))))) (nextPhase (all Passed) "Sowing"))}))
Line 3
