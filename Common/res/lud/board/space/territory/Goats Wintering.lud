(define "Capture" 
    (forEach Site
        (sites Board)
        (apply 
            if:(and
                (is Next (who at:(site)))
                (= 0 
                    (count Sites 
                        in:(intersection 
                            (sites Empty) 
                            (sites Around (site) includeSelf:True)
                        )
                    )
                )
            )
            (remove (site))
        )
    )
)

(define "PlaceOutOfSight" // also must not be fully surrounded...
    (move Add
        (to (sites Empty) 
            if:(and
                (not "TooClose")
                (!= 0 (count Sites in:(sites Around (to) if:(is Empty (to)))))
        ))
        (then 
            (set Var "LM" 3
                (then
                    (do ("Capture") next:("UpdateScore"))
        )))
    )
)

(define "TooClose"
    (is 
        Within (id "Disc" Mover) 
        in:(intersection
            (sites LineOfSight Piece at:(to))
            (sites Direction from:(to) distance:<Placement:distance>)
        )
    )
)

(define "Move2Friends"
    (move Step
        (to 
            if:(and
                {
                (is Empty (to))
                (< (count Pieces Mover in:(sites Around (from)))
                    (- (count Pieces Mover in:(sites Around (to))) 1)
                )
                (or  //no move reversal after a pass
                    {
                    (not (was Pass))
                    (!= (from) (var "LT"))
                    (!= (to) (var "LF"))
                    }
                )
                }
            )
        )
        (then 
            (set Var "LM" 1
                (then
                    (do ("Capture") next:("UpdateScore"))
        )))
    )
)

(define "MoveFromEnemies"
    (move Step
        (to
            if:(and
                (is Empty (to))
                (> (count Pieces Next in:(sites Around (from)))
                    (count Pieces Next in:(sites Around (to)))
                )
            )
        )
        (then 
            (set Var "LM" 2
                (then
                    (do ("Capture") next:("UpdateScore"))
        )))
    )
)

(define "UpdateScore"
    (and 
        (set Score Mover 
            (/ 
                (+ (results 
                        from:(sites Occupied by:Mover)
                        to:(sites Around (from) if:(is Mover (who at:(to))))
                        1
                    )
                )
                2
            )
        )
        (set Score Next 
            (/ 
                (+ (results 
                        from:(sites Occupied by:Next)
                        to:(sites Around (from) if:(is Next (who at:(to))))
                        1
                    )
                )
                2
            )
        )
    )
)

(define "Goats"
    (piece Foreground P1 "Disc" image:"mountainGoat-alt3" fillColour:(colour 255 255 255))
    (piece Colour P1 "Disc" fillColour:(colour 255 255 255 120) strokeColour:(colour 62 72 55))
    (piece Foreground P2 "Disc" image:"mountainGoat-alt3" fillColour:(colour 60 60 60))
    (piece Colour P2 "Disc" fillColour:(colour 0 0 0 110) strokeColour:(colour 40 48 36))
    (piece Rotate P2 degrees:180)
)

(define "GoatsNeg"
    (piece Foreground P1 "Disc" image:"mountainGoat-alt3" fillColour:(colour 255 255 255))
    (piece Colour P1 "Disc" fillColour:(colour 255 255 255 120) strokeColour:(colour 62 72 55))
    (piece Foreground P2 "Disc" image:"mountainGoat-alt3" fillColour:(colour 30 30 30) edgeColour:(colour 240 240 240))
    (piece Colour P2 "Disc" fillColour:(colour 0 0 0 110) strokeColour:(colour 40 48 36))
    (piece Rotate P2 degrees:180)
)

//------------------------------------------------------------------------------

(game "Goats Wintering"
    (players 2)
    (equipment {
        (board <BoardSize:gridType> use:Cell)
        (piece "Disc" P1)
        (piece "Disc" P2)
    })
    (rules
        (start (set Score Each 0))
        (play
            (or {
                (do 
                    (set Var "LT" (last To)
                        (then (set Var "LF" (last From)))
                    )
                    next:(move Pass (then (set Var "LM" 0)))
                )
                ("PlaceOutOfSight")   
                (forEach Piece 
                    (or
                        ("Move2Friends") 
                        (if 
                            (and 
                                {
                                (!= 2 (var "LM")) // testing special restrictions
                                (< 0 (var "LM")) // (not (was Pass))
                                (not (can Move ("Move2Friends")))
                                }
                            ) 
                            ("MoveFromEnemies")
                        )
                    )
                )
                }
            )
        )
        (end 
            {
            (if 
                (and
                    (all Passed)
                    (> (score Mover) (score Next))
                )
                (result Mover Win)
            )
            (if 
                (and
                    (all Passed)
                    (<= (score Mover) (score Next))
                )
                (result Next Win)
            )
            }
        )
    )
)

//------------------------------------------------------------------------------

(option "Board Size" <BoardSize> args:{<gridType>} 
    {
    (item "2 Limp" <(hex Limping 2)> "Edge 2,3 Hex board")
    (item "2-4 Hex" <(hex 2 4)> "Edge 2,4 Hex board")***
    (item "3 Limp" <(hex Limping 3)> "Edge 3,4 Hex board")**
    (item "4 Limp" <(hex Limping 4)> "Edge 4,5 Hex board")
    (item "5 Limp" <(hex Limping 5)> "Edge 5,6 Hex board")
    (item "6 Limp" <(hex Limping 6)> "Edge 6,7 Hex board")
    (item "10 limp" <(hex Limping 10)> "Edge 10,11 Hex board")
    (item "4x4" <(rotate 45 (square 4))> "Order 4 Diamond board")*
    (item "5x5" <(rotate 45 (square 5))> "Order 5 Diamond board")
    (item "6x6" <(rotate 45 (square 6))> "Order 6 Diamond board")
    (item "7x7" <(rotate 45 (square 7))> "Order 7 Diamond board")
    (item "8x8" <(rotate 45 (square 8))> "Order 8 Diamond board")
    (item "9x9" <(rotate 45 (square 9))> "Order 9 Diamond board")
    (item "6 Tri" <(hex Triangle 6)> "Order 4 Near Triangle board")
    (item "7 Tri" <(hex Triangle 7)> "Order 5 Near Triangle board")
    (item "8 Tri" <(hex Triangle 8)> "Order 6 Near Triangle board")
    (item "9 Tri" <(hex Triangle 9)> "Order 7 Near Triangle board")
    (item "10 Tri" <(hex Triangle 10)> "Order 8 Near Triangle board")
    (item "11 Tri" <(hex Triangle 11)> "Order 9 Near Triangle board")
    }
)

(option "Placements" <Placement> args:{<distance>} 
    {
    (item "Gap 2" <2> "Placements must leave a gap of 2 spaces if in sight of a friendly piece")
    (item "Gap 3" <3> "Placements must leave a gap of 3 spaces if in sight of a friendly piece")***
    }
)

(option "Graphics" <Goat> args:{<defs>}
    {
    (item "Discs" < > "No graphic on pieces")
    (item "Goats" <"Goats"> "Goat graphics - Custom if mountainGoat-alt3.svg is in Ludii directory")**
    (item "Goats Negative" <"GoatsNeg"> "Goat (color reversal) - Custom if mountainGoat-alt3.svg is in Ludii directory")
    }
)

//------------------------------------------------------------------------------

(metadata
    (info
        {
        (id "1327")
        (version "1.3.11")
        (classification "board/space/territory")
        (author "Dale W. Walton")
        (credit "Dale W. Walton")
        (date "19-11-2020")
        }
    )
    (graphics
        {
        (board Colour Phase0 (colour 124 145 111))
        (board Colour InnerEdges (colour 62 72 55))
        (board Colour OuterEdges (colour 62 72 55))
        (board StyleThickness OuterEdges 2.0)
        <Goat:defs>
        }
    )
    (ai
        "Goats Wintering_ai"
    )
)
